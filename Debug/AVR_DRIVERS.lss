
AVR_DRIVERS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000061fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000004a2  00800060  000061fa  0000628e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800502  00800502  00006730  2**0
                  ALLOC
  3 .stab         000067e0  00000000  00000000  00006730  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00005bb6  00000000  00000000  0000cf10  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000060  00000000  00000000  00012ac6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000080  00000000  00000000  00012b26  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000109d  00000000  00000000  00012ba6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000469  00000000  00000000  00013c43  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000055b  00000000  00000000  000140ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000060  00000000  00000000  00014608  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000016a  00000000  00000000  00014668  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001a1e  00000000  00000000  000147d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000030  00000000  00000000  000161f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 72 1e 	jmp	0x3ce4	; 0x3ce4 <__vector_1>
       8:	0c 94 9f 1e 	jmp	0x3d3e	; 0x3d3e <__vector_2>
       c:	0c 94 cc 1e 	jmp	0x3d98	; 0x3d98 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 bf 15 	jmp	0x2b7e	; 0x2b7e <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 c2 22 	jmp	0x4584	; 0x4584 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 0f 0e 	jmp	0x1c1e	; 0x1c1e <__vector_13>
      38:	0c 94 3c 0e 	jmp	0x1c78	; 0x1c78 <__vector_14>
      3c:	0c 94 69 0e 	jmp	0x1cd2	; 0x1cd2 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	15 e0       	ldi	r17, 0x05	; 5
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ef       	ldi	r30, 0xFA	; 250
      68:	f1 e6       	ldi	r31, 0x61	; 97
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 30       	cpi	r26, 0x02	; 2
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	15 e0       	ldi	r17, 0x05	; 5
      78:	a2 e0       	ldi	r26, 0x02	; 2
      7a:	b5 e0       	ldi	r27, 0x05	; 5
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 31       	cpi	r26, 0x16	; 22
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 fa 2a 	call	0x55f4	; 0x55f4 <main>
      8a:	0c 94 fb 30 	jmp	0x61f6	; 0x61f6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__ashldi3>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	df 93       	push	r29
      9a:	cf 93       	push	r28
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
      a0:	60 97       	sbiw	r28, 0x10	; 16
      a2:	0f b6       	in	r0, 0x3f	; 63
      a4:	f8 94       	cli
      a6:	de bf       	out	0x3e, r29	; 62
      a8:	0f be       	out	0x3f, r0	; 63
      aa:	cd bf       	out	0x3d, r28	; 61
      ac:	a8 2f       	mov	r26, r24
      ae:	00 23       	and	r16, r16
      b0:	09 f4       	brne	.+2      	; 0xb4 <__ashldi3+0x22>
      b2:	61 c0       	rjmp	.+194    	; 0x176 <__ashldi3+0xe4>
      b4:	7e 01       	movw	r14, r28
      b6:	08 94       	sec
      b8:	e1 1c       	adc	r14, r1
      ba:	f1 1c       	adc	r15, r1
      bc:	88 e0       	ldi	r24, 0x08	; 8
      be:	f7 01       	movw	r30, r14
      c0:	11 92       	st	Z+, r1
      c2:	8a 95       	dec	r24
      c4:	e9 f7       	brne	.-6      	; 0xc0 <__ashldi3+0x2e>
      c6:	29 83       	std	Y+1, r18	; 0x01
      c8:	3a 83       	std	Y+2, r19	; 0x02
      ca:	4b 83       	std	Y+3, r20	; 0x03
      cc:	5c 83       	std	Y+4, r21	; 0x04
      ce:	6d 83       	std	Y+5, r22	; 0x05
      d0:	7e 83       	std	Y+6, r23	; 0x06
      d2:	af 83       	std	Y+7, r26	; 0x07
      d4:	98 87       	std	Y+8, r25	; 0x08
      d6:	80 e2       	ldi	r24, 0x20	; 32
      d8:	80 1b       	sub	r24, r16
      da:	e8 2f       	mov	r30, r24
      dc:	ff 27       	eor	r31, r31
      de:	e7 fd       	sbrc	r30, 7
      e0:	f0 95       	com	r31
      e2:	49 81       	ldd	r20, Y+1	; 0x01
      e4:	5a 81       	ldd	r21, Y+2	; 0x02
      e6:	6b 81       	ldd	r22, Y+3	; 0x03
      e8:	7c 81       	ldd	r23, Y+4	; 0x04
      ea:	18 16       	cp	r1, r24
      ec:	84 f0       	brlt	.+32     	; 0x10e <__ashldi3+0x7c>
      ee:	19 86       	std	Y+9, r1	; 0x09
      f0:	1a 86       	std	Y+10, r1	; 0x0a
      f2:	1b 86       	std	Y+11, r1	; 0x0b
      f4:	1c 86       	std	Y+12, r1	; 0x0c
      f6:	88 27       	eor	r24, r24
      f8:	99 27       	eor	r25, r25
      fa:	8e 1b       	sub	r24, r30
      fc:	9f 0b       	sbc	r25, r31
      fe:	04 c0       	rjmp	.+8      	; 0x108 <__ashldi3+0x76>
     100:	44 0f       	add	r20, r20
     102:	55 1f       	adc	r21, r21
     104:	66 1f       	adc	r22, r22
     106:	77 1f       	adc	r23, r23
     108:	8a 95       	dec	r24
     10a:	d2 f7       	brpl	.-12     	; 0x100 <__ashldi3+0x6e>
     10c:	28 c0       	rjmp	.+80     	; 0x15e <__ashldi3+0xcc>
     10e:	20 2f       	mov	r18, r16
     110:	33 27       	eor	r19, r19
     112:	27 fd       	sbrc	r18, 7
     114:	30 95       	com	r19
     116:	db 01       	movw	r26, r22
     118:	ca 01       	movw	r24, r20
     11a:	02 2e       	mov	r0, r18
     11c:	04 c0       	rjmp	.+8      	; 0x126 <__ashldi3+0x94>
     11e:	88 0f       	add	r24, r24
     120:	99 1f       	adc	r25, r25
     122:	aa 1f       	adc	r26, r26
     124:	bb 1f       	adc	r27, r27
     126:	0a 94       	dec	r0
     128:	d2 f7       	brpl	.-12     	; 0x11e <__ashldi3+0x8c>
     12a:	89 87       	std	Y+9, r24	; 0x09
     12c:	9a 87       	std	Y+10, r25	; 0x0a
     12e:	ab 87       	std	Y+11, r26	; 0x0b
     130:	bc 87       	std	Y+12, r27	; 0x0c
     132:	04 c0       	rjmp	.+8      	; 0x13c <__ashldi3+0xaa>
     134:	76 95       	lsr	r23
     136:	67 95       	ror	r22
     138:	57 95       	ror	r21
     13a:	47 95       	ror	r20
     13c:	ea 95       	dec	r30
     13e:	d2 f7       	brpl	.-12     	; 0x134 <__ashldi3+0xa2>
     140:	8d 81       	ldd	r24, Y+5	; 0x05
     142:	9e 81       	ldd	r25, Y+6	; 0x06
     144:	af 81       	ldd	r26, Y+7	; 0x07
     146:	b8 85       	ldd	r27, Y+8	; 0x08
     148:	04 c0       	rjmp	.+8      	; 0x152 <__ashldi3+0xc0>
     14a:	88 0f       	add	r24, r24
     14c:	99 1f       	adc	r25, r25
     14e:	aa 1f       	adc	r26, r26
     150:	bb 1f       	adc	r27, r27
     152:	2a 95       	dec	r18
     154:	d2 f7       	brpl	.-12     	; 0x14a <__ashldi3+0xb8>
     156:	48 2b       	or	r20, r24
     158:	59 2b       	or	r21, r25
     15a:	6a 2b       	or	r22, r26
     15c:	7b 2b       	or	r23, r27
     15e:	4d 87       	std	Y+13, r20	; 0x0d
     160:	5e 87       	std	Y+14, r21	; 0x0e
     162:	6f 87       	std	Y+15, r22	; 0x0f
     164:	78 8b       	std	Y+16, r23	; 0x10
     166:	29 85       	ldd	r18, Y+9	; 0x09
     168:	3a 85       	ldd	r19, Y+10	; 0x0a
     16a:	4b 85       	ldd	r20, Y+11	; 0x0b
     16c:	5c 85       	ldd	r21, Y+12	; 0x0c
     16e:	6d 85       	ldd	r22, Y+13	; 0x0d
     170:	7e 85       	ldd	r23, Y+14	; 0x0e
     172:	af 85       	ldd	r26, Y+15	; 0x0f
     174:	98 89       	ldd	r25, Y+16	; 0x10
     176:	8a 2f       	mov	r24, r26
     178:	60 96       	adiw	r28, 0x10	; 16
     17a:	0f b6       	in	r0, 0x3f	; 63
     17c:	f8 94       	cli
     17e:	de bf       	out	0x3e, r29	; 62
     180:	0f be       	out	0x3f, r0	; 63
     182:	cd bf       	out	0x3d, r28	; 61
     184:	cf 91       	pop	r28
     186:	df 91       	pop	r29
     188:	0f 91       	pop	r16
     18a:	ff 90       	pop	r15
     18c:	ef 90       	pop	r14
     18e:	08 95       	ret

00000190 <__udivdi3>:
     190:	ae e5       	ldi	r26, 0x5E	; 94
     192:	b0 e0       	ldi	r27, 0x00	; 0
     194:	ee ec       	ldi	r30, 0xCE	; 206
     196:	f0 e0       	ldi	r31, 0x00	; 0
     198:	0c 94 bb 30 	jmp	0x6176	; 0x6176 <__prologue_saves__>
     19c:	a8 e0       	ldi	r26, 0x08	; 8
     19e:	4e 01       	movw	r8, r28
     1a0:	08 94       	sec
     1a2:	81 1c       	adc	r8, r1
     1a4:	91 1c       	adc	r9, r1
     1a6:	f4 01       	movw	r30, r8
     1a8:	6a 2e       	mov	r6, r26
     1aa:	11 92       	st	Z+, r1
     1ac:	6a 94       	dec	r6
     1ae:	e9 f7       	brne	.-6      	; 0x1aa <__udivdi3+0x1a>
     1b0:	29 83       	std	Y+1, r18	; 0x01
     1b2:	3a 83       	std	Y+2, r19	; 0x02
     1b4:	4b 83       	std	Y+3, r20	; 0x03
     1b6:	5c 83       	std	Y+4, r21	; 0x04
     1b8:	6d 83       	std	Y+5, r22	; 0x05
     1ba:	7e 83       	std	Y+6, r23	; 0x06
     1bc:	8f 83       	std	Y+7, r24	; 0x07
     1be:	98 87       	std	Y+8, r25	; 0x08
     1c0:	ce 01       	movw	r24, r28
     1c2:	09 96       	adiw	r24, 0x09	; 9
     1c4:	fc 01       	movw	r30, r24
     1c6:	11 92       	st	Z+, r1
     1c8:	aa 95       	dec	r26
     1ca:	e9 f7       	brne	.-6      	; 0x1c6 <__udivdi3+0x36>
     1cc:	a9 86       	std	Y+9, r10	; 0x09
     1ce:	ba 86       	std	Y+10, r11	; 0x0a
     1d0:	cb 86       	std	Y+11, r12	; 0x0b
     1d2:	dc 86       	std	Y+12, r13	; 0x0c
     1d4:	ed 86       	std	Y+13, r14	; 0x0d
     1d6:	fe 86       	std	Y+14, r15	; 0x0e
     1d8:	0f 87       	std	Y+15, r16	; 0x0f
     1da:	18 8b       	std	Y+16, r17	; 0x10
     1dc:	29 84       	ldd	r2, Y+9	; 0x09
     1de:	3a 84       	ldd	r3, Y+10	; 0x0a
     1e0:	4b 84       	ldd	r4, Y+11	; 0x0b
     1e2:	5c 84       	ldd	r5, Y+12	; 0x0c
     1e4:	ed 84       	ldd	r14, Y+13	; 0x0d
     1e6:	fe 84       	ldd	r15, Y+14	; 0x0e
     1e8:	0f 85       	ldd	r16, Y+15	; 0x0f
     1ea:	18 89       	ldd	r17, Y+16	; 0x10
     1ec:	69 80       	ldd	r6, Y+1	; 0x01
     1ee:	7a 80       	ldd	r7, Y+2	; 0x02
     1f0:	8b 80       	ldd	r8, Y+3	; 0x03
     1f2:	9c 80       	ldd	r9, Y+4	; 0x04
     1f4:	6d a6       	std	Y+45, r6	; 0x2d
     1f6:	7e a6       	std	Y+46, r7	; 0x2e
     1f8:	8f a6       	std	Y+47, r8	; 0x2f
     1fa:	98 aa       	std	Y+48, r9	; 0x30
     1fc:	6d 80       	ldd	r6, Y+5	; 0x05
     1fe:	7e 80       	ldd	r7, Y+6	; 0x06
     200:	8f 80       	ldd	r8, Y+7	; 0x07
     202:	98 84       	ldd	r9, Y+8	; 0x08
     204:	e1 14       	cp	r14, r1
     206:	f1 04       	cpc	r15, r1
     208:	01 05       	cpc	r16, r1
     20a:	11 05       	cpc	r17, r1
     20c:	09 f0       	breq	.+2      	; 0x210 <__udivdi3+0x80>
     20e:	b3 c3       	rjmp	.+1894   	; 0x976 <__stack+0x117>
     210:	62 14       	cp	r6, r2
     212:	73 04       	cpc	r7, r3
     214:	84 04       	cpc	r8, r4
     216:	95 04       	cpc	r9, r5
     218:	08 f0       	brcs	.+2      	; 0x21c <__udivdi3+0x8c>
     21a:	3d c1       	rjmp	.+634    	; 0x496 <__udivdi3+0x306>
     21c:	00 e0       	ldi	r16, 0x00	; 0
     21e:	20 16       	cp	r2, r16
     220:	00 e0       	ldi	r16, 0x00	; 0
     222:	30 06       	cpc	r3, r16
     224:	01 e0       	ldi	r16, 0x01	; 1
     226:	40 06       	cpc	r4, r16
     228:	00 e0       	ldi	r16, 0x00	; 0
     22a:	50 06       	cpc	r5, r16
     22c:	88 f4       	brcc	.+34     	; 0x250 <__udivdi3+0xc0>
     22e:	1f ef       	ldi	r17, 0xFF	; 255
     230:	21 16       	cp	r2, r17
     232:	31 04       	cpc	r3, r1
     234:	41 04       	cpc	r4, r1
     236:	51 04       	cpc	r5, r1
     238:	39 f0       	breq	.+14     	; 0x248 <__udivdi3+0xb8>
     23a:	30 f0       	brcs	.+12     	; 0x248 <__udivdi3+0xb8>
     23c:	48 e0       	ldi	r20, 0x08	; 8
     23e:	e4 2e       	mov	r14, r20
     240:	f1 2c       	mov	r15, r1
     242:	01 2d       	mov	r16, r1
     244:	11 2d       	mov	r17, r1
     246:	18 c0       	rjmp	.+48     	; 0x278 <__udivdi3+0xe8>
     248:	ee 24       	eor	r14, r14
     24a:	ff 24       	eor	r15, r15
     24c:	87 01       	movw	r16, r14
     24e:	14 c0       	rjmp	.+40     	; 0x278 <__udivdi3+0xe8>
     250:	20 e0       	ldi	r18, 0x00	; 0
     252:	22 16       	cp	r2, r18
     254:	20 e0       	ldi	r18, 0x00	; 0
     256:	32 06       	cpc	r3, r18
     258:	20 e0       	ldi	r18, 0x00	; 0
     25a:	42 06       	cpc	r4, r18
     25c:	21 e0       	ldi	r18, 0x01	; 1
     25e:	52 06       	cpc	r5, r18
     260:	30 f0       	brcs	.+12     	; 0x26e <__udivdi3+0xde>
     262:	38 e1       	ldi	r19, 0x18	; 24
     264:	e3 2e       	mov	r14, r19
     266:	f1 2c       	mov	r15, r1
     268:	01 2d       	mov	r16, r1
     26a:	11 2d       	mov	r17, r1
     26c:	05 c0       	rjmp	.+10     	; 0x278 <__udivdi3+0xe8>
     26e:	20 e1       	ldi	r18, 0x10	; 16
     270:	e2 2e       	mov	r14, r18
     272:	f1 2c       	mov	r15, r1
     274:	01 2d       	mov	r16, r1
     276:	11 2d       	mov	r17, r1
     278:	d2 01       	movw	r26, r4
     27a:	c1 01       	movw	r24, r2
     27c:	0e 2c       	mov	r0, r14
     27e:	04 c0       	rjmp	.+8      	; 0x288 <__udivdi3+0xf8>
     280:	b6 95       	lsr	r27
     282:	a7 95       	ror	r26
     284:	97 95       	ror	r25
     286:	87 95       	ror	r24
     288:	0a 94       	dec	r0
     28a:	d2 f7       	brpl	.-12     	; 0x280 <__udivdi3+0xf0>
     28c:	89 5a       	subi	r24, 0xA9	; 169
     28e:	9d 4f       	sbci	r25, 0xFD	; 253
     290:	dc 01       	movw	r26, r24
     292:	2c 91       	ld	r18, X
     294:	80 e2       	ldi	r24, 0x20	; 32
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	a0 e0       	ldi	r26, 0x00	; 0
     29a:	b0 e0       	ldi	r27, 0x00	; 0
     29c:	8e 19       	sub	r24, r14
     29e:	9f 09       	sbc	r25, r15
     2a0:	a0 0b       	sbc	r26, r16
     2a2:	b1 0b       	sbc	r27, r17
     2a4:	7c 01       	movw	r14, r24
     2a6:	8d 01       	movw	r16, r26
     2a8:	e2 1a       	sub	r14, r18
     2aa:	f1 08       	sbc	r15, r1
     2ac:	01 09       	sbc	r16, r1
     2ae:	11 09       	sbc	r17, r1
     2b0:	e1 14       	cp	r14, r1
     2b2:	f1 04       	cpc	r15, r1
     2b4:	01 05       	cpc	r16, r1
     2b6:	11 05       	cpc	r17, r1
     2b8:	a1 f1       	breq	.+104    	; 0x322 <__udivdi3+0x192>
     2ba:	0e 2c       	mov	r0, r14
     2bc:	04 c0       	rjmp	.+8      	; 0x2c6 <__udivdi3+0x136>
     2be:	22 0c       	add	r2, r2
     2c0:	33 1c       	adc	r3, r3
     2c2:	44 1c       	adc	r4, r4
     2c4:	55 1c       	adc	r5, r5
     2c6:	0a 94       	dec	r0
     2c8:	d2 f7       	brpl	.-12     	; 0x2be <__udivdi3+0x12e>
     2ca:	a4 01       	movw	r20, r8
     2cc:	93 01       	movw	r18, r6
     2ce:	0e 2c       	mov	r0, r14
     2d0:	04 c0       	rjmp	.+8      	; 0x2da <__udivdi3+0x14a>
     2d2:	22 0f       	add	r18, r18
     2d4:	33 1f       	adc	r19, r19
     2d6:	44 1f       	adc	r20, r20
     2d8:	55 1f       	adc	r21, r21
     2da:	0a 94       	dec	r0
     2dc:	d2 f7       	brpl	.-12     	; 0x2d2 <__udivdi3+0x142>
     2de:	80 e2       	ldi	r24, 0x20	; 32
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	8e 19       	sub	r24, r14
     2e4:	9f 09       	sbc	r25, r15
     2e6:	6d a4       	ldd	r6, Y+45	; 0x2d
     2e8:	7e a4       	ldd	r7, Y+46	; 0x2e
     2ea:	8f a4       	ldd	r8, Y+47	; 0x2f
     2ec:	98 a8       	ldd	r9, Y+48	; 0x30
     2ee:	04 c0       	rjmp	.+8      	; 0x2f8 <__udivdi3+0x168>
     2f0:	96 94       	lsr	r9
     2f2:	87 94       	ror	r8
     2f4:	77 94       	ror	r7
     2f6:	67 94       	ror	r6
     2f8:	8a 95       	dec	r24
     2fa:	d2 f7       	brpl	.-12     	; 0x2f0 <__udivdi3+0x160>
     2fc:	62 2a       	or	r6, r18
     2fe:	73 2a       	or	r7, r19
     300:	84 2a       	or	r8, r20
     302:	95 2a       	or	r9, r21
     304:	ad a4       	ldd	r10, Y+45	; 0x2d
     306:	be a4       	ldd	r11, Y+46	; 0x2e
     308:	cf a4       	ldd	r12, Y+47	; 0x2f
     30a:	d8 a8       	ldd	r13, Y+48	; 0x30
     30c:	04 c0       	rjmp	.+8      	; 0x316 <__udivdi3+0x186>
     30e:	aa 0c       	add	r10, r10
     310:	bb 1c       	adc	r11, r11
     312:	cc 1c       	adc	r12, r12
     314:	dd 1c       	adc	r13, r13
     316:	ea 94       	dec	r14
     318:	d2 f7       	brpl	.-12     	; 0x30e <__udivdi3+0x17e>
     31a:	ad a6       	std	Y+45, r10	; 0x2d
     31c:	be a6       	std	Y+46, r11	; 0x2e
     31e:	cf a6       	std	Y+47, r12	; 0x2f
     320:	d8 aa       	std	Y+48, r13	; 0x30
     322:	62 01       	movw	r12, r4
     324:	ee 24       	eor	r14, r14
     326:	ff 24       	eor	r15, r15
     328:	cd aa       	std	Y+53, r12	; 0x35
     32a:	de aa       	std	Y+54, r13	; 0x36
     32c:	ef aa       	std	Y+55, r14	; 0x37
     32e:	f8 ae       	std	Y+56, r15	; 0x38
     330:	92 01       	movw	r18, r4
     332:	81 01       	movw	r16, r2
     334:	20 70       	andi	r18, 0x00	; 0
     336:	30 70       	andi	r19, 0x00	; 0
     338:	09 af       	std	Y+57, r16	; 0x39
     33a:	1a af       	std	Y+58, r17	; 0x3a
     33c:	2b af       	std	Y+59, r18	; 0x3b
     33e:	3c af       	std	Y+60, r19	; 0x3c
     340:	c4 01       	movw	r24, r8
     342:	b3 01       	movw	r22, r6
     344:	a7 01       	movw	r20, r14
     346:	96 01       	movw	r18, r12
     348:	0e 94 5f 30 	call	0x60be	; 0x60be <__udivmodsi4>
     34c:	7b 01       	movw	r14, r22
     34e:	8c 01       	movw	r16, r24
     350:	c4 01       	movw	r24, r8
     352:	b3 01       	movw	r22, r6
     354:	2d a9       	ldd	r18, Y+53	; 0x35
     356:	3e a9       	ldd	r19, Y+54	; 0x36
     358:	4f a9       	ldd	r20, Y+55	; 0x37
     35a:	58 ad       	ldd	r21, Y+56	; 0x38
     35c:	0e 94 5f 30 	call	0x60be	; 0x60be <__udivmodsi4>
     360:	c9 01       	movw	r24, r18
     362:	da 01       	movw	r26, r20
     364:	3c 01       	movw	r6, r24
     366:	4d 01       	movw	r8, r26
     368:	c4 01       	movw	r24, r8
     36a:	b3 01       	movw	r22, r6
     36c:	29 ad       	ldd	r18, Y+57	; 0x39
     36e:	3a ad       	ldd	r19, Y+58	; 0x3a
     370:	4b ad       	ldd	r20, Y+59	; 0x3b
     372:	5c ad       	ldd	r21, Y+60	; 0x3c
     374:	0e 94 9c 30 	call	0x6138	; 0x6138 <__mulsi3>
     378:	9b 01       	movw	r18, r22
     37a:	ac 01       	movw	r20, r24
     37c:	87 01       	movw	r16, r14
     37e:	ff 24       	eor	r15, r15
     380:	ee 24       	eor	r14, r14
     382:	ad a4       	ldd	r10, Y+45	; 0x2d
     384:	be a4       	ldd	r11, Y+46	; 0x2e
     386:	cf a4       	ldd	r12, Y+47	; 0x2f
     388:	d8 a8       	ldd	r13, Y+48	; 0x30
     38a:	c6 01       	movw	r24, r12
     38c:	aa 27       	eor	r26, r26
     38e:	bb 27       	eor	r27, r27
     390:	57 01       	movw	r10, r14
     392:	68 01       	movw	r12, r16
     394:	a8 2a       	or	r10, r24
     396:	b9 2a       	or	r11, r25
     398:	ca 2a       	or	r12, r26
     39a:	db 2a       	or	r13, r27
     39c:	a2 16       	cp	r10, r18
     39e:	b3 06       	cpc	r11, r19
     3a0:	c4 06       	cpc	r12, r20
     3a2:	d5 06       	cpc	r13, r21
     3a4:	e0 f4       	brcc	.+56     	; 0x3de <__udivdi3+0x24e>
     3a6:	08 94       	sec
     3a8:	61 08       	sbc	r6, r1
     3aa:	71 08       	sbc	r7, r1
     3ac:	81 08       	sbc	r8, r1
     3ae:	91 08       	sbc	r9, r1
     3b0:	a2 0c       	add	r10, r2
     3b2:	b3 1c       	adc	r11, r3
     3b4:	c4 1c       	adc	r12, r4
     3b6:	d5 1c       	adc	r13, r5
     3b8:	a2 14       	cp	r10, r2
     3ba:	b3 04       	cpc	r11, r3
     3bc:	c4 04       	cpc	r12, r4
     3be:	d5 04       	cpc	r13, r5
     3c0:	70 f0       	brcs	.+28     	; 0x3de <__udivdi3+0x24e>
     3c2:	a2 16       	cp	r10, r18
     3c4:	b3 06       	cpc	r11, r19
     3c6:	c4 06       	cpc	r12, r20
     3c8:	d5 06       	cpc	r13, r21
     3ca:	48 f4       	brcc	.+18     	; 0x3de <__udivdi3+0x24e>
     3cc:	08 94       	sec
     3ce:	61 08       	sbc	r6, r1
     3d0:	71 08       	sbc	r7, r1
     3d2:	81 08       	sbc	r8, r1
     3d4:	91 08       	sbc	r9, r1
     3d6:	a2 0c       	add	r10, r2
     3d8:	b3 1c       	adc	r11, r3
     3da:	c4 1c       	adc	r12, r4
     3dc:	d5 1c       	adc	r13, r5
     3de:	a2 1a       	sub	r10, r18
     3e0:	b3 0a       	sbc	r11, r19
     3e2:	c4 0a       	sbc	r12, r20
     3e4:	d5 0a       	sbc	r13, r21
     3e6:	c6 01       	movw	r24, r12
     3e8:	b5 01       	movw	r22, r10
     3ea:	2d a9       	ldd	r18, Y+53	; 0x35
     3ec:	3e a9       	ldd	r19, Y+54	; 0x36
     3ee:	4f a9       	ldd	r20, Y+55	; 0x37
     3f0:	58 ad       	ldd	r21, Y+56	; 0x38
     3f2:	0e 94 5f 30 	call	0x60be	; 0x60be <__udivmodsi4>
     3f6:	7b 01       	movw	r14, r22
     3f8:	8c 01       	movw	r16, r24
     3fa:	c6 01       	movw	r24, r12
     3fc:	b5 01       	movw	r22, r10
     3fe:	2d a9       	ldd	r18, Y+53	; 0x35
     400:	3e a9       	ldd	r19, Y+54	; 0x36
     402:	4f a9       	ldd	r20, Y+55	; 0x37
     404:	58 ad       	ldd	r21, Y+56	; 0x38
     406:	0e 94 5f 30 	call	0x60be	; 0x60be <__udivmodsi4>
     40a:	c9 01       	movw	r24, r18
     40c:	da 01       	movw	r26, r20
     40e:	5c 01       	movw	r10, r24
     410:	6d 01       	movw	r12, r26
     412:	c6 01       	movw	r24, r12
     414:	b5 01       	movw	r22, r10
     416:	29 ad       	ldd	r18, Y+57	; 0x39
     418:	3a ad       	ldd	r19, Y+58	; 0x3a
     41a:	4b ad       	ldd	r20, Y+59	; 0x3b
     41c:	5c ad       	ldd	r21, Y+60	; 0x3c
     41e:	0e 94 9c 30 	call	0x6138	; 0x6138 <__mulsi3>
     422:	9b 01       	movw	r18, r22
     424:	ac 01       	movw	r20, r24
     426:	87 01       	movw	r16, r14
     428:	ff 24       	eor	r15, r15
     42a:	ee 24       	eor	r14, r14
     42c:	8d a5       	ldd	r24, Y+45	; 0x2d
     42e:	9e a5       	ldd	r25, Y+46	; 0x2e
     430:	af a5       	ldd	r26, Y+47	; 0x2f
     432:	b8 a9       	ldd	r27, Y+48	; 0x30
     434:	a0 70       	andi	r26, 0x00	; 0
     436:	b0 70       	andi	r27, 0x00	; 0
     438:	e8 2a       	or	r14, r24
     43a:	f9 2a       	or	r15, r25
     43c:	0a 2b       	or	r16, r26
     43e:	1b 2b       	or	r17, r27
     440:	e2 16       	cp	r14, r18
     442:	f3 06       	cpc	r15, r19
     444:	04 07       	cpc	r16, r20
     446:	15 07       	cpc	r17, r21
     448:	c0 f4       	brcc	.+48     	; 0x47a <__udivdi3+0x2ea>
     44a:	08 94       	sec
     44c:	a1 08       	sbc	r10, r1
     44e:	b1 08       	sbc	r11, r1
     450:	c1 08       	sbc	r12, r1
     452:	d1 08       	sbc	r13, r1
     454:	e2 0c       	add	r14, r2
     456:	f3 1c       	adc	r15, r3
     458:	04 1d       	adc	r16, r4
     45a:	15 1d       	adc	r17, r5
     45c:	e2 14       	cp	r14, r2
     45e:	f3 04       	cpc	r15, r3
     460:	04 05       	cpc	r16, r4
     462:	15 05       	cpc	r17, r5
     464:	50 f0       	brcs	.+20     	; 0x47a <__udivdi3+0x2ea>
     466:	e2 16       	cp	r14, r18
     468:	f3 06       	cpc	r15, r19
     46a:	04 07       	cpc	r16, r20
     46c:	15 07       	cpc	r17, r21
     46e:	28 f4       	brcc	.+10     	; 0x47a <__udivdi3+0x2ea>
     470:	08 94       	sec
     472:	a1 08       	sbc	r10, r1
     474:	b1 08       	sbc	r11, r1
     476:	c1 08       	sbc	r12, r1
     478:	d1 08       	sbc	r13, r1
     47a:	d3 01       	movw	r26, r6
     47c:	99 27       	eor	r25, r25
     47e:	88 27       	eor	r24, r24
     480:	86 01       	movw	r16, r12
     482:	75 01       	movw	r14, r10
     484:	e8 2a       	or	r14, r24
     486:	f9 2a       	or	r15, r25
     488:	0a 2b       	or	r16, r26
     48a:	1b 2b       	or	r17, r27
     48c:	e9 aa       	std	Y+49, r14	; 0x31
     48e:	fa aa       	std	Y+50, r15	; 0x32
     490:	0b ab       	std	Y+51, r16	; 0x33
     492:	1c ab       	std	Y+52, r17	; 0x34
     494:	cf c4       	rjmp	.+2462   	; 0xe34 <__stack+0x5d5>
     496:	21 14       	cp	r2, r1
     498:	31 04       	cpc	r3, r1
     49a:	41 04       	cpc	r4, r1
     49c:	51 04       	cpc	r5, r1
     49e:	71 f4       	brne	.+28     	; 0x4bc <__udivdi3+0x32c>
     4a0:	61 e0       	ldi	r22, 0x01	; 1
     4a2:	70 e0       	ldi	r23, 0x00	; 0
     4a4:	80 e0       	ldi	r24, 0x00	; 0
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	20 e0       	ldi	r18, 0x00	; 0
     4aa:	30 e0       	ldi	r19, 0x00	; 0
     4ac:	40 e0       	ldi	r20, 0x00	; 0
     4ae:	50 e0       	ldi	r21, 0x00	; 0
     4b0:	0e 94 5f 30 	call	0x60be	; 0x60be <__udivmodsi4>
     4b4:	c9 01       	movw	r24, r18
     4b6:	da 01       	movw	r26, r20
     4b8:	1c 01       	movw	r2, r24
     4ba:	2d 01       	movw	r4, r26
     4bc:	00 e0       	ldi	r16, 0x00	; 0
     4be:	20 16       	cp	r2, r16
     4c0:	00 e0       	ldi	r16, 0x00	; 0
     4c2:	30 06       	cpc	r3, r16
     4c4:	01 e0       	ldi	r16, 0x01	; 1
     4c6:	40 06       	cpc	r4, r16
     4c8:	00 e0       	ldi	r16, 0x00	; 0
     4ca:	50 06       	cpc	r5, r16
     4cc:	88 f4       	brcc	.+34     	; 0x4f0 <__udivdi3+0x360>
     4ce:	1f ef       	ldi	r17, 0xFF	; 255
     4d0:	21 16       	cp	r2, r17
     4d2:	31 04       	cpc	r3, r1
     4d4:	41 04       	cpc	r4, r1
     4d6:	51 04       	cpc	r5, r1
     4d8:	31 f0       	breq	.+12     	; 0x4e6 <__udivdi3+0x356>
     4da:	28 f0       	brcs	.+10     	; 0x4e6 <__udivdi3+0x356>
     4dc:	48 e0       	ldi	r20, 0x08	; 8
     4de:	50 e0       	ldi	r21, 0x00	; 0
     4e0:	60 e0       	ldi	r22, 0x00	; 0
     4e2:	70 e0       	ldi	r23, 0x00	; 0
     4e4:	17 c0       	rjmp	.+46     	; 0x514 <__udivdi3+0x384>
     4e6:	40 e0       	ldi	r20, 0x00	; 0
     4e8:	50 e0       	ldi	r21, 0x00	; 0
     4ea:	60 e0       	ldi	r22, 0x00	; 0
     4ec:	70 e0       	ldi	r23, 0x00	; 0
     4ee:	12 c0       	rjmp	.+36     	; 0x514 <__udivdi3+0x384>
     4f0:	20 e0       	ldi	r18, 0x00	; 0
     4f2:	22 16       	cp	r2, r18
     4f4:	20 e0       	ldi	r18, 0x00	; 0
     4f6:	32 06       	cpc	r3, r18
     4f8:	20 e0       	ldi	r18, 0x00	; 0
     4fa:	42 06       	cpc	r4, r18
     4fc:	21 e0       	ldi	r18, 0x01	; 1
     4fe:	52 06       	cpc	r5, r18
     500:	28 f0       	brcs	.+10     	; 0x50c <__udivdi3+0x37c>
     502:	48 e1       	ldi	r20, 0x18	; 24
     504:	50 e0       	ldi	r21, 0x00	; 0
     506:	60 e0       	ldi	r22, 0x00	; 0
     508:	70 e0       	ldi	r23, 0x00	; 0
     50a:	04 c0       	rjmp	.+8      	; 0x514 <__udivdi3+0x384>
     50c:	40 e1       	ldi	r20, 0x10	; 16
     50e:	50 e0       	ldi	r21, 0x00	; 0
     510:	60 e0       	ldi	r22, 0x00	; 0
     512:	70 e0       	ldi	r23, 0x00	; 0
     514:	d2 01       	movw	r26, r4
     516:	c1 01       	movw	r24, r2
     518:	04 2e       	mov	r0, r20
     51a:	04 c0       	rjmp	.+8      	; 0x524 <__udivdi3+0x394>
     51c:	b6 95       	lsr	r27
     51e:	a7 95       	ror	r26
     520:	97 95       	ror	r25
     522:	87 95       	ror	r24
     524:	0a 94       	dec	r0
     526:	d2 f7       	brpl	.-12     	; 0x51c <__udivdi3+0x38c>
     528:	89 5a       	subi	r24, 0xA9	; 169
     52a:	9d 4f       	sbci	r25, 0xFD	; 253
     52c:	dc 01       	movw	r26, r24
     52e:	2c 91       	ld	r18, X
     530:	e0 e2       	ldi	r30, 0x20	; 32
     532:	ee 2e       	mov	r14, r30
     534:	f1 2c       	mov	r15, r1
     536:	01 2d       	mov	r16, r1
     538:	11 2d       	mov	r17, r1
     53a:	d8 01       	movw	r26, r16
     53c:	c7 01       	movw	r24, r14
     53e:	84 1b       	sub	r24, r20
     540:	95 0b       	sbc	r25, r21
     542:	a6 0b       	sbc	r26, r22
     544:	b7 0b       	sbc	r27, r23
     546:	82 1b       	sub	r24, r18
     548:	91 09       	sbc	r25, r1
     54a:	a1 09       	sbc	r26, r1
     54c:	b1 09       	sbc	r27, r1
     54e:	00 97       	sbiw	r24, 0x00	; 0
     550:	a1 05       	cpc	r26, r1
     552:	b1 05       	cpc	r27, r1
     554:	61 f4       	brne	.+24     	; 0x56e <__udivdi3+0x3de>
     556:	64 01       	movw	r12, r8
     558:	53 01       	movw	r10, r6
     55a:	a2 18       	sub	r10, r2
     55c:	b3 08       	sbc	r11, r3
     55e:	c4 08       	sbc	r12, r4
     560:	d5 08       	sbc	r13, r5
     562:	31 e0       	ldi	r19, 0x01	; 1
     564:	63 2e       	mov	r6, r19
     566:	71 2c       	mov	r7, r1
     568:	81 2c       	mov	r8, r1
     56a:	91 2c       	mov	r9, r1
     56c:	1e c1       	rjmp	.+572    	; 0x7aa <__udivdi3+0x61a>
     56e:	6f 96       	adiw	r28, 0x1f	; 31
     570:	8f af       	std	Y+63, r24	; 0x3f
     572:	6f 97       	sbiw	r28, 0x1f	; 31
     574:	08 2e       	mov	r0, r24
     576:	04 c0       	rjmp	.+8      	; 0x580 <__udivdi3+0x3f0>
     578:	22 0c       	add	r2, r2
     57a:	33 1c       	adc	r3, r3
     57c:	44 1c       	adc	r4, r4
     57e:	55 1c       	adc	r5, r5
     580:	0a 94       	dec	r0
     582:	d2 f7       	brpl	.-12     	; 0x578 <__udivdi3+0x3e8>
     584:	ee 2d       	mov	r30, r14
     586:	e8 1b       	sub	r30, r24
     588:	64 01       	movw	r12, r8
     58a:	53 01       	movw	r10, r6
     58c:	0e 2e       	mov	r0, r30
     58e:	04 c0       	rjmp	.+8      	; 0x598 <__udivdi3+0x408>
     590:	d6 94       	lsr	r13
     592:	c7 94       	ror	r12
     594:	b7 94       	ror	r11
     596:	a7 94       	ror	r10
     598:	0a 94       	dec	r0
     59a:	d2 f7       	brpl	.-12     	; 0x590 <__udivdi3+0x400>
     59c:	a4 01       	movw	r20, r8
     59e:	93 01       	movw	r18, r6
     5a0:	6f 96       	adiw	r28, 0x1f	; 31
     5a2:	0f ac       	ldd	r0, Y+63	; 0x3f
     5a4:	6f 97       	sbiw	r28, 0x1f	; 31
     5a6:	04 c0       	rjmp	.+8      	; 0x5b0 <__udivdi3+0x420>
     5a8:	22 0f       	add	r18, r18
     5aa:	33 1f       	adc	r19, r19
     5ac:	44 1f       	adc	r20, r20
     5ae:	55 1f       	adc	r21, r21
     5b0:	0a 94       	dec	r0
     5b2:	d2 f7       	brpl	.-12     	; 0x5a8 <__udivdi3+0x418>
     5b4:	6d a4       	ldd	r6, Y+45	; 0x2d
     5b6:	7e a4       	ldd	r7, Y+46	; 0x2e
     5b8:	8f a4       	ldd	r8, Y+47	; 0x2f
     5ba:	98 a8       	ldd	r9, Y+48	; 0x30
     5bc:	0e 2e       	mov	r0, r30
     5be:	04 c0       	rjmp	.+8      	; 0x5c8 <__udivdi3+0x438>
     5c0:	96 94       	lsr	r9
     5c2:	87 94       	ror	r8
     5c4:	77 94       	ror	r7
     5c6:	67 94       	ror	r6
     5c8:	0a 94       	dec	r0
     5ca:	d2 f7       	brpl	.-12     	; 0x5c0 <__udivdi3+0x430>
     5cc:	84 01       	movw	r16, r8
     5ce:	73 01       	movw	r14, r6
     5d0:	e2 2a       	or	r14, r18
     5d2:	f3 2a       	or	r15, r19
     5d4:	04 2b       	or	r16, r20
     5d6:	15 2b       	or	r17, r21
     5d8:	e9 a6       	std	Y+41, r14	; 0x29
     5da:	fa a6       	std	Y+42, r15	; 0x2a
     5dc:	0b a7       	std	Y+43, r16	; 0x2b
     5de:	1c a7       	std	Y+44, r17	; 0x2c
     5e0:	32 01       	movw	r6, r4
     5e2:	88 24       	eor	r8, r8
     5e4:	99 24       	eor	r9, r9
     5e6:	92 01       	movw	r18, r4
     5e8:	81 01       	movw	r16, r2
     5ea:	20 70       	andi	r18, 0x00	; 0
     5ec:	30 70       	andi	r19, 0x00	; 0
     5ee:	21 96       	adiw	r28, 0x01	; 1
     5f0:	0c af       	std	Y+60, r16	; 0x3c
     5f2:	1d af       	std	Y+61, r17	; 0x3d
     5f4:	2e af       	std	Y+62, r18	; 0x3e
     5f6:	3f af       	std	Y+63, r19	; 0x3f
     5f8:	21 97       	sbiw	r28, 0x01	; 1
     5fa:	c6 01       	movw	r24, r12
     5fc:	b5 01       	movw	r22, r10
     5fe:	a4 01       	movw	r20, r8
     600:	93 01       	movw	r18, r6
     602:	0e 94 5f 30 	call	0x60be	; 0x60be <__udivmodsi4>
     606:	7b 01       	movw	r14, r22
     608:	8c 01       	movw	r16, r24
     60a:	c6 01       	movw	r24, r12
     60c:	b5 01       	movw	r22, r10
     60e:	a4 01       	movw	r20, r8
     610:	93 01       	movw	r18, r6
     612:	0e 94 5f 30 	call	0x60be	; 0x60be <__udivmodsi4>
     616:	c9 01       	movw	r24, r18
     618:	da 01       	movw	r26, r20
     61a:	25 96       	adiw	r28, 0x05	; 5
     61c:	8c af       	std	Y+60, r24	; 0x3c
     61e:	9d af       	std	Y+61, r25	; 0x3d
     620:	ae af       	std	Y+62, r26	; 0x3e
     622:	bf af       	std	Y+63, r27	; 0x3f
     624:	25 97       	sbiw	r28, 0x05	; 5
     626:	bc 01       	movw	r22, r24
     628:	cd 01       	movw	r24, r26
     62a:	21 96       	adiw	r28, 0x01	; 1
     62c:	2c ad       	ldd	r18, Y+60	; 0x3c
     62e:	3d ad       	ldd	r19, Y+61	; 0x3d
     630:	4e ad       	ldd	r20, Y+62	; 0x3e
     632:	5f ad       	ldd	r21, Y+63	; 0x3f
     634:	21 97       	sbiw	r28, 0x01	; 1
     636:	0e 94 9c 30 	call	0x6138	; 0x6138 <__mulsi3>
     63a:	9b 01       	movw	r18, r22
     63c:	ac 01       	movw	r20, r24
     63e:	87 01       	movw	r16, r14
     640:	ff 24       	eor	r15, r15
     642:	ee 24       	eor	r14, r14
     644:	a9 a4       	ldd	r10, Y+41	; 0x29
     646:	ba a4       	ldd	r11, Y+42	; 0x2a
     648:	cb a4       	ldd	r12, Y+43	; 0x2b
     64a:	dc a4       	ldd	r13, Y+44	; 0x2c
     64c:	c6 01       	movw	r24, r12
     64e:	aa 27       	eor	r26, r26
     650:	bb 27       	eor	r27, r27
     652:	5c 01       	movw	r10, r24
     654:	6d 01       	movw	r12, r26
     656:	ae 28       	or	r10, r14
     658:	bf 28       	or	r11, r15
     65a:	c0 2a       	or	r12, r16
     65c:	d1 2a       	or	r13, r17
     65e:	a2 16       	cp	r10, r18
     660:	b3 06       	cpc	r11, r19
     662:	c4 06       	cpc	r12, r20
     664:	d5 06       	cpc	r13, r21
     666:	60 f5       	brcc	.+88     	; 0x6c0 <__udivdi3+0x530>
     668:	25 96       	adiw	r28, 0x05	; 5
     66a:	6c ad       	ldd	r22, Y+60	; 0x3c
     66c:	7d ad       	ldd	r23, Y+61	; 0x3d
     66e:	8e ad       	ldd	r24, Y+62	; 0x3e
     670:	9f ad       	ldd	r25, Y+63	; 0x3f
     672:	25 97       	sbiw	r28, 0x05	; 5
     674:	61 50       	subi	r22, 0x01	; 1
     676:	70 40       	sbci	r23, 0x00	; 0
     678:	80 40       	sbci	r24, 0x00	; 0
     67a:	90 40       	sbci	r25, 0x00	; 0
     67c:	25 96       	adiw	r28, 0x05	; 5
     67e:	6c af       	std	Y+60, r22	; 0x3c
     680:	7d af       	std	Y+61, r23	; 0x3d
     682:	8e af       	std	Y+62, r24	; 0x3e
     684:	9f af       	std	Y+63, r25	; 0x3f
     686:	25 97       	sbiw	r28, 0x05	; 5
     688:	a2 0c       	add	r10, r2
     68a:	b3 1c       	adc	r11, r3
     68c:	c4 1c       	adc	r12, r4
     68e:	d5 1c       	adc	r13, r5
     690:	a2 14       	cp	r10, r2
     692:	b3 04       	cpc	r11, r3
     694:	c4 04       	cpc	r12, r4
     696:	d5 04       	cpc	r13, r5
     698:	98 f0       	brcs	.+38     	; 0x6c0 <__udivdi3+0x530>
     69a:	a2 16       	cp	r10, r18
     69c:	b3 06       	cpc	r11, r19
     69e:	c4 06       	cpc	r12, r20
     6a0:	d5 06       	cpc	r13, r21
     6a2:	70 f4       	brcc	.+28     	; 0x6c0 <__udivdi3+0x530>
     6a4:	61 50       	subi	r22, 0x01	; 1
     6a6:	70 40       	sbci	r23, 0x00	; 0
     6a8:	80 40       	sbci	r24, 0x00	; 0
     6aa:	90 40       	sbci	r25, 0x00	; 0
     6ac:	25 96       	adiw	r28, 0x05	; 5
     6ae:	6c af       	std	Y+60, r22	; 0x3c
     6b0:	7d af       	std	Y+61, r23	; 0x3d
     6b2:	8e af       	std	Y+62, r24	; 0x3e
     6b4:	9f af       	std	Y+63, r25	; 0x3f
     6b6:	25 97       	sbiw	r28, 0x05	; 5
     6b8:	a2 0c       	add	r10, r2
     6ba:	b3 1c       	adc	r11, r3
     6bc:	c4 1c       	adc	r12, r4
     6be:	d5 1c       	adc	r13, r5
     6c0:	a2 1a       	sub	r10, r18
     6c2:	b3 0a       	sbc	r11, r19
     6c4:	c4 0a       	sbc	r12, r20
     6c6:	d5 0a       	sbc	r13, r21
     6c8:	c6 01       	movw	r24, r12
     6ca:	b5 01       	movw	r22, r10
     6cc:	a4 01       	movw	r20, r8
     6ce:	93 01       	movw	r18, r6
     6d0:	0e 94 5f 30 	call	0x60be	; 0x60be <__udivmodsi4>
     6d4:	7b 01       	movw	r14, r22
     6d6:	8c 01       	movw	r16, r24
     6d8:	c6 01       	movw	r24, r12
     6da:	b5 01       	movw	r22, r10
     6dc:	a4 01       	movw	r20, r8
     6de:	93 01       	movw	r18, r6
     6e0:	0e 94 5f 30 	call	0x60be	; 0x60be <__udivmodsi4>
     6e4:	c9 01       	movw	r24, r18
     6e6:	da 01       	movw	r26, r20
     6e8:	3c 01       	movw	r6, r24
     6ea:	4d 01       	movw	r8, r26
     6ec:	c4 01       	movw	r24, r8
     6ee:	b3 01       	movw	r22, r6
     6f0:	21 96       	adiw	r28, 0x01	; 1
     6f2:	2c ad       	ldd	r18, Y+60	; 0x3c
     6f4:	3d ad       	ldd	r19, Y+61	; 0x3d
     6f6:	4e ad       	ldd	r20, Y+62	; 0x3e
     6f8:	5f ad       	ldd	r21, Y+63	; 0x3f
     6fa:	21 97       	sbiw	r28, 0x01	; 1
     6fc:	0e 94 9c 30 	call	0x6138	; 0x6138 <__mulsi3>
     700:	9b 01       	movw	r18, r22
     702:	ac 01       	movw	r20, r24
     704:	87 01       	movw	r16, r14
     706:	ff 24       	eor	r15, r15
     708:	ee 24       	eor	r14, r14
     70a:	89 a5       	ldd	r24, Y+41	; 0x29
     70c:	9a a5       	ldd	r25, Y+42	; 0x2a
     70e:	ab a5       	ldd	r26, Y+43	; 0x2b
     710:	bc a5       	ldd	r27, Y+44	; 0x2c
     712:	a0 70       	andi	r26, 0x00	; 0
     714:	b0 70       	andi	r27, 0x00	; 0
     716:	57 01       	movw	r10, r14
     718:	68 01       	movw	r12, r16
     71a:	a8 2a       	or	r10, r24
     71c:	b9 2a       	or	r11, r25
     71e:	ca 2a       	or	r12, r26
     720:	db 2a       	or	r13, r27
     722:	a2 16       	cp	r10, r18
     724:	b3 06       	cpc	r11, r19
     726:	c4 06       	cpc	r12, r20
     728:	d5 06       	cpc	r13, r21
     72a:	e0 f4       	brcc	.+56     	; 0x764 <__udivdi3+0x5d4>
     72c:	08 94       	sec
     72e:	61 08       	sbc	r6, r1
     730:	71 08       	sbc	r7, r1
     732:	81 08       	sbc	r8, r1
     734:	91 08       	sbc	r9, r1
     736:	a2 0c       	add	r10, r2
     738:	b3 1c       	adc	r11, r3
     73a:	c4 1c       	adc	r12, r4
     73c:	d5 1c       	adc	r13, r5
     73e:	a2 14       	cp	r10, r2
     740:	b3 04       	cpc	r11, r3
     742:	c4 04       	cpc	r12, r4
     744:	d5 04       	cpc	r13, r5
     746:	70 f0       	brcs	.+28     	; 0x764 <__udivdi3+0x5d4>
     748:	a2 16       	cp	r10, r18
     74a:	b3 06       	cpc	r11, r19
     74c:	c4 06       	cpc	r12, r20
     74e:	d5 06       	cpc	r13, r21
     750:	48 f4       	brcc	.+18     	; 0x764 <__udivdi3+0x5d4>
     752:	08 94       	sec
     754:	61 08       	sbc	r6, r1
     756:	71 08       	sbc	r7, r1
     758:	81 08       	sbc	r8, r1
     75a:	91 08       	sbc	r9, r1
     75c:	a2 0c       	add	r10, r2
     75e:	b3 1c       	adc	r11, r3
     760:	c4 1c       	adc	r12, r4
     762:	d5 1c       	adc	r13, r5
     764:	8d a5       	ldd	r24, Y+45	; 0x2d
     766:	9e a5       	ldd	r25, Y+46	; 0x2e
     768:	af a5       	ldd	r26, Y+47	; 0x2f
     76a:	b8 a9       	ldd	r27, Y+48	; 0x30
     76c:	6f 96       	adiw	r28, 0x1f	; 31
     76e:	0f ac       	ldd	r0, Y+63	; 0x3f
     770:	6f 97       	sbiw	r28, 0x1f	; 31
     772:	04 c0       	rjmp	.+8      	; 0x77c <__udivdi3+0x5ec>
     774:	88 0f       	add	r24, r24
     776:	99 1f       	adc	r25, r25
     778:	aa 1f       	adc	r26, r26
     77a:	bb 1f       	adc	r27, r27
     77c:	0a 94       	dec	r0
     77e:	d2 f7       	brpl	.-12     	; 0x774 <__udivdi3+0x5e4>
     780:	8d a7       	std	Y+45, r24	; 0x2d
     782:	9e a7       	std	Y+46, r25	; 0x2e
     784:	af a7       	std	Y+47, r26	; 0x2f
     786:	b8 ab       	std	Y+48, r27	; 0x30
     788:	a2 1a       	sub	r10, r18
     78a:	b3 0a       	sbc	r11, r19
     78c:	c4 0a       	sbc	r12, r20
     78e:	d5 0a       	sbc	r13, r21
     790:	25 96       	adiw	r28, 0x05	; 5
     792:	ec ac       	ldd	r14, Y+60	; 0x3c
     794:	fd ac       	ldd	r15, Y+61	; 0x3d
     796:	0e ad       	ldd	r16, Y+62	; 0x3e
     798:	1f ad       	ldd	r17, Y+63	; 0x3f
     79a:	25 97       	sbiw	r28, 0x05	; 5
     79c:	d7 01       	movw	r26, r14
     79e:	99 27       	eor	r25, r25
     7a0:	88 27       	eor	r24, r24
     7a2:	68 2a       	or	r6, r24
     7a4:	79 2a       	or	r7, r25
     7a6:	8a 2a       	or	r8, r26
     7a8:	9b 2a       	or	r9, r27
     7aa:	82 01       	movw	r16, r4
     7ac:	22 27       	eor	r18, r18
     7ae:	33 27       	eor	r19, r19
     7b0:	29 96       	adiw	r28, 0x09	; 9
     7b2:	0c af       	std	Y+60, r16	; 0x3c
     7b4:	1d af       	std	Y+61, r17	; 0x3d
     7b6:	2e af       	std	Y+62, r18	; 0x3e
     7b8:	3f af       	std	Y+63, r19	; 0x3f
     7ba:	29 97       	sbiw	r28, 0x09	; 9
     7bc:	a2 01       	movw	r20, r4
     7be:	91 01       	movw	r18, r2
     7c0:	40 70       	andi	r20, 0x00	; 0
     7c2:	50 70       	andi	r21, 0x00	; 0
     7c4:	2d 96       	adiw	r28, 0x0d	; 13
     7c6:	2c af       	std	Y+60, r18	; 0x3c
     7c8:	3d af       	std	Y+61, r19	; 0x3d
     7ca:	4e af       	std	Y+62, r20	; 0x3e
     7cc:	5f af       	std	Y+63, r21	; 0x3f
     7ce:	2d 97       	sbiw	r28, 0x0d	; 13
     7d0:	c6 01       	movw	r24, r12
     7d2:	b5 01       	movw	r22, r10
     7d4:	29 96       	adiw	r28, 0x09	; 9
     7d6:	2c ad       	ldd	r18, Y+60	; 0x3c
     7d8:	3d ad       	ldd	r19, Y+61	; 0x3d
     7da:	4e ad       	ldd	r20, Y+62	; 0x3e
     7dc:	5f ad       	ldd	r21, Y+63	; 0x3f
     7de:	29 97       	sbiw	r28, 0x09	; 9
     7e0:	0e 94 5f 30 	call	0x60be	; 0x60be <__udivmodsi4>
     7e4:	7b 01       	movw	r14, r22
     7e6:	8c 01       	movw	r16, r24
     7e8:	c6 01       	movw	r24, r12
     7ea:	b5 01       	movw	r22, r10
     7ec:	29 96       	adiw	r28, 0x09	; 9
     7ee:	2c ad       	ldd	r18, Y+60	; 0x3c
     7f0:	3d ad       	ldd	r19, Y+61	; 0x3d
     7f2:	4e ad       	ldd	r20, Y+62	; 0x3e
     7f4:	5f ad       	ldd	r21, Y+63	; 0x3f
     7f6:	29 97       	sbiw	r28, 0x09	; 9
     7f8:	0e 94 5f 30 	call	0x60be	; 0x60be <__udivmodsi4>
     7fc:	c9 01       	movw	r24, r18
     7fe:	da 01       	movw	r26, r20
     800:	61 96       	adiw	r28, 0x11	; 17
     802:	8c af       	std	Y+60, r24	; 0x3c
     804:	9d af       	std	Y+61, r25	; 0x3d
     806:	ae af       	std	Y+62, r26	; 0x3e
     808:	bf af       	std	Y+63, r27	; 0x3f
     80a:	61 97       	sbiw	r28, 0x11	; 17
     80c:	bc 01       	movw	r22, r24
     80e:	cd 01       	movw	r24, r26
     810:	2d 96       	adiw	r28, 0x0d	; 13
     812:	2c ad       	ldd	r18, Y+60	; 0x3c
     814:	3d ad       	ldd	r19, Y+61	; 0x3d
     816:	4e ad       	ldd	r20, Y+62	; 0x3e
     818:	5f ad       	ldd	r21, Y+63	; 0x3f
     81a:	2d 97       	sbiw	r28, 0x0d	; 13
     81c:	0e 94 9c 30 	call	0x6138	; 0x6138 <__mulsi3>
     820:	9b 01       	movw	r18, r22
     822:	ac 01       	movw	r20, r24
     824:	87 01       	movw	r16, r14
     826:	ff 24       	eor	r15, r15
     828:	ee 24       	eor	r14, r14
     82a:	ad a4       	ldd	r10, Y+45	; 0x2d
     82c:	be a4       	ldd	r11, Y+46	; 0x2e
     82e:	cf a4       	ldd	r12, Y+47	; 0x2f
     830:	d8 a8       	ldd	r13, Y+48	; 0x30
     832:	c6 01       	movw	r24, r12
     834:	aa 27       	eor	r26, r26
     836:	bb 27       	eor	r27, r27
     838:	57 01       	movw	r10, r14
     83a:	68 01       	movw	r12, r16
     83c:	a8 2a       	or	r10, r24
     83e:	b9 2a       	or	r11, r25
     840:	ca 2a       	or	r12, r26
     842:	db 2a       	or	r13, r27
     844:	a2 16       	cp	r10, r18
     846:	b3 06       	cpc	r11, r19
     848:	c4 06       	cpc	r12, r20
     84a:	d5 06       	cpc	r13, r21
     84c:	60 f5       	brcc	.+88     	; 0x8a6 <__stack+0x47>
     84e:	61 96       	adiw	r28, 0x11	; 17
     850:	6c ad       	ldd	r22, Y+60	; 0x3c
     852:	7d ad       	ldd	r23, Y+61	; 0x3d
     854:	8e ad       	ldd	r24, Y+62	; 0x3e
     856:	9f ad       	ldd	r25, Y+63	; 0x3f
     858:	61 97       	sbiw	r28, 0x11	; 17
     85a:	61 50       	subi	r22, 0x01	; 1
     85c:	70 40       	sbci	r23, 0x00	; 0
     85e:	80 40       	sbci	r24, 0x00	; 0
     860:	90 40       	sbci	r25, 0x00	; 0
     862:	61 96       	adiw	r28, 0x11	; 17
     864:	6c af       	std	Y+60, r22	; 0x3c
     866:	7d af       	std	Y+61, r23	; 0x3d
     868:	8e af       	std	Y+62, r24	; 0x3e
     86a:	9f af       	std	Y+63, r25	; 0x3f
     86c:	61 97       	sbiw	r28, 0x11	; 17
     86e:	a2 0c       	add	r10, r2
     870:	b3 1c       	adc	r11, r3
     872:	c4 1c       	adc	r12, r4
     874:	d5 1c       	adc	r13, r5
     876:	a2 14       	cp	r10, r2
     878:	b3 04       	cpc	r11, r3
     87a:	c4 04       	cpc	r12, r4
     87c:	d5 04       	cpc	r13, r5
     87e:	98 f0       	brcs	.+38     	; 0x8a6 <__stack+0x47>
     880:	a2 16       	cp	r10, r18
     882:	b3 06       	cpc	r11, r19
     884:	c4 06       	cpc	r12, r20
     886:	d5 06       	cpc	r13, r21
     888:	70 f4       	brcc	.+28     	; 0x8a6 <__stack+0x47>
     88a:	61 50       	subi	r22, 0x01	; 1
     88c:	70 40       	sbci	r23, 0x00	; 0
     88e:	80 40       	sbci	r24, 0x00	; 0
     890:	90 40       	sbci	r25, 0x00	; 0
     892:	61 96       	adiw	r28, 0x11	; 17
     894:	6c af       	std	Y+60, r22	; 0x3c
     896:	7d af       	std	Y+61, r23	; 0x3d
     898:	8e af       	std	Y+62, r24	; 0x3e
     89a:	9f af       	std	Y+63, r25	; 0x3f
     89c:	61 97       	sbiw	r28, 0x11	; 17
     89e:	a2 0c       	add	r10, r2
     8a0:	b3 1c       	adc	r11, r3
     8a2:	c4 1c       	adc	r12, r4
     8a4:	d5 1c       	adc	r13, r5
     8a6:	a2 1a       	sub	r10, r18
     8a8:	b3 0a       	sbc	r11, r19
     8aa:	c4 0a       	sbc	r12, r20
     8ac:	d5 0a       	sbc	r13, r21
     8ae:	c6 01       	movw	r24, r12
     8b0:	b5 01       	movw	r22, r10
     8b2:	29 96       	adiw	r28, 0x09	; 9
     8b4:	2c ad       	ldd	r18, Y+60	; 0x3c
     8b6:	3d ad       	ldd	r19, Y+61	; 0x3d
     8b8:	4e ad       	ldd	r20, Y+62	; 0x3e
     8ba:	5f ad       	ldd	r21, Y+63	; 0x3f
     8bc:	29 97       	sbiw	r28, 0x09	; 9
     8be:	0e 94 5f 30 	call	0x60be	; 0x60be <__udivmodsi4>
     8c2:	7b 01       	movw	r14, r22
     8c4:	8c 01       	movw	r16, r24
     8c6:	c6 01       	movw	r24, r12
     8c8:	b5 01       	movw	r22, r10
     8ca:	29 96       	adiw	r28, 0x09	; 9
     8cc:	2c ad       	ldd	r18, Y+60	; 0x3c
     8ce:	3d ad       	ldd	r19, Y+61	; 0x3d
     8d0:	4e ad       	ldd	r20, Y+62	; 0x3e
     8d2:	5f ad       	ldd	r21, Y+63	; 0x3f
     8d4:	29 97       	sbiw	r28, 0x09	; 9
     8d6:	0e 94 5f 30 	call	0x60be	; 0x60be <__udivmodsi4>
     8da:	c9 01       	movw	r24, r18
     8dc:	da 01       	movw	r26, r20
     8de:	5c 01       	movw	r10, r24
     8e0:	6d 01       	movw	r12, r26
     8e2:	c6 01       	movw	r24, r12
     8e4:	b5 01       	movw	r22, r10
     8e6:	2d 96       	adiw	r28, 0x0d	; 13
     8e8:	2c ad       	ldd	r18, Y+60	; 0x3c
     8ea:	3d ad       	ldd	r19, Y+61	; 0x3d
     8ec:	4e ad       	ldd	r20, Y+62	; 0x3e
     8ee:	5f ad       	ldd	r21, Y+63	; 0x3f
     8f0:	2d 97       	sbiw	r28, 0x0d	; 13
     8f2:	0e 94 9c 30 	call	0x6138	; 0x6138 <__mulsi3>
     8f6:	9b 01       	movw	r18, r22
     8f8:	ac 01       	movw	r20, r24
     8fa:	87 01       	movw	r16, r14
     8fc:	ff 24       	eor	r15, r15
     8fe:	ee 24       	eor	r14, r14
     900:	8d a5       	ldd	r24, Y+45	; 0x2d
     902:	9e a5       	ldd	r25, Y+46	; 0x2e
     904:	af a5       	ldd	r26, Y+47	; 0x2f
     906:	b8 a9       	ldd	r27, Y+48	; 0x30
     908:	a0 70       	andi	r26, 0x00	; 0
     90a:	b0 70       	andi	r27, 0x00	; 0
     90c:	e8 2a       	or	r14, r24
     90e:	f9 2a       	or	r15, r25
     910:	0a 2b       	or	r16, r26
     912:	1b 2b       	or	r17, r27
     914:	e2 16       	cp	r14, r18
     916:	f3 06       	cpc	r15, r19
     918:	04 07       	cpc	r16, r20
     91a:	15 07       	cpc	r17, r21
     91c:	c0 f4       	brcc	.+48     	; 0x94e <__stack+0xef>
     91e:	08 94       	sec
     920:	a1 08       	sbc	r10, r1
     922:	b1 08       	sbc	r11, r1
     924:	c1 08       	sbc	r12, r1
     926:	d1 08       	sbc	r13, r1
     928:	e2 0c       	add	r14, r2
     92a:	f3 1c       	adc	r15, r3
     92c:	04 1d       	adc	r16, r4
     92e:	15 1d       	adc	r17, r5
     930:	e2 14       	cp	r14, r2
     932:	f3 04       	cpc	r15, r3
     934:	04 05       	cpc	r16, r4
     936:	15 05       	cpc	r17, r5
     938:	50 f0       	brcs	.+20     	; 0x94e <__stack+0xef>
     93a:	e2 16       	cp	r14, r18
     93c:	f3 06       	cpc	r15, r19
     93e:	04 07       	cpc	r16, r20
     940:	15 07       	cpc	r17, r21
     942:	28 f4       	brcc	.+10     	; 0x94e <__stack+0xef>
     944:	08 94       	sec
     946:	a1 08       	sbc	r10, r1
     948:	b1 08       	sbc	r11, r1
     94a:	c1 08       	sbc	r12, r1
     94c:	d1 08       	sbc	r13, r1
     94e:	61 96       	adiw	r28, 0x11	; 17
     950:	ec ac       	ldd	r14, Y+60	; 0x3c
     952:	fd ac       	ldd	r15, Y+61	; 0x3d
     954:	0e ad       	ldd	r16, Y+62	; 0x3e
     956:	1f ad       	ldd	r17, Y+63	; 0x3f
     958:	61 97       	sbiw	r28, 0x11	; 17
     95a:	d7 01       	movw	r26, r14
     95c:	99 27       	eor	r25, r25
     95e:	88 27       	eor	r24, r24
     960:	96 01       	movw	r18, r12
     962:	85 01       	movw	r16, r10
     964:	08 2b       	or	r16, r24
     966:	19 2b       	or	r17, r25
     968:	2a 2b       	or	r18, r26
     96a:	3b 2b       	or	r19, r27
     96c:	09 ab       	std	Y+49, r16	; 0x31
     96e:	1a ab       	std	Y+50, r17	; 0x32
     970:	2b ab       	std	Y+51, r18	; 0x33
     972:	3c ab       	std	Y+52, r19	; 0x34
     974:	62 c2       	rjmp	.+1220   	; 0xe3a <__stack+0x5db>
     976:	6e 14       	cp	r6, r14
     978:	7f 04       	cpc	r7, r15
     97a:	80 06       	cpc	r8, r16
     97c:	91 06       	cpc	r9, r17
     97e:	08 f4       	brcc	.+2      	; 0x982 <__stack+0x123>
     980:	51 c2       	rjmp	.+1186   	; 0xe24 <__stack+0x5c5>
     982:	20 e0       	ldi	r18, 0x00	; 0
     984:	e2 16       	cp	r14, r18
     986:	20 e0       	ldi	r18, 0x00	; 0
     988:	f2 06       	cpc	r15, r18
     98a:	21 e0       	ldi	r18, 0x01	; 1
     98c:	02 07       	cpc	r16, r18
     98e:	20 e0       	ldi	r18, 0x00	; 0
     990:	12 07       	cpc	r17, r18
     992:	88 f4       	brcc	.+34     	; 0x9b6 <__stack+0x157>
     994:	3f ef       	ldi	r19, 0xFF	; 255
     996:	e3 16       	cp	r14, r19
     998:	f1 04       	cpc	r15, r1
     99a:	01 05       	cpc	r16, r1
     99c:	11 05       	cpc	r17, r1
     99e:	31 f0       	breq	.+12     	; 0x9ac <__stack+0x14d>
     9a0:	28 f0       	brcs	.+10     	; 0x9ac <__stack+0x14d>
     9a2:	48 e0       	ldi	r20, 0x08	; 8
     9a4:	50 e0       	ldi	r21, 0x00	; 0
     9a6:	60 e0       	ldi	r22, 0x00	; 0
     9a8:	70 e0       	ldi	r23, 0x00	; 0
     9aa:	17 c0       	rjmp	.+46     	; 0x9da <__stack+0x17b>
     9ac:	40 e0       	ldi	r20, 0x00	; 0
     9ae:	50 e0       	ldi	r21, 0x00	; 0
     9b0:	60 e0       	ldi	r22, 0x00	; 0
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	12 c0       	rjmp	.+36     	; 0x9da <__stack+0x17b>
     9b6:	40 e0       	ldi	r20, 0x00	; 0
     9b8:	e4 16       	cp	r14, r20
     9ba:	40 e0       	ldi	r20, 0x00	; 0
     9bc:	f4 06       	cpc	r15, r20
     9be:	40 e0       	ldi	r20, 0x00	; 0
     9c0:	04 07       	cpc	r16, r20
     9c2:	41 e0       	ldi	r20, 0x01	; 1
     9c4:	14 07       	cpc	r17, r20
     9c6:	28 f0       	brcs	.+10     	; 0x9d2 <__stack+0x173>
     9c8:	48 e1       	ldi	r20, 0x18	; 24
     9ca:	50 e0       	ldi	r21, 0x00	; 0
     9cc:	60 e0       	ldi	r22, 0x00	; 0
     9ce:	70 e0       	ldi	r23, 0x00	; 0
     9d0:	04 c0       	rjmp	.+8      	; 0x9da <__stack+0x17b>
     9d2:	40 e1       	ldi	r20, 0x10	; 16
     9d4:	50 e0       	ldi	r21, 0x00	; 0
     9d6:	60 e0       	ldi	r22, 0x00	; 0
     9d8:	70 e0       	ldi	r23, 0x00	; 0
     9da:	d8 01       	movw	r26, r16
     9dc:	c7 01       	movw	r24, r14
     9de:	04 2e       	mov	r0, r20
     9e0:	04 c0       	rjmp	.+8      	; 0x9ea <__stack+0x18b>
     9e2:	b6 95       	lsr	r27
     9e4:	a7 95       	ror	r26
     9e6:	97 95       	ror	r25
     9e8:	87 95       	ror	r24
     9ea:	0a 94       	dec	r0
     9ec:	d2 f7       	brpl	.-12     	; 0x9e2 <__stack+0x183>
     9ee:	89 5a       	subi	r24, 0xA9	; 169
     9f0:	9d 4f       	sbci	r25, 0xFD	; 253
     9f2:	dc 01       	movw	r26, r24
     9f4:	2c 91       	ld	r18, X
     9f6:	30 e2       	ldi	r19, 0x20	; 32
     9f8:	a3 2e       	mov	r10, r19
     9fa:	b1 2c       	mov	r11, r1
     9fc:	c1 2c       	mov	r12, r1
     9fe:	d1 2c       	mov	r13, r1
     a00:	d6 01       	movw	r26, r12
     a02:	c5 01       	movw	r24, r10
     a04:	84 1b       	sub	r24, r20
     a06:	95 0b       	sbc	r25, r21
     a08:	a6 0b       	sbc	r26, r22
     a0a:	b7 0b       	sbc	r27, r23
     a0c:	82 1b       	sub	r24, r18
     a0e:	91 09       	sbc	r25, r1
     a10:	a1 09       	sbc	r26, r1
     a12:	b1 09       	sbc	r27, r1
     a14:	00 97       	sbiw	r24, 0x00	; 0
     a16:	a1 05       	cpc	r26, r1
     a18:	b1 05       	cpc	r27, r1
     a1a:	89 f4       	brne	.+34     	; 0xa3e <__stack+0x1df>
     a1c:	e6 14       	cp	r14, r6
     a1e:	f7 04       	cpc	r15, r7
     a20:	08 05       	cpc	r16, r8
     a22:	19 05       	cpc	r17, r9
     a24:	08 f4       	brcc	.+2      	; 0xa28 <__stack+0x1c9>
     a26:	f2 c1       	rjmp	.+996    	; 0xe0c <__stack+0x5ad>
     a28:	6d a4       	ldd	r6, Y+45	; 0x2d
     a2a:	7e a4       	ldd	r7, Y+46	; 0x2e
     a2c:	8f a4       	ldd	r8, Y+47	; 0x2f
     a2e:	98 a8       	ldd	r9, Y+48	; 0x30
     a30:	62 14       	cp	r6, r2
     a32:	73 04       	cpc	r7, r3
     a34:	84 04       	cpc	r8, r4
     a36:	95 04       	cpc	r9, r5
     a38:	08 f0       	brcs	.+2      	; 0xa3c <__stack+0x1dd>
     a3a:	e8 c1       	rjmp	.+976    	; 0xe0c <__stack+0x5ad>
     a3c:	f3 c1       	rjmp	.+998    	; 0xe24 <__stack+0x5c5>
     a3e:	6e 96       	adiw	r28, 0x1e	; 30
     a40:	8f af       	std	Y+63, r24	; 0x3f
     a42:	6e 97       	sbiw	r28, 0x1e	; 30
     a44:	08 2e       	mov	r0, r24
     a46:	04 c0       	rjmp	.+8      	; 0xa50 <__stack+0x1f1>
     a48:	ee 0c       	add	r14, r14
     a4a:	ff 1c       	adc	r15, r15
     a4c:	00 1f       	adc	r16, r16
     a4e:	11 1f       	adc	r17, r17
     a50:	0a 94       	dec	r0
     a52:	d2 f7       	brpl	.-12     	; 0xa48 <__stack+0x1e9>
     a54:	6a 2d       	mov	r22, r10
     a56:	68 1b       	sub	r22, r24
     a58:	d2 01       	movw	r26, r4
     a5a:	c1 01       	movw	r24, r2
     a5c:	06 2e       	mov	r0, r22
     a5e:	04 c0       	rjmp	.+8      	; 0xa68 <__stack+0x209>
     a60:	b6 95       	lsr	r27
     a62:	a7 95       	ror	r26
     a64:	97 95       	ror	r25
     a66:	87 95       	ror	r24
     a68:	0a 94       	dec	r0
     a6a:	d2 f7       	brpl	.-12     	; 0xa60 <__stack+0x201>
     a6c:	5c 01       	movw	r10, r24
     a6e:	6d 01       	movw	r12, r26
     a70:	ae 28       	or	r10, r14
     a72:	bf 28       	or	r11, r15
     a74:	c0 2a       	or	r12, r16
     a76:	d1 2a       	or	r13, r17
     a78:	ad a2       	std	Y+37, r10	; 0x25
     a7a:	be a2       	std	Y+38, r11	; 0x26
     a7c:	cf a2       	std	Y+39, r12	; 0x27
     a7e:	d8 a6       	std	Y+40, r13	; 0x28
     a80:	72 01       	movw	r14, r4
     a82:	61 01       	movw	r12, r2
     a84:	6e 96       	adiw	r28, 0x1e	; 30
     a86:	0f ac       	ldd	r0, Y+63	; 0x3f
     a88:	6e 97       	sbiw	r28, 0x1e	; 30
     a8a:	04 c0       	rjmp	.+8      	; 0xa94 <__stack+0x235>
     a8c:	cc 0c       	add	r12, r12
     a8e:	dd 1c       	adc	r13, r13
     a90:	ee 1c       	adc	r14, r14
     a92:	ff 1c       	adc	r15, r15
     a94:	0a 94       	dec	r0
     a96:	d2 f7       	brpl	.-12     	; 0xa8c <__stack+0x22d>
     a98:	c9 a2       	std	Y+33, r12	; 0x21
     a9a:	da a2       	std	Y+34, r13	; 0x22
     a9c:	eb a2       	std	Y+35, r14	; 0x23
     a9e:	fc a2       	std	Y+36, r15	; 0x24
     aa0:	64 01       	movw	r12, r8
     aa2:	53 01       	movw	r10, r6
     aa4:	06 2e       	mov	r0, r22
     aa6:	04 c0       	rjmp	.+8      	; 0xab0 <__stack+0x251>
     aa8:	d6 94       	lsr	r13
     aaa:	c7 94       	ror	r12
     aac:	b7 94       	ror	r11
     aae:	a7 94       	ror	r10
     ab0:	0a 94       	dec	r0
     ab2:	d2 f7       	brpl	.-12     	; 0xaa8 <__stack+0x249>
     ab4:	d4 01       	movw	r26, r8
     ab6:	c3 01       	movw	r24, r6
     ab8:	6e 96       	adiw	r28, 0x1e	; 30
     aba:	0f ac       	ldd	r0, Y+63	; 0x3f
     abc:	6e 97       	sbiw	r28, 0x1e	; 30
     abe:	04 c0       	rjmp	.+8      	; 0xac8 <__stack+0x269>
     ac0:	88 0f       	add	r24, r24
     ac2:	99 1f       	adc	r25, r25
     ac4:	aa 1f       	adc	r26, r26
     ac6:	bb 1f       	adc	r27, r27
     ac8:	0a 94       	dec	r0
     aca:	d2 f7       	brpl	.-12     	; 0xac0 <__stack+0x261>
     acc:	ed a4       	ldd	r14, Y+45	; 0x2d
     ace:	fe a4       	ldd	r15, Y+46	; 0x2e
     ad0:	0f a5       	ldd	r16, Y+47	; 0x2f
     ad2:	18 a9       	ldd	r17, Y+48	; 0x30
     ad4:	04 c0       	rjmp	.+8      	; 0xade <__stack+0x27f>
     ad6:	16 95       	lsr	r17
     ad8:	07 95       	ror	r16
     ada:	f7 94       	ror	r15
     adc:	e7 94       	ror	r14
     ade:	6a 95       	dec	r22
     ae0:	d2 f7       	brpl	.-12     	; 0xad6 <__stack+0x277>
     ae2:	37 01       	movw	r6, r14
     ae4:	48 01       	movw	r8, r16
     ae6:	68 2a       	or	r6, r24
     ae8:	79 2a       	or	r7, r25
     aea:	8a 2a       	or	r8, r26
     aec:	9b 2a       	or	r9, r27
     aee:	6d 8e       	std	Y+29, r6	; 0x1d
     af0:	7e 8e       	std	Y+30, r7	; 0x1e
     af2:	8f 8e       	std	Y+31, r8	; 0x1f
     af4:	98 a2       	std	Y+32, r9	; 0x20
     af6:	ed a0       	ldd	r14, Y+37	; 0x25
     af8:	fe a0       	ldd	r15, Y+38	; 0x26
     afa:	0f a1       	ldd	r16, Y+39	; 0x27
     afc:	18 a5       	ldd	r17, Y+40	; 0x28
     afe:	38 01       	movw	r6, r16
     b00:	88 24       	eor	r8, r8
     b02:	99 24       	eor	r9, r9
     b04:	98 01       	movw	r18, r16
     b06:	87 01       	movw	r16, r14
     b08:	20 70       	andi	r18, 0x00	; 0
     b0a:	30 70       	andi	r19, 0x00	; 0
     b0c:	65 96       	adiw	r28, 0x15	; 21
     b0e:	0c af       	std	Y+60, r16	; 0x3c
     b10:	1d af       	std	Y+61, r17	; 0x3d
     b12:	2e af       	std	Y+62, r18	; 0x3e
     b14:	3f af       	std	Y+63, r19	; 0x3f
     b16:	65 97       	sbiw	r28, 0x15	; 21
     b18:	c6 01       	movw	r24, r12
     b1a:	b5 01       	movw	r22, r10
     b1c:	a4 01       	movw	r20, r8
     b1e:	93 01       	movw	r18, r6
     b20:	0e 94 5f 30 	call	0x60be	; 0x60be <__udivmodsi4>
     b24:	7b 01       	movw	r14, r22
     b26:	8c 01       	movw	r16, r24
     b28:	c6 01       	movw	r24, r12
     b2a:	b5 01       	movw	r22, r10
     b2c:	a4 01       	movw	r20, r8
     b2e:	93 01       	movw	r18, r6
     b30:	0e 94 5f 30 	call	0x60be	; 0x60be <__udivmodsi4>
     b34:	c9 01       	movw	r24, r18
     b36:	da 01       	movw	r26, r20
     b38:	1c 01       	movw	r2, r24
     b3a:	2d 01       	movw	r4, r26
     b3c:	c2 01       	movw	r24, r4
     b3e:	b1 01       	movw	r22, r2
     b40:	65 96       	adiw	r28, 0x15	; 21
     b42:	2c ad       	ldd	r18, Y+60	; 0x3c
     b44:	3d ad       	ldd	r19, Y+61	; 0x3d
     b46:	4e ad       	ldd	r20, Y+62	; 0x3e
     b48:	5f ad       	ldd	r21, Y+63	; 0x3f
     b4a:	65 97       	sbiw	r28, 0x15	; 21
     b4c:	0e 94 9c 30 	call	0x6138	; 0x6138 <__mulsi3>
     b50:	9b 01       	movw	r18, r22
     b52:	ac 01       	movw	r20, r24
     b54:	87 01       	movw	r16, r14
     b56:	ff 24       	eor	r15, r15
     b58:	ee 24       	eor	r14, r14
     b5a:	ad 8c       	ldd	r10, Y+29	; 0x1d
     b5c:	be 8c       	ldd	r11, Y+30	; 0x1e
     b5e:	cf 8c       	ldd	r12, Y+31	; 0x1f
     b60:	d8 a0       	ldd	r13, Y+32	; 0x20
     b62:	c6 01       	movw	r24, r12
     b64:	aa 27       	eor	r26, r26
     b66:	bb 27       	eor	r27, r27
     b68:	57 01       	movw	r10, r14
     b6a:	68 01       	movw	r12, r16
     b6c:	a8 2a       	or	r10, r24
     b6e:	b9 2a       	or	r11, r25
     b70:	ca 2a       	or	r12, r26
     b72:	db 2a       	or	r13, r27
     b74:	a2 16       	cp	r10, r18
     b76:	b3 06       	cpc	r11, r19
     b78:	c4 06       	cpc	r12, r20
     b7a:	d5 06       	cpc	r13, r21
     b7c:	00 f5       	brcc	.+64     	; 0xbbe <__stack+0x35f>
     b7e:	08 94       	sec
     b80:	21 08       	sbc	r2, r1
     b82:	31 08       	sbc	r3, r1
     b84:	41 08       	sbc	r4, r1
     b86:	51 08       	sbc	r5, r1
     b88:	ed a0       	ldd	r14, Y+37	; 0x25
     b8a:	fe a0       	ldd	r15, Y+38	; 0x26
     b8c:	0f a1       	ldd	r16, Y+39	; 0x27
     b8e:	18 a5       	ldd	r17, Y+40	; 0x28
     b90:	ae 0c       	add	r10, r14
     b92:	bf 1c       	adc	r11, r15
     b94:	c0 1e       	adc	r12, r16
     b96:	d1 1e       	adc	r13, r17
     b98:	ae 14       	cp	r10, r14
     b9a:	bf 04       	cpc	r11, r15
     b9c:	c0 06       	cpc	r12, r16
     b9e:	d1 06       	cpc	r13, r17
     ba0:	70 f0       	brcs	.+28     	; 0xbbe <__stack+0x35f>
     ba2:	a2 16       	cp	r10, r18
     ba4:	b3 06       	cpc	r11, r19
     ba6:	c4 06       	cpc	r12, r20
     ba8:	d5 06       	cpc	r13, r21
     baa:	48 f4       	brcc	.+18     	; 0xbbe <__stack+0x35f>
     bac:	08 94       	sec
     bae:	21 08       	sbc	r2, r1
     bb0:	31 08       	sbc	r3, r1
     bb2:	41 08       	sbc	r4, r1
     bb4:	51 08       	sbc	r5, r1
     bb6:	ae 0c       	add	r10, r14
     bb8:	bf 1c       	adc	r11, r15
     bba:	c0 1e       	adc	r12, r16
     bbc:	d1 1e       	adc	r13, r17
     bbe:	a2 1a       	sub	r10, r18
     bc0:	b3 0a       	sbc	r11, r19
     bc2:	c4 0a       	sbc	r12, r20
     bc4:	d5 0a       	sbc	r13, r21
     bc6:	c6 01       	movw	r24, r12
     bc8:	b5 01       	movw	r22, r10
     bca:	a4 01       	movw	r20, r8
     bcc:	93 01       	movw	r18, r6
     bce:	0e 94 5f 30 	call	0x60be	; 0x60be <__udivmodsi4>
     bd2:	7b 01       	movw	r14, r22
     bd4:	8c 01       	movw	r16, r24
     bd6:	c6 01       	movw	r24, r12
     bd8:	b5 01       	movw	r22, r10
     bda:	a4 01       	movw	r20, r8
     bdc:	93 01       	movw	r18, r6
     bde:	0e 94 5f 30 	call	0x60be	; 0x60be <__udivmodsi4>
     be2:	c9 01       	movw	r24, r18
     be4:	da 01       	movw	r26, r20
     be6:	3c 01       	movw	r6, r24
     be8:	4d 01       	movw	r8, r26
     bea:	c4 01       	movw	r24, r8
     bec:	b3 01       	movw	r22, r6
     bee:	65 96       	adiw	r28, 0x15	; 21
     bf0:	2c ad       	ldd	r18, Y+60	; 0x3c
     bf2:	3d ad       	ldd	r19, Y+61	; 0x3d
     bf4:	4e ad       	ldd	r20, Y+62	; 0x3e
     bf6:	5f ad       	ldd	r21, Y+63	; 0x3f
     bf8:	65 97       	sbiw	r28, 0x15	; 21
     bfa:	0e 94 9c 30 	call	0x6138	; 0x6138 <__mulsi3>
     bfe:	9b 01       	movw	r18, r22
     c00:	ac 01       	movw	r20, r24
     c02:	87 01       	movw	r16, r14
     c04:	ff 24       	eor	r15, r15
     c06:	ee 24       	eor	r14, r14
     c08:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c0a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c0c:	af 8d       	ldd	r26, Y+31	; 0x1f
     c0e:	b8 a1       	ldd	r27, Y+32	; 0x20
     c10:	a0 70       	andi	r26, 0x00	; 0
     c12:	b0 70       	andi	r27, 0x00	; 0
     c14:	57 01       	movw	r10, r14
     c16:	68 01       	movw	r12, r16
     c18:	a8 2a       	or	r10, r24
     c1a:	b9 2a       	or	r11, r25
     c1c:	ca 2a       	or	r12, r26
     c1e:	db 2a       	or	r13, r27
     c20:	a2 16       	cp	r10, r18
     c22:	b3 06       	cpc	r11, r19
     c24:	c4 06       	cpc	r12, r20
     c26:	d5 06       	cpc	r13, r21
     c28:	00 f5       	brcc	.+64     	; 0xc6a <__stack+0x40b>
     c2a:	08 94       	sec
     c2c:	61 08       	sbc	r6, r1
     c2e:	71 08       	sbc	r7, r1
     c30:	81 08       	sbc	r8, r1
     c32:	91 08       	sbc	r9, r1
     c34:	6d a1       	ldd	r22, Y+37	; 0x25
     c36:	7e a1       	ldd	r23, Y+38	; 0x26
     c38:	8f a1       	ldd	r24, Y+39	; 0x27
     c3a:	98 a5       	ldd	r25, Y+40	; 0x28
     c3c:	a6 0e       	add	r10, r22
     c3e:	b7 1e       	adc	r11, r23
     c40:	c8 1e       	adc	r12, r24
     c42:	d9 1e       	adc	r13, r25
     c44:	a6 16       	cp	r10, r22
     c46:	b7 06       	cpc	r11, r23
     c48:	c8 06       	cpc	r12, r24
     c4a:	d9 06       	cpc	r13, r25
     c4c:	70 f0       	brcs	.+28     	; 0xc6a <__stack+0x40b>
     c4e:	a2 16       	cp	r10, r18
     c50:	b3 06       	cpc	r11, r19
     c52:	c4 06       	cpc	r12, r20
     c54:	d5 06       	cpc	r13, r21
     c56:	48 f4       	brcc	.+18     	; 0xc6a <__stack+0x40b>
     c58:	08 94       	sec
     c5a:	61 08       	sbc	r6, r1
     c5c:	71 08       	sbc	r7, r1
     c5e:	81 08       	sbc	r8, r1
     c60:	91 08       	sbc	r9, r1
     c62:	a6 0e       	add	r10, r22
     c64:	b7 1e       	adc	r11, r23
     c66:	c8 1e       	adc	r12, r24
     c68:	d9 1e       	adc	r13, r25
     c6a:	d6 01       	movw	r26, r12
     c6c:	c5 01       	movw	r24, r10
     c6e:	82 1b       	sub	r24, r18
     c70:	93 0b       	sbc	r25, r19
     c72:	a4 0b       	sbc	r26, r20
     c74:	b5 0b       	sbc	r27, r21
     c76:	89 8f       	std	Y+25, r24	; 0x19
     c78:	9a 8f       	std	Y+26, r25	; 0x1a
     c7a:	ab 8f       	std	Y+27, r26	; 0x1b
     c7c:	bc 8f       	std	Y+28, r27	; 0x1c
     c7e:	d1 01       	movw	r26, r2
     c80:	99 27       	eor	r25, r25
     c82:	88 27       	eor	r24, r24
     c84:	64 01       	movw	r12, r8
     c86:	53 01       	movw	r10, r6
     c88:	a8 2a       	or	r10, r24
     c8a:	b9 2a       	or	r11, r25
     c8c:	ca 2a       	or	r12, r26
     c8e:	db 2a       	or	r13, r27
     c90:	a9 aa       	std	Y+49, r10	; 0x31
     c92:	ba aa       	std	Y+50, r11	; 0x32
     c94:	cb aa       	std	Y+51, r12	; 0x33
     c96:	dc aa       	std	Y+52, r13	; 0x34
     c98:	86 01       	movw	r16, r12
     c9a:	75 01       	movw	r14, r10
     c9c:	2f ef       	ldi	r18, 0xFF	; 255
     c9e:	3f ef       	ldi	r19, 0xFF	; 255
     ca0:	40 e0       	ldi	r20, 0x00	; 0
     ca2:	50 e0       	ldi	r21, 0x00	; 0
     ca4:	e2 22       	and	r14, r18
     ca6:	f3 22       	and	r15, r19
     ca8:	04 23       	and	r16, r20
     caa:	15 23       	and	r17, r21
     cac:	a6 01       	movw	r20, r12
     cae:	66 27       	eor	r22, r22
     cb0:	77 27       	eor	r23, r23
     cb2:	6d 96       	adiw	r28, 0x1d	; 29
     cb4:	4c af       	std	Y+60, r20	; 0x3c
     cb6:	5d af       	std	Y+61, r21	; 0x3d
     cb8:	6e af       	std	Y+62, r22	; 0x3e
     cba:	7f af       	std	Y+63, r23	; 0x3f
     cbc:	6d 97       	sbiw	r28, 0x1d	; 29
     cbe:	a9 a0       	ldd	r10, Y+33	; 0x21
     cc0:	ba a0       	ldd	r11, Y+34	; 0x22
     cc2:	cb a0       	ldd	r12, Y+35	; 0x23
     cc4:	dc a0       	ldd	r13, Y+36	; 0x24
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	a6 22       	and	r10, r22
     cd0:	b7 22       	and	r11, r23
     cd2:	c8 22       	and	r12, r24
     cd4:	d9 22       	and	r13, r25
     cd6:	89 a1       	ldd	r24, Y+33	; 0x21
     cd8:	9a a1       	ldd	r25, Y+34	; 0x22
     cda:	ab a1       	ldd	r26, Y+35	; 0x23
     cdc:	bc a1       	ldd	r27, Y+36	; 0x24
     cde:	1d 01       	movw	r2, r26
     ce0:	44 24       	eor	r4, r4
     ce2:	55 24       	eor	r5, r5
     ce4:	c8 01       	movw	r24, r16
     ce6:	b7 01       	movw	r22, r14
     ce8:	a6 01       	movw	r20, r12
     cea:	95 01       	movw	r18, r10
     cec:	0e 94 9c 30 	call	0x6138	; 0x6138 <__mulsi3>
     cf0:	69 96       	adiw	r28, 0x19	; 25
     cf2:	6c af       	std	Y+60, r22	; 0x3c
     cf4:	7d af       	std	Y+61, r23	; 0x3d
     cf6:	8e af       	std	Y+62, r24	; 0x3e
     cf8:	9f af       	std	Y+63, r25	; 0x3f
     cfa:	69 97       	sbiw	r28, 0x19	; 25
     cfc:	c8 01       	movw	r24, r16
     cfe:	b7 01       	movw	r22, r14
     d00:	a2 01       	movw	r20, r4
     d02:	91 01       	movw	r18, r2
     d04:	0e 94 9c 30 	call	0x6138	; 0x6138 <__mulsi3>
     d08:	3b 01       	movw	r6, r22
     d0a:	4c 01       	movw	r8, r24
     d0c:	6d 96       	adiw	r28, 0x1d	; 29
     d0e:	6c ad       	ldd	r22, Y+60	; 0x3c
     d10:	7d ad       	ldd	r23, Y+61	; 0x3d
     d12:	8e ad       	ldd	r24, Y+62	; 0x3e
     d14:	9f ad       	ldd	r25, Y+63	; 0x3f
     d16:	6d 97       	sbiw	r28, 0x1d	; 29
     d18:	a6 01       	movw	r20, r12
     d1a:	95 01       	movw	r18, r10
     d1c:	0e 94 9c 30 	call	0x6138	; 0x6138 <__mulsi3>
     d20:	7b 01       	movw	r14, r22
     d22:	8c 01       	movw	r16, r24
     d24:	6d 96       	adiw	r28, 0x1d	; 29
     d26:	6c ad       	ldd	r22, Y+60	; 0x3c
     d28:	7d ad       	ldd	r23, Y+61	; 0x3d
     d2a:	8e ad       	ldd	r24, Y+62	; 0x3e
     d2c:	9f ad       	ldd	r25, Y+63	; 0x3f
     d2e:	6d 97       	sbiw	r28, 0x1d	; 29
     d30:	a2 01       	movw	r20, r4
     d32:	91 01       	movw	r18, r2
     d34:	0e 94 9c 30 	call	0x6138	; 0x6138 <__mulsi3>
     d38:	5b 01       	movw	r10, r22
     d3a:	6c 01       	movw	r12, r24
     d3c:	a8 01       	movw	r20, r16
     d3e:	97 01       	movw	r18, r14
     d40:	26 0d       	add	r18, r6
     d42:	37 1d       	adc	r19, r7
     d44:	48 1d       	adc	r20, r8
     d46:	59 1d       	adc	r21, r9
     d48:	69 96       	adiw	r28, 0x19	; 25
     d4a:	6c ac       	ldd	r6, Y+60	; 0x3c
     d4c:	7d ac       	ldd	r7, Y+61	; 0x3d
     d4e:	8e ac       	ldd	r8, Y+62	; 0x3e
     d50:	9f ac       	ldd	r9, Y+63	; 0x3f
     d52:	69 97       	sbiw	r28, 0x19	; 25
     d54:	c4 01       	movw	r24, r8
     d56:	aa 27       	eor	r26, r26
     d58:	bb 27       	eor	r27, r27
     d5a:	28 0f       	add	r18, r24
     d5c:	39 1f       	adc	r19, r25
     d5e:	4a 1f       	adc	r20, r26
     d60:	5b 1f       	adc	r21, r27
     d62:	2e 15       	cp	r18, r14
     d64:	3f 05       	cpc	r19, r15
     d66:	40 07       	cpc	r20, r16
     d68:	51 07       	cpc	r21, r17
     d6a:	48 f4       	brcc	.+18     	; 0xd7e <__stack+0x51f>
     d6c:	e1 2c       	mov	r14, r1
     d6e:	f1 2c       	mov	r15, r1
     d70:	61 e0       	ldi	r22, 0x01	; 1
     d72:	06 2f       	mov	r16, r22
     d74:	11 2d       	mov	r17, r1
     d76:	ae 0c       	add	r10, r14
     d78:	bf 1c       	adc	r11, r15
     d7a:	c0 1e       	adc	r12, r16
     d7c:	d1 1e       	adc	r13, r17
     d7e:	ca 01       	movw	r24, r20
     d80:	aa 27       	eor	r26, r26
     d82:	bb 27       	eor	r27, r27
     d84:	bc 01       	movw	r22, r24
     d86:	cd 01       	movw	r24, r26
     d88:	6a 0d       	add	r22, r10
     d8a:	7b 1d       	adc	r23, r11
     d8c:	8c 1d       	adc	r24, r12
     d8e:	9d 1d       	adc	r25, r13
     d90:	69 8c       	ldd	r6, Y+25	; 0x19
     d92:	7a 8c       	ldd	r7, Y+26	; 0x1a
     d94:	8b 8c       	ldd	r8, Y+27	; 0x1b
     d96:	9c 8c       	ldd	r9, Y+28	; 0x1c
     d98:	66 16       	cp	r6, r22
     d9a:	77 06       	cpc	r7, r23
     d9c:	88 06       	cpc	r8, r24
     d9e:	99 06       	cpc	r9, r25
     da0:	40 f1       	brcs	.+80     	; 0xdf2 <__stack+0x593>
     da2:	66 15       	cp	r22, r6
     da4:	77 05       	cpc	r23, r7
     da6:	88 05       	cpc	r24, r8
     da8:	99 05       	cpc	r25, r9
     daa:	09 f0       	breq	.+2      	; 0xdae <__stack+0x54f>
     dac:	43 c0       	rjmp	.+134    	; 0xe34 <__stack+0x5d5>
     dae:	d9 01       	movw	r26, r18
     db0:	99 27       	eor	r25, r25
     db2:	88 27       	eor	r24, r24
     db4:	69 96       	adiw	r28, 0x19	; 25
     db6:	2c ad       	ldd	r18, Y+60	; 0x3c
     db8:	3d ad       	ldd	r19, Y+61	; 0x3d
     dba:	4e ad       	ldd	r20, Y+62	; 0x3e
     dbc:	5f ad       	ldd	r21, Y+63	; 0x3f
     dbe:	69 97       	sbiw	r28, 0x19	; 25
     dc0:	40 70       	andi	r20, 0x00	; 0
     dc2:	50 70       	andi	r21, 0x00	; 0
     dc4:	82 0f       	add	r24, r18
     dc6:	93 1f       	adc	r25, r19
     dc8:	a4 1f       	adc	r26, r20
     dca:	b5 1f       	adc	r27, r21
     dcc:	2d a5       	ldd	r18, Y+45	; 0x2d
     dce:	3e a5       	ldd	r19, Y+46	; 0x2e
     dd0:	4f a5       	ldd	r20, Y+47	; 0x2f
     dd2:	58 a9       	ldd	r21, Y+48	; 0x30
     dd4:	6e 96       	adiw	r28, 0x1e	; 30
     dd6:	0f ac       	ldd	r0, Y+63	; 0x3f
     dd8:	6e 97       	sbiw	r28, 0x1e	; 30
     dda:	04 c0       	rjmp	.+8      	; 0xde4 <__stack+0x585>
     ddc:	22 0f       	add	r18, r18
     dde:	33 1f       	adc	r19, r19
     de0:	44 1f       	adc	r20, r20
     de2:	55 1f       	adc	r21, r21
     de4:	0a 94       	dec	r0
     de6:	d2 f7       	brpl	.-12     	; 0xddc <__stack+0x57d>
     de8:	28 17       	cp	r18, r24
     dea:	39 07       	cpc	r19, r25
     dec:	4a 07       	cpc	r20, r26
     dee:	5b 07       	cpc	r21, r27
     df0:	08 f5       	brcc	.+66     	; 0xe34 <__stack+0x5d5>
     df2:	09 a9       	ldd	r16, Y+49	; 0x31
     df4:	1a a9       	ldd	r17, Y+50	; 0x32
     df6:	2b a9       	ldd	r18, Y+51	; 0x33
     df8:	3c a9       	ldd	r19, Y+52	; 0x34
     dfa:	01 50       	subi	r16, 0x01	; 1
     dfc:	10 40       	sbci	r17, 0x00	; 0
     dfe:	20 40       	sbci	r18, 0x00	; 0
     e00:	30 40       	sbci	r19, 0x00	; 0
     e02:	09 ab       	std	Y+49, r16	; 0x31
     e04:	1a ab       	std	Y+50, r17	; 0x32
     e06:	2b ab       	std	Y+51, r18	; 0x33
     e08:	3c ab       	std	Y+52, r19	; 0x34
     e0a:	14 c0       	rjmp	.+40     	; 0xe34 <__stack+0x5d5>
     e0c:	66 24       	eor	r6, r6
     e0e:	77 24       	eor	r7, r7
     e10:	43 01       	movw	r8, r6
     e12:	21 e0       	ldi	r18, 0x01	; 1
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	40 e0       	ldi	r20, 0x00	; 0
     e18:	50 e0       	ldi	r21, 0x00	; 0
     e1a:	29 ab       	std	Y+49, r18	; 0x31
     e1c:	3a ab       	std	Y+50, r19	; 0x32
     e1e:	4b ab       	std	Y+51, r20	; 0x33
     e20:	5c ab       	std	Y+52, r21	; 0x34
     e22:	0b c0       	rjmp	.+22     	; 0xe3a <__stack+0x5db>
     e24:	66 24       	eor	r6, r6
     e26:	77 24       	eor	r7, r7
     e28:	43 01       	movw	r8, r6
     e2a:	19 aa       	std	Y+49, r1	; 0x31
     e2c:	1a aa       	std	Y+50, r1	; 0x32
     e2e:	1b aa       	std	Y+51, r1	; 0x33
     e30:	1c aa       	std	Y+52, r1	; 0x34
     e32:	03 c0       	rjmp	.+6      	; 0xe3a <__stack+0x5db>
     e34:	66 24       	eor	r6, r6
     e36:	77 24       	eor	r7, r7
     e38:	43 01       	movw	r8, r6
     e3a:	fe 01       	movw	r30, r28
     e3c:	71 96       	adiw	r30, 0x11	; 17
     e3e:	88 e0       	ldi	r24, 0x08	; 8
     e40:	df 01       	movw	r26, r30
     e42:	1d 92       	st	X+, r1
     e44:	8a 95       	dec	r24
     e46:	e9 f7       	brne	.-6      	; 0xe42 <__stack+0x5e3>
     e48:	a9 a8       	ldd	r10, Y+49	; 0x31
     e4a:	ba a8       	ldd	r11, Y+50	; 0x32
     e4c:	cb a8       	ldd	r12, Y+51	; 0x33
     e4e:	dc a8       	ldd	r13, Y+52	; 0x34
     e50:	a9 8a       	std	Y+17, r10	; 0x11
     e52:	ba 8a       	std	Y+18, r11	; 0x12
     e54:	cb 8a       	std	Y+19, r12	; 0x13
     e56:	dc 8a       	std	Y+20, r13	; 0x14
     e58:	6d 8a       	std	Y+21, r6	; 0x15
     e5a:	7e 8a       	std	Y+22, r7	; 0x16
     e5c:	8f 8a       	std	Y+23, r8	; 0x17
     e5e:	98 8e       	std	Y+24, r9	; 0x18
     e60:	29 a9       	ldd	r18, Y+49	; 0x31
     e62:	3a 89       	ldd	r19, Y+18	; 0x12
     e64:	4b 89       	ldd	r20, Y+19	; 0x13
     e66:	5c 89       	ldd	r21, Y+20	; 0x14
     e68:	66 2d       	mov	r22, r6
     e6a:	7e 89       	ldd	r23, Y+22	; 0x16
     e6c:	8f 89       	ldd	r24, Y+23	; 0x17
     e6e:	98 8d       	ldd	r25, Y+24	; 0x18
     e70:	c2 5a       	subi	r28, 0xA2	; 162
     e72:	df 4f       	sbci	r29, 0xFF	; 255
     e74:	e2 e1       	ldi	r30, 0x12	; 18
     e76:	0c 94 d7 30 	jmp	0x61ae	; 0x61ae <__epilogue_restores__>

00000e7a <__umoddi3>:
     e7a:	ab e5       	ldi	r26, 0x5B	; 91
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	e3 e4       	ldi	r30, 0x43	; 67
     e80:	f7 e0       	ldi	r31, 0x07	; 7
     e82:	0c 94 bb 30 	jmp	0x6176	; 0x6176 <__prologue_saves__>
     e86:	a8 e0       	ldi	r26, 0x08	; 8
     e88:	4e 01       	movw	r8, r28
     e8a:	08 94       	sec
     e8c:	81 1c       	adc	r8, r1
     e8e:	91 1c       	adc	r9, r1
     e90:	f4 01       	movw	r30, r8
     e92:	6a 2e       	mov	r6, r26
     e94:	11 92       	st	Z+, r1
     e96:	6a 94       	dec	r6
     e98:	e9 f7       	brne	.-6      	; 0xe94 <__umoddi3+0x1a>
     e9a:	29 83       	std	Y+1, r18	; 0x01
     e9c:	3a 83       	std	Y+2, r19	; 0x02
     e9e:	4b 83       	std	Y+3, r20	; 0x03
     ea0:	5c 83       	std	Y+4, r21	; 0x04
     ea2:	6d 83       	std	Y+5, r22	; 0x05
     ea4:	7e 83       	std	Y+6, r23	; 0x06
     ea6:	8f 83       	std	Y+7, r24	; 0x07
     ea8:	98 87       	std	Y+8, r25	; 0x08
     eaa:	ce 01       	movw	r24, r28
     eac:	09 96       	adiw	r24, 0x09	; 9
     eae:	fc 01       	movw	r30, r24
     eb0:	11 92       	st	Z+, r1
     eb2:	aa 95       	dec	r26
     eb4:	e9 f7       	brne	.-6      	; 0xeb0 <__umoddi3+0x36>
     eb6:	a9 86       	std	Y+9, r10	; 0x09
     eb8:	ba 86       	std	Y+10, r11	; 0x0a
     eba:	cb 86       	std	Y+11, r12	; 0x0b
     ebc:	dc 86       	std	Y+12, r13	; 0x0c
     ebe:	ed 86       	std	Y+13, r14	; 0x0d
     ec0:	fe 86       	std	Y+14, r15	; 0x0e
     ec2:	0f 87       	std	Y+15, r16	; 0x0f
     ec4:	18 8b       	std	Y+16, r17	; 0x10
     ec6:	29 84       	ldd	r2, Y+9	; 0x09
     ec8:	3a 84       	ldd	r3, Y+10	; 0x0a
     eca:	4b 84       	ldd	r4, Y+11	; 0x0b
     ecc:	5c 84       	ldd	r5, Y+12	; 0x0c
     ece:	ad 84       	ldd	r10, Y+13	; 0x0d
     ed0:	be 84       	ldd	r11, Y+14	; 0x0e
     ed2:	cf 84       	ldd	r12, Y+15	; 0x0f
     ed4:	d8 88       	ldd	r13, Y+16	; 0x10
     ed6:	29 81       	ldd	r18, Y+1	; 0x01
     ed8:	3a 81       	ldd	r19, Y+2	; 0x02
     eda:	4b 81       	ldd	r20, Y+3	; 0x03
     edc:	5c 81       	ldd	r21, Y+4	; 0x04
     ede:	69 96       	adiw	r28, 0x19	; 25
     ee0:	2f af       	std	Y+63, r18	; 0x3f
     ee2:	69 97       	sbiw	r28, 0x19	; 25
     ee4:	6a 96       	adiw	r28, 0x1a	; 26
     ee6:	3f af       	std	Y+63, r19	; 0x3f
     ee8:	6a 97       	sbiw	r28, 0x1a	; 26
     eea:	6b 96       	adiw	r28, 0x1b	; 27
     eec:	4f af       	std	Y+63, r20	; 0x3f
     eee:	6b 97       	sbiw	r28, 0x1b	; 27
     ef0:	6c 96       	adiw	r28, 0x1c	; 28
     ef2:	5f af       	std	Y+63, r21	; 0x3f
     ef4:	6c 97       	sbiw	r28, 0x1c	; 28
     ef6:	6c 96       	adiw	r28, 0x1c	; 28
     ef8:	6c ac       	ldd	r6, Y+60	; 0x3c
     efa:	7d ac       	ldd	r7, Y+61	; 0x3d
     efc:	8e ac       	ldd	r8, Y+62	; 0x3e
     efe:	9f ac       	ldd	r9, Y+63	; 0x3f
     f00:	6c 97       	sbiw	r28, 0x1c	; 28
     f02:	69 aa       	std	Y+49, r6	; 0x31
     f04:	7a aa       	std	Y+50, r7	; 0x32
     f06:	8b aa       	std	Y+51, r8	; 0x33
     f08:	9c aa       	std	Y+52, r9	; 0x34
     f0a:	6d 81       	ldd	r22, Y+5	; 0x05
     f0c:	7e 81       	ldd	r23, Y+6	; 0x06
     f0e:	8f 81       	ldd	r24, Y+7	; 0x07
     f10:	98 85       	ldd	r25, Y+8	; 0x08
     f12:	3b 01       	movw	r6, r22
     f14:	4c 01       	movw	r8, r24
     f16:	6d aa       	std	Y+53, r6	; 0x35
     f18:	7e aa       	std	Y+54, r7	; 0x36
     f1a:	8f aa       	std	Y+55, r8	; 0x37
     f1c:	98 ae       	std	Y+56, r9	; 0x38
     f1e:	a1 14       	cp	r10, r1
     f20:	b1 04       	cpc	r11, r1
     f22:	c1 04       	cpc	r12, r1
     f24:	d1 04       	cpc	r13, r1
     f26:	09 f0       	breq	.+2      	; 0xf2a <__umoddi3+0xb0>
     f28:	04 c3       	rjmp	.+1544   	; 0x1532 <__umoddi3+0x6b8>
     f2a:	62 14       	cp	r6, r2
     f2c:	73 04       	cpc	r7, r3
     f2e:	84 04       	cpc	r8, r4
     f30:	95 04       	cpc	r9, r5
     f32:	08 f0       	brcs	.+2      	; 0xf36 <__umoddi3+0xbc>
     f34:	00 c1       	rjmp	.+512    	; 0x1136 <__umoddi3+0x2bc>
     f36:	00 e0       	ldi	r16, 0x00	; 0
     f38:	20 16       	cp	r2, r16
     f3a:	00 e0       	ldi	r16, 0x00	; 0
     f3c:	30 06       	cpc	r3, r16
     f3e:	01 e0       	ldi	r16, 0x01	; 1
     f40:	40 06       	cpc	r4, r16
     f42:	00 e0       	ldi	r16, 0x00	; 0
     f44:	50 06       	cpc	r5, r16
     f46:	88 f4       	brcc	.+34     	; 0xf6a <__umoddi3+0xf0>
     f48:	1f ef       	ldi	r17, 0xFF	; 255
     f4a:	21 16       	cp	r2, r17
     f4c:	31 04       	cpc	r3, r1
     f4e:	41 04       	cpc	r4, r1
     f50:	51 04       	cpc	r5, r1
     f52:	39 f0       	breq	.+14     	; 0xf62 <__umoddi3+0xe8>
     f54:	30 f0       	brcs	.+12     	; 0xf62 <__umoddi3+0xe8>
     f56:	88 e0       	ldi	r24, 0x08	; 8
     f58:	e8 2e       	mov	r14, r24
     f5a:	f1 2c       	mov	r15, r1
     f5c:	01 2d       	mov	r16, r1
     f5e:	11 2d       	mov	r17, r1
     f60:	18 c0       	rjmp	.+48     	; 0xf92 <__umoddi3+0x118>
     f62:	ee 24       	eor	r14, r14
     f64:	ff 24       	eor	r15, r15
     f66:	87 01       	movw	r16, r14
     f68:	14 c0       	rjmp	.+40     	; 0xf92 <__umoddi3+0x118>
     f6a:	40 e0       	ldi	r20, 0x00	; 0
     f6c:	24 16       	cp	r2, r20
     f6e:	40 e0       	ldi	r20, 0x00	; 0
     f70:	34 06       	cpc	r3, r20
     f72:	40 e0       	ldi	r20, 0x00	; 0
     f74:	44 06       	cpc	r4, r20
     f76:	41 e0       	ldi	r20, 0x01	; 1
     f78:	54 06       	cpc	r5, r20
     f7a:	30 f0       	brcs	.+12     	; 0xf88 <__umoddi3+0x10e>
     f7c:	b8 e1       	ldi	r27, 0x18	; 24
     f7e:	eb 2e       	mov	r14, r27
     f80:	f1 2c       	mov	r15, r1
     f82:	01 2d       	mov	r16, r1
     f84:	11 2d       	mov	r17, r1
     f86:	05 c0       	rjmp	.+10     	; 0xf92 <__umoddi3+0x118>
     f88:	a0 e1       	ldi	r26, 0x10	; 16
     f8a:	ea 2e       	mov	r14, r26
     f8c:	f1 2c       	mov	r15, r1
     f8e:	01 2d       	mov	r16, r1
     f90:	11 2d       	mov	r17, r1
     f92:	d2 01       	movw	r26, r4
     f94:	c1 01       	movw	r24, r2
     f96:	0e 2c       	mov	r0, r14
     f98:	04 c0       	rjmp	.+8      	; 0xfa2 <__umoddi3+0x128>
     f9a:	b6 95       	lsr	r27
     f9c:	a7 95       	ror	r26
     f9e:	97 95       	ror	r25
     fa0:	87 95       	ror	r24
     fa2:	0a 94       	dec	r0
     fa4:	d2 f7       	brpl	.-12     	; 0xf9a <__umoddi3+0x120>
     fa6:	89 5a       	subi	r24, 0xA9	; 169
     fa8:	9d 4f       	sbci	r25, 0xFD	; 253
     faa:	dc 01       	movw	r26, r24
     fac:	2c 91       	ld	r18, X
     fae:	80 e2       	ldi	r24, 0x20	; 32
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	a0 e0       	ldi	r26, 0x00	; 0
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	8e 19       	sub	r24, r14
     fb8:	9f 09       	sbc	r25, r15
     fba:	a0 0b       	sbc	r26, r16
     fbc:	b1 0b       	sbc	r27, r17
     fbe:	5c 01       	movw	r10, r24
     fc0:	6d 01       	movw	r12, r26
     fc2:	a2 1a       	sub	r10, r18
     fc4:	b1 08       	sbc	r11, r1
     fc6:	c1 08       	sbc	r12, r1
     fc8:	d1 08       	sbc	r13, r1
     fca:	a9 ae       	std	Y+57, r10	; 0x39
     fcc:	ba ae       	std	Y+58, r11	; 0x3a
     fce:	cb ae       	std	Y+59, r12	; 0x3b
     fd0:	dc ae       	std	Y+60, r13	; 0x3c
     fd2:	a1 14       	cp	r10, r1
     fd4:	b1 04       	cpc	r11, r1
     fd6:	c1 04       	cpc	r12, r1
     fd8:	d1 04       	cpc	r13, r1
     fda:	09 f4       	brne	.+2      	; 0xfde <__umoddi3+0x164>
     fdc:	3f c0       	rjmp	.+126    	; 0x105c <__umoddi3+0x1e2>
     fde:	69 ad       	ldd	r22, Y+57	; 0x39
     fe0:	06 2e       	mov	r0, r22
     fe2:	04 c0       	rjmp	.+8      	; 0xfec <__umoddi3+0x172>
     fe4:	22 0c       	add	r2, r2
     fe6:	33 1c       	adc	r3, r3
     fe8:	44 1c       	adc	r4, r4
     fea:	55 1c       	adc	r5, r5
     fec:	0a 94       	dec	r0
     fee:	d2 f7       	brpl	.-12     	; 0xfe4 <__umoddi3+0x16a>
     ff0:	a4 01       	movw	r20, r8
     ff2:	93 01       	movw	r18, r6
     ff4:	06 2e       	mov	r0, r22
     ff6:	04 c0       	rjmp	.+8      	; 0x1000 <__umoddi3+0x186>
     ff8:	22 0f       	add	r18, r18
     ffa:	33 1f       	adc	r19, r19
     ffc:	44 1f       	adc	r20, r20
     ffe:	55 1f       	adc	r21, r21
    1000:	0a 94       	dec	r0
    1002:	d2 f7       	brpl	.-12     	; 0xff8 <__umoddi3+0x17e>
    1004:	80 e2       	ldi	r24, 0x20	; 32
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	8a 19       	sub	r24, r10
    100a:	9b 09       	sbc	r25, r11
    100c:	6c 96       	adiw	r28, 0x1c	; 28
    100e:	cc ac       	ldd	r12, Y+60	; 0x3c
    1010:	dd ac       	ldd	r13, Y+61	; 0x3d
    1012:	ee ac       	ldd	r14, Y+62	; 0x3e
    1014:	ff ac       	ldd	r15, Y+63	; 0x3f
    1016:	6c 97       	sbiw	r28, 0x1c	; 28
    1018:	04 c0       	rjmp	.+8      	; 0x1022 <__umoddi3+0x1a8>
    101a:	f6 94       	lsr	r15
    101c:	e7 94       	ror	r14
    101e:	d7 94       	ror	r13
    1020:	c7 94       	ror	r12
    1022:	8a 95       	dec	r24
    1024:	d2 f7       	brpl	.-12     	; 0x101a <__umoddi3+0x1a0>
    1026:	87 01       	movw	r16, r14
    1028:	76 01       	movw	r14, r12
    102a:	e2 2a       	or	r14, r18
    102c:	f3 2a       	or	r15, r19
    102e:	04 2b       	or	r16, r20
    1030:	15 2b       	or	r17, r21
    1032:	ed aa       	std	Y+53, r14	; 0x35
    1034:	fe aa       	std	Y+54, r15	; 0x36
    1036:	0f ab       	std	Y+55, r16	; 0x37
    1038:	18 af       	std	Y+56, r17	; 0x38
    103a:	6c 96       	adiw	r28, 0x1c	; 28
    103c:	8c ad       	ldd	r24, Y+60	; 0x3c
    103e:	9d ad       	ldd	r25, Y+61	; 0x3d
    1040:	ae ad       	ldd	r26, Y+62	; 0x3e
    1042:	bf ad       	ldd	r27, Y+63	; 0x3f
    1044:	6c 97       	sbiw	r28, 0x1c	; 28
    1046:	04 c0       	rjmp	.+8      	; 0x1050 <__umoddi3+0x1d6>
    1048:	88 0f       	add	r24, r24
    104a:	99 1f       	adc	r25, r25
    104c:	aa 1f       	adc	r26, r26
    104e:	bb 1f       	adc	r27, r27
    1050:	6a 95       	dec	r22
    1052:	d2 f7       	brpl	.-12     	; 0x1048 <__umoddi3+0x1ce>
    1054:	89 ab       	std	Y+49, r24	; 0x31
    1056:	9a ab       	std	Y+50, r25	; 0x32
    1058:	ab ab       	std	Y+51, r26	; 0x33
    105a:	bc ab       	std	Y+52, r27	; 0x34
    105c:	32 01       	movw	r6, r4
    105e:	88 24       	eor	r8, r8
    1060:	99 24       	eor	r9, r9
    1062:	b2 01       	movw	r22, r4
    1064:	a1 01       	movw	r20, r2
    1066:	60 70       	andi	r22, 0x00	; 0
    1068:	70 70       	andi	r23, 0x00	; 0
    106a:	21 96       	adiw	r28, 0x01	; 1
    106c:	4c af       	std	Y+60, r20	; 0x3c
    106e:	5d af       	std	Y+61, r21	; 0x3d
    1070:	6e af       	std	Y+62, r22	; 0x3e
    1072:	7f af       	std	Y+63, r23	; 0x3f
    1074:	21 97       	sbiw	r28, 0x01	; 1
    1076:	6d a9       	ldd	r22, Y+53	; 0x35
    1078:	7e a9       	ldd	r23, Y+54	; 0x36
    107a:	8f a9       	ldd	r24, Y+55	; 0x37
    107c:	98 ad       	ldd	r25, Y+56	; 0x38
    107e:	a4 01       	movw	r20, r8
    1080:	93 01       	movw	r18, r6
    1082:	0e 94 5f 30 	call	0x60be	; 0x60be <__udivmodsi4>
    1086:	7b 01       	movw	r14, r22
    1088:	8c 01       	movw	r16, r24
    108a:	6d a9       	ldd	r22, Y+53	; 0x35
    108c:	7e a9       	ldd	r23, Y+54	; 0x36
    108e:	8f a9       	ldd	r24, Y+55	; 0x37
    1090:	98 ad       	ldd	r25, Y+56	; 0x38
    1092:	a4 01       	movw	r20, r8
    1094:	93 01       	movw	r18, r6
    1096:	0e 94 5f 30 	call	0x60be	; 0x60be <__udivmodsi4>
    109a:	ca 01       	movw	r24, r20
    109c:	b9 01       	movw	r22, r18
    109e:	21 96       	adiw	r28, 0x01	; 1
    10a0:	2c ad       	ldd	r18, Y+60	; 0x3c
    10a2:	3d ad       	ldd	r19, Y+61	; 0x3d
    10a4:	4e ad       	ldd	r20, Y+62	; 0x3e
    10a6:	5f ad       	ldd	r21, Y+63	; 0x3f
    10a8:	21 97       	sbiw	r28, 0x01	; 1
    10aa:	0e 94 9c 30 	call	0x6138	; 0x6138 <__mulsi3>
    10ae:	9b 01       	movw	r18, r22
    10b0:	ac 01       	movw	r20, r24
    10b2:	87 01       	movw	r16, r14
    10b4:	ff 24       	eor	r15, r15
    10b6:	ee 24       	eor	r14, r14
    10b8:	a9 a8       	ldd	r10, Y+49	; 0x31
    10ba:	ba a8       	ldd	r11, Y+50	; 0x32
    10bc:	cb a8       	ldd	r12, Y+51	; 0x33
    10be:	dc a8       	ldd	r13, Y+52	; 0x34
    10c0:	c6 01       	movw	r24, r12
    10c2:	aa 27       	eor	r26, r26
    10c4:	bb 27       	eor	r27, r27
    10c6:	57 01       	movw	r10, r14
    10c8:	68 01       	movw	r12, r16
    10ca:	a8 2a       	or	r10, r24
    10cc:	b9 2a       	or	r11, r25
    10ce:	ca 2a       	or	r12, r26
    10d0:	db 2a       	or	r13, r27
    10d2:	a2 16       	cp	r10, r18
    10d4:	b3 06       	cpc	r11, r19
    10d6:	c4 06       	cpc	r12, r20
    10d8:	d5 06       	cpc	r13, r21
    10da:	90 f4       	brcc	.+36     	; 0x1100 <__umoddi3+0x286>
    10dc:	a2 0c       	add	r10, r2
    10de:	b3 1c       	adc	r11, r3
    10e0:	c4 1c       	adc	r12, r4
    10e2:	d5 1c       	adc	r13, r5
    10e4:	a2 14       	cp	r10, r2
    10e6:	b3 04       	cpc	r11, r3
    10e8:	c4 04       	cpc	r12, r4
    10ea:	d5 04       	cpc	r13, r5
    10ec:	48 f0       	brcs	.+18     	; 0x1100 <__umoddi3+0x286>
    10ee:	a2 16       	cp	r10, r18
    10f0:	b3 06       	cpc	r11, r19
    10f2:	c4 06       	cpc	r12, r20
    10f4:	d5 06       	cpc	r13, r21
    10f6:	20 f4       	brcc	.+8      	; 0x1100 <__umoddi3+0x286>
    10f8:	a2 0c       	add	r10, r2
    10fa:	b3 1c       	adc	r11, r3
    10fc:	c4 1c       	adc	r12, r4
    10fe:	d5 1c       	adc	r13, r5
    1100:	a2 1a       	sub	r10, r18
    1102:	b3 0a       	sbc	r11, r19
    1104:	c4 0a       	sbc	r12, r20
    1106:	d5 0a       	sbc	r13, r21
    1108:	c6 01       	movw	r24, r12
    110a:	b5 01       	movw	r22, r10
    110c:	a4 01       	movw	r20, r8
    110e:	93 01       	movw	r18, r6
    1110:	0e 94 5f 30 	call	0x60be	; 0x60be <__udivmodsi4>
    1114:	7b 01       	movw	r14, r22
    1116:	8c 01       	movw	r16, r24
    1118:	c6 01       	movw	r24, r12
    111a:	b5 01       	movw	r22, r10
    111c:	a4 01       	movw	r20, r8
    111e:	93 01       	movw	r18, r6
    1120:	0e 94 5f 30 	call	0x60be	; 0x60be <__udivmodsi4>
    1124:	ca 01       	movw	r24, r20
    1126:	b9 01       	movw	r22, r18
    1128:	21 96       	adiw	r28, 0x01	; 1
    112a:	2c ad       	ldd	r18, Y+60	; 0x3c
    112c:	3d ad       	ldd	r19, Y+61	; 0x3d
    112e:	4e ad       	ldd	r20, Y+62	; 0x3e
    1130:	5f ad       	ldd	r21, Y+63	; 0x3f
    1132:	21 97       	sbiw	r28, 0x01	; 1
    1134:	ba c1       	rjmp	.+884    	; 0x14aa <__umoddi3+0x630>
    1136:	21 14       	cp	r2, r1
    1138:	31 04       	cpc	r3, r1
    113a:	41 04       	cpc	r4, r1
    113c:	51 04       	cpc	r5, r1
    113e:	71 f4       	brne	.+28     	; 0x115c <__umoddi3+0x2e2>
    1140:	61 e0       	ldi	r22, 0x01	; 1
    1142:	70 e0       	ldi	r23, 0x00	; 0
    1144:	80 e0       	ldi	r24, 0x00	; 0
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	20 e0       	ldi	r18, 0x00	; 0
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	40 e0       	ldi	r20, 0x00	; 0
    114e:	50 e0       	ldi	r21, 0x00	; 0
    1150:	0e 94 5f 30 	call	0x60be	; 0x60be <__udivmodsi4>
    1154:	c9 01       	movw	r24, r18
    1156:	da 01       	movw	r26, r20
    1158:	1c 01       	movw	r2, r24
    115a:	2d 01       	movw	r4, r26
    115c:	00 e0       	ldi	r16, 0x00	; 0
    115e:	20 16       	cp	r2, r16
    1160:	00 e0       	ldi	r16, 0x00	; 0
    1162:	30 06       	cpc	r3, r16
    1164:	01 e0       	ldi	r16, 0x01	; 1
    1166:	40 06       	cpc	r4, r16
    1168:	00 e0       	ldi	r16, 0x00	; 0
    116a:	50 06       	cpc	r5, r16
    116c:	88 f4       	brcc	.+34     	; 0x1190 <__umoddi3+0x316>
    116e:	1f ef       	ldi	r17, 0xFF	; 255
    1170:	21 16       	cp	r2, r17
    1172:	31 04       	cpc	r3, r1
    1174:	41 04       	cpc	r4, r1
    1176:	51 04       	cpc	r5, r1
    1178:	39 f0       	breq	.+14     	; 0x1188 <__umoddi3+0x30e>
    117a:	30 f0       	brcs	.+12     	; 0x1188 <__umoddi3+0x30e>
    117c:	68 e0       	ldi	r22, 0x08	; 8
    117e:	e6 2e       	mov	r14, r22
    1180:	f1 2c       	mov	r15, r1
    1182:	01 2d       	mov	r16, r1
    1184:	11 2d       	mov	r17, r1
    1186:	18 c0       	rjmp	.+48     	; 0x11b8 <__umoddi3+0x33e>
    1188:	ee 24       	eor	r14, r14
    118a:	ff 24       	eor	r15, r15
    118c:	87 01       	movw	r16, r14
    118e:	14 c0       	rjmp	.+40     	; 0x11b8 <__umoddi3+0x33e>
    1190:	40 e0       	ldi	r20, 0x00	; 0
    1192:	24 16       	cp	r2, r20
    1194:	40 e0       	ldi	r20, 0x00	; 0
    1196:	34 06       	cpc	r3, r20
    1198:	40 e0       	ldi	r20, 0x00	; 0
    119a:	44 06       	cpc	r4, r20
    119c:	41 e0       	ldi	r20, 0x01	; 1
    119e:	54 06       	cpc	r5, r20
    11a0:	30 f0       	brcs	.+12     	; 0x11ae <__umoddi3+0x334>
    11a2:	58 e1       	ldi	r21, 0x18	; 24
    11a4:	e5 2e       	mov	r14, r21
    11a6:	f1 2c       	mov	r15, r1
    11a8:	01 2d       	mov	r16, r1
    11aa:	11 2d       	mov	r17, r1
    11ac:	05 c0       	rjmp	.+10     	; 0x11b8 <__umoddi3+0x33e>
    11ae:	40 e1       	ldi	r20, 0x10	; 16
    11b0:	e4 2e       	mov	r14, r20
    11b2:	f1 2c       	mov	r15, r1
    11b4:	01 2d       	mov	r16, r1
    11b6:	11 2d       	mov	r17, r1
    11b8:	d2 01       	movw	r26, r4
    11ba:	c1 01       	movw	r24, r2
    11bc:	0e 2c       	mov	r0, r14
    11be:	04 c0       	rjmp	.+8      	; 0x11c8 <__umoddi3+0x34e>
    11c0:	b6 95       	lsr	r27
    11c2:	a7 95       	ror	r26
    11c4:	97 95       	ror	r25
    11c6:	87 95       	ror	r24
    11c8:	0a 94       	dec	r0
    11ca:	d2 f7       	brpl	.-12     	; 0x11c0 <__umoddi3+0x346>
    11cc:	89 5a       	subi	r24, 0xA9	; 169
    11ce:	9d 4f       	sbci	r25, 0xFD	; 253
    11d0:	dc 01       	movw	r26, r24
    11d2:	2c 91       	ld	r18, X
    11d4:	30 e2       	ldi	r19, 0x20	; 32
    11d6:	a3 2e       	mov	r10, r19
    11d8:	b1 2c       	mov	r11, r1
    11da:	c1 2c       	mov	r12, r1
    11dc:	d1 2c       	mov	r13, r1
    11de:	d6 01       	movw	r26, r12
    11e0:	c5 01       	movw	r24, r10
    11e2:	8e 19       	sub	r24, r14
    11e4:	9f 09       	sbc	r25, r15
    11e6:	a0 0b       	sbc	r26, r16
    11e8:	b1 0b       	sbc	r27, r17
    11ea:	7c 01       	movw	r14, r24
    11ec:	8d 01       	movw	r16, r26
    11ee:	e2 1a       	sub	r14, r18
    11f0:	f1 08       	sbc	r15, r1
    11f2:	01 09       	sbc	r16, r1
    11f4:	11 09       	sbc	r17, r1
    11f6:	e9 ae       	std	Y+57, r14	; 0x39
    11f8:	fa ae       	std	Y+58, r15	; 0x3a
    11fa:	0b af       	std	Y+59, r16	; 0x3b
    11fc:	1c af       	std	Y+60, r17	; 0x3c
    11fe:	e1 14       	cp	r14, r1
    1200:	f1 04       	cpc	r15, r1
    1202:	01 05       	cpc	r16, r1
    1204:	11 05       	cpc	r17, r1
    1206:	39 f4       	brne	.+14     	; 0x1216 <__umoddi3+0x39c>
    1208:	64 01       	movw	r12, r8
    120a:	53 01       	movw	r10, r6
    120c:	a2 18       	sub	r10, r2
    120e:	b3 08       	sbc	r11, r3
    1210:	c4 08       	sbc	r12, r4
    1212:	d5 08       	sbc	r13, r5
    1214:	e2 c0       	rjmp	.+452    	; 0x13da <__umoddi3+0x560>
    1216:	f9 ac       	ldd	r15, Y+57	; 0x39
    1218:	68 96       	adiw	r28, 0x18	; 24
    121a:	ff ae       	std	Y+63, r15	; 0x3f
    121c:	68 97       	sbiw	r28, 0x18	; 24
    121e:	0f 2c       	mov	r0, r15
    1220:	04 c0       	rjmp	.+8      	; 0x122a <__umoddi3+0x3b0>
    1222:	22 0c       	add	r2, r2
    1224:	33 1c       	adc	r3, r3
    1226:	44 1c       	adc	r4, r4
    1228:	55 1c       	adc	r5, r5
    122a:	0a 94       	dec	r0
    122c:	d2 f7       	brpl	.-12     	; 0x1222 <__umoddi3+0x3a8>
    122e:	8a 2d       	mov	r24, r10
    1230:	8f 19       	sub	r24, r15
    1232:	64 01       	movw	r12, r8
    1234:	53 01       	movw	r10, r6
    1236:	08 2e       	mov	r0, r24
    1238:	04 c0       	rjmp	.+8      	; 0x1242 <__umoddi3+0x3c8>
    123a:	d6 94       	lsr	r13
    123c:	c7 94       	ror	r12
    123e:	b7 94       	ror	r11
    1240:	a7 94       	ror	r10
    1242:	0a 94       	dec	r0
    1244:	d2 f7       	brpl	.-12     	; 0x123a <__umoddi3+0x3c0>
    1246:	a4 01       	movw	r20, r8
    1248:	93 01       	movw	r18, r6
    124a:	04 c0       	rjmp	.+8      	; 0x1254 <__umoddi3+0x3da>
    124c:	22 0f       	add	r18, r18
    124e:	33 1f       	adc	r19, r19
    1250:	44 1f       	adc	r20, r20
    1252:	55 1f       	adc	r21, r21
    1254:	fa 94       	dec	r15
    1256:	d2 f7       	brpl	.-12     	; 0x124c <__umoddi3+0x3d2>
    1258:	6c 96       	adiw	r28, 0x1c	; 28
    125a:	6c ac       	ldd	r6, Y+60	; 0x3c
    125c:	7d ac       	ldd	r7, Y+61	; 0x3d
    125e:	8e ac       	ldd	r8, Y+62	; 0x3e
    1260:	9f ac       	ldd	r9, Y+63	; 0x3f
    1262:	6c 97       	sbiw	r28, 0x1c	; 28
    1264:	04 c0       	rjmp	.+8      	; 0x126e <__umoddi3+0x3f4>
    1266:	96 94       	lsr	r9
    1268:	87 94       	ror	r8
    126a:	77 94       	ror	r7
    126c:	67 94       	ror	r6
    126e:	8a 95       	dec	r24
    1270:	d2 f7       	brpl	.-12     	; 0x1266 <__umoddi3+0x3ec>
    1272:	84 01       	movw	r16, r8
    1274:	73 01       	movw	r14, r6
    1276:	e2 2a       	or	r14, r18
    1278:	f3 2a       	or	r15, r19
    127a:	04 2b       	or	r16, r20
    127c:	15 2b       	or	r17, r21
    127e:	ed a6       	std	Y+45, r14	; 0x2d
    1280:	fe a6       	std	Y+46, r15	; 0x2e
    1282:	0f a7       	std	Y+47, r16	; 0x2f
    1284:	18 ab       	std	Y+48, r17	; 0x30
    1286:	32 01       	movw	r6, r4
    1288:	88 24       	eor	r8, r8
    128a:	99 24       	eor	r9, r9
    128c:	b2 01       	movw	r22, r4
    128e:	a1 01       	movw	r20, r2
    1290:	60 70       	andi	r22, 0x00	; 0
    1292:	70 70       	andi	r23, 0x00	; 0
    1294:	25 96       	adiw	r28, 0x05	; 5
    1296:	4c af       	std	Y+60, r20	; 0x3c
    1298:	5d af       	std	Y+61, r21	; 0x3d
    129a:	6e af       	std	Y+62, r22	; 0x3e
    129c:	7f af       	std	Y+63, r23	; 0x3f
    129e:	25 97       	sbiw	r28, 0x05	; 5
    12a0:	c6 01       	movw	r24, r12
    12a2:	b5 01       	movw	r22, r10
    12a4:	a4 01       	movw	r20, r8
    12a6:	93 01       	movw	r18, r6
    12a8:	0e 94 5f 30 	call	0x60be	; 0x60be <__udivmodsi4>
    12ac:	7b 01       	movw	r14, r22
    12ae:	8c 01       	movw	r16, r24
    12b0:	c6 01       	movw	r24, r12
    12b2:	b5 01       	movw	r22, r10
    12b4:	a4 01       	movw	r20, r8
    12b6:	93 01       	movw	r18, r6
    12b8:	0e 94 5f 30 	call	0x60be	; 0x60be <__udivmodsi4>
    12bc:	ca 01       	movw	r24, r20
    12be:	b9 01       	movw	r22, r18
    12c0:	25 96       	adiw	r28, 0x05	; 5
    12c2:	2c ad       	ldd	r18, Y+60	; 0x3c
    12c4:	3d ad       	ldd	r19, Y+61	; 0x3d
    12c6:	4e ad       	ldd	r20, Y+62	; 0x3e
    12c8:	5f ad       	ldd	r21, Y+63	; 0x3f
    12ca:	25 97       	sbiw	r28, 0x05	; 5
    12cc:	0e 94 9c 30 	call	0x6138	; 0x6138 <__mulsi3>
    12d0:	9b 01       	movw	r18, r22
    12d2:	ac 01       	movw	r20, r24
    12d4:	87 01       	movw	r16, r14
    12d6:	ff 24       	eor	r15, r15
    12d8:	ee 24       	eor	r14, r14
    12da:	ad a4       	ldd	r10, Y+45	; 0x2d
    12dc:	be a4       	ldd	r11, Y+46	; 0x2e
    12de:	cf a4       	ldd	r12, Y+47	; 0x2f
    12e0:	d8 a8       	ldd	r13, Y+48	; 0x30
    12e2:	c6 01       	movw	r24, r12
    12e4:	aa 27       	eor	r26, r26
    12e6:	bb 27       	eor	r27, r27
    12e8:	5c 01       	movw	r10, r24
    12ea:	6d 01       	movw	r12, r26
    12ec:	ae 28       	or	r10, r14
    12ee:	bf 28       	or	r11, r15
    12f0:	c0 2a       	or	r12, r16
    12f2:	d1 2a       	or	r13, r17
    12f4:	a2 16       	cp	r10, r18
    12f6:	b3 06       	cpc	r11, r19
    12f8:	c4 06       	cpc	r12, r20
    12fa:	d5 06       	cpc	r13, r21
    12fc:	90 f4       	brcc	.+36     	; 0x1322 <__umoddi3+0x4a8>
    12fe:	a2 0c       	add	r10, r2
    1300:	b3 1c       	adc	r11, r3
    1302:	c4 1c       	adc	r12, r4
    1304:	d5 1c       	adc	r13, r5
    1306:	a2 14       	cp	r10, r2
    1308:	b3 04       	cpc	r11, r3
    130a:	c4 04       	cpc	r12, r4
    130c:	d5 04       	cpc	r13, r5
    130e:	48 f0       	brcs	.+18     	; 0x1322 <__umoddi3+0x4a8>
    1310:	a2 16       	cp	r10, r18
    1312:	b3 06       	cpc	r11, r19
    1314:	c4 06       	cpc	r12, r20
    1316:	d5 06       	cpc	r13, r21
    1318:	20 f4       	brcc	.+8      	; 0x1322 <__umoddi3+0x4a8>
    131a:	a2 0c       	add	r10, r2
    131c:	b3 1c       	adc	r11, r3
    131e:	c4 1c       	adc	r12, r4
    1320:	d5 1c       	adc	r13, r5
    1322:	a2 1a       	sub	r10, r18
    1324:	b3 0a       	sbc	r11, r19
    1326:	c4 0a       	sbc	r12, r20
    1328:	d5 0a       	sbc	r13, r21
    132a:	c6 01       	movw	r24, r12
    132c:	b5 01       	movw	r22, r10
    132e:	a4 01       	movw	r20, r8
    1330:	93 01       	movw	r18, r6
    1332:	0e 94 5f 30 	call	0x60be	; 0x60be <__udivmodsi4>
    1336:	7b 01       	movw	r14, r22
    1338:	8c 01       	movw	r16, r24
    133a:	c6 01       	movw	r24, r12
    133c:	b5 01       	movw	r22, r10
    133e:	a4 01       	movw	r20, r8
    1340:	93 01       	movw	r18, r6
    1342:	0e 94 5f 30 	call	0x60be	; 0x60be <__udivmodsi4>
    1346:	ca 01       	movw	r24, r20
    1348:	b9 01       	movw	r22, r18
    134a:	25 96       	adiw	r28, 0x05	; 5
    134c:	2c ad       	ldd	r18, Y+60	; 0x3c
    134e:	3d ad       	ldd	r19, Y+61	; 0x3d
    1350:	4e ad       	ldd	r20, Y+62	; 0x3e
    1352:	5f ad       	ldd	r21, Y+63	; 0x3f
    1354:	25 97       	sbiw	r28, 0x05	; 5
    1356:	0e 94 9c 30 	call	0x6138	; 0x6138 <__mulsi3>
    135a:	9b 01       	movw	r18, r22
    135c:	ac 01       	movw	r20, r24
    135e:	87 01       	movw	r16, r14
    1360:	ff 24       	eor	r15, r15
    1362:	ee 24       	eor	r14, r14
    1364:	8d a5       	ldd	r24, Y+45	; 0x2d
    1366:	9e a5       	ldd	r25, Y+46	; 0x2e
    1368:	af a5       	ldd	r26, Y+47	; 0x2f
    136a:	b8 a9       	ldd	r27, Y+48	; 0x30
    136c:	a0 70       	andi	r26, 0x00	; 0
    136e:	b0 70       	andi	r27, 0x00	; 0
    1370:	57 01       	movw	r10, r14
    1372:	68 01       	movw	r12, r16
    1374:	a8 2a       	or	r10, r24
    1376:	b9 2a       	or	r11, r25
    1378:	ca 2a       	or	r12, r26
    137a:	db 2a       	or	r13, r27
    137c:	a2 16       	cp	r10, r18
    137e:	b3 06       	cpc	r11, r19
    1380:	c4 06       	cpc	r12, r20
    1382:	d5 06       	cpc	r13, r21
    1384:	90 f4       	brcc	.+36     	; 0x13aa <__umoddi3+0x530>
    1386:	a2 0c       	add	r10, r2
    1388:	b3 1c       	adc	r11, r3
    138a:	c4 1c       	adc	r12, r4
    138c:	d5 1c       	adc	r13, r5
    138e:	a2 14       	cp	r10, r2
    1390:	b3 04       	cpc	r11, r3
    1392:	c4 04       	cpc	r12, r4
    1394:	d5 04       	cpc	r13, r5
    1396:	48 f0       	brcs	.+18     	; 0x13aa <__umoddi3+0x530>
    1398:	a2 16       	cp	r10, r18
    139a:	b3 06       	cpc	r11, r19
    139c:	c4 06       	cpc	r12, r20
    139e:	d5 06       	cpc	r13, r21
    13a0:	20 f4       	brcc	.+8      	; 0x13aa <__umoddi3+0x530>
    13a2:	a2 0c       	add	r10, r2
    13a4:	b3 1c       	adc	r11, r3
    13a6:	c4 1c       	adc	r12, r4
    13a8:	d5 1c       	adc	r13, r5
    13aa:	6c 96       	adiw	r28, 0x1c	; 28
    13ac:	ec ac       	ldd	r14, Y+60	; 0x3c
    13ae:	fd ac       	ldd	r15, Y+61	; 0x3d
    13b0:	0e ad       	ldd	r16, Y+62	; 0x3e
    13b2:	1f ad       	ldd	r17, Y+63	; 0x3f
    13b4:	6c 97       	sbiw	r28, 0x1c	; 28
    13b6:	68 96       	adiw	r28, 0x18	; 24
    13b8:	0f ac       	ldd	r0, Y+63	; 0x3f
    13ba:	68 97       	sbiw	r28, 0x18	; 24
    13bc:	04 c0       	rjmp	.+8      	; 0x13c6 <__umoddi3+0x54c>
    13be:	ee 0c       	add	r14, r14
    13c0:	ff 1c       	adc	r15, r15
    13c2:	00 1f       	adc	r16, r16
    13c4:	11 1f       	adc	r17, r17
    13c6:	0a 94       	dec	r0
    13c8:	d2 f7       	brpl	.-12     	; 0x13be <__umoddi3+0x544>
    13ca:	e9 aa       	std	Y+49, r14	; 0x31
    13cc:	fa aa       	std	Y+50, r15	; 0x32
    13ce:	0b ab       	std	Y+51, r16	; 0x33
    13d0:	1c ab       	std	Y+52, r17	; 0x34
    13d2:	a2 1a       	sub	r10, r18
    13d4:	b3 0a       	sbc	r11, r19
    13d6:	c4 0a       	sbc	r12, r20
    13d8:	d5 0a       	sbc	r13, r21
    13da:	32 01       	movw	r6, r4
    13dc:	88 24       	eor	r8, r8
    13de:	99 24       	eor	r9, r9
    13e0:	b2 01       	movw	r22, r4
    13e2:	a1 01       	movw	r20, r2
    13e4:	60 70       	andi	r22, 0x00	; 0
    13e6:	70 70       	andi	r23, 0x00	; 0
    13e8:	29 96       	adiw	r28, 0x09	; 9
    13ea:	4c af       	std	Y+60, r20	; 0x3c
    13ec:	5d af       	std	Y+61, r21	; 0x3d
    13ee:	6e af       	std	Y+62, r22	; 0x3e
    13f0:	7f af       	std	Y+63, r23	; 0x3f
    13f2:	29 97       	sbiw	r28, 0x09	; 9
    13f4:	c6 01       	movw	r24, r12
    13f6:	b5 01       	movw	r22, r10
    13f8:	a4 01       	movw	r20, r8
    13fa:	93 01       	movw	r18, r6
    13fc:	0e 94 5f 30 	call	0x60be	; 0x60be <__udivmodsi4>
    1400:	7b 01       	movw	r14, r22
    1402:	8c 01       	movw	r16, r24
    1404:	c6 01       	movw	r24, r12
    1406:	b5 01       	movw	r22, r10
    1408:	a4 01       	movw	r20, r8
    140a:	93 01       	movw	r18, r6
    140c:	0e 94 5f 30 	call	0x60be	; 0x60be <__udivmodsi4>
    1410:	ca 01       	movw	r24, r20
    1412:	b9 01       	movw	r22, r18
    1414:	29 96       	adiw	r28, 0x09	; 9
    1416:	2c ad       	ldd	r18, Y+60	; 0x3c
    1418:	3d ad       	ldd	r19, Y+61	; 0x3d
    141a:	4e ad       	ldd	r20, Y+62	; 0x3e
    141c:	5f ad       	ldd	r21, Y+63	; 0x3f
    141e:	29 97       	sbiw	r28, 0x09	; 9
    1420:	0e 94 9c 30 	call	0x6138	; 0x6138 <__mulsi3>
    1424:	9b 01       	movw	r18, r22
    1426:	ac 01       	movw	r20, r24
    1428:	87 01       	movw	r16, r14
    142a:	ff 24       	eor	r15, r15
    142c:	ee 24       	eor	r14, r14
    142e:	a9 a8       	ldd	r10, Y+49	; 0x31
    1430:	ba a8       	ldd	r11, Y+50	; 0x32
    1432:	cb a8       	ldd	r12, Y+51	; 0x33
    1434:	dc a8       	ldd	r13, Y+52	; 0x34
    1436:	c6 01       	movw	r24, r12
    1438:	aa 27       	eor	r26, r26
    143a:	bb 27       	eor	r27, r27
    143c:	57 01       	movw	r10, r14
    143e:	68 01       	movw	r12, r16
    1440:	a8 2a       	or	r10, r24
    1442:	b9 2a       	or	r11, r25
    1444:	ca 2a       	or	r12, r26
    1446:	db 2a       	or	r13, r27
    1448:	a2 16       	cp	r10, r18
    144a:	b3 06       	cpc	r11, r19
    144c:	c4 06       	cpc	r12, r20
    144e:	d5 06       	cpc	r13, r21
    1450:	90 f4       	brcc	.+36     	; 0x1476 <__umoddi3+0x5fc>
    1452:	a2 0c       	add	r10, r2
    1454:	b3 1c       	adc	r11, r3
    1456:	c4 1c       	adc	r12, r4
    1458:	d5 1c       	adc	r13, r5
    145a:	a2 14       	cp	r10, r2
    145c:	b3 04       	cpc	r11, r3
    145e:	c4 04       	cpc	r12, r4
    1460:	d5 04       	cpc	r13, r5
    1462:	48 f0       	brcs	.+18     	; 0x1476 <__umoddi3+0x5fc>
    1464:	a2 16       	cp	r10, r18
    1466:	b3 06       	cpc	r11, r19
    1468:	c4 06       	cpc	r12, r20
    146a:	d5 06       	cpc	r13, r21
    146c:	20 f4       	brcc	.+8      	; 0x1476 <__umoddi3+0x5fc>
    146e:	a2 0c       	add	r10, r2
    1470:	b3 1c       	adc	r11, r3
    1472:	c4 1c       	adc	r12, r4
    1474:	d5 1c       	adc	r13, r5
    1476:	a2 1a       	sub	r10, r18
    1478:	b3 0a       	sbc	r11, r19
    147a:	c4 0a       	sbc	r12, r20
    147c:	d5 0a       	sbc	r13, r21
    147e:	c6 01       	movw	r24, r12
    1480:	b5 01       	movw	r22, r10
    1482:	a4 01       	movw	r20, r8
    1484:	93 01       	movw	r18, r6
    1486:	0e 94 5f 30 	call	0x60be	; 0x60be <__udivmodsi4>
    148a:	7b 01       	movw	r14, r22
    148c:	8c 01       	movw	r16, r24
    148e:	c6 01       	movw	r24, r12
    1490:	b5 01       	movw	r22, r10
    1492:	a4 01       	movw	r20, r8
    1494:	93 01       	movw	r18, r6
    1496:	0e 94 5f 30 	call	0x60be	; 0x60be <__udivmodsi4>
    149a:	ca 01       	movw	r24, r20
    149c:	b9 01       	movw	r22, r18
    149e:	29 96       	adiw	r28, 0x09	; 9
    14a0:	2c ad       	ldd	r18, Y+60	; 0x3c
    14a2:	3d ad       	ldd	r19, Y+61	; 0x3d
    14a4:	4e ad       	ldd	r20, Y+62	; 0x3e
    14a6:	5f ad       	ldd	r21, Y+63	; 0x3f
    14a8:	29 97       	sbiw	r28, 0x09	; 9
    14aa:	0e 94 9c 30 	call	0x6138	; 0x6138 <__mulsi3>
    14ae:	9b 01       	movw	r18, r22
    14b0:	ac 01       	movw	r20, r24
    14b2:	87 01       	movw	r16, r14
    14b4:	ff 24       	eor	r15, r15
    14b6:	ee 24       	eor	r14, r14
    14b8:	89 a9       	ldd	r24, Y+49	; 0x31
    14ba:	9a a9       	ldd	r25, Y+50	; 0x32
    14bc:	ab a9       	ldd	r26, Y+51	; 0x33
    14be:	bc a9       	ldd	r27, Y+52	; 0x34
    14c0:	a0 70       	andi	r26, 0x00	; 0
    14c2:	b0 70       	andi	r27, 0x00	; 0
    14c4:	e8 2a       	or	r14, r24
    14c6:	f9 2a       	or	r15, r25
    14c8:	0a 2b       	or	r16, r26
    14ca:	1b 2b       	or	r17, r27
    14cc:	e2 16       	cp	r14, r18
    14ce:	f3 06       	cpc	r15, r19
    14d0:	04 07       	cpc	r16, r20
    14d2:	15 07       	cpc	r17, r21
    14d4:	90 f4       	brcc	.+36     	; 0x14fa <__umoddi3+0x680>
    14d6:	e2 0c       	add	r14, r2
    14d8:	f3 1c       	adc	r15, r3
    14da:	04 1d       	adc	r16, r4
    14dc:	15 1d       	adc	r17, r5
    14de:	e2 14       	cp	r14, r2
    14e0:	f3 04       	cpc	r15, r3
    14e2:	04 05       	cpc	r16, r4
    14e4:	15 05       	cpc	r17, r5
    14e6:	48 f0       	brcs	.+18     	; 0x14fa <__umoddi3+0x680>
    14e8:	e2 16       	cp	r14, r18
    14ea:	f3 06       	cpc	r15, r19
    14ec:	04 07       	cpc	r16, r20
    14ee:	15 07       	cpc	r17, r21
    14f0:	20 f4       	brcc	.+8      	; 0x14fa <__umoddi3+0x680>
    14f2:	e2 0c       	add	r14, r2
    14f4:	f3 1c       	adc	r15, r3
    14f6:	04 1d       	adc	r16, r4
    14f8:	15 1d       	adc	r17, r5
    14fa:	e2 1a       	sub	r14, r18
    14fc:	f3 0a       	sbc	r15, r19
    14fe:	04 0b       	sbc	r16, r20
    1500:	15 0b       	sbc	r17, r21
    1502:	d8 01       	movw	r26, r16
    1504:	c7 01       	movw	r24, r14
    1506:	09 ac       	ldd	r0, Y+57	; 0x39
    1508:	04 c0       	rjmp	.+8      	; 0x1512 <__umoddi3+0x698>
    150a:	b6 95       	lsr	r27
    150c:	a7 95       	ror	r26
    150e:	97 95       	ror	r25
    1510:	87 95       	ror	r24
    1512:	0a 94       	dec	r0
    1514:	d2 f7       	brpl	.-12     	; 0x150a <__umoddi3+0x690>
    1516:	89 8b       	std	Y+17, r24	; 0x11
    1518:	9a 8b       	std	Y+18, r25	; 0x12
    151a:	ab 8b       	std	Y+19, r26	; 0x13
    151c:	bc 8b       	std	Y+20, r27	; 0x14
    151e:	1d 8a       	std	Y+21, r1	; 0x15
    1520:	1e 8a       	std	Y+22, r1	; 0x16
    1522:	1f 8a       	std	Y+23, r1	; 0x17
    1524:	18 8e       	std	Y+24, r1	; 0x18
    1526:	28 2f       	mov	r18, r24
    1528:	3a 89       	ldd	r19, Y+18	; 0x12
    152a:	4b 89       	ldd	r20, Y+19	; 0x13
    152c:	5c 89       	ldd	r21, Y+20	; 0x14
    152e:	6d 89       	ldd	r22, Y+21	; 0x15
    1530:	0c c3       	rjmp	.+1560   	; 0x1b4a <__umoddi3+0xcd0>
    1532:	6a 14       	cp	r6, r10
    1534:	7b 04       	cpc	r7, r11
    1536:	8c 04       	cpc	r8, r12
    1538:	9d 04       	cpc	r9, r13
    153a:	08 f4       	brcc	.+2      	; 0x153e <__umoddi3+0x6c4>
    153c:	09 c3       	rjmp	.+1554   	; 0x1b50 <__umoddi3+0xcd6>
    153e:	00 e0       	ldi	r16, 0x00	; 0
    1540:	a0 16       	cp	r10, r16
    1542:	00 e0       	ldi	r16, 0x00	; 0
    1544:	b0 06       	cpc	r11, r16
    1546:	01 e0       	ldi	r16, 0x01	; 1
    1548:	c0 06       	cpc	r12, r16
    154a:	00 e0       	ldi	r16, 0x00	; 0
    154c:	d0 06       	cpc	r13, r16
    154e:	88 f4       	brcc	.+34     	; 0x1572 <__umoddi3+0x6f8>
    1550:	1f ef       	ldi	r17, 0xFF	; 255
    1552:	a1 16       	cp	r10, r17
    1554:	b1 04       	cpc	r11, r1
    1556:	c1 04       	cpc	r12, r1
    1558:	d1 04       	cpc	r13, r1
    155a:	39 f0       	breq	.+14     	; 0x156a <__umoddi3+0x6f0>
    155c:	30 f0       	brcs	.+12     	; 0x156a <__umoddi3+0x6f0>
    155e:	28 e0       	ldi	r18, 0x08	; 8
    1560:	e2 2e       	mov	r14, r18
    1562:	f1 2c       	mov	r15, r1
    1564:	01 2d       	mov	r16, r1
    1566:	11 2d       	mov	r17, r1
    1568:	18 c0       	rjmp	.+48     	; 0x159a <__umoddi3+0x720>
    156a:	ee 24       	eor	r14, r14
    156c:	ff 24       	eor	r15, r15
    156e:	87 01       	movw	r16, r14
    1570:	14 c0       	rjmp	.+40     	; 0x159a <__umoddi3+0x720>
    1572:	40 e0       	ldi	r20, 0x00	; 0
    1574:	a4 16       	cp	r10, r20
    1576:	40 e0       	ldi	r20, 0x00	; 0
    1578:	b4 06       	cpc	r11, r20
    157a:	40 e0       	ldi	r20, 0x00	; 0
    157c:	c4 06       	cpc	r12, r20
    157e:	41 e0       	ldi	r20, 0x01	; 1
    1580:	d4 06       	cpc	r13, r20
    1582:	30 f0       	brcs	.+12     	; 0x1590 <__umoddi3+0x716>
    1584:	98 e1       	ldi	r25, 0x18	; 24
    1586:	e9 2e       	mov	r14, r25
    1588:	f1 2c       	mov	r15, r1
    158a:	01 2d       	mov	r16, r1
    158c:	11 2d       	mov	r17, r1
    158e:	05 c0       	rjmp	.+10     	; 0x159a <__umoddi3+0x720>
    1590:	80 e1       	ldi	r24, 0x10	; 16
    1592:	e8 2e       	mov	r14, r24
    1594:	f1 2c       	mov	r15, r1
    1596:	01 2d       	mov	r16, r1
    1598:	11 2d       	mov	r17, r1
    159a:	d6 01       	movw	r26, r12
    159c:	c5 01       	movw	r24, r10
    159e:	0e 2c       	mov	r0, r14
    15a0:	04 c0       	rjmp	.+8      	; 0x15aa <__umoddi3+0x730>
    15a2:	b6 95       	lsr	r27
    15a4:	a7 95       	ror	r26
    15a6:	97 95       	ror	r25
    15a8:	87 95       	ror	r24
    15aa:	0a 94       	dec	r0
    15ac:	d2 f7       	brpl	.-12     	; 0x15a2 <__umoddi3+0x728>
    15ae:	89 5a       	subi	r24, 0xA9	; 169
    15b0:	9d 4f       	sbci	r25, 0xFD	; 253
    15b2:	dc 01       	movw	r26, r24
    15b4:	2c 91       	ld	r18, X
    15b6:	80 e2       	ldi	r24, 0x20	; 32
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	a0 e0       	ldi	r26, 0x00	; 0
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	8e 19       	sub	r24, r14
    15c0:	9f 09       	sbc	r25, r15
    15c2:	a0 0b       	sbc	r26, r16
    15c4:	b1 0b       	sbc	r27, r17
    15c6:	82 1b       	sub	r24, r18
    15c8:	91 09       	sbc	r25, r1
    15ca:	a1 09       	sbc	r26, r1
    15cc:	b1 09       	sbc	r27, r1
    15ce:	00 97       	sbiw	r24, 0x00	; 0
    15d0:	a1 05       	cpc	r26, r1
    15d2:	b1 05       	cpc	r27, r1
    15d4:	09 f0       	breq	.+2      	; 0x15d8 <__umoddi3+0x75e>
    15d6:	4f c0       	rjmp	.+158    	; 0x1676 <__umoddi3+0x7fc>
    15d8:	a6 14       	cp	r10, r6
    15da:	b7 04       	cpc	r11, r7
    15dc:	c8 04       	cpc	r12, r8
    15de:	d9 04       	cpc	r13, r9
    15e0:	58 f0       	brcs	.+22     	; 0x15f8 <__umoddi3+0x77e>
    15e2:	6c 96       	adiw	r28, 0x1c	; 28
    15e4:	ec ac       	ldd	r14, Y+60	; 0x3c
    15e6:	fd ac       	ldd	r15, Y+61	; 0x3d
    15e8:	0e ad       	ldd	r16, Y+62	; 0x3e
    15ea:	1f ad       	ldd	r17, Y+63	; 0x3f
    15ec:	6c 97       	sbiw	r28, 0x1c	; 28
    15ee:	e2 14       	cp	r14, r2
    15f0:	f3 04       	cpc	r15, r3
    15f2:	04 05       	cpc	r16, r4
    15f4:	15 05       	cpc	r17, r5
    15f6:	68 f1       	brcs	.+90     	; 0x1652 <__umoddi3+0x7d8>
    15f8:	6c 96       	adiw	r28, 0x1c	; 28
    15fa:	ec ac       	ldd	r14, Y+60	; 0x3c
    15fc:	fd ac       	ldd	r15, Y+61	; 0x3d
    15fe:	0e ad       	ldd	r16, Y+62	; 0x3e
    1600:	1f ad       	ldd	r17, Y+63	; 0x3f
    1602:	6c 97       	sbiw	r28, 0x1c	; 28
    1604:	e2 18       	sub	r14, r2
    1606:	f3 08       	sbc	r15, r3
    1608:	04 09       	sbc	r16, r4
    160a:	15 09       	sbc	r17, r5
    160c:	a4 01       	movw	r20, r8
    160e:	93 01       	movw	r18, r6
    1610:	2a 19       	sub	r18, r10
    1612:	3b 09       	sbc	r19, r11
    1614:	4c 09       	sbc	r20, r12
    1616:	5d 09       	sbc	r21, r13
    1618:	aa 24       	eor	r10, r10
    161a:	bb 24       	eor	r11, r11
    161c:	65 01       	movw	r12, r10
    161e:	6c 96       	adiw	r28, 0x1c	; 28
    1620:	6c ad       	ldd	r22, Y+60	; 0x3c
    1622:	7d ad       	ldd	r23, Y+61	; 0x3d
    1624:	8e ad       	ldd	r24, Y+62	; 0x3e
    1626:	9f ad       	ldd	r25, Y+63	; 0x3f
    1628:	6c 97       	sbiw	r28, 0x1c	; 28
    162a:	6e 15       	cp	r22, r14
    162c:	7f 05       	cpc	r23, r15
    162e:	80 07       	cpc	r24, r16
    1630:	91 07       	cpc	r25, r17
    1632:	28 f4       	brcc	.+10     	; 0x163e <__umoddi3+0x7c4>
    1634:	b1 e0       	ldi	r27, 0x01	; 1
    1636:	ab 2e       	mov	r10, r27
    1638:	b1 2c       	mov	r11, r1
    163a:	c1 2c       	mov	r12, r1
    163c:	d1 2c       	mov	r13, r1
    163e:	da 01       	movw	r26, r20
    1640:	c9 01       	movw	r24, r18
    1642:	8a 19       	sub	r24, r10
    1644:	9b 09       	sbc	r25, r11
    1646:	ac 09       	sbc	r26, r12
    1648:	bd 09       	sbc	r27, r13
    164a:	8d ab       	std	Y+53, r24	; 0x35
    164c:	9e ab       	std	Y+54, r25	; 0x36
    164e:	af ab       	std	Y+55, r26	; 0x37
    1650:	b8 af       	std	Y+56, r27	; 0x38
    1652:	e9 8a       	std	Y+17, r14	; 0x11
    1654:	fa 8a       	std	Y+18, r15	; 0x12
    1656:	0b 8b       	std	Y+19, r16	; 0x13
    1658:	1c 8b       	std	Y+20, r17	; 0x14
    165a:	6d a8       	ldd	r6, Y+53	; 0x35
    165c:	7e a8       	ldd	r7, Y+54	; 0x36
    165e:	8f a8       	ldd	r8, Y+55	; 0x37
    1660:	98 ac       	ldd	r9, Y+56	; 0x38
    1662:	6d 8a       	std	Y+21, r6	; 0x15
    1664:	7e 8a       	std	Y+22, r7	; 0x16
    1666:	8f 8a       	std	Y+23, r8	; 0x17
    1668:	98 8e       	std	Y+24, r9	; 0x18
    166a:	2e 2d       	mov	r18, r14
    166c:	3a 89       	ldd	r19, Y+18	; 0x12
    166e:	4b 89       	ldd	r20, Y+19	; 0x13
    1670:	5c 89       	ldd	r21, Y+20	; 0x14
    1672:	6d a9       	ldd	r22, Y+53	; 0x35
    1674:	6a c2       	rjmp	.+1236   	; 0x1b4a <__umoddi3+0xcd0>
    1676:	67 96       	adiw	r28, 0x17	; 23
    1678:	8f af       	std	Y+63, r24	; 0x3f
    167a:	67 97       	sbiw	r28, 0x17	; 23
    167c:	a6 01       	movw	r20, r12
    167e:	95 01       	movw	r18, r10
    1680:	08 2e       	mov	r0, r24
    1682:	04 c0       	rjmp	.+8      	; 0x168c <__umoddi3+0x812>
    1684:	22 0f       	add	r18, r18
    1686:	33 1f       	adc	r19, r19
    1688:	44 1f       	adc	r20, r20
    168a:	55 1f       	adc	r21, r21
    168c:	0a 94       	dec	r0
    168e:	d2 f7       	brpl	.-12     	; 0x1684 <__umoddi3+0x80a>
    1690:	a0 e2       	ldi	r26, 0x20	; 32
    1692:	aa 2e       	mov	r10, r26
    1694:	a8 1a       	sub	r10, r24
    1696:	66 96       	adiw	r28, 0x16	; 22
    1698:	af ae       	std	Y+63, r10	; 0x3f
    169a:	66 97       	sbiw	r28, 0x16	; 22
    169c:	d2 01       	movw	r26, r4
    169e:	c1 01       	movw	r24, r2
    16a0:	04 c0       	rjmp	.+8      	; 0x16aa <__umoddi3+0x830>
    16a2:	b6 95       	lsr	r27
    16a4:	a7 95       	ror	r26
    16a6:	97 95       	ror	r25
    16a8:	87 95       	ror	r24
    16aa:	aa 94       	dec	r10
    16ac:	d2 f7       	brpl	.-12     	; 0x16a2 <__umoddi3+0x828>
    16ae:	6c 01       	movw	r12, r24
    16b0:	7d 01       	movw	r14, r26
    16b2:	c2 2a       	or	r12, r18
    16b4:	d3 2a       	or	r13, r19
    16b6:	e4 2a       	or	r14, r20
    16b8:	f5 2a       	or	r15, r21
    16ba:	c9 a6       	std	Y+41, r12	; 0x29
    16bc:	da a6       	std	Y+42, r13	; 0x2a
    16be:	eb a6       	std	Y+43, r14	; 0x2b
    16c0:	fc a6       	std	Y+44, r15	; 0x2c
    16c2:	82 01       	movw	r16, r4
    16c4:	71 01       	movw	r14, r2
    16c6:	67 96       	adiw	r28, 0x17	; 23
    16c8:	0f ac       	ldd	r0, Y+63	; 0x3f
    16ca:	67 97       	sbiw	r28, 0x17	; 23
    16cc:	04 c0       	rjmp	.+8      	; 0x16d6 <__umoddi3+0x85c>
    16ce:	ee 0c       	add	r14, r14
    16d0:	ff 1c       	adc	r15, r15
    16d2:	00 1f       	adc	r16, r16
    16d4:	11 1f       	adc	r17, r17
    16d6:	0a 94       	dec	r0
    16d8:	d2 f7       	brpl	.-12     	; 0x16ce <__umoddi3+0x854>
    16da:	ed a2       	std	Y+37, r14	; 0x25
    16dc:	fe a2       	std	Y+38, r15	; 0x26
    16de:	0f a3       	std	Y+39, r16	; 0x27
    16e0:	18 a7       	std	Y+40, r17	; 0x28
    16e2:	64 01       	movw	r12, r8
    16e4:	53 01       	movw	r10, r6
    16e6:	66 96       	adiw	r28, 0x16	; 22
    16e8:	0f ac       	ldd	r0, Y+63	; 0x3f
    16ea:	66 97       	sbiw	r28, 0x16	; 22
    16ec:	04 c0       	rjmp	.+8      	; 0x16f6 <__umoddi3+0x87c>
    16ee:	d6 94       	lsr	r13
    16f0:	c7 94       	ror	r12
    16f2:	b7 94       	ror	r11
    16f4:	a7 94       	ror	r10
    16f6:	0a 94       	dec	r0
    16f8:	d2 f7       	brpl	.-12     	; 0x16ee <__umoddi3+0x874>
    16fa:	a4 01       	movw	r20, r8
    16fc:	93 01       	movw	r18, r6
    16fe:	67 96       	adiw	r28, 0x17	; 23
    1700:	0f ac       	ldd	r0, Y+63	; 0x3f
    1702:	67 97       	sbiw	r28, 0x17	; 23
    1704:	04 c0       	rjmp	.+8      	; 0x170e <__umoddi3+0x894>
    1706:	22 0f       	add	r18, r18
    1708:	33 1f       	adc	r19, r19
    170a:	44 1f       	adc	r20, r20
    170c:	55 1f       	adc	r21, r21
    170e:	0a 94       	dec	r0
    1710:	d2 f7       	brpl	.-12     	; 0x1706 <__umoddi3+0x88c>
    1712:	6c 96       	adiw	r28, 0x1c	; 28
    1714:	8c ad       	ldd	r24, Y+60	; 0x3c
    1716:	9d ad       	ldd	r25, Y+61	; 0x3d
    1718:	ae ad       	ldd	r26, Y+62	; 0x3e
    171a:	bf ad       	ldd	r27, Y+63	; 0x3f
    171c:	6c 97       	sbiw	r28, 0x1c	; 28
    171e:	66 96       	adiw	r28, 0x16	; 22
    1720:	0f ac       	ldd	r0, Y+63	; 0x3f
    1722:	66 97       	sbiw	r28, 0x16	; 22
    1724:	04 c0       	rjmp	.+8      	; 0x172e <__umoddi3+0x8b4>
    1726:	b6 95       	lsr	r27
    1728:	a7 95       	ror	r26
    172a:	97 95       	ror	r25
    172c:	87 95       	ror	r24
    172e:	0a 94       	dec	r0
    1730:	d2 f7       	brpl	.-12     	; 0x1726 <__umoddi3+0x8ac>
    1732:	3c 01       	movw	r6, r24
    1734:	4d 01       	movw	r8, r26
    1736:	62 2a       	or	r6, r18
    1738:	73 2a       	or	r7, r19
    173a:	84 2a       	or	r8, r20
    173c:	95 2a       	or	r9, r21
    173e:	69 a2       	std	Y+33, r6	; 0x21
    1740:	7a a2       	std	Y+34, r7	; 0x22
    1742:	8b a2       	std	Y+35, r8	; 0x23
    1744:	9c a2       	std	Y+36, r9	; 0x24
    1746:	6c 96       	adiw	r28, 0x1c	; 28
    1748:	ec ac       	ldd	r14, Y+60	; 0x3c
    174a:	fd ac       	ldd	r15, Y+61	; 0x3d
    174c:	0e ad       	ldd	r16, Y+62	; 0x3e
    174e:	1f ad       	ldd	r17, Y+63	; 0x3f
    1750:	6c 97       	sbiw	r28, 0x1c	; 28
    1752:	67 96       	adiw	r28, 0x17	; 23
    1754:	0f ac       	ldd	r0, Y+63	; 0x3f
    1756:	67 97       	sbiw	r28, 0x17	; 23
    1758:	04 c0       	rjmp	.+8      	; 0x1762 <__umoddi3+0x8e8>
    175a:	ee 0c       	add	r14, r14
    175c:	ff 1c       	adc	r15, r15
    175e:	00 1f       	adc	r16, r16
    1760:	11 1f       	adc	r17, r17
    1762:	0a 94       	dec	r0
    1764:	d2 f7       	brpl	.-12     	; 0x175a <__umoddi3+0x8e0>
    1766:	ed 8e       	std	Y+29, r14	; 0x1d
    1768:	fe 8e       	std	Y+30, r15	; 0x1e
    176a:	0f 8f       	std	Y+31, r16	; 0x1f
    176c:	18 a3       	std	Y+32, r17	; 0x20
    176e:	49 a5       	ldd	r20, Y+41	; 0x29
    1770:	5a a5       	ldd	r21, Y+42	; 0x2a
    1772:	6b a5       	ldd	r22, Y+43	; 0x2b
    1774:	7c a5       	ldd	r23, Y+44	; 0x2c
    1776:	3b 01       	movw	r6, r22
    1778:	88 24       	eor	r8, r8
    177a:	99 24       	eor	r9, r9
    177c:	60 70       	andi	r22, 0x00	; 0
    177e:	70 70       	andi	r23, 0x00	; 0
    1780:	2d 96       	adiw	r28, 0x0d	; 13
    1782:	4c af       	std	Y+60, r20	; 0x3c
    1784:	5d af       	std	Y+61, r21	; 0x3d
    1786:	6e af       	std	Y+62, r22	; 0x3e
    1788:	7f af       	std	Y+63, r23	; 0x3f
    178a:	2d 97       	sbiw	r28, 0x0d	; 13
    178c:	c6 01       	movw	r24, r12
    178e:	b5 01       	movw	r22, r10
    1790:	a4 01       	movw	r20, r8
    1792:	93 01       	movw	r18, r6
    1794:	0e 94 5f 30 	call	0x60be	; 0x60be <__udivmodsi4>
    1798:	7b 01       	movw	r14, r22
    179a:	8c 01       	movw	r16, r24
    179c:	c6 01       	movw	r24, r12
    179e:	b5 01       	movw	r22, r10
    17a0:	a4 01       	movw	r20, r8
    17a2:	93 01       	movw	r18, r6
    17a4:	0e 94 5f 30 	call	0x60be	; 0x60be <__udivmodsi4>
    17a8:	c9 01       	movw	r24, r18
    17aa:	da 01       	movw	r26, r20
    17ac:	1c 01       	movw	r2, r24
    17ae:	2d 01       	movw	r4, r26
    17b0:	c2 01       	movw	r24, r4
    17b2:	b1 01       	movw	r22, r2
    17b4:	2d 96       	adiw	r28, 0x0d	; 13
    17b6:	2c ad       	ldd	r18, Y+60	; 0x3c
    17b8:	3d ad       	ldd	r19, Y+61	; 0x3d
    17ba:	4e ad       	ldd	r20, Y+62	; 0x3e
    17bc:	5f ad       	ldd	r21, Y+63	; 0x3f
    17be:	2d 97       	sbiw	r28, 0x0d	; 13
    17c0:	0e 94 9c 30 	call	0x6138	; 0x6138 <__mulsi3>
    17c4:	9b 01       	movw	r18, r22
    17c6:	ac 01       	movw	r20, r24
    17c8:	87 01       	movw	r16, r14
    17ca:	ff 24       	eor	r15, r15
    17cc:	ee 24       	eor	r14, r14
    17ce:	a9 a0       	ldd	r10, Y+33	; 0x21
    17d0:	ba a0       	ldd	r11, Y+34	; 0x22
    17d2:	cb a0       	ldd	r12, Y+35	; 0x23
    17d4:	dc a0       	ldd	r13, Y+36	; 0x24
    17d6:	c6 01       	movw	r24, r12
    17d8:	aa 27       	eor	r26, r26
    17da:	bb 27       	eor	r27, r27
    17dc:	57 01       	movw	r10, r14
    17de:	68 01       	movw	r12, r16
    17e0:	a8 2a       	or	r10, r24
    17e2:	b9 2a       	or	r11, r25
    17e4:	ca 2a       	or	r12, r26
    17e6:	db 2a       	or	r13, r27
    17e8:	a2 16       	cp	r10, r18
    17ea:	b3 06       	cpc	r11, r19
    17ec:	c4 06       	cpc	r12, r20
    17ee:	d5 06       	cpc	r13, r21
    17f0:	00 f5       	brcc	.+64     	; 0x1832 <__umoddi3+0x9b8>
    17f2:	08 94       	sec
    17f4:	21 08       	sbc	r2, r1
    17f6:	31 08       	sbc	r3, r1
    17f8:	41 08       	sbc	r4, r1
    17fa:	51 08       	sbc	r5, r1
    17fc:	e9 a4       	ldd	r14, Y+41	; 0x29
    17fe:	fa a4       	ldd	r15, Y+42	; 0x2a
    1800:	0b a5       	ldd	r16, Y+43	; 0x2b
    1802:	1c a5       	ldd	r17, Y+44	; 0x2c
    1804:	ae 0c       	add	r10, r14
    1806:	bf 1c       	adc	r11, r15
    1808:	c0 1e       	adc	r12, r16
    180a:	d1 1e       	adc	r13, r17
    180c:	ae 14       	cp	r10, r14
    180e:	bf 04       	cpc	r11, r15
    1810:	c0 06       	cpc	r12, r16
    1812:	d1 06       	cpc	r13, r17
    1814:	70 f0       	brcs	.+28     	; 0x1832 <__umoddi3+0x9b8>
    1816:	a2 16       	cp	r10, r18
    1818:	b3 06       	cpc	r11, r19
    181a:	c4 06       	cpc	r12, r20
    181c:	d5 06       	cpc	r13, r21
    181e:	48 f4       	brcc	.+18     	; 0x1832 <__umoddi3+0x9b8>
    1820:	08 94       	sec
    1822:	21 08       	sbc	r2, r1
    1824:	31 08       	sbc	r3, r1
    1826:	41 08       	sbc	r4, r1
    1828:	51 08       	sbc	r5, r1
    182a:	ae 0c       	add	r10, r14
    182c:	bf 1c       	adc	r11, r15
    182e:	c0 1e       	adc	r12, r16
    1830:	d1 1e       	adc	r13, r17
    1832:	a2 1a       	sub	r10, r18
    1834:	b3 0a       	sbc	r11, r19
    1836:	c4 0a       	sbc	r12, r20
    1838:	d5 0a       	sbc	r13, r21
    183a:	c6 01       	movw	r24, r12
    183c:	b5 01       	movw	r22, r10
    183e:	a4 01       	movw	r20, r8
    1840:	93 01       	movw	r18, r6
    1842:	0e 94 5f 30 	call	0x60be	; 0x60be <__udivmodsi4>
    1846:	7b 01       	movw	r14, r22
    1848:	8c 01       	movw	r16, r24
    184a:	c6 01       	movw	r24, r12
    184c:	b5 01       	movw	r22, r10
    184e:	a4 01       	movw	r20, r8
    1850:	93 01       	movw	r18, r6
    1852:	0e 94 5f 30 	call	0x60be	; 0x60be <__udivmodsi4>
    1856:	c9 01       	movw	r24, r18
    1858:	da 01       	movw	r26, r20
    185a:	3c 01       	movw	r6, r24
    185c:	4d 01       	movw	r8, r26
    185e:	c4 01       	movw	r24, r8
    1860:	b3 01       	movw	r22, r6
    1862:	2d 96       	adiw	r28, 0x0d	; 13
    1864:	2c ad       	ldd	r18, Y+60	; 0x3c
    1866:	3d ad       	ldd	r19, Y+61	; 0x3d
    1868:	4e ad       	ldd	r20, Y+62	; 0x3e
    186a:	5f ad       	ldd	r21, Y+63	; 0x3f
    186c:	2d 97       	sbiw	r28, 0x0d	; 13
    186e:	0e 94 9c 30 	call	0x6138	; 0x6138 <__mulsi3>
    1872:	9b 01       	movw	r18, r22
    1874:	ac 01       	movw	r20, r24
    1876:	87 01       	movw	r16, r14
    1878:	ff 24       	eor	r15, r15
    187a:	ee 24       	eor	r14, r14
    187c:	89 a1       	ldd	r24, Y+33	; 0x21
    187e:	9a a1       	ldd	r25, Y+34	; 0x22
    1880:	ab a1       	ldd	r26, Y+35	; 0x23
    1882:	bc a1       	ldd	r27, Y+36	; 0x24
    1884:	a0 70       	andi	r26, 0x00	; 0
    1886:	b0 70       	andi	r27, 0x00	; 0
    1888:	57 01       	movw	r10, r14
    188a:	68 01       	movw	r12, r16
    188c:	a8 2a       	or	r10, r24
    188e:	b9 2a       	or	r11, r25
    1890:	ca 2a       	or	r12, r26
    1892:	db 2a       	or	r13, r27
    1894:	a2 16       	cp	r10, r18
    1896:	b3 06       	cpc	r11, r19
    1898:	c4 06       	cpc	r12, r20
    189a:	d5 06       	cpc	r13, r21
    189c:	00 f5       	brcc	.+64     	; 0x18de <__umoddi3+0xa64>
    189e:	08 94       	sec
    18a0:	61 08       	sbc	r6, r1
    18a2:	71 08       	sbc	r7, r1
    18a4:	81 08       	sbc	r8, r1
    18a6:	91 08       	sbc	r9, r1
    18a8:	69 a5       	ldd	r22, Y+41	; 0x29
    18aa:	7a a5       	ldd	r23, Y+42	; 0x2a
    18ac:	8b a5       	ldd	r24, Y+43	; 0x2b
    18ae:	9c a5       	ldd	r25, Y+44	; 0x2c
    18b0:	a6 0e       	add	r10, r22
    18b2:	b7 1e       	adc	r11, r23
    18b4:	c8 1e       	adc	r12, r24
    18b6:	d9 1e       	adc	r13, r25
    18b8:	a6 16       	cp	r10, r22
    18ba:	b7 06       	cpc	r11, r23
    18bc:	c8 06       	cpc	r12, r24
    18be:	d9 06       	cpc	r13, r25
    18c0:	70 f0       	brcs	.+28     	; 0x18de <__umoddi3+0xa64>
    18c2:	a2 16       	cp	r10, r18
    18c4:	b3 06       	cpc	r11, r19
    18c6:	c4 06       	cpc	r12, r20
    18c8:	d5 06       	cpc	r13, r21
    18ca:	48 f4       	brcc	.+18     	; 0x18de <__umoddi3+0xa64>
    18cc:	08 94       	sec
    18ce:	61 08       	sbc	r6, r1
    18d0:	71 08       	sbc	r7, r1
    18d2:	81 08       	sbc	r8, r1
    18d4:	91 08       	sbc	r9, r1
    18d6:	a6 0e       	add	r10, r22
    18d8:	b7 1e       	adc	r11, r23
    18da:	c8 1e       	adc	r12, r24
    18dc:	d9 1e       	adc	r13, r25
    18de:	d6 01       	movw	r26, r12
    18e0:	c5 01       	movw	r24, r10
    18e2:	82 1b       	sub	r24, r18
    18e4:	93 0b       	sbc	r25, r19
    18e6:	a4 0b       	sbc	r26, r20
    18e8:	b5 0b       	sbc	r27, r21
    18ea:	89 8f       	std	Y+25, r24	; 0x19
    18ec:	9a 8f       	std	Y+26, r25	; 0x1a
    18ee:	ab 8f       	std	Y+27, r26	; 0x1b
    18f0:	bc 8f       	std	Y+28, r27	; 0x1c
    18f2:	d1 01       	movw	r26, r2
    18f4:	99 27       	eor	r25, r25
    18f6:	88 27       	eor	r24, r24
    18f8:	84 01       	movw	r16, r8
    18fa:	73 01       	movw	r14, r6
    18fc:	e8 2a       	or	r14, r24
    18fe:	f9 2a       	or	r15, r25
    1900:	0a 2b       	or	r16, r26
    1902:	1b 2b       	or	r17, r27
    1904:	4f ef       	ldi	r20, 0xFF	; 255
    1906:	a4 2e       	mov	r10, r20
    1908:	4f ef       	ldi	r20, 0xFF	; 255
    190a:	b4 2e       	mov	r11, r20
    190c:	c1 2c       	mov	r12, r1
    190e:	d1 2c       	mov	r13, r1
    1910:	ae 20       	and	r10, r14
    1912:	bf 20       	and	r11, r15
    1914:	c0 22       	and	r12, r16
    1916:	d1 22       	and	r13, r17
    1918:	78 01       	movw	r14, r16
    191a:	00 27       	eor	r16, r16
    191c:	11 27       	eor	r17, r17
    191e:	6d a0       	ldd	r6, Y+37	; 0x25
    1920:	7e a0       	ldd	r7, Y+38	; 0x26
    1922:	8f a0       	ldd	r8, Y+39	; 0x27
    1924:	98 a4       	ldd	r9, Y+40	; 0x28
    1926:	4f ef       	ldi	r20, 0xFF	; 255
    1928:	5f ef       	ldi	r21, 0xFF	; 255
    192a:	60 e0       	ldi	r22, 0x00	; 0
    192c:	70 e0       	ldi	r23, 0x00	; 0
    192e:	64 22       	and	r6, r20
    1930:	75 22       	and	r7, r21
    1932:	86 22       	and	r8, r22
    1934:	97 22       	and	r9, r23
    1936:	8d a1       	ldd	r24, Y+37	; 0x25
    1938:	9e a1       	ldd	r25, Y+38	; 0x26
    193a:	af a1       	ldd	r26, Y+39	; 0x27
    193c:	b8 a5       	ldd	r27, Y+40	; 0x28
    193e:	bd 01       	movw	r22, r26
    1940:	88 27       	eor	r24, r24
    1942:	99 27       	eor	r25, r25
    1944:	65 96       	adiw	r28, 0x15	; 21
    1946:	6c af       	std	Y+60, r22	; 0x3c
    1948:	7d af       	std	Y+61, r23	; 0x3d
    194a:	8e af       	std	Y+62, r24	; 0x3e
    194c:	9f af       	std	Y+63, r25	; 0x3f
    194e:	65 97       	sbiw	r28, 0x15	; 21
    1950:	c6 01       	movw	r24, r12
    1952:	b5 01       	movw	r22, r10
    1954:	a4 01       	movw	r20, r8
    1956:	93 01       	movw	r18, r6
    1958:	0e 94 9c 30 	call	0x6138	; 0x6138 <__mulsi3>
    195c:	61 96       	adiw	r28, 0x11	; 17
    195e:	6c af       	std	Y+60, r22	; 0x3c
    1960:	7d af       	std	Y+61, r23	; 0x3d
    1962:	8e af       	std	Y+62, r24	; 0x3e
    1964:	9f af       	std	Y+63, r25	; 0x3f
    1966:	61 97       	sbiw	r28, 0x11	; 17
    1968:	c6 01       	movw	r24, r12
    196a:	b5 01       	movw	r22, r10
    196c:	65 96       	adiw	r28, 0x15	; 21
    196e:	2c ad       	ldd	r18, Y+60	; 0x3c
    1970:	3d ad       	ldd	r19, Y+61	; 0x3d
    1972:	4e ad       	ldd	r20, Y+62	; 0x3e
    1974:	5f ad       	ldd	r21, Y+63	; 0x3f
    1976:	65 97       	sbiw	r28, 0x15	; 21
    1978:	0e 94 9c 30 	call	0x6138	; 0x6138 <__mulsi3>
    197c:	1b 01       	movw	r2, r22
    197e:	2c 01       	movw	r4, r24
    1980:	c8 01       	movw	r24, r16
    1982:	b7 01       	movw	r22, r14
    1984:	a4 01       	movw	r20, r8
    1986:	93 01       	movw	r18, r6
    1988:	0e 94 9c 30 	call	0x6138	; 0x6138 <__mulsi3>
    198c:	5b 01       	movw	r10, r22
    198e:	6c 01       	movw	r12, r24
    1990:	c8 01       	movw	r24, r16
    1992:	b7 01       	movw	r22, r14
    1994:	65 96       	adiw	r28, 0x15	; 21
    1996:	2c ad       	ldd	r18, Y+60	; 0x3c
    1998:	3d ad       	ldd	r19, Y+61	; 0x3d
    199a:	4e ad       	ldd	r20, Y+62	; 0x3e
    199c:	5f ad       	ldd	r21, Y+63	; 0x3f
    199e:	65 97       	sbiw	r28, 0x15	; 21
    19a0:	0e 94 9c 30 	call	0x6138	; 0x6138 <__mulsi3>
    19a4:	7b 01       	movw	r14, r22
    19a6:	8c 01       	movw	r16, r24
    19a8:	a6 01       	movw	r20, r12
    19aa:	95 01       	movw	r18, r10
    19ac:	22 0d       	add	r18, r2
    19ae:	33 1d       	adc	r19, r3
    19b0:	44 1d       	adc	r20, r4
    19b2:	55 1d       	adc	r21, r5
    19b4:	61 96       	adiw	r28, 0x11	; 17
    19b6:	6c ac       	ldd	r6, Y+60	; 0x3c
    19b8:	7d ac       	ldd	r7, Y+61	; 0x3d
    19ba:	8e ac       	ldd	r8, Y+62	; 0x3e
    19bc:	9f ac       	ldd	r9, Y+63	; 0x3f
    19be:	61 97       	sbiw	r28, 0x11	; 17
    19c0:	c4 01       	movw	r24, r8
    19c2:	aa 27       	eor	r26, r26
    19c4:	bb 27       	eor	r27, r27
    19c6:	28 0f       	add	r18, r24
    19c8:	39 1f       	adc	r19, r25
    19ca:	4a 1f       	adc	r20, r26
    19cc:	5b 1f       	adc	r21, r27
    19ce:	2a 15       	cp	r18, r10
    19d0:	3b 05       	cpc	r19, r11
    19d2:	4c 05       	cpc	r20, r12
    19d4:	5d 05       	cpc	r21, r13
    19d6:	48 f4       	brcc	.+18     	; 0x19ea <__umoddi3+0xb70>
    19d8:	81 2c       	mov	r8, r1
    19da:	91 2c       	mov	r9, r1
    19dc:	e1 e0       	ldi	r30, 0x01	; 1
    19de:	ae 2e       	mov	r10, r30
    19e0:	b1 2c       	mov	r11, r1
    19e2:	e8 0c       	add	r14, r8
    19e4:	f9 1c       	adc	r15, r9
    19e6:	0a 1d       	adc	r16, r10
    19e8:	1b 1d       	adc	r17, r11
    19ea:	ca 01       	movw	r24, r20
    19ec:	aa 27       	eor	r26, r26
    19ee:	bb 27       	eor	r27, r27
    19f0:	57 01       	movw	r10, r14
    19f2:	68 01       	movw	r12, r16
    19f4:	a8 0e       	add	r10, r24
    19f6:	b9 1e       	adc	r11, r25
    19f8:	ca 1e       	adc	r12, r26
    19fa:	db 1e       	adc	r13, r27
    19fc:	a9 01       	movw	r20, r18
    19fe:	33 27       	eor	r19, r19
    1a00:	22 27       	eor	r18, r18
    1a02:	61 96       	adiw	r28, 0x11	; 17
    1a04:	8c ad       	ldd	r24, Y+60	; 0x3c
    1a06:	9d ad       	ldd	r25, Y+61	; 0x3d
    1a08:	ae ad       	ldd	r26, Y+62	; 0x3e
    1a0a:	bf ad       	ldd	r27, Y+63	; 0x3f
    1a0c:	61 97       	sbiw	r28, 0x11	; 17
    1a0e:	a0 70       	andi	r26, 0x00	; 0
    1a10:	b0 70       	andi	r27, 0x00	; 0
    1a12:	28 0f       	add	r18, r24
    1a14:	39 1f       	adc	r19, r25
    1a16:	4a 1f       	adc	r20, r26
    1a18:	5b 1f       	adc	r21, r27
    1a1a:	e9 8c       	ldd	r14, Y+25	; 0x19
    1a1c:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1a1e:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1a20:	1c 8d       	ldd	r17, Y+28	; 0x1c
    1a22:	ea 14       	cp	r14, r10
    1a24:	fb 04       	cpc	r15, r11
    1a26:	0c 05       	cpc	r16, r12
    1a28:	1d 05       	cpc	r17, r13
    1a2a:	70 f0       	brcs	.+28     	; 0x1a48 <__umoddi3+0xbce>
    1a2c:	ae 14       	cp	r10, r14
    1a2e:	bf 04       	cpc	r11, r15
    1a30:	c0 06       	cpc	r12, r16
    1a32:	d1 06       	cpc	r13, r17
    1a34:	69 f5       	brne	.+90     	; 0x1a90 <__umoddi3+0xc16>
    1a36:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1a38:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1a3a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a3c:	98 a1       	ldd	r25, Y+32	; 0x20
    1a3e:	62 17       	cp	r22, r18
    1a40:	73 07       	cpc	r23, r19
    1a42:	84 07       	cpc	r24, r20
    1a44:	95 07       	cpc	r25, r21
    1a46:	20 f5       	brcc	.+72     	; 0x1a90 <__umoddi3+0xc16>
    1a48:	da 01       	movw	r26, r20
    1a4a:	c9 01       	movw	r24, r18
    1a4c:	6d a0       	ldd	r6, Y+37	; 0x25
    1a4e:	7e a0       	ldd	r7, Y+38	; 0x26
    1a50:	8f a0       	ldd	r8, Y+39	; 0x27
    1a52:	98 a4       	ldd	r9, Y+40	; 0x28
    1a54:	86 19       	sub	r24, r6
    1a56:	97 09       	sbc	r25, r7
    1a58:	a8 09       	sbc	r26, r8
    1a5a:	b9 09       	sbc	r27, r9
    1a5c:	e9 a4       	ldd	r14, Y+41	; 0x29
    1a5e:	fa a4       	ldd	r15, Y+42	; 0x2a
    1a60:	0b a5       	ldd	r16, Y+43	; 0x2b
    1a62:	1c a5       	ldd	r17, Y+44	; 0x2c
    1a64:	ae 18       	sub	r10, r14
    1a66:	bf 08       	sbc	r11, r15
    1a68:	c0 0a       	sbc	r12, r16
    1a6a:	d1 0a       	sbc	r13, r17
    1a6c:	ee 24       	eor	r14, r14
    1a6e:	ff 24       	eor	r15, r15
    1a70:	87 01       	movw	r16, r14
    1a72:	28 17       	cp	r18, r24
    1a74:	39 07       	cpc	r19, r25
    1a76:	4a 07       	cpc	r20, r26
    1a78:	5b 07       	cpc	r21, r27
    1a7a:	28 f4       	brcc	.+10     	; 0x1a86 <__umoddi3+0xc0c>
    1a7c:	21 e0       	ldi	r18, 0x01	; 1
    1a7e:	e2 2e       	mov	r14, r18
    1a80:	f1 2c       	mov	r15, r1
    1a82:	01 2d       	mov	r16, r1
    1a84:	11 2d       	mov	r17, r1
    1a86:	ae 18       	sub	r10, r14
    1a88:	bf 08       	sbc	r11, r15
    1a8a:	c0 0a       	sbc	r12, r16
    1a8c:	d1 0a       	sbc	r13, r17
    1a8e:	02 c0       	rjmp	.+4      	; 0x1a94 <__umoddi3+0xc1a>
    1a90:	da 01       	movw	r26, r20
    1a92:	c9 01       	movw	r24, r18
    1a94:	6d 8c       	ldd	r6, Y+29	; 0x1d
    1a96:	7e 8c       	ldd	r7, Y+30	; 0x1e
    1a98:	8f 8c       	ldd	r8, Y+31	; 0x1f
    1a9a:	98 a0       	ldd	r9, Y+32	; 0x20
    1a9c:	68 1a       	sub	r6, r24
    1a9e:	79 0a       	sbc	r7, r25
    1aa0:	8a 0a       	sbc	r8, r26
    1aa2:	9b 0a       	sbc	r9, r27
    1aa4:	49 8d       	ldd	r20, Y+25	; 0x19
    1aa6:	5a 8d       	ldd	r21, Y+26	; 0x1a
    1aa8:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1aaa:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1aac:	4a 19       	sub	r20, r10
    1aae:	5b 09       	sbc	r21, r11
    1ab0:	6c 09       	sbc	r22, r12
    1ab2:	7d 09       	sbc	r23, r13
    1ab4:	5a 01       	movw	r10, r20
    1ab6:	6b 01       	movw	r12, r22
    1ab8:	22 24       	eor	r2, r2
    1aba:	33 24       	eor	r3, r3
    1abc:	21 01       	movw	r4, r2
    1abe:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1ac0:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1ac2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ac4:	98 a1       	ldd	r25, Y+32	; 0x20
    1ac6:	66 15       	cp	r22, r6
    1ac8:	77 05       	cpc	r23, r7
    1aca:	88 05       	cpc	r24, r8
    1acc:	99 05       	cpc	r25, r9
    1ace:	28 f4       	brcc	.+10     	; 0x1ada <__umoddi3+0xc60>
    1ad0:	81 e0       	ldi	r24, 0x01	; 1
    1ad2:	28 2e       	mov	r2, r24
    1ad4:	31 2c       	mov	r3, r1
    1ad6:	41 2c       	mov	r4, r1
    1ad8:	51 2c       	mov	r5, r1
    1ada:	86 01       	movw	r16, r12
    1adc:	75 01       	movw	r14, r10
    1ade:	e2 18       	sub	r14, r2
    1ae0:	f3 08       	sbc	r15, r3
    1ae2:	04 09       	sbc	r16, r4
    1ae4:	15 09       	sbc	r17, r5
    1ae6:	a8 01       	movw	r20, r16
    1ae8:	97 01       	movw	r18, r14
    1aea:	66 96       	adiw	r28, 0x16	; 22
    1aec:	0f ac       	ldd	r0, Y+63	; 0x3f
    1aee:	66 97       	sbiw	r28, 0x16	; 22
    1af0:	04 c0       	rjmp	.+8      	; 0x1afa <__umoddi3+0xc80>
    1af2:	22 0f       	add	r18, r18
    1af4:	33 1f       	adc	r19, r19
    1af6:	44 1f       	adc	r20, r20
    1af8:	55 1f       	adc	r21, r21
    1afa:	0a 94       	dec	r0
    1afc:	d2 f7       	brpl	.-12     	; 0x1af2 <__umoddi3+0xc78>
    1afe:	d4 01       	movw	r26, r8
    1b00:	c3 01       	movw	r24, r6
    1b02:	67 96       	adiw	r28, 0x17	; 23
    1b04:	0f ac       	ldd	r0, Y+63	; 0x3f
    1b06:	67 97       	sbiw	r28, 0x17	; 23
    1b08:	04 c0       	rjmp	.+8      	; 0x1b12 <__umoddi3+0xc98>
    1b0a:	b6 95       	lsr	r27
    1b0c:	a7 95       	ror	r26
    1b0e:	97 95       	ror	r25
    1b10:	87 95       	ror	r24
    1b12:	0a 94       	dec	r0
    1b14:	d2 f7       	brpl	.-12     	; 0x1b0a <__umoddi3+0xc90>
    1b16:	28 2b       	or	r18, r24
    1b18:	39 2b       	or	r19, r25
    1b1a:	4a 2b       	or	r20, r26
    1b1c:	5b 2b       	or	r21, r27
    1b1e:	29 8b       	std	Y+17, r18	; 0x11
    1b20:	3a 8b       	std	Y+18, r19	; 0x12
    1b22:	4b 8b       	std	Y+19, r20	; 0x13
    1b24:	5c 8b       	std	Y+20, r21	; 0x14
    1b26:	67 96       	adiw	r28, 0x17	; 23
    1b28:	0f ac       	ldd	r0, Y+63	; 0x3f
    1b2a:	67 97       	sbiw	r28, 0x17	; 23
    1b2c:	04 c0       	rjmp	.+8      	; 0x1b36 <__umoddi3+0xcbc>
    1b2e:	16 95       	lsr	r17
    1b30:	07 95       	ror	r16
    1b32:	f7 94       	ror	r15
    1b34:	e7 94       	ror	r14
    1b36:	0a 94       	dec	r0
    1b38:	d2 f7       	brpl	.-12     	; 0x1b2e <__umoddi3+0xcb4>
    1b3a:	ed 8a       	std	Y+21, r14	; 0x15
    1b3c:	fe 8a       	std	Y+22, r15	; 0x16
    1b3e:	0f 8b       	std	Y+23, r16	; 0x17
    1b40:	18 8f       	std	Y+24, r17	; 0x18
    1b42:	3a 89       	ldd	r19, Y+18	; 0x12
    1b44:	4b 89       	ldd	r20, Y+19	; 0x13
    1b46:	5c 89       	ldd	r21, Y+20	; 0x14
    1b48:	6e 2d       	mov	r22, r14
    1b4a:	7e 89       	ldd	r23, Y+22	; 0x16
    1b4c:	8f 89       	ldd	r24, Y+23	; 0x17
    1b4e:	98 8d       	ldd	r25, Y+24	; 0x18
    1b50:	c5 5a       	subi	r28, 0xA5	; 165
    1b52:	df 4f       	sbci	r29, 0xFF	; 255
    1b54:	e2 e1       	ldi	r30, 0x12	; 18
    1b56:	0c 94 d7 30 	jmp	0x61ae	; 0x61ae <__epilogue_restores__>

00001b5a <UART_voidInit>:
 * Returns:  void
 * Description:	This Function used to initialized UART.
 */
/*********************************************************************************/
void UART_voidInit(void)
{
    1b5a:	df 93       	push	r29
    1b5c:	cf 93       	push	r28
    1b5e:	0f 92       	push	r0
    1b60:	cd b7       	in	r28, 0x3d	; 61
    1b62:	de b7       	in	r29, 0x3e	; 62
	u8 Local_Temp=0;
    1b64:	19 82       	std	Y+1, r1	; 0x01
/******   Enable Rx Interrupt (RXCIE)   *******/
SET_BIT(UCSRB,UCSRB_RXCIE);
    1b66:	aa e2       	ldi	r26, 0x2A	; 42
    1b68:	b0 e0       	ldi	r27, 0x00	; 0
    1b6a:	ea e2       	ldi	r30, 0x2A	; 42
    1b6c:	f0 e0       	ldi	r31, 0x00	; 0
    1b6e:	80 81       	ld	r24, Z
    1b70:	80 68       	ori	r24, 0x80	; 128
    1b72:	8c 93       	st	X, r24
/******   Enable UDRIE          *******/
SET_BIT(UCSRB,UCSRB_UDRIE);
    1b74:	aa e2       	ldi	r26, 0x2A	; 42
    1b76:	b0 e0       	ldi	r27, 0x00	; 0
    1b78:	ea e2       	ldi	r30, 0x2A	; 42
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	80 81       	ld	r24, Z
    1b7e:	80 62       	ori	r24, 0x20	; 32
    1b80:	8c 93       	st	X, r24

/******   Select 8-BIT Data *********/
CLR_BIT(UCSRB,UCSRB_UCSZ2);
    1b82:	aa e2       	ldi	r26, 0x2A	; 42
    1b84:	b0 e0       	ldi	r27, 0x00	; 0
    1b86:	ea e2       	ldi	r30, 0x2A	; 42
    1b88:	f0 e0       	ldi	r31, 0x00	; 0
    1b8a:	80 81       	ld	r24, Z
    1b8c:	8b 7f       	andi	r24, 0xFB	; 251
    1b8e:	8c 93       	st	X, r24
/*select UCSRC Register*/
SET_BIT(Local_Temp,UCSRC_URSEL);
    1b90:	89 81       	ldd	r24, Y+1	; 0x01
    1b92:	80 68       	ori	r24, 0x80	; 128
    1b94:	89 83       	std	Y+1, r24	; 0x01
SET_BIT(Local_Temp,UCSRC_UCSZ0);
    1b96:	89 81       	ldd	r24, Y+1	; 0x01
    1b98:	82 60       	ori	r24, 0x02	; 2
    1b9a:	89 83       	std	Y+1, r24	; 0x01
SET_BIT(Local_Temp,UCSRC_UCSZ1);
    1b9c:	89 81       	ldd	r24, Y+1	; 0x01
    1b9e:	84 60       	ori	r24, 0x04	; 4
    1ba0:	89 83       	std	Y+1, r24	; 0x01
/******  Select UART Mode *********/
CLR_BIT(Local_Temp,UCSRC_UMSEL);//select  Asynchronous Mode
    1ba2:	89 81       	ldd	r24, Y+1	; 0x01
    1ba4:	8f 7b       	andi	r24, 0xBF	; 191
    1ba6:	89 83       	std	Y+1, r24	; 0x01
/******   Select Parity Mode *********/
CLR_BIT(Local_Temp,UCSRC_UPM0);//disable Parity
    1ba8:	89 81       	ldd	r24, Y+1	; 0x01
    1baa:	8f 7e       	andi	r24, 0xEF	; 239
    1bac:	89 83       	std	Y+1, r24	; 0x01
CLR_BIT(Local_Temp,UCSRC_UPM1);
    1bae:	89 81       	ldd	r24, Y+1	; 0x01
    1bb0:	8f 7d       	andi	r24, 0xDF	; 223
    1bb2:	89 83       	std	Y+1, r24	; 0x01
/******   Select Stop bit *********/
CLR_BIT(Local_Temp,UCSRC_USBS);
    1bb4:	89 81       	ldd	r24, Y+1	; 0x01
    1bb6:	87 7f       	andi	r24, 0xF7	; 247
    1bb8:	89 83       	std	Y+1, r24	; 0x01

UCSRC=Local_Temp;
    1bba:	e0 e4       	ldi	r30, 0x40	; 64
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	89 81       	ldd	r24, Y+1	; 0x01
    1bc0:	80 83       	st	Z, r24

/******   Select BuadRate *********/
UBRRL=BUAD_RATE;
    1bc2:	e9 e2       	ldi	r30, 0x29	; 41
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	83 e3       	ldi	r24, 0x33	; 51
    1bc8:	80 83       	st	Z, r24
/******   Enable Rx *********/
SET_BIT(UCSRB,UCSRB_RXEN);
    1bca:	aa e2       	ldi	r26, 0x2A	; 42
    1bcc:	b0 e0       	ldi	r27, 0x00	; 0
    1bce:	ea e2       	ldi	r30, 0x2A	; 42
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	80 81       	ld	r24, Z
    1bd4:	80 61       	ori	r24, 0x10	; 16
    1bd6:	8c 93       	st	X, r24
/******   Enable Tx *********/
SET_BIT(UCSRB,UCSRB_TXEN);
    1bd8:	aa e2       	ldi	r26, 0x2A	; 42
    1bda:	b0 e0       	ldi	r27, 0x00	; 0
    1bdc:	ea e2       	ldi	r30, 0x2A	; 42
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	80 81       	ld	r24, Z
    1be2:	88 60       	ori	r24, 0x08	; 8
    1be4:	8c 93       	st	X, r24
}
    1be6:	0f 90       	pop	r0
    1be8:	cf 91       	pop	r28
    1bea:	df 91       	pop	r29
    1bec:	08 95       	ret

00001bee <UART_voidSendData_Asynch>:
 * Returns:  void
 * Description:	This Function used to send data using UART interrupt.
 */
/*********************************************************************************/
void UART_voidSendData_Asynch(u8 Copy_u8Data)
{
    1bee:	df 93       	push	r29
    1bf0:	cf 93       	push	r28
    1bf2:	0f 92       	push	r0
    1bf4:	cd b7       	in	r28, 0x3d	; 61
    1bf6:	de b7       	in	r29, 0x3e	; 62
    1bf8:	89 83       	std	Y+1, r24	; 0x01
//Global_Var =Copy_u8Data;
UDR =Copy_u8Data;
    1bfa:	ec e2       	ldi	r30, 0x2C	; 44
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	89 81       	ldd	r24, Y+1	; 0x01
    1c00:	80 83       	st	Z, r24
}
    1c02:	0f 90       	pop	r0
    1c04:	cf 91       	pop	r28
    1c06:	df 91       	pop	r29
    1c08:	08 95       	ret

00001c0a <UART_ReceiveData>:
 * Returns:  u8
 * Description:	This Function used to receive data from UART .
 */
/*********************************************************************************/
u8  UART_ReceiveData(void)
{
    1c0a:	df 93       	push	r29
    1c0c:	cf 93       	push	r28
    1c0e:	cd b7       	in	r28, 0x3d	; 61
    1c10:	de b7       	in	r29, 0x3e	; 62
//GET_BIT(UCSRA,UCSRA_RXC);
return UDR;
    1c12:	ec e2       	ldi	r30, 0x2C	; 44
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	80 81       	ld	r24, Z
}
    1c18:	cf 91       	pop	r28
    1c1a:	df 91       	pop	r29
    1c1c:	08 95       	ret

00001c1e <__vector_13>:


// USART, RXC
void __vector_13 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_13 (void)
{
    1c1e:	1f 92       	push	r1
    1c20:	0f 92       	push	r0
    1c22:	0f b6       	in	r0, 0x3f	; 63
    1c24:	0f 92       	push	r0
    1c26:	11 24       	eor	r1, r1
    1c28:	2f 93       	push	r18
    1c2a:	3f 93       	push	r19
    1c2c:	4f 93       	push	r20
    1c2e:	5f 93       	push	r21
    1c30:	6f 93       	push	r22
    1c32:	7f 93       	push	r23
    1c34:	8f 93       	push	r24
    1c36:	9f 93       	push	r25
    1c38:	af 93       	push	r26
    1c3a:	bf 93       	push	r27
    1c3c:	ef 93       	push	r30
    1c3e:	ff 93       	push	r31
    1c40:	df 93       	push	r29
    1c42:	cf 93       	push	r28
    1c44:	cd b7       	in	r28, 0x3d	; 61
    1c46:	de b7       	in	r29, 0x3e	; 62
	Rx_pf();
    1c48:	e0 91 05 05 	lds	r30, 0x0505
    1c4c:	f0 91 06 05 	lds	r31, 0x0506
    1c50:	09 95       	icall
}
    1c52:	cf 91       	pop	r28
    1c54:	df 91       	pop	r29
    1c56:	ff 91       	pop	r31
    1c58:	ef 91       	pop	r30
    1c5a:	bf 91       	pop	r27
    1c5c:	af 91       	pop	r26
    1c5e:	9f 91       	pop	r25
    1c60:	8f 91       	pop	r24
    1c62:	7f 91       	pop	r23
    1c64:	6f 91       	pop	r22
    1c66:	5f 91       	pop	r21
    1c68:	4f 91       	pop	r20
    1c6a:	3f 91       	pop	r19
    1c6c:	2f 91       	pop	r18
    1c6e:	0f 90       	pop	r0
    1c70:	0f be       	out	0x3f, r0	; 63
    1c72:	0f 90       	pop	r0
    1c74:	1f 90       	pop	r1
    1c76:	18 95       	reti

00001c78 <__vector_14>:
// USART, UDRE
void __vector_14 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_14 (void)
{
    1c78:	1f 92       	push	r1
    1c7a:	0f 92       	push	r0
    1c7c:	0f b6       	in	r0, 0x3f	; 63
    1c7e:	0f 92       	push	r0
    1c80:	11 24       	eor	r1, r1
    1c82:	2f 93       	push	r18
    1c84:	3f 93       	push	r19
    1c86:	4f 93       	push	r20
    1c88:	5f 93       	push	r21
    1c8a:	6f 93       	push	r22
    1c8c:	7f 93       	push	r23
    1c8e:	8f 93       	push	r24
    1c90:	9f 93       	push	r25
    1c92:	af 93       	push	r26
    1c94:	bf 93       	push	r27
    1c96:	ef 93       	push	r30
    1c98:	ff 93       	push	r31
    1c9a:	df 93       	push	r29
    1c9c:	cf 93       	push	r28
    1c9e:	cd b7       	in	r28, 0x3d	; 61
    1ca0:	de b7       	in	r29, 0x3e	; 62
	Tx_pf();
    1ca2:	e0 91 03 05 	lds	r30, 0x0503
    1ca6:	f0 91 04 05 	lds	r31, 0x0504
    1caa:	09 95       	icall
	//UART_voidSendData_Asynch();
}
    1cac:	cf 91       	pop	r28
    1cae:	df 91       	pop	r29
    1cb0:	ff 91       	pop	r31
    1cb2:	ef 91       	pop	r30
    1cb4:	bf 91       	pop	r27
    1cb6:	af 91       	pop	r26
    1cb8:	9f 91       	pop	r25
    1cba:	8f 91       	pop	r24
    1cbc:	7f 91       	pop	r23
    1cbe:	6f 91       	pop	r22
    1cc0:	5f 91       	pop	r21
    1cc2:	4f 91       	pop	r20
    1cc4:	3f 91       	pop	r19
    1cc6:	2f 91       	pop	r18
    1cc8:	0f 90       	pop	r0
    1cca:	0f be       	out	0x3f, r0	; 63
    1ccc:	0f 90       	pop	r0
    1cce:	1f 90       	pop	r1
    1cd0:	18 95       	reti

00001cd2 <__vector_15>:
//USART, TXC
void __vector_15 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_15 (void){
    1cd2:	1f 92       	push	r1
    1cd4:	0f 92       	push	r0
    1cd6:	0f b6       	in	r0, 0x3f	; 63
    1cd8:	0f 92       	push	r0
    1cda:	11 24       	eor	r1, r1
    1cdc:	df 93       	push	r29
    1cde:	cf 93       	push	r28
    1ce0:	cd b7       	in	r28, 0x3d	; 61
    1ce2:	de b7       	in	r29, 0x3e	; 62

}
    1ce4:	cf 91       	pop	r28
    1ce6:	df 91       	pop	r29
    1ce8:	0f 90       	pop	r0
    1cea:	0f be       	out	0x3f, r0	; 63
    1cec:	0f 90       	pop	r0
    1cee:	1f 90       	pop	r1
    1cf0:	18 95       	reti

00001cf2 <UARTTX_vidSetISR>:
void UARTTX_vidSetISR(void (*p)(void))
{
    1cf2:	df 93       	push	r29
    1cf4:	cf 93       	push	r28
    1cf6:	00 d0       	rcall	.+0      	; 0x1cf8 <UARTTX_vidSetISR+0x6>
    1cf8:	cd b7       	in	r28, 0x3d	; 61
    1cfa:	de b7       	in	r29, 0x3e	; 62
    1cfc:	9a 83       	std	Y+2, r25	; 0x02
    1cfe:	89 83       	std	Y+1, r24	; 0x01
	Tx_pf=p;
    1d00:	89 81       	ldd	r24, Y+1	; 0x01
    1d02:	9a 81       	ldd	r25, Y+2	; 0x02
    1d04:	90 93 04 05 	sts	0x0504, r25
    1d08:	80 93 03 05 	sts	0x0503, r24
	//Data=value;
	}
    1d0c:	0f 90       	pop	r0
    1d0e:	0f 90       	pop	r0
    1d10:	cf 91       	pop	r28
    1d12:	df 91       	pop	r29
    1d14:	08 95       	ret

00001d16 <UARTRX_vidSetISR>:
void UARTRX_vidSetISR(void (*p)(void))
{
    1d16:	df 93       	push	r29
    1d18:	cf 93       	push	r28
    1d1a:	00 d0       	rcall	.+0      	; 0x1d1c <UARTRX_vidSetISR+0x6>
    1d1c:	cd b7       	in	r28, 0x3d	; 61
    1d1e:	de b7       	in	r29, 0x3e	; 62
    1d20:	9a 83       	std	Y+2, r25	; 0x02
    1d22:	89 83       	std	Y+1, r24	; 0x01
	Rx_pf=p;
    1d24:	89 81       	ldd	r24, Y+1	; 0x01
    1d26:	9a 81       	ldd	r25, Y+2	; 0x02
    1d28:	90 93 06 05 	sts	0x0506, r25
    1d2c:	80 93 05 05 	sts	0x0505, r24
	//Data=value;
	}
    1d30:	0f 90       	pop	r0
    1d32:	0f 90       	pop	r0
    1d34:	cf 91       	pop	r28
    1d36:	df 91       	pop	r29
    1d38:	08 95       	ret

00001d3a <disable_tx>:




void disable_tx(void)
{
    1d3a:	df 93       	push	r29
    1d3c:	cf 93       	push	r28
    1d3e:	cd b7       	in	r28, 0x3d	; 61
    1d40:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(UCSRB,UCSRB_UDRIE);
    1d42:	aa e2       	ldi	r26, 0x2A	; 42
    1d44:	b0 e0       	ldi	r27, 0x00	; 0
    1d46:	ea e2       	ldi	r30, 0x2A	; 42
    1d48:	f0 e0       	ldi	r31, 0x00	; 0
    1d4a:	80 81       	ld	r24, Z
    1d4c:	8f 7d       	andi	r24, 0xDF	; 223
    1d4e:	8c 93       	st	X, r24

}
    1d50:	cf 91       	pop	r28
    1d52:	df 91       	pop	r29
    1d54:	08 95       	ret

00001d56 <enable_tx>:
	
	
void enable_tx(void)
{
    1d56:	df 93       	push	r29
    1d58:	cf 93       	push	r28
    1d5a:	cd b7       	in	r28, 0x3d	; 61
    1d5c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,UCSRB_UDRIE);
    1d5e:	aa e2       	ldi	r26, 0x2A	; 42
    1d60:	b0 e0       	ldi	r27, 0x00	; 0
    1d62:	ea e2       	ldi	r30, 0x2A	; 42
    1d64:	f0 e0       	ldi	r31, 0x00	; 0
    1d66:	80 81       	ld	r24, Z
    1d68:	80 62       	ori	r24, 0x20	; 32
    1d6a:	8c 93       	st	X, r24

}
    1d6c:	cf 91       	pop	r28
    1d6e:	df 91       	pop	r29
    1d70:	08 95       	ret

00001d72 <UART_vInit>:



#include "../UART/UART_prog.h"

void UART_vInit(const UART_tcfgInitialize *LOCAL_tcfgUART){
    1d72:	df 93       	push	r29
    1d74:	cf 93       	push	r28
    1d76:	00 d0       	rcall	.+0      	; 0x1d78 <UART_vInit+0x6>
    1d78:	cd b7       	in	r28, 0x3d	; 61
    1d7a:	de b7       	in	r29, 0x3e	; 62
    1d7c:	9a 83       	std	Y+2, r25	; 0x02
    1d7e:	89 83       	std	Y+1, r24	; 0x01


	if(LOCAL_tcfgUART->GLOBAL_tcfgCharSize == CHAR_5_BITS){
    1d80:	e9 81       	ldd	r30, Y+1	; 0x01
    1d82:	fa 81       	ldd	r31, Y+2	; 0x02
    1d84:	80 81       	ld	r24, Z
    1d86:	88 23       	and	r24, r24
    1d88:	b1 f4       	brne	.+44     	; 0x1db6 <UART_vInit+0x44>
		CLR_BIT(UCSRC_REG, UCSZ0_BIT);
    1d8a:	a0 e4       	ldi	r26, 0x40	; 64
    1d8c:	b0 e0       	ldi	r27, 0x00	; 0
    1d8e:	e0 e4       	ldi	r30, 0x40	; 64
    1d90:	f0 e0       	ldi	r31, 0x00	; 0
    1d92:	80 81       	ld	r24, Z
    1d94:	8d 7f       	andi	r24, 0xFD	; 253
    1d96:	8c 93       	st	X, r24
		CLR_BIT(UCSRC_REG, UCSZ1_BIT);
    1d98:	a0 e4       	ldi	r26, 0x40	; 64
    1d9a:	b0 e0       	ldi	r27, 0x00	; 0
    1d9c:	e0 e4       	ldi	r30, 0x40	; 64
    1d9e:	f0 e0       	ldi	r31, 0x00	; 0
    1da0:	80 81       	ld	r24, Z
    1da2:	8b 7f       	andi	r24, 0xFB	; 251
    1da4:	8c 93       	st	X, r24
		CLR_BIT(UCSRB_REG, UCSZ2_BIT);
    1da6:	aa e2       	ldi	r26, 0x2A	; 42
    1da8:	b0 e0       	ldi	r27, 0x00	; 0
    1daa:	ea e2       	ldi	r30, 0x2A	; 42
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	80 81       	ld	r24, Z
    1db0:	8b 7f       	andi	r24, 0xFB	; 251
    1db2:	8c 93       	st	X, r24
    1db4:	6b c0       	rjmp	.+214    	; 0x1e8c <UART_vInit+0x11a>
	}
	else if((LOCAL_tcfgUART->GLOBAL_tcfgCharSize == CHAR_6_BITS)){
    1db6:	e9 81       	ldd	r30, Y+1	; 0x01
    1db8:	fa 81       	ldd	r31, Y+2	; 0x02
    1dba:	80 81       	ld	r24, Z
    1dbc:	81 30       	cpi	r24, 0x01	; 1
    1dbe:	b1 f4       	brne	.+44     	; 0x1dec <UART_vInit+0x7a>
		SET_BIT(UCSRC_REG, UCSZ0_BIT);
    1dc0:	a0 e4       	ldi	r26, 0x40	; 64
    1dc2:	b0 e0       	ldi	r27, 0x00	; 0
    1dc4:	e0 e4       	ldi	r30, 0x40	; 64
    1dc6:	f0 e0       	ldi	r31, 0x00	; 0
    1dc8:	80 81       	ld	r24, Z
    1dca:	82 60       	ori	r24, 0x02	; 2
    1dcc:	8c 93       	st	X, r24
		CLR_BIT(UCSRC_REG, UCSZ1_BIT);
    1dce:	a0 e4       	ldi	r26, 0x40	; 64
    1dd0:	b0 e0       	ldi	r27, 0x00	; 0
    1dd2:	e0 e4       	ldi	r30, 0x40	; 64
    1dd4:	f0 e0       	ldi	r31, 0x00	; 0
    1dd6:	80 81       	ld	r24, Z
    1dd8:	8b 7f       	andi	r24, 0xFB	; 251
    1dda:	8c 93       	st	X, r24
		CLR_BIT(UCSRB_REG, UCSZ2_BIT);
    1ddc:	aa e2       	ldi	r26, 0x2A	; 42
    1dde:	b0 e0       	ldi	r27, 0x00	; 0
    1de0:	ea e2       	ldi	r30, 0x2A	; 42
    1de2:	f0 e0       	ldi	r31, 0x00	; 0
    1de4:	80 81       	ld	r24, Z
    1de6:	8b 7f       	andi	r24, 0xFB	; 251
    1de8:	8c 93       	st	X, r24
    1dea:	50 c0       	rjmp	.+160    	; 0x1e8c <UART_vInit+0x11a>

	}
	else if((LOCAL_tcfgUART->GLOBAL_tcfgCharSize == CHAR_7_BITS)){
    1dec:	e9 81       	ldd	r30, Y+1	; 0x01
    1dee:	fa 81       	ldd	r31, Y+2	; 0x02
    1df0:	80 81       	ld	r24, Z
    1df2:	82 30       	cpi	r24, 0x02	; 2
    1df4:	b1 f4       	brne	.+44     	; 0x1e22 <UART_vInit+0xb0>
		CLR_BIT(UCSRC_REG, UCSZ0_BIT);
    1df6:	a0 e4       	ldi	r26, 0x40	; 64
    1df8:	b0 e0       	ldi	r27, 0x00	; 0
    1dfa:	e0 e4       	ldi	r30, 0x40	; 64
    1dfc:	f0 e0       	ldi	r31, 0x00	; 0
    1dfe:	80 81       	ld	r24, Z
    1e00:	8d 7f       	andi	r24, 0xFD	; 253
    1e02:	8c 93       	st	X, r24
		SET_BIT(UCSRC_REG, UCSZ1_BIT);
    1e04:	a0 e4       	ldi	r26, 0x40	; 64
    1e06:	b0 e0       	ldi	r27, 0x00	; 0
    1e08:	e0 e4       	ldi	r30, 0x40	; 64
    1e0a:	f0 e0       	ldi	r31, 0x00	; 0
    1e0c:	80 81       	ld	r24, Z
    1e0e:	84 60       	ori	r24, 0x04	; 4
    1e10:	8c 93       	st	X, r24
		CLR_BIT(UCSRB_REG, UCSZ2_BIT);
    1e12:	aa e2       	ldi	r26, 0x2A	; 42
    1e14:	b0 e0       	ldi	r27, 0x00	; 0
    1e16:	ea e2       	ldi	r30, 0x2A	; 42
    1e18:	f0 e0       	ldi	r31, 0x00	; 0
    1e1a:	80 81       	ld	r24, Z
    1e1c:	8b 7f       	andi	r24, 0xFB	; 251
    1e1e:	8c 93       	st	X, r24
    1e20:	35 c0       	rjmp	.+106    	; 0x1e8c <UART_vInit+0x11a>

	}
	else if((LOCAL_tcfgUART->GLOBAL_tcfgCharSize == CHAR_8_BITS)){
    1e22:	e9 81       	ldd	r30, Y+1	; 0x01
    1e24:	fa 81       	ldd	r31, Y+2	; 0x02
    1e26:	80 81       	ld	r24, Z
    1e28:	83 30       	cpi	r24, 0x03	; 3
    1e2a:	b1 f4       	brne	.+44     	; 0x1e58 <UART_vInit+0xe6>
		SET_BIT(UCSRC_REG, UCSZ0_BIT);
    1e2c:	a0 e4       	ldi	r26, 0x40	; 64
    1e2e:	b0 e0       	ldi	r27, 0x00	; 0
    1e30:	e0 e4       	ldi	r30, 0x40	; 64
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	80 81       	ld	r24, Z
    1e36:	82 60       	ori	r24, 0x02	; 2
    1e38:	8c 93       	st	X, r24
		SET_BIT(UCSRC_REG, UCSZ1_BIT);
    1e3a:	a0 e4       	ldi	r26, 0x40	; 64
    1e3c:	b0 e0       	ldi	r27, 0x00	; 0
    1e3e:	e0 e4       	ldi	r30, 0x40	; 64
    1e40:	f0 e0       	ldi	r31, 0x00	; 0
    1e42:	80 81       	ld	r24, Z
    1e44:	84 60       	ori	r24, 0x04	; 4
    1e46:	8c 93       	st	X, r24
		CLR_BIT(UCSRB_REG, UCSZ2_BIT);
    1e48:	aa e2       	ldi	r26, 0x2A	; 42
    1e4a:	b0 e0       	ldi	r27, 0x00	; 0
    1e4c:	ea e2       	ldi	r30, 0x2A	; 42
    1e4e:	f0 e0       	ldi	r31, 0x00	; 0
    1e50:	80 81       	ld	r24, Z
    1e52:	8b 7f       	andi	r24, 0xFB	; 251
    1e54:	8c 93       	st	X, r24
    1e56:	1a c0       	rjmp	.+52     	; 0x1e8c <UART_vInit+0x11a>
	}
	else if((LOCAL_tcfgUART->GLOBAL_tcfgCharSize == CHAR_9_BITS)){
    1e58:	e9 81       	ldd	r30, Y+1	; 0x01
    1e5a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e5c:	80 81       	ld	r24, Z
    1e5e:	84 30       	cpi	r24, 0x04	; 4
    1e60:	a9 f4       	brne	.+42     	; 0x1e8c <UART_vInit+0x11a>
		SET_BIT(UCSRC_REG, UCSZ0_BIT);
    1e62:	a0 e4       	ldi	r26, 0x40	; 64
    1e64:	b0 e0       	ldi	r27, 0x00	; 0
    1e66:	e0 e4       	ldi	r30, 0x40	; 64
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	80 81       	ld	r24, Z
    1e6c:	82 60       	ori	r24, 0x02	; 2
    1e6e:	8c 93       	st	X, r24
		SET_BIT(UCSRC_REG, UCSZ1_BIT);
    1e70:	a0 e4       	ldi	r26, 0x40	; 64
    1e72:	b0 e0       	ldi	r27, 0x00	; 0
    1e74:	e0 e4       	ldi	r30, 0x40	; 64
    1e76:	f0 e0       	ldi	r31, 0x00	; 0
    1e78:	80 81       	ld	r24, Z
    1e7a:	84 60       	ori	r24, 0x04	; 4
    1e7c:	8c 93       	st	X, r24
		SET_BIT(UCSRB_REG, UCSZ2_BIT);
    1e7e:	aa e2       	ldi	r26, 0x2A	; 42
    1e80:	b0 e0       	ldi	r27, 0x00	; 0
    1e82:	ea e2       	ldi	r30, 0x2A	; 42
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	80 81       	ld	r24, Z
    1e88:	84 60       	ori	r24, 0x04	; 4
    1e8a:	8c 93       	st	X, r24
	}
	else { /* Do Nothing */ }

	if(LOCAL_tcfgUART->GLOBAL_tcfgParityState == PARITY_DISABLED){
    1e8c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e8e:	fa 81       	ldd	r31, Y+2	; 0x02
    1e90:	81 81       	ldd	r24, Z+1	; 0x01
    1e92:	88 23       	and	r24, r24
    1e94:	79 f4       	brne	.+30     	; 0x1eb4 <UART_vInit+0x142>
		CLR_BIT(UCSRC_REG, UPM0_BIT);
    1e96:	a0 e4       	ldi	r26, 0x40	; 64
    1e98:	b0 e0       	ldi	r27, 0x00	; 0
    1e9a:	e0 e4       	ldi	r30, 0x40	; 64
    1e9c:	f0 e0       	ldi	r31, 0x00	; 0
    1e9e:	80 81       	ld	r24, Z
    1ea0:	8f 7e       	andi	r24, 0xEF	; 239
    1ea2:	8c 93       	st	X, r24
		CLR_BIT(UCSRC_REG, UPM1_BIT);
    1ea4:	a0 e4       	ldi	r26, 0x40	; 64
    1ea6:	b0 e0       	ldi	r27, 0x00	; 0
    1ea8:	e0 e4       	ldi	r30, 0x40	; 64
    1eaa:	f0 e0       	ldi	r31, 0x00	; 0
    1eac:	80 81       	ld	r24, Z
    1eae:	8f 7d       	andi	r24, 0xDF	; 223
    1eb0:	8c 93       	st	X, r24
    1eb2:	27 c0       	rjmp	.+78     	; 0x1f02 <UART_vInit+0x190>
	}
	else if(LOCAL_tcfgUART->GLOBAL_tcfgParityState == PARITY_EVEN){
    1eb4:	e9 81       	ldd	r30, Y+1	; 0x01
    1eb6:	fa 81       	ldd	r31, Y+2	; 0x02
    1eb8:	81 81       	ldd	r24, Z+1	; 0x01
    1eba:	81 30       	cpi	r24, 0x01	; 1
    1ebc:	79 f4       	brne	.+30     	; 0x1edc <UART_vInit+0x16a>
		CLR_BIT(UCSRC_REG, UPM0_BIT);
    1ebe:	a0 e4       	ldi	r26, 0x40	; 64
    1ec0:	b0 e0       	ldi	r27, 0x00	; 0
    1ec2:	e0 e4       	ldi	r30, 0x40	; 64
    1ec4:	f0 e0       	ldi	r31, 0x00	; 0
    1ec6:	80 81       	ld	r24, Z
    1ec8:	8f 7e       	andi	r24, 0xEF	; 239
    1eca:	8c 93       	st	X, r24
		SET_BIT(UCSRC_REG, UPM1_BIT);
    1ecc:	a0 e4       	ldi	r26, 0x40	; 64
    1ece:	b0 e0       	ldi	r27, 0x00	; 0
    1ed0:	e0 e4       	ldi	r30, 0x40	; 64
    1ed2:	f0 e0       	ldi	r31, 0x00	; 0
    1ed4:	80 81       	ld	r24, Z
    1ed6:	80 62       	ori	r24, 0x20	; 32
    1ed8:	8c 93       	st	X, r24
    1eda:	13 c0       	rjmp	.+38     	; 0x1f02 <UART_vInit+0x190>
	}
	else if(LOCAL_tcfgUART->GLOBAL_tcfgParityState == PARITY_ODD){
    1edc:	e9 81       	ldd	r30, Y+1	; 0x01
    1ede:	fa 81       	ldd	r31, Y+2	; 0x02
    1ee0:	81 81       	ldd	r24, Z+1	; 0x01
    1ee2:	82 30       	cpi	r24, 0x02	; 2
    1ee4:	71 f4       	brne	.+28     	; 0x1f02 <UART_vInit+0x190>
		SET_BIT(UCSRC_REG, UPM0_BIT);
    1ee6:	a0 e4       	ldi	r26, 0x40	; 64
    1ee8:	b0 e0       	ldi	r27, 0x00	; 0
    1eea:	e0 e4       	ldi	r30, 0x40	; 64
    1eec:	f0 e0       	ldi	r31, 0x00	; 0
    1eee:	80 81       	ld	r24, Z
    1ef0:	80 61       	ori	r24, 0x10	; 16
    1ef2:	8c 93       	st	X, r24
		SET_BIT(UCSRC_REG, UPM1_BIT);
    1ef4:	a0 e4       	ldi	r26, 0x40	; 64
    1ef6:	b0 e0       	ldi	r27, 0x00	; 0
    1ef8:	e0 e4       	ldi	r30, 0x40	; 64
    1efa:	f0 e0       	ldi	r31, 0x00	; 0
    1efc:	80 81       	ld	r24, Z
    1efe:	80 62       	ori	r24, 0x20	; 32
    1f00:	8c 93       	st	X, r24
	}
	else { /* Do Nothing */ }

	if(LOCAL_tcfgUART->GLOBAL_tcfgStopBits == STOP_BITS_1){
    1f02:	e9 81       	ldd	r30, Y+1	; 0x01
    1f04:	fa 81       	ldd	r31, Y+2	; 0x02
    1f06:	82 81       	ldd	r24, Z+2	; 0x02
    1f08:	88 23       	and	r24, r24
    1f0a:	41 f4       	brne	.+16     	; 0x1f1c <UART_vInit+0x1aa>
		CLR_BIT(UCSRC_REG, USBS_BIT);
    1f0c:	a0 e4       	ldi	r26, 0x40	; 64
    1f0e:	b0 e0       	ldi	r27, 0x00	; 0
    1f10:	e0 e4       	ldi	r30, 0x40	; 64
    1f12:	f0 e0       	ldi	r31, 0x00	; 0
    1f14:	80 81       	ld	r24, Z
    1f16:	87 7f       	andi	r24, 0xF7	; 247
    1f18:	8c 93       	st	X, r24
    1f1a:	0c c0       	rjmp	.+24     	; 0x1f34 <UART_vInit+0x1c2>
	}
	else if(LOCAL_tcfgUART->GLOBAL_tcfgStopBits == STOP_BITS_2){
    1f1c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f1e:	fa 81       	ldd	r31, Y+2	; 0x02
    1f20:	82 81       	ldd	r24, Z+2	; 0x02
    1f22:	81 30       	cpi	r24, 0x01	; 1
    1f24:	39 f4       	brne	.+14     	; 0x1f34 <UART_vInit+0x1c2>
		SET_BIT(UCSRC_REG, USBS_BIT);
    1f26:	a0 e4       	ldi	r26, 0x40	; 64
    1f28:	b0 e0       	ldi	r27, 0x00	; 0
    1f2a:	e0 e4       	ldi	r30, 0x40	; 64
    1f2c:	f0 e0       	ldi	r31, 0x00	; 0
    1f2e:	80 81       	ld	r24, Z
    1f30:	88 60       	ori	r24, 0x08	; 8
    1f32:	8c 93       	st	X, r24
	}
	else { /* Do Nothing */ }

	if(LOCAL_tcfgUART->GLOBAL_tcfgUartInterrupt == UART_INTERRUPT_DISABLED){
    1f34:	e9 81       	ldd	r30, Y+1	; 0x01
    1f36:	fa 81       	ldd	r31, Y+2	; 0x02
    1f38:	83 81       	ldd	r24, Z+3	; 0x03
    1f3a:	88 23       	and	r24, r24
    1f3c:	b1 f4       	brne	.+44     	; 0x1f6a <UART_vInit+0x1f8>
		CLR_BIT(UCSRB_REG, RXCIE_BIT);
    1f3e:	aa e2       	ldi	r26, 0x2A	; 42
    1f40:	b0 e0       	ldi	r27, 0x00	; 0
    1f42:	ea e2       	ldi	r30, 0x2A	; 42
    1f44:	f0 e0       	ldi	r31, 0x00	; 0
    1f46:	80 81       	ld	r24, Z
    1f48:	8f 77       	andi	r24, 0x7F	; 127
    1f4a:	8c 93       	st	X, r24
		CLR_BIT(UCSRB_REG, UDRIE_BIT);
    1f4c:	aa e2       	ldi	r26, 0x2A	; 42
    1f4e:	b0 e0       	ldi	r27, 0x00	; 0
    1f50:	ea e2       	ldi	r30, 0x2A	; 42
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	80 81       	ld	r24, Z
    1f56:	8f 7d       	andi	r24, 0xDF	; 223
    1f58:	8c 93       	st	X, r24
		CLR_BIT(UCSRB_REG, TXCIE_BIT);
    1f5a:	aa e2       	ldi	r26, 0x2A	; 42
    1f5c:	b0 e0       	ldi	r27, 0x00	; 0
    1f5e:	ea e2       	ldi	r30, 0x2A	; 42
    1f60:	f0 e0       	ldi	r31, 0x00	; 0
    1f62:	80 81       	ld	r24, Z
    1f64:	8f 7b       	andi	r24, 0xBF	; 191
    1f66:	8c 93       	st	X, r24
    1f68:	1a c0       	rjmp	.+52     	; 0x1f9e <UART_vInit+0x22c>
	}
	else if(LOCAL_tcfgUART->GLOBAL_tcfgUartInterrupt == UART_INTERRUPT_ENABLED){
    1f6a:	e9 81       	ldd	r30, Y+1	; 0x01
    1f6c:	fa 81       	ldd	r31, Y+2	; 0x02
    1f6e:	83 81       	ldd	r24, Z+3	; 0x03
    1f70:	81 30       	cpi	r24, 0x01	; 1
    1f72:	a9 f4       	brne	.+42     	; 0x1f9e <UART_vInit+0x22c>
		SET_BIT(UCSRB_REG, RXCIE_BIT);
    1f74:	aa e2       	ldi	r26, 0x2A	; 42
    1f76:	b0 e0       	ldi	r27, 0x00	; 0
    1f78:	ea e2       	ldi	r30, 0x2A	; 42
    1f7a:	f0 e0       	ldi	r31, 0x00	; 0
    1f7c:	80 81       	ld	r24, Z
    1f7e:	80 68       	ori	r24, 0x80	; 128
    1f80:	8c 93       	st	X, r24
		SET_BIT(UCSRB_REG, UDRIE_BIT);
    1f82:	aa e2       	ldi	r26, 0x2A	; 42
    1f84:	b0 e0       	ldi	r27, 0x00	; 0
    1f86:	ea e2       	ldi	r30, 0x2A	; 42
    1f88:	f0 e0       	ldi	r31, 0x00	; 0
    1f8a:	80 81       	ld	r24, Z
    1f8c:	80 62       	ori	r24, 0x20	; 32
    1f8e:	8c 93       	st	X, r24
		SET_BIT(UCSRB_REG, TXCIE_BIT);
    1f90:	aa e2       	ldi	r26, 0x2A	; 42
    1f92:	b0 e0       	ldi	r27, 0x00	; 0
    1f94:	ea e2       	ldi	r30, 0x2A	; 42
    1f96:	f0 e0       	ldi	r31, 0x00	; 0
    1f98:	80 81       	ld	r24, Z
    1f9a:	80 64       	ori	r24, 0x40	; 64
    1f9c:	8c 93       	st	X, r24
	}
	else { /* Do Nothing */ }

	if(LOCAL_tcfgUART->GLOBAL_tcfgUartClkMode == UART_ASYNCHRONOUS){
    1f9e:	e9 81       	ldd	r30, Y+1	; 0x01
    1fa0:	fa 81       	ldd	r31, Y+2	; 0x02
    1fa2:	87 81       	ldd	r24, Z+7	; 0x07
    1fa4:	81 30       	cpi	r24, 0x01	; 1
    1fa6:	41 f4       	brne	.+16     	; 0x1fb8 <UART_vInit+0x246>
		CLR_BIT(UCSRC_REG, UMSEL_BIT);
    1fa8:	a0 e4       	ldi	r26, 0x40	; 64
    1faa:	b0 e0       	ldi	r27, 0x00	; 0
    1fac:	e0 e4       	ldi	r30, 0x40	; 64
    1fae:	f0 e0       	ldi	r31, 0x00	; 0
    1fb0:	80 81       	ld	r24, Z
    1fb2:	8f 7b       	andi	r24, 0xBF	; 191
    1fb4:	8c 93       	st	X, r24
    1fb6:	0c c0       	rjmp	.+24     	; 0x1fd0 <UART_vInit+0x25e>
	}
	else if(LOCAL_tcfgUART->GLOBAL_tcfgUartClkMode == UART_SYNCHRONOUS){
    1fb8:	e9 81       	ldd	r30, Y+1	; 0x01
    1fba:	fa 81       	ldd	r31, Y+2	; 0x02
    1fbc:	87 81       	ldd	r24, Z+7	; 0x07
    1fbe:	88 23       	and	r24, r24
    1fc0:	39 f4       	brne	.+14     	; 0x1fd0 <UART_vInit+0x25e>
		SET_BIT(UCSRC_REG, UMSEL_BIT);
    1fc2:	a0 e4       	ldi	r26, 0x40	; 64
    1fc4:	b0 e0       	ldi	r27, 0x00	; 0
    1fc6:	e0 e4       	ldi	r30, 0x40	; 64
    1fc8:	f0 e0       	ldi	r31, 0x00	; 0
    1fca:	80 81       	ld	r24, Z
    1fcc:	80 64       	ori	r24, 0x40	; 64
    1fce:	8c 93       	st	X, r24
	}
	else { /* Do Nothing */ }

	if(LOCAL_tcfgUART->GLOBAL_tcfgUartCommMode == UART_2X_SPEED){
    1fd0:	e9 81       	ldd	r30, Y+1	; 0x01
    1fd2:	fa 81       	ldd	r31, Y+2	; 0x02
    1fd4:	80 85       	ldd	r24, Z+8	; 0x08
    1fd6:	81 30       	cpi	r24, 0x01	; 1
    1fd8:	c1 f4       	brne	.+48     	; 0x200a <UART_vInit+0x298>
		SET_BIT(UCSRA_REG, U2X_BIT);
    1fda:	ab e2       	ldi	r26, 0x2B	; 43
    1fdc:	b0 e0       	ldi	r27, 0x00	; 0
    1fde:	eb e2       	ldi	r30, 0x2B	; 43
    1fe0:	f0 e0       	ldi	r31, 0x00	; 0
    1fe2:	80 81       	ld	r24, Z
    1fe4:	82 60       	ori	r24, 0x02	; 2
    1fe6:	8c 93       	st	X, r24
		UBRRL_REG = LOCAL_tcfgUART->GLOBAL_tcfgUartBaudRate2X;
    1fe8:	a9 e2       	ldi	r26, 0x29	; 41
    1fea:	b0 e0       	ldi	r27, 0x00	; 0
    1fec:	e9 81       	ldd	r30, Y+1	; 0x01
    1fee:	fa 81       	ldd	r31, Y+2	; 0x02
    1ff0:	84 81       	ldd	r24, Z+4	; 0x04
    1ff2:	95 81       	ldd	r25, Z+5	; 0x05
    1ff4:	8c 93       	st	X, r24
		UBRRH_REG = ((LOCAL_tcfgUART->GLOBAL_tcfgUartBaudRate2X)>>8);
    1ff6:	a0 e4       	ldi	r26, 0x40	; 64
    1ff8:	b0 e0       	ldi	r27, 0x00	; 0
    1ffa:	e9 81       	ldd	r30, Y+1	; 0x01
    1ffc:	fa 81       	ldd	r31, Y+2	; 0x02
    1ffe:	84 81       	ldd	r24, Z+4	; 0x04
    2000:	95 81       	ldd	r25, Z+5	; 0x05
    2002:	89 2f       	mov	r24, r25
    2004:	99 27       	eor	r25, r25
    2006:	8c 93       	st	X, r24
    2008:	1d c0       	rjmp	.+58     	; 0x2044 <UART_vInit+0x2d2>
	}
	else if(LOCAL_tcfgUART->GLOBAL_tcfgUartCommMode == UART_1X_SPEED){
    200a:	e9 81       	ldd	r30, Y+1	; 0x01
    200c:	fa 81       	ldd	r31, Y+2	; 0x02
    200e:	80 85       	ldd	r24, Z+8	; 0x08
    2010:	88 23       	and	r24, r24
    2012:	c1 f4       	brne	.+48     	; 0x2044 <UART_vInit+0x2d2>
		CLR_BIT(UCSRA_REG, U2X_BIT);
    2014:	ab e2       	ldi	r26, 0x2B	; 43
    2016:	b0 e0       	ldi	r27, 0x00	; 0
    2018:	eb e2       	ldi	r30, 0x2B	; 43
    201a:	f0 e0       	ldi	r31, 0x00	; 0
    201c:	80 81       	ld	r24, Z
    201e:	8d 7f       	andi	r24, 0xFD	; 253
    2020:	8c 93       	st	X, r24
		UBRRL_REG = LOCAL_tcfgUART->GLOBAL_tcfgUartBaudRate1X;
    2022:	a9 e2       	ldi	r26, 0x29	; 41
    2024:	b0 e0       	ldi	r27, 0x00	; 0
    2026:	e9 81       	ldd	r30, Y+1	; 0x01
    2028:	fa 81       	ldd	r31, Y+2	; 0x02
    202a:	86 81       	ldd	r24, Z+6	; 0x06
    202c:	8c 93       	st	X, r24
		UBRRH_REG = ((LOCAL_tcfgUART->GLOBAL_tcfgUartBaudRate1X)>>8);
    202e:	a0 e4       	ldi	r26, 0x40	; 64
    2030:	b0 e0       	ldi	r27, 0x00	; 0
    2032:	e9 81       	ldd	r30, Y+1	; 0x01
    2034:	fa 81       	ldd	r31, Y+2	; 0x02
    2036:	86 81       	ldd	r24, Z+6	; 0x06
    2038:	88 2f       	mov	r24, r24
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	89 2f       	mov	r24, r25
    203e:	99 0f       	add	r25, r25
    2040:	99 0b       	sbc	r25, r25
    2042:	8c 93       	st	X, r24
	}
	else { /* Do Nothing */ }
}
    2044:	0f 90       	pop	r0
    2046:	0f 90       	pop	r0
    2048:	cf 91       	pop	r28
    204a:	df 91       	pop	r29
    204c:	08 95       	ret

0000204e <UART_vEnable>:

void UART_vEnable(const UART_tcfgInitialize *LOCAL_tcfgUART){
    204e:	df 93       	push	r29
    2050:	cf 93       	push	r28
    2052:	00 d0       	rcall	.+0      	; 0x2054 <UART_vEnable+0x6>
    2054:	cd b7       	in	r28, 0x3d	; 61
    2056:	de b7       	in	r29, 0x3e	; 62
    2058:	9a 83       	std	Y+2, r25	; 0x02
    205a:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(UCSRB_REG, RXEN_BIT);
    205c:	aa e2       	ldi	r26, 0x2A	; 42
    205e:	b0 e0       	ldi	r27, 0x00	; 0
    2060:	ea e2       	ldi	r30, 0x2A	; 42
    2062:	f0 e0       	ldi	r31, 0x00	; 0
    2064:	80 81       	ld	r24, Z
    2066:	80 61       	ori	r24, 0x10	; 16
    2068:	8c 93       	st	X, r24
	SET_BIT(UCSRB_REG, TXEN_BIT);
    206a:	aa e2       	ldi	r26, 0x2A	; 42
    206c:	b0 e0       	ldi	r27, 0x00	; 0
    206e:	ea e2       	ldi	r30, 0x2A	; 42
    2070:	f0 e0       	ldi	r31, 0x00	; 0
    2072:	80 81       	ld	r24, Z
    2074:	88 60       	ori	r24, 0x08	; 8
    2076:	8c 93       	st	X, r24
}
    2078:	0f 90       	pop	r0
    207a:	0f 90       	pop	r0
    207c:	cf 91       	pop	r28
    207e:	df 91       	pop	r29
    2080:	08 95       	ret

00002082 <UART_vDisable>:

void UART_vDisable(const UART_tcfgInitialize *LOCAL_tcfgUART){
    2082:	df 93       	push	r29
    2084:	cf 93       	push	r28
    2086:	00 d0       	rcall	.+0      	; 0x2088 <UART_vDisable+0x6>
    2088:	cd b7       	in	r28, 0x3d	; 61
    208a:	de b7       	in	r29, 0x3e	; 62
    208c:	9a 83       	std	Y+2, r25	; 0x02
    208e:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRB_REG, RXEN_BIT);
    2090:	aa e2       	ldi	r26, 0x2A	; 42
    2092:	b0 e0       	ldi	r27, 0x00	; 0
    2094:	ea e2       	ldi	r30, 0x2A	; 42
    2096:	f0 e0       	ldi	r31, 0x00	; 0
    2098:	80 81       	ld	r24, Z
    209a:	8f 7e       	andi	r24, 0xEF	; 239
    209c:	8c 93       	st	X, r24
	CLR_BIT(UCSRB_REG, TXEN_BIT);
    209e:	aa e2       	ldi	r26, 0x2A	; 42
    20a0:	b0 e0       	ldi	r27, 0x00	; 0
    20a2:	ea e2       	ldi	r30, 0x2A	; 42
    20a4:	f0 e0       	ldi	r31, 0x00	; 0
    20a6:	80 81       	ld	r24, Z
    20a8:	87 7f       	andi	r24, 0xF7	; 247
    20aa:	8c 93       	st	X, r24
}
    20ac:	0f 90       	pop	r0
    20ae:	0f 90       	pop	r0
    20b0:	cf 91       	pop	r28
    20b2:	df 91       	pop	r29
    20b4:	08 95       	ret

000020b6 <UART_vSendData>:

void UART_vSendData(u8 LOCAL_u8Data){
    20b6:	df 93       	push	r29
    20b8:	cf 93       	push	r28
    20ba:	0f 92       	push	r0
    20bc:	cd b7       	in	r28, 0x3d	; 61
    20be:	de b7       	in	r29, 0x3e	; 62
    20c0:	89 83       	std	Y+1, r24	; 0x01
	while( GET_BIT(UCSRA_REG, UDRE_BIT) != 1 );
    20c2:	eb e2       	ldi	r30, 0x2B	; 43
    20c4:	f0 e0       	ldi	r31, 0x00	; 0
    20c6:	80 81       	ld	r24, Z
    20c8:	82 95       	swap	r24
    20ca:	86 95       	lsr	r24
    20cc:	87 70       	andi	r24, 0x07	; 7
    20ce:	88 2f       	mov	r24, r24
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	81 70       	andi	r24, 0x01	; 1
    20d4:	90 70       	andi	r25, 0x00	; 0
    20d6:	00 97       	sbiw	r24, 0x00	; 0
    20d8:	a1 f3       	breq	.-24     	; 0x20c2 <UART_vSendData+0xc>
	UDR_REG = LOCAL_u8Data;
    20da:	ec e2       	ldi	r30, 0x2C	; 44
    20dc:	f0 e0       	ldi	r31, 0x00	; 0
    20de:	89 81       	ldd	r24, Y+1	; 0x01
    20e0:	80 83       	st	Z, r24
}
    20e2:	0f 90       	pop	r0
    20e4:	cf 91       	pop	r28
    20e6:	df 91       	pop	r29
    20e8:	08 95       	ret

000020ea <UART_u8ReceiveData>:

u8 UART_u8ReceiveData(void){
    20ea:	df 93       	push	r29
    20ec:	cf 93       	push	r28
    20ee:	0f 92       	push	r0
    20f0:	cd b7       	in	r28, 0x3d	; 61
    20f2:	de b7       	in	r29, 0x3e	; 62
	u8 local_u8Data;
	while( GET_BIT(UCSRA_REG, RXC_BIT) != 1 );
    20f4:	eb e2       	ldi	r30, 0x2B	; 43
    20f6:	f0 e0       	ldi	r31, 0x00	; 0
    20f8:	80 81       	ld	r24, Z
    20fa:	88 1f       	adc	r24, r24
    20fc:	88 27       	eor	r24, r24
    20fe:	88 1f       	adc	r24, r24
    2100:	81 30       	cpi	r24, 0x01	; 1
    2102:	c1 f7       	brne	.-16     	; 0x20f4 <UART_u8ReceiveData+0xa>
	local_u8Data = UDR_REG;
    2104:	ec e2       	ldi	r30, 0x2C	; 44
    2106:	f0 e0       	ldi	r31, 0x00	; 0
    2108:	80 81       	ld	r24, Z
    210a:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRA_REG, RXC_BIT);
    210c:	ab e2       	ldi	r26, 0x2B	; 43
    210e:	b0 e0       	ldi	r27, 0x00	; 0
    2110:	eb e2       	ldi	r30, 0x2B	; 43
    2112:	f0 e0       	ldi	r31, 0x00	; 0
    2114:	80 81       	ld	r24, Z
    2116:	8f 77       	andi	r24, 0x7F	; 127
    2118:	8c 93       	st	X, r24
	return local_u8Data;
    211a:	89 81       	ldd	r24, Y+1	; 0x01
}
    211c:	0f 90       	pop	r0
    211e:	cf 91       	pop	r28
    2120:	df 91       	pop	r29
    2122:	08 95       	ret

00002124 <UART_vSendString>:

void UART_vSendString(u8 *Copy_u8Str){
    2124:	df 93       	push	r29
    2126:	cf 93       	push	r28
    2128:	00 d0       	rcall	.+0      	; 0x212a <UART_vSendString+0x6>
    212a:	cd b7       	in	r28, 0x3d	; 61
    212c:	de b7       	in	r29, 0x3e	; 62
    212e:	9a 83       	std	Y+2, r25	; 0x02
    2130:	89 83       	std	Y+1, r24	; 0x01
    2132:	0b c0       	rjmp	.+22     	; 0x214a <UART_vSendString+0x26>
	while(*Copy_u8Str){
		UART_vSendData(*(Copy_u8Str++));
    2134:	e9 81       	ldd	r30, Y+1	; 0x01
    2136:	fa 81       	ldd	r31, Y+2	; 0x02
    2138:	20 81       	ld	r18, Z
    213a:	89 81       	ldd	r24, Y+1	; 0x01
    213c:	9a 81       	ldd	r25, Y+2	; 0x02
    213e:	01 96       	adiw	r24, 0x01	; 1
    2140:	9a 83       	std	Y+2, r25	; 0x02
    2142:	89 83       	std	Y+1, r24	; 0x01
    2144:	82 2f       	mov	r24, r18
    2146:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <UART_vSendData>
	CLR_BIT(UCSRA_REG, RXC_BIT);
	return local_u8Data;
}

void UART_vSendString(u8 *Copy_u8Str){
	while(*Copy_u8Str){
    214a:	e9 81       	ldd	r30, Y+1	; 0x01
    214c:	fa 81       	ldd	r31, Y+2	; 0x02
    214e:	80 81       	ld	r24, Z
    2150:	88 23       	and	r24, r24
    2152:	81 f7       	brne	.-32     	; 0x2134 <UART_vSendString+0x10>
		UART_vSendData(*(Copy_u8Str++));
	}
}
    2154:	0f 90       	pop	r0
    2156:	0f 90       	pop	r0
    2158:	cf 91       	pop	r28
    215a:	df 91       	pop	r29
    215c:	08 95       	ret

0000215e <UART_vClearBuffer>:

void UART_vClearBuffer(){
    215e:	df 93       	push	r29
    2160:	cf 93       	push	r28
    2162:	0f 92       	push	r0
    2164:	cd b7       	in	r28, 0x3d	; 61
    2166:	de b7       	in	r29, 0x3e	; 62
	u8 temp;
	temp = UDR_REG;
    2168:	ec e2       	ldi	r30, 0x2C	; 44
    216a:	f0 e0       	ldi	r31, 0x00	; 0
    216c:	80 81       	ld	r24, Z
    216e:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRA_REG, RXC_BIT);
    2170:	ab e2       	ldi	r26, 0x2B	; 43
    2172:	b0 e0       	ldi	r27, 0x00	; 0
    2174:	eb e2       	ldi	r30, 0x2B	; 43
    2176:	f0 e0       	ldi	r31, 0x00	; 0
    2178:	80 81       	ld	r24, Z
    217a:	8f 77       	andi	r24, 0x7F	; 127
    217c:	8c 93       	st	X, r24
}
    217e:	0f 90       	pop	r0
    2180:	cf 91       	pop	r28
    2182:	df 91       	pop	r29
    2184:	08 95       	ret

00002186 <TMR_vInit>:
#include "../UART/UART_prog.h"
#include "../DIO/DIO.h"
extern TMR_cfg_t TIMER2;
u8 timer2_flag = 0;

void TMR_vInit(const TMR_cfg_t *TMR){
    2186:	df 93       	push	r29
    2188:	cf 93       	push	r28
    218a:	00 d0       	rcall	.+0      	; 0x218c <TMR_vInit+0x6>
    218c:	00 d0       	rcall	.+0      	; 0x218e <TMR_vInit+0x8>
    218e:	cd b7       	in	r28, 0x3d	; 61
    2190:	de b7       	in	r29, 0x3e	; 62
    2192:	9a 83       	std	Y+2, r25	; 0x02
    2194:	89 83       	std	Y+1, r24	; 0x01
	if(TMR != NULL){
    2196:	89 81       	ldd	r24, Y+1	; 0x01
    2198:	9a 81       	ldd	r25, Y+2	; 0x02
    219a:	00 97       	sbiw	r24, 0x00	; 0
    219c:	09 f4       	brne	.+2      	; 0x21a0 <TMR_vInit+0x1a>
    219e:	88 c2       	rjmp	.+1296   	; 0x26b0 <TMR_vInit+0x52a>
		switch(TMR->TMR_TimerChannel){
    21a0:	e9 81       	ldd	r30, Y+1	; 0x01
    21a2:	fa 81       	ldd	r31, Y+2	; 0x02
    21a4:	80 81       	ld	r24, Z
    21a6:	28 2f       	mov	r18, r24
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	3c 83       	std	Y+4, r19	; 0x04
    21ac:	2b 83       	std	Y+3, r18	; 0x03
    21ae:	8b 81       	ldd	r24, Y+3	; 0x03
    21b0:	9c 81       	ldd	r25, Y+4	; 0x04
    21b2:	83 30       	cpi	r24, 0x03	; 3
    21b4:	91 05       	cpc	r25, r1
    21b6:	09 f4       	brne	.+2      	; 0x21ba <TMR_vInit+0x34>
    21b8:	27 c1       	rjmp	.+590    	; 0x2408 <TMR_vInit+0x282>
    21ba:	2b 81       	ldd	r18, Y+3	; 0x03
    21bc:	3c 81       	ldd	r19, Y+4	; 0x04
    21be:	24 30       	cpi	r18, 0x04	; 4
    21c0:	31 05       	cpc	r19, r1
    21c2:	8c f4       	brge	.+34     	; 0x21e6 <TMR_vInit+0x60>
    21c4:	8b 81       	ldd	r24, Y+3	; 0x03
    21c6:	9c 81       	ldd	r25, Y+4	; 0x04
    21c8:	81 30       	cpi	r24, 0x01	; 1
    21ca:	91 05       	cpc	r25, r1
    21cc:	09 f4       	brne	.+2      	; 0x21d0 <TMR_vInit+0x4a>
    21ce:	70 c0       	rjmp	.+224    	; 0x22b0 <TMR_vInit+0x12a>
    21d0:	2b 81       	ldd	r18, Y+3	; 0x03
    21d2:	3c 81       	ldd	r19, Y+4	; 0x04
    21d4:	22 30       	cpi	r18, 0x02	; 2
    21d6:	31 05       	cpc	r19, r1
    21d8:	0c f0       	brlt	.+2      	; 0x21dc <TMR_vInit+0x56>
    21da:	bd c0       	rjmp	.+378    	; 0x2356 <TMR_vInit+0x1d0>
    21dc:	8b 81       	ldd	r24, Y+3	; 0x03
    21de:	9c 81       	ldd	r25, Y+4	; 0x04
    21e0:	00 97       	sbiw	r24, 0x00	; 0
    21e2:	a1 f0       	breq	.+40     	; 0x220c <TMR_vInit+0x86>
    21e4:	65 c2       	rjmp	.+1226   	; 0x26b0 <TMR_vInit+0x52a>
    21e6:	2b 81       	ldd	r18, Y+3	; 0x03
    21e8:	3c 81       	ldd	r19, Y+4	; 0x04
    21ea:	25 30       	cpi	r18, 0x05	; 5
    21ec:	31 05       	cpc	r19, r1
    21ee:	09 f4       	brne	.+2      	; 0x21f2 <TMR_vInit+0x6c>
    21f0:	be c1       	rjmp	.+892    	; 0x256e <TMR_vInit+0x3e8>
    21f2:	8b 81       	ldd	r24, Y+3	; 0x03
    21f4:	9c 81       	ldd	r25, Y+4	; 0x04
    21f6:	85 30       	cpi	r24, 0x05	; 5
    21f8:	91 05       	cpc	r25, r1
    21fa:	0c f4       	brge	.+2      	; 0x21fe <TMR_vInit+0x78>
    21fc:	5f c1       	rjmp	.+702    	; 0x24bc <TMR_vInit+0x336>
    21fe:	2b 81       	ldd	r18, Y+3	; 0x03
    2200:	3c 81       	ldd	r19, Y+4	; 0x04
    2202:	26 30       	cpi	r18, 0x06	; 6
    2204:	31 05       	cpc	r19, r1
    2206:	09 f4       	brne	.+2      	; 0x220a <TMR_vInit+0x84>
    2208:	04 c2       	rjmp	.+1032   	; 0x2612 <TMR_vInit+0x48c>
    220a:	52 c2       	rjmp	.+1188   	; 0x26b0 <TMR_vInit+0x52a>
		case TIMER0_NORMAL:
			TCCR0_REG = (TCCR0_REG&0xB7);
    220c:	a3 e5       	ldi	r26, 0x53	; 83
    220e:	b0 e0       	ldi	r27, 0x00	; 0
    2210:	e3 e5       	ldi	r30, 0x53	; 83
    2212:	f0 e0       	ldi	r31, 0x00	; 0
    2214:	80 81       	ld	r24, Z
    2216:	87 7b       	andi	r24, 0xB7	; 183
    2218:	8c 93       	st	X, r24
			if(TMR->TMR_ToggleMode == TMR_InterruptMode){
    221a:	e9 81       	ldd	r30, Y+1	; 0x01
    221c:	fa 81       	ldd	r31, Y+2	; 0x02
    221e:	82 81       	ldd	r24, Z+2	; 0x02
    2220:	81 30       	cpi	r24, 0x01	; 1
    2222:	49 f4       	brne	.+18     	; 0x2236 <TMR_vInit+0xb0>
				TIMSK_REG = (TIMSK_REG&0xFC) | 0x01;
    2224:	a9 e5       	ldi	r26, 0x59	; 89
    2226:	b0 e0       	ldi	r27, 0x00	; 0
    2228:	e9 e5       	ldi	r30, 0x59	; 89
    222a:	f0 e0       	ldi	r31, 0x00	; 0
    222c:	80 81       	ld	r24, Z
    222e:	8c 7f       	andi	r24, 0xFC	; 252
    2230:	81 60       	ori	r24, 0x01	; 1
    2232:	8c 93       	st	X, r24
    2234:	3d c2       	rjmp	.+1146   	; 0x26b0 <TMR_vInit+0x52a>
			}
			else if(TMR->TMR_ToggleMode == TMR_OCMode){
    2236:	e9 81       	ldd	r30, Y+1	; 0x01
    2238:	fa 81       	ldd	r31, Y+2	; 0x02
    223a:	82 81       	ldd	r24, Z+2	; 0x02
    223c:	88 23       	and	r24, r24
    223e:	09 f0       	breq	.+2      	; 0x2242 <TMR_vInit+0xbc>
    2240:	37 c2       	rjmp	.+1134   	; 0x26b0 <TMR_vInit+0x52a>
				if(TMR->TMR_OCMode == OC_Disconnected){
    2242:	e9 81       	ldd	r30, Y+1	; 0x01
    2244:	fa 81       	ldd	r31, Y+2	; 0x02
    2246:	83 81       	ldd	r24, Z+3	; 0x03
    2248:	88 23       	and	r24, r24
    224a:	41 f4       	brne	.+16     	; 0x225c <TMR_vInit+0xd6>
					TCCR0_REG = (TCCR0_REG & 0xCF);
    224c:	a3 e5       	ldi	r26, 0x53	; 83
    224e:	b0 e0       	ldi	r27, 0x00	; 0
    2250:	e3 e5       	ldi	r30, 0x53	; 83
    2252:	f0 e0       	ldi	r31, 0x00	; 0
    2254:	80 81       	ld	r24, Z
    2256:	8f 7c       	andi	r24, 0xCF	; 207
    2258:	8c 93       	st	X, r24
    225a:	2a c2       	rjmp	.+1108   	; 0x26b0 <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Toggle){
    225c:	e9 81       	ldd	r30, Y+1	; 0x01
    225e:	fa 81       	ldd	r31, Y+2	; 0x02
    2260:	83 81       	ldd	r24, Z+3	; 0x03
    2262:	81 30       	cpi	r24, 0x01	; 1
    2264:	49 f4       	brne	.+18     	; 0x2278 <TMR_vInit+0xf2>
					TCCR0_REG = (TCCR0_REG & 0xCF) | 0x10;
    2266:	a3 e5       	ldi	r26, 0x53	; 83
    2268:	b0 e0       	ldi	r27, 0x00	; 0
    226a:	e3 e5       	ldi	r30, 0x53	; 83
    226c:	f0 e0       	ldi	r31, 0x00	; 0
    226e:	80 81       	ld	r24, Z
    2270:	8f 7c       	andi	r24, 0xCF	; 207
    2272:	80 61       	ori	r24, 0x10	; 16
    2274:	8c 93       	st	X, r24
    2276:	1c c2       	rjmp	.+1080   	; 0x26b0 <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Clear){
    2278:	e9 81       	ldd	r30, Y+1	; 0x01
    227a:	fa 81       	ldd	r31, Y+2	; 0x02
    227c:	83 81       	ldd	r24, Z+3	; 0x03
    227e:	82 30       	cpi	r24, 0x02	; 2
    2280:	49 f4       	brne	.+18     	; 0x2294 <TMR_vInit+0x10e>
					TCCR0_REG = (TCCR0_REG & 0xCF) | 0x20;
    2282:	a3 e5       	ldi	r26, 0x53	; 83
    2284:	b0 e0       	ldi	r27, 0x00	; 0
    2286:	e3 e5       	ldi	r30, 0x53	; 83
    2288:	f0 e0       	ldi	r31, 0x00	; 0
    228a:	80 81       	ld	r24, Z
    228c:	8f 7c       	andi	r24, 0xCF	; 207
    228e:	80 62       	ori	r24, 0x20	; 32
    2290:	8c 93       	st	X, r24
    2292:	0e c2       	rjmp	.+1052   	; 0x26b0 <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Set){
    2294:	e9 81       	ldd	r30, Y+1	; 0x01
    2296:	fa 81       	ldd	r31, Y+2	; 0x02
    2298:	83 81       	ldd	r24, Z+3	; 0x03
    229a:	83 30       	cpi	r24, 0x03	; 3
    229c:	09 f0       	breq	.+2      	; 0x22a0 <TMR_vInit+0x11a>
    229e:	08 c2       	rjmp	.+1040   	; 0x26b0 <TMR_vInit+0x52a>
					TCCR0_REG = (TCCR0_REG & 0xCF) | 0x30;
    22a0:	a3 e5       	ldi	r26, 0x53	; 83
    22a2:	b0 e0       	ldi	r27, 0x00	; 0
    22a4:	e3 e5       	ldi	r30, 0x53	; 83
    22a6:	f0 e0       	ldi	r31, 0x00	; 0
    22a8:	80 81       	ld	r24, Z
    22aa:	80 63       	ori	r24, 0x30	; 48
    22ac:	8c 93       	st	X, r24
    22ae:	00 c2       	rjmp	.+1024   	; 0x26b0 <TMR_vInit+0x52a>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER0_CTC:
			TCCR0_REG = (TCCR0_REG&0xB7) | 0x8;
    22b0:	a3 e5       	ldi	r26, 0x53	; 83
    22b2:	b0 e0       	ldi	r27, 0x00	; 0
    22b4:	e3 e5       	ldi	r30, 0x53	; 83
    22b6:	f0 e0       	ldi	r31, 0x00	; 0
    22b8:	80 81       	ld	r24, Z
    22ba:	87 7b       	andi	r24, 0xB7	; 183
    22bc:	88 60       	ori	r24, 0x08	; 8
    22be:	8c 93       	st	X, r24
			if(TMR->TMR_ToggleMode == TMR_InterruptMode){
    22c0:	e9 81       	ldd	r30, Y+1	; 0x01
    22c2:	fa 81       	ldd	r31, Y+2	; 0x02
    22c4:	82 81       	ldd	r24, Z+2	; 0x02
    22c6:	81 30       	cpi	r24, 0x01	; 1
    22c8:	49 f4       	brne	.+18     	; 0x22dc <TMR_vInit+0x156>
				TIMSK_REG = (TIMSK_REG&0xFC) | 0x02;
    22ca:	a9 e5       	ldi	r26, 0x59	; 89
    22cc:	b0 e0       	ldi	r27, 0x00	; 0
    22ce:	e9 e5       	ldi	r30, 0x59	; 89
    22d0:	f0 e0       	ldi	r31, 0x00	; 0
    22d2:	80 81       	ld	r24, Z
    22d4:	8c 7f       	andi	r24, 0xFC	; 252
    22d6:	82 60       	ori	r24, 0x02	; 2
    22d8:	8c 93       	st	X, r24
    22da:	ea c1       	rjmp	.+980    	; 0x26b0 <TMR_vInit+0x52a>
			}
			else if(TMR->TMR_ToggleMode == TMR_OCMode){
    22dc:	e9 81       	ldd	r30, Y+1	; 0x01
    22de:	fa 81       	ldd	r31, Y+2	; 0x02
    22e0:	82 81       	ldd	r24, Z+2	; 0x02
    22e2:	88 23       	and	r24, r24
    22e4:	09 f0       	breq	.+2      	; 0x22e8 <TMR_vInit+0x162>
    22e6:	e4 c1       	rjmp	.+968    	; 0x26b0 <TMR_vInit+0x52a>
				if(TMR->TMR_OCMode == OC_Disconnected){
    22e8:	e9 81       	ldd	r30, Y+1	; 0x01
    22ea:	fa 81       	ldd	r31, Y+2	; 0x02
    22ec:	83 81       	ldd	r24, Z+3	; 0x03
    22ee:	88 23       	and	r24, r24
    22f0:	41 f4       	brne	.+16     	; 0x2302 <TMR_vInit+0x17c>
					TCCR0_REG = (TCCR0_REG & 0xCF);
    22f2:	a3 e5       	ldi	r26, 0x53	; 83
    22f4:	b0 e0       	ldi	r27, 0x00	; 0
    22f6:	e3 e5       	ldi	r30, 0x53	; 83
    22f8:	f0 e0       	ldi	r31, 0x00	; 0
    22fa:	80 81       	ld	r24, Z
    22fc:	8f 7c       	andi	r24, 0xCF	; 207
    22fe:	8c 93       	st	X, r24
    2300:	d7 c1       	rjmp	.+942    	; 0x26b0 <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Toggle){
    2302:	e9 81       	ldd	r30, Y+1	; 0x01
    2304:	fa 81       	ldd	r31, Y+2	; 0x02
    2306:	83 81       	ldd	r24, Z+3	; 0x03
    2308:	81 30       	cpi	r24, 0x01	; 1
    230a:	49 f4       	brne	.+18     	; 0x231e <TMR_vInit+0x198>
					TCCR0_REG = (TCCR0_REG & 0xCF) | 0x10;
    230c:	a3 e5       	ldi	r26, 0x53	; 83
    230e:	b0 e0       	ldi	r27, 0x00	; 0
    2310:	e3 e5       	ldi	r30, 0x53	; 83
    2312:	f0 e0       	ldi	r31, 0x00	; 0
    2314:	80 81       	ld	r24, Z
    2316:	8f 7c       	andi	r24, 0xCF	; 207
    2318:	80 61       	ori	r24, 0x10	; 16
    231a:	8c 93       	st	X, r24
    231c:	c9 c1       	rjmp	.+914    	; 0x26b0 <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Clear){
    231e:	e9 81       	ldd	r30, Y+1	; 0x01
    2320:	fa 81       	ldd	r31, Y+2	; 0x02
    2322:	83 81       	ldd	r24, Z+3	; 0x03
    2324:	82 30       	cpi	r24, 0x02	; 2
    2326:	49 f4       	brne	.+18     	; 0x233a <TMR_vInit+0x1b4>
					TCCR0_REG = (TCCR0_REG & 0xCF) | 0x20;
    2328:	a3 e5       	ldi	r26, 0x53	; 83
    232a:	b0 e0       	ldi	r27, 0x00	; 0
    232c:	e3 e5       	ldi	r30, 0x53	; 83
    232e:	f0 e0       	ldi	r31, 0x00	; 0
    2330:	80 81       	ld	r24, Z
    2332:	8f 7c       	andi	r24, 0xCF	; 207
    2334:	80 62       	ori	r24, 0x20	; 32
    2336:	8c 93       	st	X, r24
    2338:	bb c1       	rjmp	.+886    	; 0x26b0 <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Set){
    233a:	e9 81       	ldd	r30, Y+1	; 0x01
    233c:	fa 81       	ldd	r31, Y+2	; 0x02
    233e:	83 81       	ldd	r24, Z+3	; 0x03
    2340:	83 30       	cpi	r24, 0x03	; 3
    2342:	09 f0       	breq	.+2      	; 0x2346 <TMR_vInit+0x1c0>
    2344:	b5 c1       	rjmp	.+874    	; 0x26b0 <TMR_vInit+0x52a>
					TCCR0_REG = (TCCR0_REG & 0xCF) | 0x30;
    2346:	a3 e5       	ldi	r26, 0x53	; 83
    2348:	b0 e0       	ldi	r27, 0x00	; 0
    234a:	e3 e5       	ldi	r30, 0x53	; 83
    234c:	f0 e0       	ldi	r31, 0x00	; 0
    234e:	80 81       	ld	r24, Z
    2350:	80 63       	ori	r24, 0x30	; 48
    2352:	8c 93       	st	X, r24
    2354:	ad c1       	rjmp	.+858    	; 0x26b0 <TMR_vInit+0x52a>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER1_NORMAL:
			TCCR1A_REG = (TCCR1A_REG & 0xFC);
    2356:	af e4       	ldi	r26, 0x4F	; 79
    2358:	b0 e0       	ldi	r27, 0x00	; 0
    235a:	ef e4       	ldi	r30, 0x4F	; 79
    235c:	f0 e0       	ldi	r31, 0x00	; 0
    235e:	80 81       	ld	r24, Z
    2360:	8c 7f       	andi	r24, 0xFC	; 252
    2362:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7);
    2364:	ae e4       	ldi	r26, 0x4E	; 78
    2366:	b0 e0       	ldi	r27, 0x00	; 0
    2368:	ee e4       	ldi	r30, 0x4E	; 78
    236a:	f0 e0       	ldi	r31, 0x00	; 0
    236c:	80 81       	ld	r24, Z
    236e:	87 7e       	andi	r24, 0xE7	; 231
    2370:	8c 93       	st	X, r24
			if(TMR->TMR_ToggleMode == TMR_InterruptMode){
    2372:	e9 81       	ldd	r30, Y+1	; 0x01
    2374:	fa 81       	ldd	r31, Y+2	; 0x02
    2376:	82 81       	ldd	r24, Z+2	; 0x02
    2378:	81 30       	cpi	r24, 0x01	; 1
    237a:	49 f4       	brne	.+18     	; 0x238e <TMR_vInit+0x208>
				TIMSK_REG = (TIMSK_REG&0xC3) | 0x04;
    237c:	a9 e5       	ldi	r26, 0x59	; 89
    237e:	b0 e0       	ldi	r27, 0x00	; 0
    2380:	e9 e5       	ldi	r30, 0x59	; 89
    2382:	f0 e0       	ldi	r31, 0x00	; 0
    2384:	80 81       	ld	r24, Z
    2386:	83 7c       	andi	r24, 0xC3	; 195
    2388:	84 60       	ori	r24, 0x04	; 4
    238a:	8c 93       	st	X, r24
    238c:	91 c1       	rjmp	.+802    	; 0x26b0 <TMR_vInit+0x52a>
			}
			else if(TMR->TMR_ToggleMode == TMR_OCMode){
    238e:	e9 81       	ldd	r30, Y+1	; 0x01
    2390:	fa 81       	ldd	r31, Y+2	; 0x02
    2392:	82 81       	ldd	r24, Z+2	; 0x02
    2394:	88 23       	and	r24, r24
    2396:	09 f0       	breq	.+2      	; 0x239a <TMR_vInit+0x214>
    2398:	8b c1       	rjmp	.+790    	; 0x26b0 <TMR_vInit+0x52a>
				if(TMR->TMR_OCMode == OC_Disconnected){
    239a:	e9 81       	ldd	r30, Y+1	; 0x01
    239c:	fa 81       	ldd	r31, Y+2	; 0x02
    239e:	83 81       	ldd	r24, Z+3	; 0x03
    23a0:	88 23       	and	r24, r24
    23a2:	41 f4       	brne	.+16     	; 0x23b4 <TMR_vInit+0x22e>
					TCCR1A_REG = (TCCR1A_REG & 0xCF);
    23a4:	af e4       	ldi	r26, 0x4F	; 79
    23a6:	b0 e0       	ldi	r27, 0x00	; 0
    23a8:	ef e4       	ldi	r30, 0x4F	; 79
    23aa:	f0 e0       	ldi	r31, 0x00	; 0
    23ac:	80 81       	ld	r24, Z
    23ae:	8f 7c       	andi	r24, 0xCF	; 207
    23b0:	8c 93       	st	X, r24
    23b2:	7e c1       	rjmp	.+764    	; 0x26b0 <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Toggle){
    23b4:	e9 81       	ldd	r30, Y+1	; 0x01
    23b6:	fa 81       	ldd	r31, Y+2	; 0x02
    23b8:	83 81       	ldd	r24, Z+3	; 0x03
    23ba:	81 30       	cpi	r24, 0x01	; 1
    23bc:	49 f4       	brne	.+18     	; 0x23d0 <TMR_vInit+0x24a>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x10;
    23be:	af e4       	ldi	r26, 0x4F	; 79
    23c0:	b0 e0       	ldi	r27, 0x00	; 0
    23c2:	ef e4       	ldi	r30, 0x4F	; 79
    23c4:	f0 e0       	ldi	r31, 0x00	; 0
    23c6:	80 81       	ld	r24, Z
    23c8:	8f 7c       	andi	r24, 0xCF	; 207
    23ca:	80 61       	ori	r24, 0x10	; 16
    23cc:	8c 93       	st	X, r24
    23ce:	70 c1       	rjmp	.+736    	; 0x26b0 <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Clear){
    23d0:	e9 81       	ldd	r30, Y+1	; 0x01
    23d2:	fa 81       	ldd	r31, Y+2	; 0x02
    23d4:	83 81       	ldd	r24, Z+3	; 0x03
    23d6:	82 30       	cpi	r24, 0x02	; 2
    23d8:	49 f4       	brne	.+18     	; 0x23ec <TMR_vInit+0x266>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
    23da:	af e4       	ldi	r26, 0x4F	; 79
    23dc:	b0 e0       	ldi	r27, 0x00	; 0
    23de:	ef e4       	ldi	r30, 0x4F	; 79
    23e0:	f0 e0       	ldi	r31, 0x00	; 0
    23e2:	80 81       	ld	r24, Z
    23e4:	8f 7c       	andi	r24, 0xCF	; 207
    23e6:	80 62       	ori	r24, 0x20	; 32
    23e8:	8c 93       	st	X, r24
    23ea:	62 c1       	rjmp	.+708    	; 0x26b0 <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Set){
    23ec:	e9 81       	ldd	r30, Y+1	; 0x01
    23ee:	fa 81       	ldd	r31, Y+2	; 0x02
    23f0:	83 81       	ldd	r24, Z+3	; 0x03
    23f2:	83 30       	cpi	r24, 0x03	; 3
    23f4:	09 f0       	breq	.+2      	; 0x23f8 <TMR_vInit+0x272>
    23f6:	5c c1       	rjmp	.+696    	; 0x26b0 <TMR_vInit+0x52a>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
    23f8:	af e4       	ldi	r26, 0x4F	; 79
    23fa:	b0 e0       	ldi	r27, 0x00	; 0
    23fc:	ef e4       	ldi	r30, 0x4F	; 79
    23fe:	f0 e0       	ldi	r31, 0x00	; 0
    2400:	80 81       	ld	r24, Z
    2402:	80 63       	ori	r24, 0x30	; 48
    2404:	8c 93       	st	X, r24
    2406:	54 c1       	rjmp	.+680    	; 0x26b0 <TMR_vInit+0x52a>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER1_CTC_OCR:
			TCCR1A_REG = (TCCR1A_REG & 0xFC);
    2408:	af e4       	ldi	r26, 0x4F	; 79
    240a:	b0 e0       	ldi	r27, 0x00	; 0
    240c:	ef e4       	ldi	r30, 0x4F	; 79
    240e:	f0 e0       	ldi	r31, 0x00	; 0
    2410:	80 81       	ld	r24, Z
    2412:	8c 7f       	andi	r24, 0xFC	; 252
    2414:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7) | 0x08;
    2416:	ae e4       	ldi	r26, 0x4E	; 78
    2418:	b0 e0       	ldi	r27, 0x00	; 0
    241a:	ee e4       	ldi	r30, 0x4E	; 78
    241c:	f0 e0       	ldi	r31, 0x00	; 0
    241e:	80 81       	ld	r24, Z
    2420:	87 7e       	andi	r24, 0xE7	; 231
    2422:	88 60       	ori	r24, 0x08	; 8
    2424:	8c 93       	st	X, r24
			if(TMR->TMR_ToggleMode == TMR_InterruptMode){
    2426:	e9 81       	ldd	r30, Y+1	; 0x01
    2428:	fa 81       	ldd	r31, Y+2	; 0x02
    242a:	82 81       	ldd	r24, Z+2	; 0x02
    242c:	81 30       	cpi	r24, 0x01	; 1
    242e:	49 f4       	brne	.+18     	; 0x2442 <TMR_vInit+0x2bc>
				TIMSK_REG = (TIMSK_REG&0xC3) | 0x18;
    2430:	a9 e5       	ldi	r26, 0x59	; 89
    2432:	b0 e0       	ldi	r27, 0x00	; 0
    2434:	e9 e5       	ldi	r30, 0x59	; 89
    2436:	f0 e0       	ldi	r31, 0x00	; 0
    2438:	80 81       	ld	r24, Z
    243a:	83 7c       	andi	r24, 0xC3	; 195
    243c:	88 61       	ori	r24, 0x18	; 24
    243e:	8c 93       	st	X, r24
    2440:	37 c1       	rjmp	.+622    	; 0x26b0 <TMR_vInit+0x52a>
			}
			else if(TMR->TMR_ToggleMode == TMR_OCMode){
    2442:	e9 81       	ldd	r30, Y+1	; 0x01
    2444:	fa 81       	ldd	r31, Y+2	; 0x02
    2446:	82 81       	ldd	r24, Z+2	; 0x02
    2448:	88 23       	and	r24, r24
    244a:	09 f0       	breq	.+2      	; 0x244e <TMR_vInit+0x2c8>
    244c:	31 c1       	rjmp	.+610    	; 0x26b0 <TMR_vInit+0x52a>
				if(TMR->TMR_OCMode == OC_Disconnected){
    244e:	e9 81       	ldd	r30, Y+1	; 0x01
    2450:	fa 81       	ldd	r31, Y+2	; 0x02
    2452:	83 81       	ldd	r24, Z+3	; 0x03
    2454:	88 23       	and	r24, r24
    2456:	41 f4       	brne	.+16     	; 0x2468 <TMR_vInit+0x2e2>
					TCCR1A_REG = (TCCR1A_REG & 0xCF);
    2458:	af e4       	ldi	r26, 0x4F	; 79
    245a:	b0 e0       	ldi	r27, 0x00	; 0
    245c:	ef e4       	ldi	r30, 0x4F	; 79
    245e:	f0 e0       	ldi	r31, 0x00	; 0
    2460:	80 81       	ld	r24, Z
    2462:	8f 7c       	andi	r24, 0xCF	; 207
    2464:	8c 93       	st	X, r24
    2466:	24 c1       	rjmp	.+584    	; 0x26b0 <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Toggle){
    2468:	e9 81       	ldd	r30, Y+1	; 0x01
    246a:	fa 81       	ldd	r31, Y+2	; 0x02
    246c:	83 81       	ldd	r24, Z+3	; 0x03
    246e:	81 30       	cpi	r24, 0x01	; 1
    2470:	49 f4       	brne	.+18     	; 0x2484 <TMR_vInit+0x2fe>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x10;
    2472:	af e4       	ldi	r26, 0x4F	; 79
    2474:	b0 e0       	ldi	r27, 0x00	; 0
    2476:	ef e4       	ldi	r30, 0x4F	; 79
    2478:	f0 e0       	ldi	r31, 0x00	; 0
    247a:	80 81       	ld	r24, Z
    247c:	8f 7c       	andi	r24, 0xCF	; 207
    247e:	80 61       	ori	r24, 0x10	; 16
    2480:	8c 93       	st	X, r24
    2482:	16 c1       	rjmp	.+556    	; 0x26b0 <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Clear){
    2484:	e9 81       	ldd	r30, Y+1	; 0x01
    2486:	fa 81       	ldd	r31, Y+2	; 0x02
    2488:	83 81       	ldd	r24, Z+3	; 0x03
    248a:	82 30       	cpi	r24, 0x02	; 2
    248c:	49 f4       	brne	.+18     	; 0x24a0 <TMR_vInit+0x31a>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
    248e:	af e4       	ldi	r26, 0x4F	; 79
    2490:	b0 e0       	ldi	r27, 0x00	; 0
    2492:	ef e4       	ldi	r30, 0x4F	; 79
    2494:	f0 e0       	ldi	r31, 0x00	; 0
    2496:	80 81       	ld	r24, Z
    2498:	8f 7c       	andi	r24, 0xCF	; 207
    249a:	80 62       	ori	r24, 0x20	; 32
    249c:	8c 93       	st	X, r24
    249e:	08 c1       	rjmp	.+528    	; 0x26b0 <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Set){
    24a0:	e9 81       	ldd	r30, Y+1	; 0x01
    24a2:	fa 81       	ldd	r31, Y+2	; 0x02
    24a4:	83 81       	ldd	r24, Z+3	; 0x03
    24a6:	83 30       	cpi	r24, 0x03	; 3
    24a8:	09 f0       	breq	.+2      	; 0x24ac <TMR_vInit+0x326>
    24aa:	02 c1       	rjmp	.+516    	; 0x26b0 <TMR_vInit+0x52a>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
    24ac:	af e4       	ldi	r26, 0x4F	; 79
    24ae:	b0 e0       	ldi	r27, 0x00	; 0
    24b0:	ef e4       	ldi	r30, 0x4F	; 79
    24b2:	f0 e0       	ldi	r31, 0x00	; 0
    24b4:	80 81       	ld	r24, Z
    24b6:	80 63       	ori	r24, 0x30	; 48
    24b8:	8c 93       	st	X, r24
    24ba:	fa c0       	rjmp	.+500    	; 0x26b0 <TMR_vInit+0x52a>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER1_CTC_ICR:
			TCCR1A_REG = (TCCR1A_REG & 0xFC);
    24bc:	af e4       	ldi	r26, 0x4F	; 79
    24be:	b0 e0       	ldi	r27, 0x00	; 0
    24c0:	ef e4       	ldi	r30, 0x4F	; 79
    24c2:	f0 e0       	ldi	r31, 0x00	; 0
    24c4:	80 81       	ld	r24, Z
    24c6:	8c 7f       	andi	r24, 0xFC	; 252
    24c8:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7) | 0x18;
    24ca:	ae e4       	ldi	r26, 0x4E	; 78
    24cc:	b0 e0       	ldi	r27, 0x00	; 0
    24ce:	ee e4       	ldi	r30, 0x4E	; 78
    24d0:	f0 e0       	ldi	r31, 0x00	; 0
    24d2:	80 81       	ld	r24, Z
    24d4:	88 61       	ori	r24, 0x18	; 24
    24d6:	8c 93       	st	X, r24
			if(TMR->TMR_ToggleMode == TMR_InterruptMode){
    24d8:	e9 81       	ldd	r30, Y+1	; 0x01
    24da:	fa 81       	ldd	r31, Y+2	; 0x02
    24dc:	82 81       	ldd	r24, Z+2	; 0x02
    24de:	81 30       	cpi	r24, 0x01	; 1
    24e0:	49 f4       	brne	.+18     	; 0x24f4 <TMR_vInit+0x36e>
				TIMSK_REG = (TIMSK_REG&0xC3) | 0x18;
    24e2:	a9 e5       	ldi	r26, 0x59	; 89
    24e4:	b0 e0       	ldi	r27, 0x00	; 0
    24e6:	e9 e5       	ldi	r30, 0x59	; 89
    24e8:	f0 e0       	ldi	r31, 0x00	; 0
    24ea:	80 81       	ld	r24, Z
    24ec:	83 7c       	andi	r24, 0xC3	; 195
    24ee:	88 61       	ori	r24, 0x18	; 24
    24f0:	8c 93       	st	X, r24
    24f2:	de c0       	rjmp	.+444    	; 0x26b0 <TMR_vInit+0x52a>
			}
			else if(TMR->TMR_ToggleMode == TMR_OCMode){
    24f4:	e9 81       	ldd	r30, Y+1	; 0x01
    24f6:	fa 81       	ldd	r31, Y+2	; 0x02
    24f8:	82 81       	ldd	r24, Z+2	; 0x02
    24fa:	88 23       	and	r24, r24
    24fc:	09 f0       	breq	.+2      	; 0x2500 <TMR_vInit+0x37a>
    24fe:	d8 c0       	rjmp	.+432    	; 0x26b0 <TMR_vInit+0x52a>
				if(TMR->TMR_OCMode == OC_Disconnected){
    2500:	e9 81       	ldd	r30, Y+1	; 0x01
    2502:	fa 81       	ldd	r31, Y+2	; 0x02
    2504:	83 81       	ldd	r24, Z+3	; 0x03
    2506:	88 23       	and	r24, r24
    2508:	41 f4       	brne	.+16     	; 0x251a <TMR_vInit+0x394>
					TCCR1A_REG = (TCCR1A_REG & 0xCF);
    250a:	af e4       	ldi	r26, 0x4F	; 79
    250c:	b0 e0       	ldi	r27, 0x00	; 0
    250e:	ef e4       	ldi	r30, 0x4F	; 79
    2510:	f0 e0       	ldi	r31, 0x00	; 0
    2512:	80 81       	ld	r24, Z
    2514:	8f 7c       	andi	r24, 0xCF	; 207
    2516:	8c 93       	st	X, r24
    2518:	cb c0       	rjmp	.+406    	; 0x26b0 <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Toggle){
    251a:	e9 81       	ldd	r30, Y+1	; 0x01
    251c:	fa 81       	ldd	r31, Y+2	; 0x02
    251e:	83 81       	ldd	r24, Z+3	; 0x03
    2520:	81 30       	cpi	r24, 0x01	; 1
    2522:	49 f4       	brne	.+18     	; 0x2536 <TMR_vInit+0x3b0>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x10;
    2524:	af e4       	ldi	r26, 0x4F	; 79
    2526:	b0 e0       	ldi	r27, 0x00	; 0
    2528:	ef e4       	ldi	r30, 0x4F	; 79
    252a:	f0 e0       	ldi	r31, 0x00	; 0
    252c:	80 81       	ld	r24, Z
    252e:	8f 7c       	andi	r24, 0xCF	; 207
    2530:	80 61       	ori	r24, 0x10	; 16
    2532:	8c 93       	st	X, r24
    2534:	bd c0       	rjmp	.+378    	; 0x26b0 <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Clear){
    2536:	e9 81       	ldd	r30, Y+1	; 0x01
    2538:	fa 81       	ldd	r31, Y+2	; 0x02
    253a:	83 81       	ldd	r24, Z+3	; 0x03
    253c:	82 30       	cpi	r24, 0x02	; 2
    253e:	49 f4       	brne	.+18     	; 0x2552 <TMR_vInit+0x3cc>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
    2540:	af e4       	ldi	r26, 0x4F	; 79
    2542:	b0 e0       	ldi	r27, 0x00	; 0
    2544:	ef e4       	ldi	r30, 0x4F	; 79
    2546:	f0 e0       	ldi	r31, 0x00	; 0
    2548:	80 81       	ld	r24, Z
    254a:	8f 7c       	andi	r24, 0xCF	; 207
    254c:	80 62       	ori	r24, 0x20	; 32
    254e:	8c 93       	st	X, r24
    2550:	af c0       	rjmp	.+350    	; 0x26b0 <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Set){
    2552:	e9 81       	ldd	r30, Y+1	; 0x01
    2554:	fa 81       	ldd	r31, Y+2	; 0x02
    2556:	83 81       	ldd	r24, Z+3	; 0x03
    2558:	83 30       	cpi	r24, 0x03	; 3
    255a:	09 f0       	breq	.+2      	; 0x255e <TMR_vInit+0x3d8>
    255c:	a9 c0       	rjmp	.+338    	; 0x26b0 <TMR_vInit+0x52a>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
    255e:	af e4       	ldi	r26, 0x4F	; 79
    2560:	b0 e0       	ldi	r27, 0x00	; 0
    2562:	ef e4       	ldi	r30, 0x4F	; 79
    2564:	f0 e0       	ldi	r31, 0x00	; 0
    2566:	80 81       	ld	r24, Z
    2568:	80 63       	ori	r24, 0x30	; 48
    256a:	8c 93       	st	X, r24
    256c:	a1 c0       	rjmp	.+322    	; 0x26b0 <TMR_vInit+0x52a>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER2_NORMAL:
			TCCR2_REG = (TCCR2_REG&0xB7);
    256e:	a5 e4       	ldi	r26, 0x45	; 69
    2570:	b0 e0       	ldi	r27, 0x00	; 0
    2572:	e5 e4       	ldi	r30, 0x45	; 69
    2574:	f0 e0       	ldi	r31, 0x00	; 0
    2576:	80 81       	ld	r24, Z
    2578:	87 7b       	andi	r24, 0xB7	; 183
    257a:	8c 93       	st	X, r24
			if(TMR->TMR_ToggleMode == TMR_InterruptMode){
    257c:	e9 81       	ldd	r30, Y+1	; 0x01
    257e:	fa 81       	ldd	r31, Y+2	; 0x02
    2580:	82 81       	ldd	r24, Z+2	; 0x02
    2582:	81 30       	cpi	r24, 0x01	; 1
    2584:	49 f4       	brne	.+18     	; 0x2598 <TMR_vInit+0x412>
				TIMSK_REG = (TIMSK_REG&0x3F) | 0x40;
    2586:	a9 e5       	ldi	r26, 0x59	; 89
    2588:	b0 e0       	ldi	r27, 0x00	; 0
    258a:	e9 e5       	ldi	r30, 0x59	; 89
    258c:	f0 e0       	ldi	r31, 0x00	; 0
    258e:	80 81       	ld	r24, Z
    2590:	8f 73       	andi	r24, 0x3F	; 63
    2592:	80 64       	ori	r24, 0x40	; 64
    2594:	8c 93       	st	X, r24
    2596:	8c c0       	rjmp	.+280    	; 0x26b0 <TMR_vInit+0x52a>
			}
			else if(TMR->TMR_ToggleMode == TMR_OCMode){
    2598:	e9 81       	ldd	r30, Y+1	; 0x01
    259a:	fa 81       	ldd	r31, Y+2	; 0x02
    259c:	82 81       	ldd	r24, Z+2	; 0x02
    259e:	88 23       	and	r24, r24
    25a0:	09 f0       	breq	.+2      	; 0x25a4 <TMR_vInit+0x41e>
    25a2:	86 c0       	rjmp	.+268    	; 0x26b0 <TMR_vInit+0x52a>
				if(TMR->TMR_OCMode == OC_Disconnected){
    25a4:	e9 81       	ldd	r30, Y+1	; 0x01
    25a6:	fa 81       	ldd	r31, Y+2	; 0x02
    25a8:	83 81       	ldd	r24, Z+3	; 0x03
    25aa:	88 23       	and	r24, r24
    25ac:	41 f4       	brne	.+16     	; 0x25be <TMR_vInit+0x438>
					TCCR2_REG = (TCCR2_REG & 0xCF);
    25ae:	a5 e4       	ldi	r26, 0x45	; 69
    25b0:	b0 e0       	ldi	r27, 0x00	; 0
    25b2:	e5 e4       	ldi	r30, 0x45	; 69
    25b4:	f0 e0       	ldi	r31, 0x00	; 0
    25b6:	80 81       	ld	r24, Z
    25b8:	8f 7c       	andi	r24, 0xCF	; 207
    25ba:	8c 93       	st	X, r24
    25bc:	79 c0       	rjmp	.+242    	; 0x26b0 <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Toggle){
    25be:	e9 81       	ldd	r30, Y+1	; 0x01
    25c0:	fa 81       	ldd	r31, Y+2	; 0x02
    25c2:	83 81       	ldd	r24, Z+3	; 0x03
    25c4:	81 30       	cpi	r24, 0x01	; 1
    25c6:	49 f4       	brne	.+18     	; 0x25da <TMR_vInit+0x454>
					TCCR2_REG = (TCCR2_REG & 0xCF) | 0x10;
    25c8:	a5 e4       	ldi	r26, 0x45	; 69
    25ca:	b0 e0       	ldi	r27, 0x00	; 0
    25cc:	e5 e4       	ldi	r30, 0x45	; 69
    25ce:	f0 e0       	ldi	r31, 0x00	; 0
    25d0:	80 81       	ld	r24, Z
    25d2:	8f 7c       	andi	r24, 0xCF	; 207
    25d4:	80 61       	ori	r24, 0x10	; 16
    25d6:	8c 93       	st	X, r24
    25d8:	6b c0       	rjmp	.+214    	; 0x26b0 <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Clear){
    25da:	e9 81       	ldd	r30, Y+1	; 0x01
    25dc:	fa 81       	ldd	r31, Y+2	; 0x02
    25de:	83 81       	ldd	r24, Z+3	; 0x03
    25e0:	82 30       	cpi	r24, 0x02	; 2
    25e2:	49 f4       	brne	.+18     	; 0x25f6 <TMR_vInit+0x470>
					TCCR2_REG = (TCCR2_REG & 0xCF) | 0x20;
    25e4:	a5 e4       	ldi	r26, 0x45	; 69
    25e6:	b0 e0       	ldi	r27, 0x00	; 0
    25e8:	e5 e4       	ldi	r30, 0x45	; 69
    25ea:	f0 e0       	ldi	r31, 0x00	; 0
    25ec:	80 81       	ld	r24, Z
    25ee:	8f 7c       	andi	r24, 0xCF	; 207
    25f0:	80 62       	ori	r24, 0x20	; 32
    25f2:	8c 93       	st	X, r24
    25f4:	5d c0       	rjmp	.+186    	; 0x26b0 <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Set){
    25f6:	e9 81       	ldd	r30, Y+1	; 0x01
    25f8:	fa 81       	ldd	r31, Y+2	; 0x02
    25fa:	83 81       	ldd	r24, Z+3	; 0x03
    25fc:	83 30       	cpi	r24, 0x03	; 3
    25fe:	09 f0       	breq	.+2      	; 0x2602 <TMR_vInit+0x47c>
    2600:	57 c0       	rjmp	.+174    	; 0x26b0 <TMR_vInit+0x52a>
					TCCR2_REG = (TCCR2_REG & 0xCF) | 0x30;
    2602:	a5 e4       	ldi	r26, 0x45	; 69
    2604:	b0 e0       	ldi	r27, 0x00	; 0
    2606:	e5 e4       	ldi	r30, 0x45	; 69
    2608:	f0 e0       	ldi	r31, 0x00	; 0
    260a:	80 81       	ld	r24, Z
    260c:	80 63       	ori	r24, 0x30	; 48
    260e:	8c 93       	st	X, r24
    2610:	4f c0       	rjmp	.+158    	; 0x26b0 <TMR_vInit+0x52a>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER2_CTC:
			TCCR2_REG = (TCCR2_REG&0xB7);
    2612:	a5 e4       	ldi	r26, 0x45	; 69
    2614:	b0 e0       	ldi	r27, 0x00	; 0
    2616:	e5 e4       	ldi	r30, 0x45	; 69
    2618:	f0 e0       	ldi	r31, 0x00	; 0
    261a:	80 81       	ld	r24, Z
    261c:	87 7b       	andi	r24, 0xB7	; 183
    261e:	8c 93       	st	X, r24
			if(TMR->TMR_ToggleMode == TMR_InterruptMode){
    2620:	e9 81       	ldd	r30, Y+1	; 0x01
    2622:	fa 81       	ldd	r31, Y+2	; 0x02
    2624:	82 81       	ldd	r24, Z+2	; 0x02
    2626:	81 30       	cpi	r24, 0x01	; 1
    2628:	49 f4       	brne	.+18     	; 0x263c <TMR_vInit+0x4b6>
				TIMSK_REG = (TIMSK_REG&0x3F) | 0x80;
    262a:	a9 e5       	ldi	r26, 0x59	; 89
    262c:	b0 e0       	ldi	r27, 0x00	; 0
    262e:	e9 e5       	ldi	r30, 0x59	; 89
    2630:	f0 e0       	ldi	r31, 0x00	; 0
    2632:	80 81       	ld	r24, Z
    2634:	8f 73       	andi	r24, 0x3F	; 63
    2636:	80 68       	ori	r24, 0x80	; 128
    2638:	8c 93       	st	X, r24
    263a:	3a c0       	rjmp	.+116    	; 0x26b0 <TMR_vInit+0x52a>
			}
			else if(TMR->TMR_ToggleMode == TMR_OCMode){
    263c:	e9 81       	ldd	r30, Y+1	; 0x01
    263e:	fa 81       	ldd	r31, Y+2	; 0x02
    2640:	82 81       	ldd	r24, Z+2	; 0x02
    2642:	88 23       	and	r24, r24
    2644:	a9 f5       	brne	.+106    	; 0x26b0 <TMR_vInit+0x52a>
				if(TMR->TMR_OCMode == OC_Disconnected){
    2646:	e9 81       	ldd	r30, Y+1	; 0x01
    2648:	fa 81       	ldd	r31, Y+2	; 0x02
    264a:	83 81       	ldd	r24, Z+3	; 0x03
    264c:	88 23       	and	r24, r24
    264e:	41 f4       	brne	.+16     	; 0x2660 <TMR_vInit+0x4da>
					TCCR2_REG = (TCCR2_REG & 0xCF);
    2650:	a5 e4       	ldi	r26, 0x45	; 69
    2652:	b0 e0       	ldi	r27, 0x00	; 0
    2654:	e5 e4       	ldi	r30, 0x45	; 69
    2656:	f0 e0       	ldi	r31, 0x00	; 0
    2658:	80 81       	ld	r24, Z
    265a:	8f 7c       	andi	r24, 0xCF	; 207
    265c:	8c 93       	st	X, r24
    265e:	28 c0       	rjmp	.+80     	; 0x26b0 <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Toggle){
    2660:	e9 81       	ldd	r30, Y+1	; 0x01
    2662:	fa 81       	ldd	r31, Y+2	; 0x02
    2664:	83 81       	ldd	r24, Z+3	; 0x03
    2666:	81 30       	cpi	r24, 0x01	; 1
    2668:	49 f4       	brne	.+18     	; 0x267c <TMR_vInit+0x4f6>
					TCCR2_REG = (TCCR2_REG & 0xCF) | 0x10;
    266a:	a5 e4       	ldi	r26, 0x45	; 69
    266c:	b0 e0       	ldi	r27, 0x00	; 0
    266e:	e5 e4       	ldi	r30, 0x45	; 69
    2670:	f0 e0       	ldi	r31, 0x00	; 0
    2672:	80 81       	ld	r24, Z
    2674:	8f 7c       	andi	r24, 0xCF	; 207
    2676:	80 61       	ori	r24, 0x10	; 16
    2678:	8c 93       	st	X, r24
    267a:	1a c0       	rjmp	.+52     	; 0x26b0 <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Clear){
    267c:	e9 81       	ldd	r30, Y+1	; 0x01
    267e:	fa 81       	ldd	r31, Y+2	; 0x02
    2680:	83 81       	ldd	r24, Z+3	; 0x03
    2682:	82 30       	cpi	r24, 0x02	; 2
    2684:	49 f4       	brne	.+18     	; 0x2698 <TMR_vInit+0x512>
					TCCR2_REG = (TCCR2_REG & 0xCF) | 0x20;
    2686:	a5 e4       	ldi	r26, 0x45	; 69
    2688:	b0 e0       	ldi	r27, 0x00	; 0
    268a:	e5 e4       	ldi	r30, 0x45	; 69
    268c:	f0 e0       	ldi	r31, 0x00	; 0
    268e:	80 81       	ld	r24, Z
    2690:	8f 7c       	andi	r24, 0xCF	; 207
    2692:	80 62       	ori	r24, 0x20	; 32
    2694:	8c 93       	st	X, r24
    2696:	0c c0       	rjmp	.+24     	; 0x26b0 <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Set){
    2698:	e9 81       	ldd	r30, Y+1	; 0x01
    269a:	fa 81       	ldd	r31, Y+2	; 0x02
    269c:	83 81       	ldd	r24, Z+3	; 0x03
    269e:	83 30       	cpi	r24, 0x03	; 3
    26a0:	39 f4       	brne	.+14     	; 0x26b0 <TMR_vInit+0x52a>
					TCCR2_REG = (TCCR2_REG & 0xCF) | 0x30;
    26a2:	a5 e4       	ldi	r26, 0x45	; 69
    26a4:	b0 e0       	ldi	r27, 0x00	; 0
    26a6:	e5 e4       	ldi	r30, 0x45	; 69
    26a8:	f0 e0       	ldi	r31, 0x00	; 0
    26aa:	80 81       	ld	r24, Z
    26ac:	80 63       	ori	r24, 0x30	; 48
    26ae:	8c 93       	st	X, r24
			else{ /* Do Nothing */ }
			break;
		default: /* Do Nothing */ break;
		}
	}
}
    26b0:	0f 90       	pop	r0
    26b2:	0f 90       	pop	r0
    26b4:	0f 90       	pop	r0
    26b6:	0f 90       	pop	r0
    26b8:	cf 91       	pop	r28
    26ba:	df 91       	pop	r29
    26bc:	08 95       	ret

000026be <TMR_vStartTimer>:

void TMR_vStartTimer(const TMR_cfg_t *TMR){
    26be:	df 93       	push	r29
    26c0:	cf 93       	push	r28
    26c2:	cd b7       	in	r28, 0x3d	; 61
    26c4:	de b7       	in	r29, 0x3e	; 62
    26c6:	2a 97       	sbiw	r28, 0x0a	; 10
    26c8:	0f b6       	in	r0, 0x3f	; 63
    26ca:	f8 94       	cli
    26cc:	de bf       	out	0x3e, r29	; 62
    26ce:	0f be       	out	0x3f, r0	; 63
    26d0:	cd bf       	out	0x3d, r28	; 61
    26d2:	9a 83       	std	Y+2, r25	; 0x02
    26d4:	89 83       	std	Y+1, r24	; 0x01
	if(TMR != NULL){
    26d6:	89 81       	ldd	r24, Y+1	; 0x01
    26d8:	9a 81       	ldd	r25, Y+2	; 0x02
    26da:	00 97       	sbiw	r24, 0x00	; 0
    26dc:	09 f4       	brne	.+2      	; 0x26e0 <TMR_vStartTimer+0x22>
    26de:	98 c1       	rjmp	.+816    	; 0x2a10 <TMR_vStartTimer+0x352>
		switch(TMR->TMR_TimerChannel){
    26e0:	e9 81       	ldd	r30, Y+1	; 0x01
    26e2:	fa 81       	ldd	r31, Y+2	; 0x02
    26e4:	80 81       	ld	r24, Z
    26e6:	28 2f       	mov	r18, r24
    26e8:	30 e0       	ldi	r19, 0x00	; 0
    26ea:	3a 87       	std	Y+10, r19	; 0x0a
    26ec:	29 87       	std	Y+9, r18	; 0x09
    26ee:	89 85       	ldd	r24, Y+9	; 0x09
    26f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    26f2:	85 30       	cpi	r24, 0x05	; 5
    26f4:	91 05       	cpc	r25, r1
    26f6:	64 f4       	brge	.+24     	; 0x2710 <TMR_vStartTimer+0x52>
    26f8:	29 85       	ldd	r18, Y+9	; 0x09
    26fa:	3a 85       	ldd	r19, Y+10	; 0x0a
    26fc:	22 30       	cpi	r18, 0x02	; 2
    26fe:	31 05       	cpc	r19, r1
    2700:	0c f0       	brlt	.+2      	; 0x2704 <TMR_vStartTimer+0x46>
    2702:	8b c0       	rjmp	.+278    	; 0x281a <TMR_vStartTimer+0x15c>
    2704:	89 85       	ldd	r24, Y+9	; 0x09
    2706:	9a 85       	ldd	r25, Y+10	; 0x0a
    2708:	99 23       	and	r25, r25
    270a:	0c f4       	brge	.+2      	; 0x270e <TMR_vStartTimer+0x50>
    270c:	81 c1       	rjmp	.+770    	; 0x2a10 <TMR_vStartTimer+0x352>
    270e:	07 c0       	rjmp	.+14     	; 0x271e <TMR_vStartTimer+0x60>
    2710:	29 85       	ldd	r18, Y+9	; 0x09
    2712:	3a 85       	ldd	r19, Y+10	; 0x0a
    2714:	27 30       	cpi	r18, 0x07	; 7
    2716:	31 05       	cpc	r19, r1
    2718:	0c f0       	brlt	.+2      	; 0x271c <TMR_vStartTimer+0x5e>
    271a:	7a c1       	rjmp	.+756    	; 0x2a10 <TMR_vStartTimer+0x352>
    271c:	fc c0       	rjmp	.+504    	; 0x2916 <TMR_vStartTimer+0x258>
		case TIMER0_NORMAL:
		case TIMER0_CTC:
			switch(TMR->TMR_Prescale){
    271e:	e9 81       	ldd	r30, Y+1	; 0x01
    2720:	fa 81       	ldd	r31, Y+2	; 0x02
    2722:	81 81       	ldd	r24, Z+1	; 0x01
    2724:	28 2f       	mov	r18, r24
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	38 87       	std	Y+8, r19	; 0x08
    272a:	2f 83       	std	Y+7, r18	; 0x07
    272c:	8f 81       	ldd	r24, Y+7	; 0x07
    272e:	98 85       	ldd	r25, Y+8	; 0x08
    2730:	83 30       	cpi	r24, 0x03	; 3
    2732:	91 05       	cpc	r25, r1
    2734:	09 f4       	brne	.+2      	; 0x2738 <TMR_vStartTimer+0x7a>
    2736:	45 c0       	rjmp	.+138    	; 0x27c2 <TMR_vStartTimer+0x104>
    2738:	2f 81       	ldd	r18, Y+7	; 0x07
    273a:	38 85       	ldd	r19, Y+8	; 0x08
    273c:	24 30       	cpi	r18, 0x04	; 4
    273e:	31 05       	cpc	r19, r1
    2740:	7c f4       	brge	.+30     	; 0x2760 <TMR_vStartTimer+0xa2>
    2742:	8f 81       	ldd	r24, Y+7	; 0x07
    2744:	98 85       	ldd	r25, Y+8	; 0x08
    2746:	81 30       	cpi	r24, 0x01	; 1
    2748:	91 05       	cpc	r25, r1
    274a:	49 f1       	breq	.+82     	; 0x279e <TMR_vStartTimer+0xe0>
    274c:	2f 81       	ldd	r18, Y+7	; 0x07
    274e:	38 85       	ldd	r19, Y+8	; 0x08
    2750:	22 30       	cpi	r18, 0x02	; 2
    2752:	31 05       	cpc	r19, r1
    2754:	6c f5       	brge	.+90     	; 0x27b0 <TMR_vStartTimer+0xf2>
    2756:	8f 81       	ldd	r24, Y+7	; 0x07
    2758:	98 85       	ldd	r25, Y+8	; 0x08
    275a:	00 97       	sbiw	r24, 0x00	; 0
    275c:	c1 f0       	breq	.+48     	; 0x278e <TMR_vStartTimer+0xd0>
    275e:	58 c1       	rjmp	.+688    	; 0x2a10 <TMR_vStartTimer+0x352>
    2760:	2f 81       	ldd	r18, Y+7	; 0x07
    2762:	38 85       	ldd	r19, Y+8	; 0x08
    2764:	25 30       	cpi	r18, 0x05	; 5
    2766:	31 05       	cpc	r19, r1
    2768:	09 f4       	brne	.+2      	; 0x276c <TMR_vStartTimer+0xae>
    276a:	3d c0       	rjmp	.+122    	; 0x27e6 <TMR_vStartTimer+0x128>
    276c:	8f 81       	ldd	r24, Y+7	; 0x07
    276e:	98 85       	ldd	r25, Y+8	; 0x08
    2770:	85 30       	cpi	r24, 0x05	; 5
    2772:	91 05       	cpc	r25, r1
    2774:	7c f1       	brlt	.+94     	; 0x27d4 <TMR_vStartTimer+0x116>
    2776:	2f 81       	ldd	r18, Y+7	; 0x07
    2778:	38 85       	ldd	r19, Y+8	; 0x08
    277a:	26 30       	cpi	r18, 0x06	; 6
    277c:	31 05       	cpc	r19, r1
    277e:	e1 f1       	breq	.+120    	; 0x27f8 <TMR_vStartTimer+0x13a>
    2780:	8f 81       	ldd	r24, Y+7	; 0x07
    2782:	98 85       	ldd	r25, Y+8	; 0x08
    2784:	87 30       	cpi	r24, 0x07	; 7
    2786:	91 05       	cpc	r25, r1
    2788:	09 f4       	brne	.+2      	; 0x278c <TMR_vStartTimer+0xce>
    278a:	3f c0       	rjmp	.+126    	; 0x280a <TMR_vStartTimer+0x14c>
    278c:	41 c1       	rjmp	.+642    	; 0x2a10 <TMR_vStartTimer+0x352>
			case TMR_PRE_NO_CLK:
				TCCR0_REG = (TCCR0_REG&0xF8);
    278e:	a3 e5       	ldi	r26, 0x53	; 83
    2790:	b0 e0       	ldi	r27, 0x00	; 0
    2792:	e3 e5       	ldi	r30, 0x53	; 83
    2794:	f0 e0       	ldi	r31, 0x00	; 0
    2796:	80 81       	ld	r24, Z
    2798:	88 7f       	andi	r24, 0xF8	; 248
    279a:	8c 93       	st	X, r24
    279c:	39 c1       	rjmp	.+626    	; 0x2a10 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_0:
				TCCR0_REG = (TCCR0_REG&0xF8) | 1;
    279e:	a3 e5       	ldi	r26, 0x53	; 83
    27a0:	b0 e0       	ldi	r27, 0x00	; 0
    27a2:	e3 e5       	ldi	r30, 0x53	; 83
    27a4:	f0 e0       	ldi	r31, 0x00	; 0
    27a6:	80 81       	ld	r24, Z
    27a8:	88 7f       	andi	r24, 0xF8	; 248
    27aa:	81 60       	ori	r24, 0x01	; 1
    27ac:	8c 93       	st	X, r24
    27ae:	30 c1       	rjmp	.+608    	; 0x2a10 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_8:
				TCCR0_REG = (TCCR0_REG&0xF8) | 2;
    27b0:	a3 e5       	ldi	r26, 0x53	; 83
    27b2:	b0 e0       	ldi	r27, 0x00	; 0
    27b4:	e3 e5       	ldi	r30, 0x53	; 83
    27b6:	f0 e0       	ldi	r31, 0x00	; 0
    27b8:	80 81       	ld	r24, Z
    27ba:	88 7f       	andi	r24, 0xF8	; 248
    27bc:	82 60       	ori	r24, 0x02	; 2
    27be:	8c 93       	st	X, r24
    27c0:	27 c1       	rjmp	.+590    	; 0x2a10 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_64:
				TCCR0_REG = (TCCR0_REG&0xF8) | 3;
    27c2:	a3 e5       	ldi	r26, 0x53	; 83
    27c4:	b0 e0       	ldi	r27, 0x00	; 0
    27c6:	e3 e5       	ldi	r30, 0x53	; 83
    27c8:	f0 e0       	ldi	r31, 0x00	; 0
    27ca:	80 81       	ld	r24, Z
    27cc:	88 7f       	andi	r24, 0xF8	; 248
    27ce:	83 60       	ori	r24, 0x03	; 3
    27d0:	8c 93       	st	X, r24
    27d2:	1e c1       	rjmp	.+572    	; 0x2a10 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_256:
				TCCR0_REG = (TCCR0_REG&0xF8) | 4;
    27d4:	a3 e5       	ldi	r26, 0x53	; 83
    27d6:	b0 e0       	ldi	r27, 0x00	; 0
    27d8:	e3 e5       	ldi	r30, 0x53	; 83
    27da:	f0 e0       	ldi	r31, 0x00	; 0
    27dc:	80 81       	ld	r24, Z
    27de:	88 7f       	andi	r24, 0xF8	; 248
    27e0:	84 60       	ori	r24, 0x04	; 4
    27e2:	8c 93       	st	X, r24
    27e4:	15 c1       	rjmp	.+554    	; 0x2a10 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_1024:
				TCCR0_REG = (TCCR0_REG&0xF8) | 5;
    27e6:	a3 e5       	ldi	r26, 0x53	; 83
    27e8:	b0 e0       	ldi	r27, 0x00	; 0
    27ea:	e3 e5       	ldi	r30, 0x53	; 83
    27ec:	f0 e0       	ldi	r31, 0x00	; 0
    27ee:	80 81       	ld	r24, Z
    27f0:	88 7f       	andi	r24, 0xF8	; 248
    27f2:	85 60       	ori	r24, 0x05	; 5
    27f4:	8c 93       	st	X, r24
    27f6:	0c c1       	rjmp	.+536    	; 0x2a10 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_EXT_FALLING:
				TCCR0_REG = (TCCR0_REG&0xF8) | 6;
    27f8:	a3 e5       	ldi	r26, 0x53	; 83
    27fa:	b0 e0       	ldi	r27, 0x00	; 0
    27fc:	e3 e5       	ldi	r30, 0x53	; 83
    27fe:	f0 e0       	ldi	r31, 0x00	; 0
    2800:	80 81       	ld	r24, Z
    2802:	88 7f       	andi	r24, 0xF8	; 248
    2804:	86 60       	ori	r24, 0x06	; 6
    2806:	8c 93       	st	X, r24
    2808:	03 c1       	rjmp	.+518    	; 0x2a10 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_EXT_RISING:
				TCCR0_REG = (TCCR0_REG&0xF8) | 7;
    280a:	a3 e5       	ldi	r26, 0x53	; 83
    280c:	b0 e0       	ldi	r27, 0x00	; 0
    280e:	e3 e5       	ldi	r30, 0x53	; 83
    2810:	f0 e0       	ldi	r31, 0x00	; 0
    2812:	80 81       	ld	r24, Z
    2814:	87 60       	ori	r24, 0x07	; 7
    2816:	8c 93       	st	X, r24
    2818:	fb c0       	rjmp	.+502    	; 0x2a10 <TMR_vStartTimer+0x352>
			}
			break;
		case TIMER1_NORMAL:
		case TIMER1_CTC_OCR:
		case TIMER1_CTC_ICR:
			switch(TMR->TMR_Prescale){
    281a:	e9 81       	ldd	r30, Y+1	; 0x01
    281c:	fa 81       	ldd	r31, Y+2	; 0x02
    281e:	81 81       	ldd	r24, Z+1	; 0x01
    2820:	28 2f       	mov	r18, r24
    2822:	30 e0       	ldi	r19, 0x00	; 0
    2824:	3e 83       	std	Y+6, r19	; 0x06
    2826:	2d 83       	std	Y+5, r18	; 0x05
    2828:	8d 81       	ldd	r24, Y+5	; 0x05
    282a:	9e 81       	ldd	r25, Y+6	; 0x06
    282c:	83 30       	cpi	r24, 0x03	; 3
    282e:	91 05       	cpc	r25, r1
    2830:	09 f4       	brne	.+2      	; 0x2834 <TMR_vStartTimer+0x176>
    2832:	45 c0       	rjmp	.+138    	; 0x28be <TMR_vStartTimer+0x200>
    2834:	2d 81       	ldd	r18, Y+5	; 0x05
    2836:	3e 81       	ldd	r19, Y+6	; 0x06
    2838:	24 30       	cpi	r18, 0x04	; 4
    283a:	31 05       	cpc	r19, r1
    283c:	7c f4       	brge	.+30     	; 0x285c <TMR_vStartTimer+0x19e>
    283e:	8d 81       	ldd	r24, Y+5	; 0x05
    2840:	9e 81       	ldd	r25, Y+6	; 0x06
    2842:	81 30       	cpi	r24, 0x01	; 1
    2844:	91 05       	cpc	r25, r1
    2846:	49 f1       	breq	.+82     	; 0x289a <TMR_vStartTimer+0x1dc>
    2848:	2d 81       	ldd	r18, Y+5	; 0x05
    284a:	3e 81       	ldd	r19, Y+6	; 0x06
    284c:	22 30       	cpi	r18, 0x02	; 2
    284e:	31 05       	cpc	r19, r1
    2850:	6c f5       	brge	.+90     	; 0x28ac <TMR_vStartTimer+0x1ee>
    2852:	8d 81       	ldd	r24, Y+5	; 0x05
    2854:	9e 81       	ldd	r25, Y+6	; 0x06
    2856:	00 97       	sbiw	r24, 0x00	; 0
    2858:	c1 f0       	breq	.+48     	; 0x288a <TMR_vStartTimer+0x1cc>
    285a:	da c0       	rjmp	.+436    	; 0x2a10 <TMR_vStartTimer+0x352>
    285c:	2d 81       	ldd	r18, Y+5	; 0x05
    285e:	3e 81       	ldd	r19, Y+6	; 0x06
    2860:	25 30       	cpi	r18, 0x05	; 5
    2862:	31 05       	cpc	r19, r1
    2864:	09 f4       	brne	.+2      	; 0x2868 <TMR_vStartTimer+0x1aa>
    2866:	3d c0       	rjmp	.+122    	; 0x28e2 <TMR_vStartTimer+0x224>
    2868:	8d 81       	ldd	r24, Y+5	; 0x05
    286a:	9e 81       	ldd	r25, Y+6	; 0x06
    286c:	85 30       	cpi	r24, 0x05	; 5
    286e:	91 05       	cpc	r25, r1
    2870:	7c f1       	brlt	.+94     	; 0x28d0 <TMR_vStartTimer+0x212>
    2872:	2d 81       	ldd	r18, Y+5	; 0x05
    2874:	3e 81       	ldd	r19, Y+6	; 0x06
    2876:	26 30       	cpi	r18, 0x06	; 6
    2878:	31 05       	cpc	r19, r1
    287a:	e1 f1       	breq	.+120    	; 0x28f4 <TMR_vStartTimer+0x236>
    287c:	8d 81       	ldd	r24, Y+5	; 0x05
    287e:	9e 81       	ldd	r25, Y+6	; 0x06
    2880:	87 30       	cpi	r24, 0x07	; 7
    2882:	91 05       	cpc	r25, r1
    2884:	09 f4       	brne	.+2      	; 0x2888 <TMR_vStartTimer+0x1ca>
    2886:	3f c0       	rjmp	.+126    	; 0x2906 <TMR_vStartTimer+0x248>
    2888:	c3 c0       	rjmp	.+390    	; 0x2a10 <TMR_vStartTimer+0x352>
			case TMR_PRE_NO_CLK:
				TCCR1B_REG = (TCCR1B_REG&0xF8);
    288a:	ae e4       	ldi	r26, 0x4E	; 78
    288c:	b0 e0       	ldi	r27, 0x00	; 0
    288e:	ee e4       	ldi	r30, 0x4E	; 78
    2890:	f0 e0       	ldi	r31, 0x00	; 0
    2892:	80 81       	ld	r24, Z
    2894:	88 7f       	andi	r24, 0xF8	; 248
    2896:	8c 93       	st	X, r24
    2898:	bb c0       	rjmp	.+374    	; 0x2a10 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_0:
				TCCR1B_REG = (TCCR1B_REG&0xF8) | 1;
    289a:	ae e4       	ldi	r26, 0x4E	; 78
    289c:	b0 e0       	ldi	r27, 0x00	; 0
    289e:	ee e4       	ldi	r30, 0x4E	; 78
    28a0:	f0 e0       	ldi	r31, 0x00	; 0
    28a2:	80 81       	ld	r24, Z
    28a4:	88 7f       	andi	r24, 0xF8	; 248
    28a6:	81 60       	ori	r24, 0x01	; 1
    28a8:	8c 93       	st	X, r24
    28aa:	b2 c0       	rjmp	.+356    	; 0x2a10 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_8:
				TCCR1B_REG = (TCCR1B_REG&0xF8) | 2;
    28ac:	ae e4       	ldi	r26, 0x4E	; 78
    28ae:	b0 e0       	ldi	r27, 0x00	; 0
    28b0:	ee e4       	ldi	r30, 0x4E	; 78
    28b2:	f0 e0       	ldi	r31, 0x00	; 0
    28b4:	80 81       	ld	r24, Z
    28b6:	88 7f       	andi	r24, 0xF8	; 248
    28b8:	82 60       	ori	r24, 0x02	; 2
    28ba:	8c 93       	st	X, r24
    28bc:	a9 c0       	rjmp	.+338    	; 0x2a10 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_64:
				TCCR1B_REG = (TCCR1B_REG&0xF8) | 3;
    28be:	ae e4       	ldi	r26, 0x4E	; 78
    28c0:	b0 e0       	ldi	r27, 0x00	; 0
    28c2:	ee e4       	ldi	r30, 0x4E	; 78
    28c4:	f0 e0       	ldi	r31, 0x00	; 0
    28c6:	80 81       	ld	r24, Z
    28c8:	88 7f       	andi	r24, 0xF8	; 248
    28ca:	83 60       	ori	r24, 0x03	; 3
    28cc:	8c 93       	st	X, r24
    28ce:	a0 c0       	rjmp	.+320    	; 0x2a10 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_256:
				TCCR1B_REG = (TCCR1B_REG&0xF8) | 4;
    28d0:	ae e4       	ldi	r26, 0x4E	; 78
    28d2:	b0 e0       	ldi	r27, 0x00	; 0
    28d4:	ee e4       	ldi	r30, 0x4E	; 78
    28d6:	f0 e0       	ldi	r31, 0x00	; 0
    28d8:	80 81       	ld	r24, Z
    28da:	88 7f       	andi	r24, 0xF8	; 248
    28dc:	84 60       	ori	r24, 0x04	; 4
    28de:	8c 93       	st	X, r24
    28e0:	97 c0       	rjmp	.+302    	; 0x2a10 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_1024:
				TCCR1B_REG = (TCCR1B_REG&0xF8) | 5;
    28e2:	ae e4       	ldi	r26, 0x4E	; 78
    28e4:	b0 e0       	ldi	r27, 0x00	; 0
    28e6:	ee e4       	ldi	r30, 0x4E	; 78
    28e8:	f0 e0       	ldi	r31, 0x00	; 0
    28ea:	80 81       	ld	r24, Z
    28ec:	88 7f       	andi	r24, 0xF8	; 248
    28ee:	85 60       	ori	r24, 0x05	; 5
    28f0:	8c 93       	st	X, r24
    28f2:	8e c0       	rjmp	.+284    	; 0x2a10 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_EXT_FALLING:
				TCCR1B_REG = (TCCR1B_REG&0xF8) | 6;
    28f4:	ae e4       	ldi	r26, 0x4E	; 78
    28f6:	b0 e0       	ldi	r27, 0x00	; 0
    28f8:	ee e4       	ldi	r30, 0x4E	; 78
    28fa:	f0 e0       	ldi	r31, 0x00	; 0
    28fc:	80 81       	ld	r24, Z
    28fe:	88 7f       	andi	r24, 0xF8	; 248
    2900:	86 60       	ori	r24, 0x06	; 6
    2902:	8c 93       	st	X, r24
    2904:	85 c0       	rjmp	.+266    	; 0x2a10 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_EXT_RISING:
				TCCR1B_REG = (TCCR1B_REG&0xF8) | 7;
    2906:	ae e4       	ldi	r26, 0x4E	; 78
    2908:	b0 e0       	ldi	r27, 0x00	; 0
    290a:	ee e4       	ldi	r30, 0x4E	; 78
    290c:	f0 e0       	ldi	r31, 0x00	; 0
    290e:	80 81       	ld	r24, Z
    2910:	87 60       	ori	r24, 0x07	; 7
    2912:	8c 93       	st	X, r24
    2914:	7d c0       	rjmp	.+250    	; 0x2a10 <TMR_vStartTimer+0x352>
			default: /* Do Nothing */ break;
			}
			break;
		case TIMER2_NORMAL:
		case TIMER2_CTC:
			switch(TMR->TMR_Prescale){
    2916:	e9 81       	ldd	r30, Y+1	; 0x01
    2918:	fa 81       	ldd	r31, Y+2	; 0x02
    291a:	81 81       	ldd	r24, Z+1	; 0x01
    291c:	28 2f       	mov	r18, r24
    291e:	30 e0       	ldi	r19, 0x00	; 0
    2920:	3c 83       	std	Y+4, r19	; 0x04
    2922:	2b 83       	std	Y+3, r18	; 0x03
    2924:	8b 81       	ldd	r24, Y+3	; 0x03
    2926:	9c 81       	ldd	r25, Y+4	; 0x04
    2928:	83 30       	cpi	r24, 0x03	; 3
    292a:	91 05       	cpc	r25, r1
    292c:	09 f4       	brne	.+2      	; 0x2930 <TMR_vStartTimer+0x272>
    292e:	4e c0       	rjmp	.+156    	; 0x29cc <TMR_vStartTimer+0x30e>
    2930:	2b 81       	ldd	r18, Y+3	; 0x03
    2932:	3c 81       	ldd	r19, Y+4	; 0x04
    2934:	24 30       	cpi	r18, 0x04	; 4
    2936:	31 05       	cpc	r19, r1
    2938:	7c f4       	brge	.+30     	; 0x2958 <TMR_vStartTimer+0x29a>
    293a:	8b 81       	ldd	r24, Y+3	; 0x03
    293c:	9c 81       	ldd	r25, Y+4	; 0x04
    293e:	81 30       	cpi	r24, 0x01	; 1
    2940:	91 05       	cpc	r25, r1
    2942:	49 f1       	breq	.+82     	; 0x2996 <TMR_vStartTimer+0x2d8>
    2944:	2b 81       	ldd	r18, Y+3	; 0x03
    2946:	3c 81       	ldd	r19, Y+4	; 0x04
    2948:	22 30       	cpi	r18, 0x02	; 2
    294a:	31 05       	cpc	r19, r1
    294c:	6c f5       	brge	.+90     	; 0x29a8 <TMR_vStartTimer+0x2ea>
    294e:	8b 81       	ldd	r24, Y+3	; 0x03
    2950:	9c 81       	ldd	r25, Y+4	; 0x04
    2952:	00 97       	sbiw	r24, 0x00	; 0
    2954:	c1 f0       	breq	.+48     	; 0x2986 <TMR_vStartTimer+0x2c8>
    2956:	5c c0       	rjmp	.+184    	; 0x2a10 <TMR_vStartTimer+0x352>
    2958:	2b 81       	ldd	r18, Y+3	; 0x03
    295a:	3c 81       	ldd	r19, Y+4	; 0x04
    295c:	25 30       	cpi	r18, 0x05	; 5
    295e:	31 05       	cpc	r19, r1
    2960:	09 f4       	brne	.+2      	; 0x2964 <TMR_vStartTimer+0x2a6>
    2962:	4f c0       	rjmp	.+158    	; 0x2a02 <TMR_vStartTimer+0x344>
    2964:	8b 81       	ldd	r24, Y+3	; 0x03
    2966:	9c 81       	ldd	r25, Y+4	; 0x04
    2968:	85 30       	cpi	r24, 0x05	; 5
    296a:	91 05       	cpc	r25, r1
    296c:	0c f4       	brge	.+2      	; 0x2970 <TMR_vStartTimer+0x2b2>
    296e:	40 c0       	rjmp	.+128    	; 0x29f0 <TMR_vStartTimer+0x332>
    2970:	2b 81       	ldd	r18, Y+3	; 0x03
    2972:	3c 81       	ldd	r19, Y+4	; 0x04
    2974:	28 30       	cpi	r18, 0x08	; 8
    2976:	31 05       	cpc	r19, r1
    2978:	01 f1       	breq	.+64     	; 0x29ba <TMR_vStartTimer+0x2fc>
    297a:	8b 81       	ldd	r24, Y+3	; 0x03
    297c:	9c 81       	ldd	r25, Y+4	; 0x04
    297e:	89 30       	cpi	r24, 0x09	; 9
    2980:	91 05       	cpc	r25, r1
    2982:	69 f1       	breq	.+90     	; 0x29de <TMR_vStartTimer+0x320>
    2984:	45 c0       	rjmp	.+138    	; 0x2a10 <TMR_vStartTimer+0x352>
			case TMR_PRE_NO_CLK:
				TCCR2_REG = (TCCR2_REG&0xF8);
    2986:	a5 e4       	ldi	r26, 0x45	; 69
    2988:	b0 e0       	ldi	r27, 0x00	; 0
    298a:	e5 e4       	ldi	r30, 0x45	; 69
    298c:	f0 e0       	ldi	r31, 0x00	; 0
    298e:	80 81       	ld	r24, Z
    2990:	88 7f       	andi	r24, 0xF8	; 248
    2992:	8c 93       	st	X, r24
    2994:	3d c0       	rjmp	.+122    	; 0x2a10 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_0:
				TCCR2_REG = (TCCR2_REG&0xF8) | 1;
    2996:	a5 e4       	ldi	r26, 0x45	; 69
    2998:	b0 e0       	ldi	r27, 0x00	; 0
    299a:	e5 e4       	ldi	r30, 0x45	; 69
    299c:	f0 e0       	ldi	r31, 0x00	; 0
    299e:	80 81       	ld	r24, Z
    29a0:	88 7f       	andi	r24, 0xF8	; 248
    29a2:	81 60       	ori	r24, 0x01	; 1
    29a4:	8c 93       	st	X, r24
    29a6:	34 c0       	rjmp	.+104    	; 0x2a10 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_8:
				TCCR2_REG = (TCCR2_REG&0xF8) | 2;
    29a8:	a5 e4       	ldi	r26, 0x45	; 69
    29aa:	b0 e0       	ldi	r27, 0x00	; 0
    29ac:	e5 e4       	ldi	r30, 0x45	; 69
    29ae:	f0 e0       	ldi	r31, 0x00	; 0
    29b0:	80 81       	ld	r24, Z
    29b2:	88 7f       	andi	r24, 0xF8	; 248
    29b4:	82 60       	ori	r24, 0x02	; 2
    29b6:	8c 93       	st	X, r24
    29b8:	2b c0       	rjmp	.+86     	; 0x2a10 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_32:
				TCCR2_REG = (TCCR2_REG&0xF8) | 3;
    29ba:	a5 e4       	ldi	r26, 0x45	; 69
    29bc:	b0 e0       	ldi	r27, 0x00	; 0
    29be:	e5 e4       	ldi	r30, 0x45	; 69
    29c0:	f0 e0       	ldi	r31, 0x00	; 0
    29c2:	80 81       	ld	r24, Z
    29c4:	88 7f       	andi	r24, 0xF8	; 248
    29c6:	83 60       	ori	r24, 0x03	; 3
    29c8:	8c 93       	st	X, r24
    29ca:	22 c0       	rjmp	.+68     	; 0x2a10 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_64:
				TCCR2_REG = (TCCR2_REG&0xF8) | 4;
    29cc:	a5 e4       	ldi	r26, 0x45	; 69
    29ce:	b0 e0       	ldi	r27, 0x00	; 0
    29d0:	e5 e4       	ldi	r30, 0x45	; 69
    29d2:	f0 e0       	ldi	r31, 0x00	; 0
    29d4:	80 81       	ld	r24, Z
    29d6:	88 7f       	andi	r24, 0xF8	; 248
    29d8:	84 60       	ori	r24, 0x04	; 4
    29da:	8c 93       	st	X, r24
    29dc:	19 c0       	rjmp	.+50     	; 0x2a10 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_128:
				TCCR2_REG = (TCCR2_REG&0xF8) | 5;
    29de:	a5 e4       	ldi	r26, 0x45	; 69
    29e0:	b0 e0       	ldi	r27, 0x00	; 0
    29e2:	e5 e4       	ldi	r30, 0x45	; 69
    29e4:	f0 e0       	ldi	r31, 0x00	; 0
    29e6:	80 81       	ld	r24, Z
    29e8:	88 7f       	andi	r24, 0xF8	; 248
    29ea:	85 60       	ori	r24, 0x05	; 5
    29ec:	8c 93       	st	X, r24
    29ee:	10 c0       	rjmp	.+32     	; 0x2a10 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_256:
				TCCR2_REG = (TCCR2_REG&0xF8) | 6;
    29f0:	a5 e4       	ldi	r26, 0x45	; 69
    29f2:	b0 e0       	ldi	r27, 0x00	; 0
    29f4:	e5 e4       	ldi	r30, 0x45	; 69
    29f6:	f0 e0       	ldi	r31, 0x00	; 0
    29f8:	80 81       	ld	r24, Z
    29fa:	88 7f       	andi	r24, 0xF8	; 248
    29fc:	86 60       	ori	r24, 0x06	; 6
    29fe:	8c 93       	st	X, r24
    2a00:	07 c0       	rjmp	.+14     	; 0x2a10 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_1024:
				TCCR2_REG = (TCCR2_REG&0xF8) | 7;
    2a02:	a5 e4       	ldi	r26, 0x45	; 69
    2a04:	b0 e0       	ldi	r27, 0x00	; 0
    2a06:	e5 e4       	ldi	r30, 0x45	; 69
    2a08:	f0 e0       	ldi	r31, 0x00	; 0
    2a0a:	80 81       	ld	r24, Z
    2a0c:	87 60       	ori	r24, 0x07	; 7
    2a0e:	8c 93       	st	X, r24
			}
			break;
		default: /* Do Nothing */ break;
		}
	}
}
    2a10:	2a 96       	adiw	r28, 0x0a	; 10
    2a12:	0f b6       	in	r0, 0x3f	; 63
    2a14:	f8 94       	cli
    2a16:	de bf       	out	0x3e, r29	; 62
    2a18:	0f be       	out	0x3f, r0	; 63
    2a1a:	cd bf       	out	0x3d, r28	; 61
    2a1c:	cf 91       	pop	r28
    2a1e:	df 91       	pop	r29
    2a20:	08 95       	ret

00002a22 <TMR_vStop>:

void TMR_vStop(const TMR_cfg_t *TMR){
    2a22:	df 93       	push	r29
    2a24:	cf 93       	push	r28
    2a26:	00 d0       	rcall	.+0      	; 0x2a28 <TMR_vStop+0x6>
    2a28:	00 d0       	rcall	.+0      	; 0x2a2a <TMR_vStop+0x8>
    2a2a:	cd b7       	in	r28, 0x3d	; 61
    2a2c:	de b7       	in	r29, 0x3e	; 62
    2a2e:	9a 83       	std	Y+2, r25	; 0x02
    2a30:	89 83       	std	Y+1, r24	; 0x01
	if(TMR != NULL){
    2a32:	89 81       	ldd	r24, Y+1	; 0x01
    2a34:	9a 81       	ldd	r25, Y+2	; 0x02
    2a36:	00 97       	sbiw	r24, 0x00	; 0
    2a38:	99 f1       	breq	.+102    	; 0x2aa0 <TMR_vStop+0x7e>
		switch(TMR->TMR_TimerChannel){
    2a3a:	e9 81       	ldd	r30, Y+1	; 0x01
    2a3c:	fa 81       	ldd	r31, Y+2	; 0x02
    2a3e:	80 81       	ld	r24, Z
    2a40:	28 2f       	mov	r18, r24
    2a42:	30 e0       	ldi	r19, 0x00	; 0
    2a44:	3c 83       	std	Y+4, r19	; 0x04
    2a46:	2b 83       	std	Y+3, r18	; 0x03
    2a48:	8b 81       	ldd	r24, Y+3	; 0x03
    2a4a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a4c:	85 30       	cpi	r24, 0x05	; 5
    2a4e:	91 05       	cpc	r25, r1
    2a50:	54 f4       	brge	.+20     	; 0x2a66 <TMR_vStop+0x44>
    2a52:	2b 81       	ldd	r18, Y+3	; 0x03
    2a54:	3c 81       	ldd	r19, Y+4	; 0x04
    2a56:	22 30       	cpi	r18, 0x02	; 2
    2a58:	31 05       	cpc	r19, r1
    2a5a:	9c f4       	brge	.+38     	; 0x2a82 <TMR_vStop+0x60>
    2a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a5e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a60:	99 23       	and	r25, r25
    2a62:	f4 f0       	brlt	.+60     	; 0x2aa0 <TMR_vStop+0x7e>
    2a64:	06 c0       	rjmp	.+12     	; 0x2a72 <TMR_vStop+0x50>
    2a66:	2b 81       	ldd	r18, Y+3	; 0x03
    2a68:	3c 81       	ldd	r19, Y+4	; 0x04
    2a6a:	27 30       	cpi	r18, 0x07	; 7
    2a6c:	31 05       	cpc	r19, r1
    2a6e:	c4 f4       	brge	.+48     	; 0x2aa0 <TMR_vStop+0x7e>
    2a70:	10 c0       	rjmp	.+32     	; 0x2a92 <TMR_vStop+0x70>
		case TIMER0_NORMAL:
		case TIMER0_CTC:
			TCCR0_REG &= 0xF8;
    2a72:	a3 e5       	ldi	r26, 0x53	; 83
    2a74:	b0 e0       	ldi	r27, 0x00	; 0
    2a76:	e3 e5       	ldi	r30, 0x53	; 83
    2a78:	f0 e0       	ldi	r31, 0x00	; 0
    2a7a:	80 81       	ld	r24, Z
    2a7c:	88 7f       	andi	r24, 0xF8	; 248
    2a7e:	8c 93       	st	X, r24
    2a80:	0f c0       	rjmp	.+30     	; 0x2aa0 <TMR_vStop+0x7e>
			break;
		case TIMER1_NORMAL:
		case TIMER1_CTC_OCR:
		case TIMER1_CTC_ICR:
			TCCR1B_REG &= 0xF8;
    2a82:	ae e4       	ldi	r26, 0x4E	; 78
    2a84:	b0 e0       	ldi	r27, 0x00	; 0
    2a86:	ee e4       	ldi	r30, 0x4E	; 78
    2a88:	f0 e0       	ldi	r31, 0x00	; 0
    2a8a:	80 81       	ld	r24, Z
    2a8c:	88 7f       	andi	r24, 0xF8	; 248
    2a8e:	8c 93       	st	X, r24
    2a90:	07 c0       	rjmp	.+14     	; 0x2aa0 <TMR_vStop+0x7e>
			break;
		case TIMER2_NORMAL:
		case TIMER2_CTC:
			TCCR2_REG &= 0xF8;
    2a92:	a5 e4       	ldi	r26, 0x45	; 69
    2a94:	b0 e0       	ldi	r27, 0x00	; 0
    2a96:	e5 e4       	ldi	r30, 0x45	; 69
    2a98:	f0 e0       	ldi	r31, 0x00	; 0
    2a9a:	80 81       	ld	r24, Z
    2a9c:	88 7f       	andi	r24, 0xF8	; 248
    2a9e:	8c 93       	st	X, r24
			break;
		default: /* Do Nothing */ break;
		}
	}
}
    2aa0:	0f 90       	pop	r0
    2aa2:	0f 90       	pop	r0
    2aa4:	0f 90       	pop	r0
    2aa6:	0f 90       	pop	r0
    2aa8:	cf 91       	pop	r28
    2aaa:	df 91       	pop	r29
    2aac:	08 95       	ret

00002aae <TMR_vSetICRValue>:

void TMR_vSetICRValue(const TMR_cfg_t *TMR, u16 Copy_u16ICRValue){
    2aae:	df 93       	push	r29
    2ab0:	cf 93       	push	r28
    2ab2:	00 d0       	rcall	.+0      	; 0x2ab4 <TMR_vSetICRValue+0x6>
    2ab4:	00 d0       	rcall	.+0      	; 0x2ab6 <TMR_vSetICRValue+0x8>
    2ab6:	cd b7       	in	r28, 0x3d	; 61
    2ab8:	de b7       	in	r29, 0x3e	; 62
    2aba:	9a 83       	std	Y+2, r25	; 0x02
    2abc:	89 83       	std	Y+1, r24	; 0x01
    2abe:	7c 83       	std	Y+4, r23	; 0x04
    2ac0:	6b 83       	std	Y+3, r22	; 0x03
	if(TMR != NULL){
    2ac2:	89 81       	ldd	r24, Y+1	; 0x01
    2ac4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ac6:	00 97       	sbiw	r24, 0x00	; 0
    2ac8:	79 f0       	breq	.+30     	; 0x2ae8 <TMR_vSetICRValue+0x3a>
		switch(TMR->TMR_TimerChannel){
    2aca:	e9 81       	ldd	r30, Y+1	; 0x01
    2acc:	fa 81       	ldd	r31, Y+2	; 0x02
    2ace:	80 81       	ld	r24, Z
    2ad0:	88 2f       	mov	r24, r24
    2ad2:	90 e0       	ldi	r25, 0x00	; 0
    2ad4:	02 97       	sbiw	r24, 0x02	; 2
    2ad6:	83 30       	cpi	r24, 0x03	; 3
    2ad8:	91 05       	cpc	r25, r1
    2ada:	30 f4       	brcc	.+12     	; 0x2ae8 <TMR_vSetICRValue+0x3a>

		case TIMER1_NORMAL:
		case TIMER1_CTC_OCR:
		case TIMER1_CTC_ICR:
			ICR1_REG = Copy_u16ICRValue;
    2adc:	e6 e4       	ldi	r30, 0x46	; 70
    2ade:	f0 e0       	ldi	r31, 0x00	; 0
    2ae0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ae4:	91 83       	std	Z+1, r25	; 0x01
    2ae6:	80 83       	st	Z, r24
			break;
		default: /* Do Nothing */ break;
		}
	}
}
    2ae8:	0f 90       	pop	r0
    2aea:	0f 90       	pop	r0
    2aec:	0f 90       	pop	r0
    2aee:	0f 90       	pop	r0
    2af0:	cf 91       	pop	r28
    2af2:	df 91       	pop	r29
    2af4:	08 95       	ret

00002af6 <TMR_vSetOCRValue>:

void TMR_vSetOCRValue(const TMR_cfg_t *TMR, u16 Copy_u16OCRValue){
    2af6:	df 93       	push	r29
    2af8:	cf 93       	push	r28
    2afa:	00 d0       	rcall	.+0      	; 0x2afc <TMR_vSetOCRValue+0x6>
    2afc:	00 d0       	rcall	.+0      	; 0x2afe <TMR_vSetOCRValue+0x8>
    2afe:	00 d0       	rcall	.+0      	; 0x2b00 <TMR_vSetOCRValue+0xa>
    2b00:	cd b7       	in	r28, 0x3d	; 61
    2b02:	de b7       	in	r29, 0x3e	; 62
    2b04:	9a 83       	std	Y+2, r25	; 0x02
    2b06:	89 83       	std	Y+1, r24	; 0x01
    2b08:	7c 83       	std	Y+4, r23	; 0x04
    2b0a:	6b 83       	std	Y+3, r22	; 0x03
	if(TMR != NULL){
    2b0c:	89 81       	ldd	r24, Y+1	; 0x01
    2b0e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b10:	00 97       	sbiw	r24, 0x00	; 0
    2b12:	61 f1       	breq	.+88     	; 0x2b6c <TMR_vSetOCRValue+0x76>
		switch(TMR->TMR_TimerChannel){
    2b14:	e9 81       	ldd	r30, Y+1	; 0x01
    2b16:	fa 81       	ldd	r31, Y+2	; 0x02
    2b18:	80 81       	ld	r24, Z
    2b1a:	28 2f       	mov	r18, r24
    2b1c:	30 e0       	ldi	r19, 0x00	; 0
    2b1e:	3e 83       	std	Y+6, r19	; 0x06
    2b20:	2d 83       	std	Y+5, r18	; 0x05
    2b22:	8d 81       	ldd	r24, Y+5	; 0x05
    2b24:	9e 81       	ldd	r25, Y+6	; 0x06
    2b26:	85 30       	cpi	r24, 0x05	; 5
    2b28:	91 05       	cpc	r25, r1
    2b2a:	54 f4       	brge	.+20     	; 0x2b40 <TMR_vSetOCRValue+0x4a>
    2b2c:	2d 81       	ldd	r18, Y+5	; 0x05
    2b2e:	3e 81       	ldd	r19, Y+6	; 0x06
    2b30:	22 30       	cpi	r18, 0x02	; 2
    2b32:	31 05       	cpc	r19, r1
    2b34:	84 f4       	brge	.+32     	; 0x2b56 <TMR_vSetOCRValue+0x60>
    2b36:	8d 81       	ldd	r24, Y+5	; 0x05
    2b38:	9e 81       	ldd	r25, Y+6	; 0x06
    2b3a:	99 23       	and	r25, r25
    2b3c:	bc f0       	brlt	.+46     	; 0x2b6c <TMR_vSetOCRValue+0x76>
    2b3e:	06 c0       	rjmp	.+12     	; 0x2b4c <TMR_vSetOCRValue+0x56>
    2b40:	2d 81       	ldd	r18, Y+5	; 0x05
    2b42:	3e 81       	ldd	r19, Y+6	; 0x06
    2b44:	27 30       	cpi	r18, 0x07	; 7
    2b46:	31 05       	cpc	r19, r1
    2b48:	8c f4       	brge	.+34     	; 0x2b6c <TMR_vSetOCRValue+0x76>
    2b4a:	0c c0       	rjmp	.+24     	; 0x2b64 <TMR_vSetOCRValue+0x6e>
		case TIMER0_NORMAL:
		case TIMER0_CTC:
			OCR0_REG = (u8)Copy_u16OCRValue;
    2b4c:	ec e5       	ldi	r30, 0x5C	; 92
    2b4e:	f0 e0       	ldi	r31, 0x00	; 0
    2b50:	8b 81       	ldd	r24, Y+3	; 0x03
    2b52:	80 83       	st	Z, r24
    2b54:	0b c0       	rjmp	.+22     	; 0x2b6c <TMR_vSetOCRValue+0x76>
			break;
		case TIMER1_NORMAL:
		case TIMER1_CTC_OCR:
		case TIMER1_CTC_ICR:
			OCR1A_REG = Copy_u16OCRValue;
    2b56:	ea e4       	ldi	r30, 0x4A	; 74
    2b58:	f0 e0       	ldi	r31, 0x00	; 0
    2b5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b5c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b5e:	91 83       	std	Z+1, r25	; 0x01
    2b60:	80 83       	st	Z, r24
    2b62:	04 c0       	rjmp	.+8      	; 0x2b6c <TMR_vSetOCRValue+0x76>
			break;
		case TIMER2_NORMAL:
		case TIMER2_CTC:
			OCR2_REG = (u8)Copy_u16OCRValue;
    2b64:	e3 e4       	ldi	r30, 0x43	; 67
    2b66:	f0 e0       	ldi	r31, 0x00	; 0
    2b68:	8b 81       	ldd	r24, Y+3	; 0x03
    2b6a:	80 83       	st	Z, r24
			break;
		default: /* Do Nothing */ break;
		}
	}
}
    2b6c:	26 96       	adiw	r28, 0x06	; 6
    2b6e:	0f b6       	in	r0, 0x3f	; 63
    2b70:	f8 94       	cli
    2b72:	de bf       	out	0x3e, r29	; 62
    2b74:	0f be       	out	0x3f, r0	; 63
    2b76:	cd bf       	out	0x3d, r28	; 61
    2b78:	cf 91       	pop	r28
    2b7a:	df 91       	pop	r29
    2b7c:	08 95       	ret

00002b7e <__vector_5>:


void __vector_5(void) __attribute__((signal));
void __vector_5(void){
    2b7e:	1f 92       	push	r1
    2b80:	0f 92       	push	r0
    2b82:	0f b6       	in	r0, 0x3f	; 63
    2b84:	0f 92       	push	r0
    2b86:	11 24       	eor	r1, r1
    2b88:	2f 93       	push	r18
    2b8a:	3f 93       	push	r19
    2b8c:	4f 93       	push	r20
    2b8e:	5f 93       	push	r21
    2b90:	6f 93       	push	r22
    2b92:	7f 93       	push	r23
    2b94:	8f 93       	push	r24
    2b96:	9f 93       	push	r25
    2b98:	af 93       	push	r26
    2b9a:	bf 93       	push	r27
    2b9c:	ef 93       	push	r30
    2b9e:	ff 93       	push	r31
    2ba0:	df 93       	push	r29
    2ba2:	cf 93       	push	r28
    2ba4:	00 d0       	rcall	.+0      	; 0x2ba6 <__vector_5+0x28>
    2ba6:	cd b7       	in	r28, 0x3d	; 61
    2ba8:	de b7       	in	r29, 0x3e	; 62
	static u8 timer2_inner_counter = 0;
	static u8 timer2_seconds = 10;
	u8 preload_value = 124;
    2baa:	8c e7       	ldi	r24, 0x7C	; 124
    2bac:	8a 83       	std	Y+2, r24	; 0x02
	u8 overflow_max = 31;
    2bae:	8f e1       	ldi	r24, 0x1F	; 31
    2bb0:	89 83       	std	Y+1, r24	; 0x01
	timer2_inner_counter++;
    2bb2:	80 91 09 05 	lds	r24, 0x0509
    2bb6:	8f 5f       	subi	r24, 0xFF	; 255
    2bb8:	80 93 09 05 	sts	0x0509, r24
	if(timer2_inner_counter == overflow_max){
    2bbc:	90 91 09 05 	lds	r25, 0x0509
    2bc0:	89 81       	ldd	r24, Y+1	; 0x01
    2bc2:	98 17       	cp	r25, r24
    2bc4:	a1 f4       	brne	.+40     	; 0x2bee <__vector_5+0x70>
		UART_vSendData(timer2_seconds+47);
    2bc6:	80 91 57 03 	lds	r24, 0x0357
    2bca:	81 5d       	subi	r24, 0xD1	; 209
    2bcc:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <UART_vSendData>
		UART_vSendString((u8*)" seconds remaining!\r\n");
    2bd0:	80 e6       	ldi	r24, 0x60	; 96
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	0e 94 92 10 	call	0x2124	; 0x2124 <UART_vSendString>
		timer2_inner_counter = 0;
    2bd8:	10 92 09 05 	sts	0x0509, r1
		TCNT2_REG = preload_value;
    2bdc:	e4 e4       	ldi	r30, 0x44	; 68
    2bde:	f0 e0       	ldi	r31, 0x00	; 0
    2be0:	8a 81       	ldd	r24, Y+2	; 0x02
    2be2:	80 83       	st	Z, r24
		timer2_seconds--;
    2be4:	80 91 57 03 	lds	r24, 0x0357
    2be8:	81 50       	subi	r24, 0x01	; 1
    2bea:	80 93 57 03 	sts	0x0357, r24
	}
	if(timer2_seconds == 0){
    2bee:	80 91 57 03 	lds	r24, 0x0357
    2bf2:	88 23       	and	r24, r24
    2bf4:	91 f4       	brne	.+36     	; 0x2c1a <__vector_5+0x9c>
		UART_vSendString((u8*)"\r\n\r\n");
    2bf6:	86 e7       	ldi	r24, 0x76	; 118
    2bf8:	90 e0       	ldi	r25, 0x00	; 0
    2bfa:	0e 94 92 10 	call	0x2124	; 0x2124 <UART_vSendString>
		timer2_seconds = 10;
    2bfe:	8a e0       	ldi	r24, 0x0A	; 10
    2c00:	80 93 57 03 	sts	0x0357, r24
		TMR_vStop(&TIMER2);
    2c04:	8e ef       	ldi	r24, 0xFE	; 254
    2c06:	94 e0       	ldi	r25, 0x04	; 4
    2c08:	0e 94 11 15 	call	0x2a22	; 0x2a22 <TMR_vStop>
		timer2_flag = FLAG_ON;
    2c0c:	81 e0       	ldi	r24, 0x01	; 1
    2c0e:	80 93 08 05 	sts	0x0508, r24
		DIO_enuWritePin(DIO_PIN_NUM_0, DIO_LOW);
    2c12:	80 e0       	ldi	r24, 0x00	; 0
    2c14:	60 e0       	ldi	r22, 0x00	; 0
    2c16:	0e 94 45 20 	call	0x408a	; 0x408a <DIO_enuWritePin>
	}
}
    2c1a:	0f 90       	pop	r0
    2c1c:	0f 90       	pop	r0
    2c1e:	cf 91       	pop	r28
    2c20:	df 91       	pop	r29
    2c22:	ff 91       	pop	r31
    2c24:	ef 91       	pop	r30
    2c26:	bf 91       	pop	r27
    2c28:	af 91       	pop	r26
    2c2a:	9f 91       	pop	r25
    2c2c:	8f 91       	pop	r24
    2c2e:	7f 91       	pop	r23
    2c30:	6f 91       	pop	r22
    2c32:	5f 91       	pop	r21
    2c34:	4f 91       	pop	r20
    2c36:	3f 91       	pop	r19
    2c38:	2f 91       	pop	r18
    2c3a:	0f 90       	pop	r0
    2c3c:	0f be       	out	0x3f, r0	; 63
    2c3e:	0f 90       	pop	r0
    2c40:	1f 90       	pop	r1
    2c42:	18 95       	reti

00002c44 <PWM_vInit>:
/* GitHub        : https://github.com/Piistachyoo             		     */
/*************************************************************************/

#include "PWM_prog.h"

void PWM_vInit(const PWM_cfg_t *PWM){
    2c44:	df 93       	push	r29
    2c46:	cf 93       	push	r28
    2c48:	00 d0       	rcall	.+0      	; 0x2c4a <PWM_vInit+0x6>
    2c4a:	00 d0       	rcall	.+0      	; 0x2c4c <PWM_vInit+0x8>
    2c4c:	cd b7       	in	r28, 0x3d	; 61
    2c4e:	de b7       	in	r29, 0x3e	; 62
    2c50:	9a 83       	std	Y+2, r25	; 0x02
    2c52:	89 83       	std	Y+1, r24	; 0x01
	if(PWM != NULL){
    2c54:	89 81       	ldd	r24, Y+1	; 0x01
    2c56:	9a 81       	ldd	r25, Y+2	; 0x02
    2c58:	00 97       	sbiw	r24, 0x00	; 0
    2c5a:	09 f4       	brne	.+2      	; 0x2c5e <PWM_vInit+0x1a>
    2c5c:	2d c4       	rjmp	.+2138   	; 0x34b8 <PWM_vInit+0x874>
		/* Set PWM Mode */
		switch(PWM->PWM_TimerChannel){
    2c5e:	e9 81       	ldd	r30, Y+1	; 0x01
    2c60:	fa 81       	ldd	r31, Y+2	; 0x02
    2c62:	80 81       	ld	r24, Z
    2c64:	28 2f       	mov	r18, r24
    2c66:	30 e0       	ldi	r19, 0x00	; 0
    2c68:	3c 83       	std	Y+4, r19	; 0x04
    2c6a:	2b 83       	std	Y+3, r18	; 0x03
    2c6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c6e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c70:	87 30       	cpi	r24, 0x07	; 7
    2c72:	91 05       	cpc	r25, r1
    2c74:	09 f4       	brne	.+2      	; 0x2c78 <PWM_vInit+0x34>
    2c76:	04 c2       	rjmp	.+1032   	; 0x3080 <PWM_vInit+0x43c>
    2c78:	2b 81       	ldd	r18, Y+3	; 0x03
    2c7a:	3c 81       	ldd	r19, Y+4	; 0x04
    2c7c:	28 30       	cpi	r18, 0x08	; 8
    2c7e:	31 05       	cpc	r19, r1
    2c80:	54 f5       	brge	.+84     	; 0x2cd6 <PWM_vInit+0x92>
    2c82:	8b 81       	ldd	r24, Y+3	; 0x03
    2c84:	9c 81       	ldd	r25, Y+4	; 0x04
    2c86:	83 30       	cpi	r24, 0x03	; 3
    2c88:	91 05       	cpc	r25, r1
    2c8a:	09 f4       	brne	.+2      	; 0x2c8e <PWM_vInit+0x4a>
    2c8c:	00 c1       	rjmp	.+512    	; 0x2e8e <PWM_vInit+0x24a>
    2c8e:	2b 81       	ldd	r18, Y+3	; 0x03
    2c90:	3c 81       	ldd	r19, Y+4	; 0x04
    2c92:	24 30       	cpi	r18, 0x04	; 4
    2c94:	31 05       	cpc	r19, r1
    2c96:	94 f4       	brge	.+36     	; 0x2cbc <PWM_vInit+0x78>
    2c98:	8b 81       	ldd	r24, Y+3	; 0x03
    2c9a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c9c:	81 30       	cpi	r24, 0x01	; 1
    2c9e:	91 05       	cpc	r25, r1
    2ca0:	09 f4       	brne	.+2      	; 0x2ca4 <PWM_vInit+0x60>
    2ca2:	81 c0       	rjmp	.+258    	; 0x2da6 <PWM_vInit+0x162>
    2ca4:	2b 81       	ldd	r18, Y+3	; 0x03
    2ca6:	3c 81       	ldd	r19, Y+4	; 0x04
    2ca8:	22 30       	cpi	r18, 0x02	; 2
    2caa:	31 05       	cpc	r19, r1
    2cac:	0c f0       	brlt	.+2      	; 0x2cb0 <PWM_vInit+0x6c>
    2cae:	b1 c0       	rjmp	.+354    	; 0x2e12 <PWM_vInit+0x1ce>
    2cb0:	8b 81       	ldd	r24, Y+3	; 0x03
    2cb2:	9c 81       	ldd	r25, Y+4	; 0x04
    2cb4:	00 97       	sbiw	r24, 0x00	; 0
    2cb6:	09 f4       	brne	.+2      	; 0x2cba <PWM_vInit+0x76>
    2cb8:	3f c0       	rjmp	.+126    	; 0x2d38 <PWM_vInit+0xf4>
    2cba:	fe c3       	rjmp	.+2044   	; 0x34b8 <PWM_vInit+0x874>
    2cbc:	2b 81       	ldd	r18, Y+3	; 0x03
    2cbe:	3c 81       	ldd	r19, Y+4	; 0x04
    2cc0:	25 30       	cpi	r18, 0x05	; 5
    2cc2:	31 05       	cpc	r19, r1
    2cc4:	09 f4       	brne	.+2      	; 0x2cc8 <PWM_vInit+0x84>
    2cc6:	5e c1       	rjmp	.+700    	; 0x2f84 <PWM_vInit+0x340>
    2cc8:	8b 81       	ldd	r24, Y+3	; 0x03
    2cca:	9c 81       	ldd	r25, Y+4	; 0x04
    2ccc:	86 30       	cpi	r24, 0x06	; 6
    2cce:	91 05       	cpc	r25, r1
    2cd0:	0c f0       	brlt	.+2      	; 0x2cd4 <PWM_vInit+0x90>
    2cd2:	97 c1       	rjmp	.+814    	; 0x3002 <PWM_vInit+0x3be>
    2cd4:	1a c1       	rjmp	.+564    	; 0x2f0a <PWM_vInit+0x2c6>
    2cd6:	2b 81       	ldd	r18, Y+3	; 0x03
    2cd8:	3c 81       	ldd	r19, Y+4	; 0x04
    2cda:	2b 30       	cpi	r18, 0x0B	; 11
    2cdc:	31 05       	cpc	r19, r1
    2cde:	09 f4       	brne	.+2      	; 0x2ce2 <PWM_vInit+0x9e>
    2ce0:	c9 c2       	rjmp	.+1426   	; 0x3274 <PWM_vInit+0x630>
    2ce2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ce6:	8c 30       	cpi	r24, 0x0C	; 12
    2ce8:	91 05       	cpc	r25, r1
    2cea:	6c f4       	brge	.+26     	; 0x2d06 <PWM_vInit+0xc2>
    2cec:	2b 81       	ldd	r18, Y+3	; 0x03
    2cee:	3c 81       	ldd	r19, Y+4	; 0x04
    2cf0:	29 30       	cpi	r18, 0x09	; 9
    2cf2:	31 05       	cpc	r19, r1
    2cf4:	09 f4       	brne	.+2      	; 0x2cf8 <PWM_vInit+0xb4>
    2cf6:	40 c2       	rjmp	.+1152   	; 0x3178 <PWM_vInit+0x534>
    2cf8:	8b 81       	ldd	r24, Y+3	; 0x03
    2cfa:	9c 81       	ldd	r25, Y+4	; 0x04
    2cfc:	8a 30       	cpi	r24, 0x0A	; 10
    2cfe:	91 05       	cpc	r25, r1
    2d00:	0c f0       	brlt	.+2      	; 0x2d04 <PWM_vInit+0xc0>
    2d02:	79 c2       	rjmp	.+1266   	; 0x31f6 <PWM_vInit+0x5b2>
    2d04:	fb c1       	rjmp	.+1014   	; 0x30fc <PWM_vInit+0x4b8>
    2d06:	2b 81       	ldd	r18, Y+3	; 0x03
    2d08:	3c 81       	ldd	r19, Y+4	; 0x04
    2d0a:	2d 30       	cpi	r18, 0x0D	; 13
    2d0c:	31 05       	cpc	r19, r1
    2d0e:	09 f4       	brne	.+2      	; 0x2d12 <PWM_vInit+0xce>
    2d10:	2d c3       	rjmp	.+1626   	; 0x336c <PWM_vInit+0x728>
    2d12:	8b 81       	ldd	r24, Y+3	; 0x03
    2d14:	9c 81       	ldd	r25, Y+4	; 0x04
    2d16:	8d 30       	cpi	r24, 0x0D	; 13
    2d18:	91 05       	cpc	r25, r1
    2d1a:	0c f4       	brge	.+2      	; 0x2d1e <PWM_vInit+0xda>
    2d1c:	e9 c2       	rjmp	.+1490   	; 0x32f0 <PWM_vInit+0x6ac>
    2d1e:	2b 81       	ldd	r18, Y+3	; 0x03
    2d20:	3c 81       	ldd	r19, Y+4	; 0x04
    2d22:	2e 30       	cpi	r18, 0x0E	; 14
    2d24:	31 05       	cpc	r19, r1
    2d26:	09 f4       	brne	.+2      	; 0x2d2a <PWM_vInit+0xe6>
    2d28:	5e c3       	rjmp	.+1724   	; 0x33e6 <PWM_vInit+0x7a2>
    2d2a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d2c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d2e:	8f 30       	cpi	r24, 0x0F	; 15
    2d30:	91 05       	cpc	r25, r1
    2d32:	09 f4       	brne	.+2      	; 0x2d36 <PWM_vInit+0xf2>
    2d34:	8e c3       	rjmp	.+1820   	; 0x3452 <PWM_vInit+0x80e>
    2d36:	c0 c3       	rjmp	.+1920   	; 0x34b8 <PWM_vInit+0x874>
		case TIMER0_PhaseCorrect:
			TCCR0_REG = (TCCR0_REG&0xB7) | 0x40;
    2d38:	a3 e5       	ldi	r26, 0x53	; 83
    2d3a:	b0 e0       	ldi	r27, 0x00	; 0
    2d3c:	e3 e5       	ldi	r30, 0x53	; 83
    2d3e:	f0 e0       	ldi	r31, 0x00	; 0
    2d40:	80 81       	ld	r24, Z
    2d42:	87 7b       	andi	r24, 0xB7	; 183
    2d44:	80 64       	ori	r24, 0x40	; 64
    2d46:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    2d48:	e9 81       	ldd	r30, Y+1	; 0x01
    2d4a:	fa 81       	ldd	r31, Y+2	; 0x02
    2d4c:	82 81       	ldd	r24, Z+2	; 0x02
    2d4e:	81 30       	cpi	r24, 0x01	; 1
    2d50:	41 f4       	brne	.+16     	; 0x2d62 <PWM_vInit+0x11e>
				TIMSK_REG |= 0x03;
    2d52:	a9 e5       	ldi	r26, 0x59	; 89
    2d54:	b0 e0       	ldi	r27, 0x00	; 0
    2d56:	e9 e5       	ldi	r30, 0x59	; 89
    2d58:	f0 e0       	ldi	r31, 0x00	; 0
    2d5a:	80 81       	ld	r24, Z
    2d5c:	83 60       	ori	r24, 0x03	; 3
    2d5e:	8c 93       	st	X, r24
    2d60:	ab c3       	rjmp	.+1878   	; 0x34b8 <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    2d62:	e9 81       	ldd	r30, Y+1	; 0x01
    2d64:	fa 81       	ldd	r31, Y+2	; 0x02
    2d66:	82 81       	ldd	r24, Z+2	; 0x02
    2d68:	88 23       	and	r24, r24
    2d6a:	09 f0       	breq	.+2      	; 0x2d6e <PWM_vInit+0x12a>
    2d6c:	a5 c3       	rjmp	.+1866   	; 0x34b8 <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    2d6e:	e9 81       	ldd	r30, Y+1	; 0x01
    2d70:	fa 81       	ldd	r31, Y+2	; 0x02
    2d72:	83 81       	ldd	r24, Z+3	; 0x03
    2d74:	81 30       	cpi	r24, 0x01	; 1
    2d76:	49 f4       	brne	.+18     	; 0x2d8a <PWM_vInit+0x146>
					TCCR0_REG = (TCCR0_REG & 0xCF) | 0x20;
    2d78:	a3 e5       	ldi	r26, 0x53	; 83
    2d7a:	b0 e0       	ldi	r27, 0x00	; 0
    2d7c:	e3 e5       	ldi	r30, 0x53	; 83
    2d7e:	f0 e0       	ldi	r31, 0x00	; 0
    2d80:	80 81       	ld	r24, Z
    2d82:	8f 7c       	andi	r24, 0xCF	; 207
    2d84:	80 62       	ori	r24, 0x20	; 32
    2d86:	8c 93       	st	X, r24
    2d88:	97 c3       	rjmp	.+1838   	; 0x34b8 <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    2d8a:	e9 81       	ldd	r30, Y+1	; 0x01
    2d8c:	fa 81       	ldd	r31, Y+2	; 0x02
    2d8e:	83 81       	ldd	r24, Z+3	; 0x03
    2d90:	88 23       	and	r24, r24
    2d92:	09 f0       	breq	.+2      	; 0x2d96 <PWM_vInit+0x152>
    2d94:	91 c3       	rjmp	.+1826   	; 0x34b8 <PWM_vInit+0x874>
					TCCR0_REG = (TCCR0_REG & 0xCF) | 0x30;
    2d96:	a3 e5       	ldi	r26, 0x53	; 83
    2d98:	b0 e0       	ldi	r27, 0x00	; 0
    2d9a:	e3 e5       	ldi	r30, 0x53	; 83
    2d9c:	f0 e0       	ldi	r31, 0x00	; 0
    2d9e:	80 81       	ld	r24, Z
    2da0:	80 63       	ori	r24, 0x30	; 48
    2da2:	8c 93       	st	X, r24
    2da4:	89 c3       	rjmp	.+1810   	; 0x34b8 <PWM_vInit+0x874>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER0_FastPWM:
			TCCR0_REG = (TCCR0_REG&0xB7) | 0x48;
    2da6:	a3 e5       	ldi	r26, 0x53	; 83
    2da8:	b0 e0       	ldi	r27, 0x00	; 0
    2daa:	e3 e5       	ldi	r30, 0x53	; 83
    2dac:	f0 e0       	ldi	r31, 0x00	; 0
    2dae:	80 81       	ld	r24, Z
    2db0:	88 64       	ori	r24, 0x48	; 72
    2db2:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    2db4:	e9 81       	ldd	r30, Y+1	; 0x01
    2db6:	fa 81       	ldd	r31, Y+2	; 0x02
    2db8:	82 81       	ldd	r24, Z+2	; 0x02
    2dba:	81 30       	cpi	r24, 0x01	; 1
    2dbc:	41 f4       	brne	.+16     	; 0x2dce <PWM_vInit+0x18a>
				TIMSK_REG |= 0x03;
    2dbe:	a9 e5       	ldi	r26, 0x59	; 89
    2dc0:	b0 e0       	ldi	r27, 0x00	; 0
    2dc2:	e9 e5       	ldi	r30, 0x59	; 89
    2dc4:	f0 e0       	ldi	r31, 0x00	; 0
    2dc6:	80 81       	ld	r24, Z
    2dc8:	83 60       	ori	r24, 0x03	; 3
    2dca:	8c 93       	st	X, r24
    2dcc:	75 c3       	rjmp	.+1770   	; 0x34b8 <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    2dce:	e9 81       	ldd	r30, Y+1	; 0x01
    2dd0:	fa 81       	ldd	r31, Y+2	; 0x02
    2dd2:	82 81       	ldd	r24, Z+2	; 0x02
    2dd4:	88 23       	and	r24, r24
    2dd6:	09 f0       	breq	.+2      	; 0x2dda <PWM_vInit+0x196>
    2dd8:	6f c3       	rjmp	.+1758   	; 0x34b8 <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    2dda:	e9 81       	ldd	r30, Y+1	; 0x01
    2ddc:	fa 81       	ldd	r31, Y+2	; 0x02
    2dde:	83 81       	ldd	r24, Z+3	; 0x03
    2de0:	81 30       	cpi	r24, 0x01	; 1
    2de2:	49 f4       	brne	.+18     	; 0x2df6 <PWM_vInit+0x1b2>
					TCCR0_REG = (TCCR0_REG & 0xCF) | 0x20;
    2de4:	a3 e5       	ldi	r26, 0x53	; 83
    2de6:	b0 e0       	ldi	r27, 0x00	; 0
    2de8:	e3 e5       	ldi	r30, 0x53	; 83
    2dea:	f0 e0       	ldi	r31, 0x00	; 0
    2dec:	80 81       	ld	r24, Z
    2dee:	8f 7c       	andi	r24, 0xCF	; 207
    2df0:	80 62       	ori	r24, 0x20	; 32
    2df2:	8c 93       	st	X, r24
    2df4:	61 c3       	rjmp	.+1730   	; 0x34b8 <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    2df6:	e9 81       	ldd	r30, Y+1	; 0x01
    2df8:	fa 81       	ldd	r31, Y+2	; 0x02
    2dfa:	83 81       	ldd	r24, Z+3	; 0x03
    2dfc:	88 23       	and	r24, r24
    2dfe:	09 f0       	breq	.+2      	; 0x2e02 <PWM_vInit+0x1be>
    2e00:	5b c3       	rjmp	.+1718   	; 0x34b8 <PWM_vInit+0x874>
					TCCR0_REG = (TCCR0_REG & 0xCF) | 0x30;
    2e02:	a3 e5       	ldi	r26, 0x53	; 83
    2e04:	b0 e0       	ldi	r27, 0x00	; 0
    2e06:	e3 e5       	ldi	r30, 0x53	; 83
    2e08:	f0 e0       	ldi	r31, 0x00	; 0
    2e0a:	80 81       	ld	r24, Z
    2e0c:	80 63       	ori	r24, 0x30	; 48
    2e0e:	8c 93       	st	X, r24
    2e10:	53 c3       	rjmp	.+1702   	; 0x34b8 <PWM_vInit+0x874>
			/*
			 * WGM10 WGM11 bit 0,1 in TCCR1A
			 * WGM12 WGM13 bit 3,4 in TCCR1B
			 */
		case TIMER1_Phase8:
			TCCR1A_REG = (TCCR1A_REG & 0xFC) | 1;
    2e12:	af e4       	ldi	r26, 0x4F	; 79
    2e14:	b0 e0       	ldi	r27, 0x00	; 0
    2e16:	ef e4       	ldi	r30, 0x4F	; 79
    2e18:	f0 e0       	ldi	r31, 0x00	; 0
    2e1a:	80 81       	ld	r24, Z
    2e1c:	8c 7f       	andi	r24, 0xFC	; 252
    2e1e:	81 60       	ori	r24, 0x01	; 1
    2e20:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7);
    2e22:	ae e4       	ldi	r26, 0x4E	; 78
    2e24:	b0 e0       	ldi	r27, 0x00	; 0
    2e26:	ee e4       	ldi	r30, 0x4E	; 78
    2e28:	f0 e0       	ldi	r31, 0x00	; 0
    2e2a:	80 81       	ld	r24, Z
    2e2c:	87 7e       	andi	r24, 0xE7	; 231
    2e2e:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    2e30:	e9 81       	ldd	r30, Y+1	; 0x01
    2e32:	fa 81       	ldd	r31, Y+2	; 0x02
    2e34:	82 81       	ldd	r24, Z+2	; 0x02
    2e36:	81 30       	cpi	r24, 0x01	; 1
    2e38:	41 f4       	brne	.+16     	; 0x2e4a <PWM_vInit+0x206>
				TIMSK_REG |= 0x3C;
    2e3a:	a9 e5       	ldi	r26, 0x59	; 89
    2e3c:	b0 e0       	ldi	r27, 0x00	; 0
    2e3e:	e9 e5       	ldi	r30, 0x59	; 89
    2e40:	f0 e0       	ldi	r31, 0x00	; 0
    2e42:	80 81       	ld	r24, Z
    2e44:	8c 63       	ori	r24, 0x3C	; 60
    2e46:	8c 93       	st	X, r24
    2e48:	37 c3       	rjmp	.+1646   	; 0x34b8 <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    2e4a:	e9 81       	ldd	r30, Y+1	; 0x01
    2e4c:	fa 81       	ldd	r31, Y+2	; 0x02
    2e4e:	82 81       	ldd	r24, Z+2	; 0x02
    2e50:	88 23       	and	r24, r24
    2e52:	09 f0       	breq	.+2      	; 0x2e56 <PWM_vInit+0x212>
    2e54:	31 c3       	rjmp	.+1634   	; 0x34b8 <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    2e56:	e9 81       	ldd	r30, Y+1	; 0x01
    2e58:	fa 81       	ldd	r31, Y+2	; 0x02
    2e5a:	83 81       	ldd	r24, Z+3	; 0x03
    2e5c:	81 30       	cpi	r24, 0x01	; 1
    2e5e:	49 f4       	brne	.+18     	; 0x2e72 <PWM_vInit+0x22e>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
    2e60:	af e4       	ldi	r26, 0x4F	; 79
    2e62:	b0 e0       	ldi	r27, 0x00	; 0
    2e64:	ef e4       	ldi	r30, 0x4F	; 79
    2e66:	f0 e0       	ldi	r31, 0x00	; 0
    2e68:	80 81       	ld	r24, Z
    2e6a:	8f 7c       	andi	r24, 0xCF	; 207
    2e6c:	80 62       	ori	r24, 0x20	; 32
    2e6e:	8c 93       	st	X, r24
    2e70:	23 c3       	rjmp	.+1606   	; 0x34b8 <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    2e72:	e9 81       	ldd	r30, Y+1	; 0x01
    2e74:	fa 81       	ldd	r31, Y+2	; 0x02
    2e76:	83 81       	ldd	r24, Z+3	; 0x03
    2e78:	88 23       	and	r24, r24
    2e7a:	09 f0       	breq	.+2      	; 0x2e7e <PWM_vInit+0x23a>
    2e7c:	1d c3       	rjmp	.+1594   	; 0x34b8 <PWM_vInit+0x874>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
    2e7e:	af e4       	ldi	r26, 0x4F	; 79
    2e80:	b0 e0       	ldi	r27, 0x00	; 0
    2e82:	ef e4       	ldi	r30, 0x4F	; 79
    2e84:	f0 e0       	ldi	r31, 0x00	; 0
    2e86:	80 81       	ld	r24, Z
    2e88:	80 63       	ori	r24, 0x30	; 48
    2e8a:	8c 93       	st	X, r24
    2e8c:	15 c3       	rjmp	.+1578   	; 0x34b8 <PWM_vInit+0x874>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER1_Phase9:
			TCCR1A_REG = (TCCR1A_REG & 0xFC) | 2;
    2e8e:	af e4       	ldi	r26, 0x4F	; 79
    2e90:	b0 e0       	ldi	r27, 0x00	; 0
    2e92:	ef e4       	ldi	r30, 0x4F	; 79
    2e94:	f0 e0       	ldi	r31, 0x00	; 0
    2e96:	80 81       	ld	r24, Z
    2e98:	8c 7f       	andi	r24, 0xFC	; 252
    2e9a:	82 60       	ori	r24, 0x02	; 2
    2e9c:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7);
    2e9e:	ae e4       	ldi	r26, 0x4E	; 78
    2ea0:	b0 e0       	ldi	r27, 0x00	; 0
    2ea2:	ee e4       	ldi	r30, 0x4E	; 78
    2ea4:	f0 e0       	ldi	r31, 0x00	; 0
    2ea6:	80 81       	ld	r24, Z
    2ea8:	87 7e       	andi	r24, 0xE7	; 231
    2eaa:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    2eac:	e9 81       	ldd	r30, Y+1	; 0x01
    2eae:	fa 81       	ldd	r31, Y+2	; 0x02
    2eb0:	82 81       	ldd	r24, Z+2	; 0x02
    2eb2:	81 30       	cpi	r24, 0x01	; 1
    2eb4:	41 f4       	brne	.+16     	; 0x2ec6 <PWM_vInit+0x282>
				TIMSK_REG |= 0x3C;
    2eb6:	a9 e5       	ldi	r26, 0x59	; 89
    2eb8:	b0 e0       	ldi	r27, 0x00	; 0
    2eba:	e9 e5       	ldi	r30, 0x59	; 89
    2ebc:	f0 e0       	ldi	r31, 0x00	; 0
    2ebe:	80 81       	ld	r24, Z
    2ec0:	8c 63       	ori	r24, 0x3C	; 60
    2ec2:	8c 93       	st	X, r24
    2ec4:	f9 c2       	rjmp	.+1522   	; 0x34b8 <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    2ec6:	e9 81       	ldd	r30, Y+1	; 0x01
    2ec8:	fa 81       	ldd	r31, Y+2	; 0x02
    2eca:	82 81       	ldd	r24, Z+2	; 0x02
    2ecc:	88 23       	and	r24, r24
    2ece:	09 f0       	breq	.+2      	; 0x2ed2 <PWM_vInit+0x28e>
    2ed0:	f3 c2       	rjmp	.+1510   	; 0x34b8 <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    2ed2:	e9 81       	ldd	r30, Y+1	; 0x01
    2ed4:	fa 81       	ldd	r31, Y+2	; 0x02
    2ed6:	83 81       	ldd	r24, Z+3	; 0x03
    2ed8:	81 30       	cpi	r24, 0x01	; 1
    2eda:	49 f4       	brne	.+18     	; 0x2eee <PWM_vInit+0x2aa>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
    2edc:	af e4       	ldi	r26, 0x4F	; 79
    2ede:	b0 e0       	ldi	r27, 0x00	; 0
    2ee0:	ef e4       	ldi	r30, 0x4F	; 79
    2ee2:	f0 e0       	ldi	r31, 0x00	; 0
    2ee4:	80 81       	ld	r24, Z
    2ee6:	8f 7c       	andi	r24, 0xCF	; 207
    2ee8:	80 62       	ori	r24, 0x20	; 32
    2eea:	8c 93       	st	X, r24
    2eec:	e5 c2       	rjmp	.+1482   	; 0x34b8 <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    2eee:	e9 81       	ldd	r30, Y+1	; 0x01
    2ef0:	fa 81       	ldd	r31, Y+2	; 0x02
    2ef2:	83 81       	ldd	r24, Z+3	; 0x03
    2ef4:	88 23       	and	r24, r24
    2ef6:	09 f0       	breq	.+2      	; 0x2efa <PWM_vInit+0x2b6>
    2ef8:	df c2       	rjmp	.+1470   	; 0x34b8 <PWM_vInit+0x874>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
    2efa:	af e4       	ldi	r26, 0x4F	; 79
    2efc:	b0 e0       	ldi	r27, 0x00	; 0
    2efe:	ef e4       	ldi	r30, 0x4F	; 79
    2f00:	f0 e0       	ldi	r31, 0x00	; 0
    2f02:	80 81       	ld	r24, Z
    2f04:	80 63       	ori	r24, 0x30	; 48
    2f06:	8c 93       	st	X, r24
    2f08:	d7 c2       	rjmp	.+1454   	; 0x34b8 <PWM_vInit+0x874>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER1_Phase10:
			TCCR1A_REG = (TCCR1A_REG & 0xFC) | 3;
    2f0a:	af e4       	ldi	r26, 0x4F	; 79
    2f0c:	b0 e0       	ldi	r27, 0x00	; 0
    2f0e:	ef e4       	ldi	r30, 0x4F	; 79
    2f10:	f0 e0       	ldi	r31, 0x00	; 0
    2f12:	80 81       	ld	r24, Z
    2f14:	83 60       	ori	r24, 0x03	; 3
    2f16:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7);
    2f18:	ae e4       	ldi	r26, 0x4E	; 78
    2f1a:	b0 e0       	ldi	r27, 0x00	; 0
    2f1c:	ee e4       	ldi	r30, 0x4E	; 78
    2f1e:	f0 e0       	ldi	r31, 0x00	; 0
    2f20:	80 81       	ld	r24, Z
    2f22:	87 7e       	andi	r24, 0xE7	; 231
    2f24:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    2f26:	e9 81       	ldd	r30, Y+1	; 0x01
    2f28:	fa 81       	ldd	r31, Y+2	; 0x02
    2f2a:	82 81       	ldd	r24, Z+2	; 0x02
    2f2c:	81 30       	cpi	r24, 0x01	; 1
    2f2e:	41 f4       	brne	.+16     	; 0x2f40 <PWM_vInit+0x2fc>
				TIMSK_REG |= 0x3C;
    2f30:	a9 e5       	ldi	r26, 0x59	; 89
    2f32:	b0 e0       	ldi	r27, 0x00	; 0
    2f34:	e9 e5       	ldi	r30, 0x59	; 89
    2f36:	f0 e0       	ldi	r31, 0x00	; 0
    2f38:	80 81       	ld	r24, Z
    2f3a:	8c 63       	ori	r24, 0x3C	; 60
    2f3c:	8c 93       	st	X, r24
    2f3e:	bc c2       	rjmp	.+1400   	; 0x34b8 <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    2f40:	e9 81       	ldd	r30, Y+1	; 0x01
    2f42:	fa 81       	ldd	r31, Y+2	; 0x02
    2f44:	82 81       	ldd	r24, Z+2	; 0x02
    2f46:	88 23       	and	r24, r24
    2f48:	09 f0       	breq	.+2      	; 0x2f4c <PWM_vInit+0x308>
    2f4a:	b6 c2       	rjmp	.+1388   	; 0x34b8 <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    2f4c:	e9 81       	ldd	r30, Y+1	; 0x01
    2f4e:	fa 81       	ldd	r31, Y+2	; 0x02
    2f50:	83 81       	ldd	r24, Z+3	; 0x03
    2f52:	81 30       	cpi	r24, 0x01	; 1
    2f54:	49 f4       	brne	.+18     	; 0x2f68 <PWM_vInit+0x324>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
    2f56:	af e4       	ldi	r26, 0x4F	; 79
    2f58:	b0 e0       	ldi	r27, 0x00	; 0
    2f5a:	ef e4       	ldi	r30, 0x4F	; 79
    2f5c:	f0 e0       	ldi	r31, 0x00	; 0
    2f5e:	80 81       	ld	r24, Z
    2f60:	8f 7c       	andi	r24, 0xCF	; 207
    2f62:	80 62       	ori	r24, 0x20	; 32
    2f64:	8c 93       	st	X, r24
    2f66:	a8 c2       	rjmp	.+1360   	; 0x34b8 <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    2f68:	e9 81       	ldd	r30, Y+1	; 0x01
    2f6a:	fa 81       	ldd	r31, Y+2	; 0x02
    2f6c:	83 81       	ldd	r24, Z+3	; 0x03
    2f6e:	88 23       	and	r24, r24
    2f70:	09 f0       	breq	.+2      	; 0x2f74 <PWM_vInit+0x330>
    2f72:	a2 c2       	rjmp	.+1348   	; 0x34b8 <PWM_vInit+0x874>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
    2f74:	af e4       	ldi	r26, 0x4F	; 79
    2f76:	b0 e0       	ldi	r27, 0x00	; 0
    2f78:	ef e4       	ldi	r30, 0x4F	; 79
    2f7a:	f0 e0       	ldi	r31, 0x00	; 0
    2f7c:	80 81       	ld	r24, Z
    2f7e:	80 63       	ori	r24, 0x30	; 48
    2f80:	8c 93       	st	X, r24
    2f82:	9a c2       	rjmp	.+1332   	; 0x34b8 <PWM_vInit+0x874>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER1_Fast8:
			TCCR1A_REG = (TCCR1A_REG & 0xFC) | 1;
    2f84:	af e4       	ldi	r26, 0x4F	; 79
    2f86:	b0 e0       	ldi	r27, 0x00	; 0
    2f88:	ef e4       	ldi	r30, 0x4F	; 79
    2f8a:	f0 e0       	ldi	r31, 0x00	; 0
    2f8c:	80 81       	ld	r24, Z
    2f8e:	8c 7f       	andi	r24, 0xFC	; 252
    2f90:	81 60       	ori	r24, 0x01	; 1
    2f92:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7) | 0x8;
    2f94:	ae e4       	ldi	r26, 0x4E	; 78
    2f96:	b0 e0       	ldi	r27, 0x00	; 0
    2f98:	ee e4       	ldi	r30, 0x4E	; 78
    2f9a:	f0 e0       	ldi	r31, 0x00	; 0
    2f9c:	80 81       	ld	r24, Z
    2f9e:	87 7e       	andi	r24, 0xE7	; 231
    2fa0:	88 60       	ori	r24, 0x08	; 8
    2fa2:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    2fa4:	e9 81       	ldd	r30, Y+1	; 0x01
    2fa6:	fa 81       	ldd	r31, Y+2	; 0x02
    2fa8:	82 81       	ldd	r24, Z+2	; 0x02
    2faa:	81 30       	cpi	r24, 0x01	; 1
    2fac:	41 f4       	brne	.+16     	; 0x2fbe <PWM_vInit+0x37a>
				TIMSK_REG |= 0x3C;
    2fae:	a9 e5       	ldi	r26, 0x59	; 89
    2fb0:	b0 e0       	ldi	r27, 0x00	; 0
    2fb2:	e9 e5       	ldi	r30, 0x59	; 89
    2fb4:	f0 e0       	ldi	r31, 0x00	; 0
    2fb6:	80 81       	ld	r24, Z
    2fb8:	8c 63       	ori	r24, 0x3C	; 60
    2fba:	8c 93       	st	X, r24
    2fbc:	7d c2       	rjmp	.+1274   	; 0x34b8 <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    2fbe:	e9 81       	ldd	r30, Y+1	; 0x01
    2fc0:	fa 81       	ldd	r31, Y+2	; 0x02
    2fc2:	82 81       	ldd	r24, Z+2	; 0x02
    2fc4:	88 23       	and	r24, r24
    2fc6:	09 f0       	breq	.+2      	; 0x2fca <PWM_vInit+0x386>
    2fc8:	77 c2       	rjmp	.+1262   	; 0x34b8 <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    2fca:	e9 81       	ldd	r30, Y+1	; 0x01
    2fcc:	fa 81       	ldd	r31, Y+2	; 0x02
    2fce:	83 81       	ldd	r24, Z+3	; 0x03
    2fd0:	81 30       	cpi	r24, 0x01	; 1
    2fd2:	49 f4       	brne	.+18     	; 0x2fe6 <PWM_vInit+0x3a2>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
    2fd4:	af e4       	ldi	r26, 0x4F	; 79
    2fd6:	b0 e0       	ldi	r27, 0x00	; 0
    2fd8:	ef e4       	ldi	r30, 0x4F	; 79
    2fda:	f0 e0       	ldi	r31, 0x00	; 0
    2fdc:	80 81       	ld	r24, Z
    2fde:	8f 7c       	andi	r24, 0xCF	; 207
    2fe0:	80 62       	ori	r24, 0x20	; 32
    2fe2:	8c 93       	st	X, r24
    2fe4:	69 c2       	rjmp	.+1234   	; 0x34b8 <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    2fe6:	e9 81       	ldd	r30, Y+1	; 0x01
    2fe8:	fa 81       	ldd	r31, Y+2	; 0x02
    2fea:	83 81       	ldd	r24, Z+3	; 0x03
    2fec:	88 23       	and	r24, r24
    2fee:	09 f0       	breq	.+2      	; 0x2ff2 <PWM_vInit+0x3ae>
    2ff0:	63 c2       	rjmp	.+1222   	; 0x34b8 <PWM_vInit+0x874>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
    2ff2:	af e4       	ldi	r26, 0x4F	; 79
    2ff4:	b0 e0       	ldi	r27, 0x00	; 0
    2ff6:	ef e4       	ldi	r30, 0x4F	; 79
    2ff8:	f0 e0       	ldi	r31, 0x00	; 0
    2ffa:	80 81       	ld	r24, Z
    2ffc:	80 63       	ori	r24, 0x30	; 48
    2ffe:	8c 93       	st	X, r24
    3000:	5b c2       	rjmp	.+1206   	; 0x34b8 <PWM_vInit+0x874>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER1_Fast9:
			TCCR1A_REG = (TCCR1A_REG & 0xFC) | 2;
    3002:	af e4       	ldi	r26, 0x4F	; 79
    3004:	b0 e0       	ldi	r27, 0x00	; 0
    3006:	ef e4       	ldi	r30, 0x4F	; 79
    3008:	f0 e0       	ldi	r31, 0x00	; 0
    300a:	80 81       	ld	r24, Z
    300c:	8c 7f       	andi	r24, 0xFC	; 252
    300e:	82 60       	ori	r24, 0x02	; 2
    3010:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7) | 0x8;
    3012:	ae e4       	ldi	r26, 0x4E	; 78
    3014:	b0 e0       	ldi	r27, 0x00	; 0
    3016:	ee e4       	ldi	r30, 0x4E	; 78
    3018:	f0 e0       	ldi	r31, 0x00	; 0
    301a:	80 81       	ld	r24, Z
    301c:	87 7e       	andi	r24, 0xE7	; 231
    301e:	88 60       	ori	r24, 0x08	; 8
    3020:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    3022:	e9 81       	ldd	r30, Y+1	; 0x01
    3024:	fa 81       	ldd	r31, Y+2	; 0x02
    3026:	82 81       	ldd	r24, Z+2	; 0x02
    3028:	81 30       	cpi	r24, 0x01	; 1
    302a:	41 f4       	brne	.+16     	; 0x303c <PWM_vInit+0x3f8>
				TIMSK_REG |= 0x3C;
    302c:	a9 e5       	ldi	r26, 0x59	; 89
    302e:	b0 e0       	ldi	r27, 0x00	; 0
    3030:	e9 e5       	ldi	r30, 0x59	; 89
    3032:	f0 e0       	ldi	r31, 0x00	; 0
    3034:	80 81       	ld	r24, Z
    3036:	8c 63       	ori	r24, 0x3C	; 60
    3038:	8c 93       	st	X, r24
    303a:	3e c2       	rjmp	.+1148   	; 0x34b8 <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    303c:	e9 81       	ldd	r30, Y+1	; 0x01
    303e:	fa 81       	ldd	r31, Y+2	; 0x02
    3040:	82 81       	ldd	r24, Z+2	; 0x02
    3042:	88 23       	and	r24, r24
    3044:	09 f0       	breq	.+2      	; 0x3048 <PWM_vInit+0x404>
    3046:	38 c2       	rjmp	.+1136   	; 0x34b8 <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    3048:	e9 81       	ldd	r30, Y+1	; 0x01
    304a:	fa 81       	ldd	r31, Y+2	; 0x02
    304c:	83 81       	ldd	r24, Z+3	; 0x03
    304e:	81 30       	cpi	r24, 0x01	; 1
    3050:	49 f4       	brne	.+18     	; 0x3064 <PWM_vInit+0x420>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
    3052:	af e4       	ldi	r26, 0x4F	; 79
    3054:	b0 e0       	ldi	r27, 0x00	; 0
    3056:	ef e4       	ldi	r30, 0x4F	; 79
    3058:	f0 e0       	ldi	r31, 0x00	; 0
    305a:	80 81       	ld	r24, Z
    305c:	8f 7c       	andi	r24, 0xCF	; 207
    305e:	80 62       	ori	r24, 0x20	; 32
    3060:	8c 93       	st	X, r24
    3062:	2a c2       	rjmp	.+1108   	; 0x34b8 <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    3064:	e9 81       	ldd	r30, Y+1	; 0x01
    3066:	fa 81       	ldd	r31, Y+2	; 0x02
    3068:	83 81       	ldd	r24, Z+3	; 0x03
    306a:	88 23       	and	r24, r24
    306c:	09 f0       	breq	.+2      	; 0x3070 <PWM_vInit+0x42c>
    306e:	24 c2       	rjmp	.+1096   	; 0x34b8 <PWM_vInit+0x874>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
    3070:	af e4       	ldi	r26, 0x4F	; 79
    3072:	b0 e0       	ldi	r27, 0x00	; 0
    3074:	ef e4       	ldi	r30, 0x4F	; 79
    3076:	f0 e0       	ldi	r31, 0x00	; 0
    3078:	80 81       	ld	r24, Z
    307a:	80 63       	ori	r24, 0x30	; 48
    307c:	8c 93       	st	X, r24
    307e:	1c c2       	rjmp	.+1080   	; 0x34b8 <PWM_vInit+0x874>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER1_Fast10:
			TCCR1A_REG = (TCCR1A_REG & 0xFC) | 3;
    3080:	af e4       	ldi	r26, 0x4F	; 79
    3082:	b0 e0       	ldi	r27, 0x00	; 0
    3084:	ef e4       	ldi	r30, 0x4F	; 79
    3086:	f0 e0       	ldi	r31, 0x00	; 0
    3088:	80 81       	ld	r24, Z
    308a:	83 60       	ori	r24, 0x03	; 3
    308c:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7) | 0x8;
    308e:	ae e4       	ldi	r26, 0x4E	; 78
    3090:	b0 e0       	ldi	r27, 0x00	; 0
    3092:	ee e4       	ldi	r30, 0x4E	; 78
    3094:	f0 e0       	ldi	r31, 0x00	; 0
    3096:	80 81       	ld	r24, Z
    3098:	87 7e       	andi	r24, 0xE7	; 231
    309a:	88 60       	ori	r24, 0x08	; 8
    309c:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    309e:	e9 81       	ldd	r30, Y+1	; 0x01
    30a0:	fa 81       	ldd	r31, Y+2	; 0x02
    30a2:	82 81       	ldd	r24, Z+2	; 0x02
    30a4:	81 30       	cpi	r24, 0x01	; 1
    30a6:	41 f4       	brne	.+16     	; 0x30b8 <PWM_vInit+0x474>
				TIMSK_REG |= 0x3C;
    30a8:	a9 e5       	ldi	r26, 0x59	; 89
    30aa:	b0 e0       	ldi	r27, 0x00	; 0
    30ac:	e9 e5       	ldi	r30, 0x59	; 89
    30ae:	f0 e0       	ldi	r31, 0x00	; 0
    30b0:	80 81       	ld	r24, Z
    30b2:	8c 63       	ori	r24, 0x3C	; 60
    30b4:	8c 93       	st	X, r24
    30b6:	00 c2       	rjmp	.+1024   	; 0x34b8 <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    30b8:	e9 81       	ldd	r30, Y+1	; 0x01
    30ba:	fa 81       	ldd	r31, Y+2	; 0x02
    30bc:	82 81       	ldd	r24, Z+2	; 0x02
    30be:	88 23       	and	r24, r24
    30c0:	09 f0       	breq	.+2      	; 0x30c4 <PWM_vInit+0x480>
    30c2:	fa c1       	rjmp	.+1012   	; 0x34b8 <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    30c4:	e9 81       	ldd	r30, Y+1	; 0x01
    30c6:	fa 81       	ldd	r31, Y+2	; 0x02
    30c8:	83 81       	ldd	r24, Z+3	; 0x03
    30ca:	81 30       	cpi	r24, 0x01	; 1
    30cc:	49 f4       	brne	.+18     	; 0x30e0 <PWM_vInit+0x49c>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
    30ce:	af e4       	ldi	r26, 0x4F	; 79
    30d0:	b0 e0       	ldi	r27, 0x00	; 0
    30d2:	ef e4       	ldi	r30, 0x4F	; 79
    30d4:	f0 e0       	ldi	r31, 0x00	; 0
    30d6:	80 81       	ld	r24, Z
    30d8:	8f 7c       	andi	r24, 0xCF	; 207
    30da:	80 62       	ori	r24, 0x20	; 32
    30dc:	8c 93       	st	X, r24
    30de:	ec c1       	rjmp	.+984    	; 0x34b8 <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    30e0:	e9 81       	ldd	r30, Y+1	; 0x01
    30e2:	fa 81       	ldd	r31, Y+2	; 0x02
    30e4:	83 81       	ldd	r24, Z+3	; 0x03
    30e6:	88 23       	and	r24, r24
    30e8:	09 f0       	breq	.+2      	; 0x30ec <PWM_vInit+0x4a8>
    30ea:	e6 c1       	rjmp	.+972    	; 0x34b8 <PWM_vInit+0x874>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
    30ec:	af e4       	ldi	r26, 0x4F	; 79
    30ee:	b0 e0       	ldi	r27, 0x00	; 0
    30f0:	ef e4       	ldi	r30, 0x4F	; 79
    30f2:	f0 e0       	ldi	r31, 0x00	; 0
    30f4:	80 81       	ld	r24, Z
    30f6:	80 63       	ori	r24, 0x30	; 48
    30f8:	8c 93       	st	X, r24
    30fa:	de c1       	rjmp	.+956    	; 0x34b8 <PWM_vInit+0x874>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER1_PhaseFreqICR:
			TCCR1A_REG = (TCCR1A_REG & 0xFC);
    30fc:	af e4       	ldi	r26, 0x4F	; 79
    30fe:	b0 e0       	ldi	r27, 0x00	; 0
    3100:	ef e4       	ldi	r30, 0x4F	; 79
    3102:	f0 e0       	ldi	r31, 0x00	; 0
    3104:	80 81       	ld	r24, Z
    3106:	8c 7f       	andi	r24, 0xFC	; 252
    3108:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7) | 0x10;
    310a:	ae e4       	ldi	r26, 0x4E	; 78
    310c:	b0 e0       	ldi	r27, 0x00	; 0
    310e:	ee e4       	ldi	r30, 0x4E	; 78
    3110:	f0 e0       	ldi	r31, 0x00	; 0
    3112:	80 81       	ld	r24, Z
    3114:	87 7e       	andi	r24, 0xE7	; 231
    3116:	80 61       	ori	r24, 0x10	; 16
    3118:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    311a:	e9 81       	ldd	r30, Y+1	; 0x01
    311c:	fa 81       	ldd	r31, Y+2	; 0x02
    311e:	82 81       	ldd	r24, Z+2	; 0x02
    3120:	81 30       	cpi	r24, 0x01	; 1
    3122:	41 f4       	brne	.+16     	; 0x3134 <PWM_vInit+0x4f0>
				TIMSK_REG |= 0x3C;
    3124:	a9 e5       	ldi	r26, 0x59	; 89
    3126:	b0 e0       	ldi	r27, 0x00	; 0
    3128:	e9 e5       	ldi	r30, 0x59	; 89
    312a:	f0 e0       	ldi	r31, 0x00	; 0
    312c:	80 81       	ld	r24, Z
    312e:	8c 63       	ori	r24, 0x3C	; 60
    3130:	8c 93       	st	X, r24
    3132:	c2 c1       	rjmp	.+900    	; 0x34b8 <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    3134:	e9 81       	ldd	r30, Y+1	; 0x01
    3136:	fa 81       	ldd	r31, Y+2	; 0x02
    3138:	82 81       	ldd	r24, Z+2	; 0x02
    313a:	88 23       	and	r24, r24
    313c:	09 f0       	breq	.+2      	; 0x3140 <PWM_vInit+0x4fc>
    313e:	bc c1       	rjmp	.+888    	; 0x34b8 <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    3140:	e9 81       	ldd	r30, Y+1	; 0x01
    3142:	fa 81       	ldd	r31, Y+2	; 0x02
    3144:	83 81       	ldd	r24, Z+3	; 0x03
    3146:	81 30       	cpi	r24, 0x01	; 1
    3148:	49 f4       	brne	.+18     	; 0x315c <PWM_vInit+0x518>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
    314a:	af e4       	ldi	r26, 0x4F	; 79
    314c:	b0 e0       	ldi	r27, 0x00	; 0
    314e:	ef e4       	ldi	r30, 0x4F	; 79
    3150:	f0 e0       	ldi	r31, 0x00	; 0
    3152:	80 81       	ld	r24, Z
    3154:	8f 7c       	andi	r24, 0xCF	; 207
    3156:	80 62       	ori	r24, 0x20	; 32
    3158:	8c 93       	st	X, r24
    315a:	ae c1       	rjmp	.+860    	; 0x34b8 <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    315c:	e9 81       	ldd	r30, Y+1	; 0x01
    315e:	fa 81       	ldd	r31, Y+2	; 0x02
    3160:	83 81       	ldd	r24, Z+3	; 0x03
    3162:	88 23       	and	r24, r24
    3164:	09 f0       	breq	.+2      	; 0x3168 <PWM_vInit+0x524>
    3166:	a8 c1       	rjmp	.+848    	; 0x34b8 <PWM_vInit+0x874>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
    3168:	af e4       	ldi	r26, 0x4F	; 79
    316a:	b0 e0       	ldi	r27, 0x00	; 0
    316c:	ef e4       	ldi	r30, 0x4F	; 79
    316e:	f0 e0       	ldi	r31, 0x00	; 0
    3170:	80 81       	ld	r24, Z
    3172:	80 63       	ori	r24, 0x30	; 48
    3174:	8c 93       	st	X, r24
    3176:	a0 c1       	rjmp	.+832    	; 0x34b8 <PWM_vInit+0x874>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER1_PhaseFreqOCR:
			TCCR1A_REG = (TCCR1A_REG & 0xFC) | 1;
    3178:	af e4       	ldi	r26, 0x4F	; 79
    317a:	b0 e0       	ldi	r27, 0x00	; 0
    317c:	ef e4       	ldi	r30, 0x4F	; 79
    317e:	f0 e0       	ldi	r31, 0x00	; 0
    3180:	80 81       	ld	r24, Z
    3182:	8c 7f       	andi	r24, 0xFC	; 252
    3184:	81 60       	ori	r24, 0x01	; 1
    3186:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7) | 0x10;
    3188:	ae e4       	ldi	r26, 0x4E	; 78
    318a:	b0 e0       	ldi	r27, 0x00	; 0
    318c:	ee e4       	ldi	r30, 0x4E	; 78
    318e:	f0 e0       	ldi	r31, 0x00	; 0
    3190:	80 81       	ld	r24, Z
    3192:	87 7e       	andi	r24, 0xE7	; 231
    3194:	80 61       	ori	r24, 0x10	; 16
    3196:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    3198:	e9 81       	ldd	r30, Y+1	; 0x01
    319a:	fa 81       	ldd	r31, Y+2	; 0x02
    319c:	82 81       	ldd	r24, Z+2	; 0x02
    319e:	81 30       	cpi	r24, 0x01	; 1
    31a0:	41 f4       	brne	.+16     	; 0x31b2 <PWM_vInit+0x56e>
				TIMSK_REG |= 0x3C;
    31a2:	a9 e5       	ldi	r26, 0x59	; 89
    31a4:	b0 e0       	ldi	r27, 0x00	; 0
    31a6:	e9 e5       	ldi	r30, 0x59	; 89
    31a8:	f0 e0       	ldi	r31, 0x00	; 0
    31aa:	80 81       	ld	r24, Z
    31ac:	8c 63       	ori	r24, 0x3C	; 60
    31ae:	8c 93       	st	X, r24
    31b0:	83 c1       	rjmp	.+774    	; 0x34b8 <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    31b2:	e9 81       	ldd	r30, Y+1	; 0x01
    31b4:	fa 81       	ldd	r31, Y+2	; 0x02
    31b6:	82 81       	ldd	r24, Z+2	; 0x02
    31b8:	88 23       	and	r24, r24
    31ba:	09 f0       	breq	.+2      	; 0x31be <PWM_vInit+0x57a>
    31bc:	7d c1       	rjmp	.+762    	; 0x34b8 <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    31be:	e9 81       	ldd	r30, Y+1	; 0x01
    31c0:	fa 81       	ldd	r31, Y+2	; 0x02
    31c2:	83 81       	ldd	r24, Z+3	; 0x03
    31c4:	81 30       	cpi	r24, 0x01	; 1
    31c6:	49 f4       	brne	.+18     	; 0x31da <PWM_vInit+0x596>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
    31c8:	af e4       	ldi	r26, 0x4F	; 79
    31ca:	b0 e0       	ldi	r27, 0x00	; 0
    31cc:	ef e4       	ldi	r30, 0x4F	; 79
    31ce:	f0 e0       	ldi	r31, 0x00	; 0
    31d0:	80 81       	ld	r24, Z
    31d2:	8f 7c       	andi	r24, 0xCF	; 207
    31d4:	80 62       	ori	r24, 0x20	; 32
    31d6:	8c 93       	st	X, r24
    31d8:	6f c1       	rjmp	.+734    	; 0x34b8 <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    31da:	e9 81       	ldd	r30, Y+1	; 0x01
    31dc:	fa 81       	ldd	r31, Y+2	; 0x02
    31de:	83 81       	ldd	r24, Z+3	; 0x03
    31e0:	88 23       	and	r24, r24
    31e2:	09 f0       	breq	.+2      	; 0x31e6 <PWM_vInit+0x5a2>
    31e4:	69 c1       	rjmp	.+722    	; 0x34b8 <PWM_vInit+0x874>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
    31e6:	af e4       	ldi	r26, 0x4F	; 79
    31e8:	b0 e0       	ldi	r27, 0x00	; 0
    31ea:	ef e4       	ldi	r30, 0x4F	; 79
    31ec:	f0 e0       	ldi	r31, 0x00	; 0
    31ee:	80 81       	ld	r24, Z
    31f0:	80 63       	ori	r24, 0x30	; 48
    31f2:	8c 93       	st	X, r24
    31f4:	61 c1       	rjmp	.+706    	; 0x34b8 <PWM_vInit+0x874>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER1_PhaseICR:
			TCCR1A_REG = (TCCR1A_REG & 0xFC) | 2;
    31f6:	af e4       	ldi	r26, 0x4F	; 79
    31f8:	b0 e0       	ldi	r27, 0x00	; 0
    31fa:	ef e4       	ldi	r30, 0x4F	; 79
    31fc:	f0 e0       	ldi	r31, 0x00	; 0
    31fe:	80 81       	ld	r24, Z
    3200:	8c 7f       	andi	r24, 0xFC	; 252
    3202:	82 60       	ori	r24, 0x02	; 2
    3204:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7) | 0x10;
    3206:	ae e4       	ldi	r26, 0x4E	; 78
    3208:	b0 e0       	ldi	r27, 0x00	; 0
    320a:	ee e4       	ldi	r30, 0x4E	; 78
    320c:	f0 e0       	ldi	r31, 0x00	; 0
    320e:	80 81       	ld	r24, Z
    3210:	87 7e       	andi	r24, 0xE7	; 231
    3212:	80 61       	ori	r24, 0x10	; 16
    3214:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    3216:	e9 81       	ldd	r30, Y+1	; 0x01
    3218:	fa 81       	ldd	r31, Y+2	; 0x02
    321a:	82 81       	ldd	r24, Z+2	; 0x02
    321c:	81 30       	cpi	r24, 0x01	; 1
    321e:	41 f4       	brne	.+16     	; 0x3230 <PWM_vInit+0x5ec>
				TIMSK_REG |= 0x3C;
    3220:	a9 e5       	ldi	r26, 0x59	; 89
    3222:	b0 e0       	ldi	r27, 0x00	; 0
    3224:	e9 e5       	ldi	r30, 0x59	; 89
    3226:	f0 e0       	ldi	r31, 0x00	; 0
    3228:	80 81       	ld	r24, Z
    322a:	8c 63       	ori	r24, 0x3C	; 60
    322c:	8c 93       	st	X, r24
    322e:	44 c1       	rjmp	.+648    	; 0x34b8 <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    3230:	e9 81       	ldd	r30, Y+1	; 0x01
    3232:	fa 81       	ldd	r31, Y+2	; 0x02
    3234:	82 81       	ldd	r24, Z+2	; 0x02
    3236:	88 23       	and	r24, r24
    3238:	09 f0       	breq	.+2      	; 0x323c <PWM_vInit+0x5f8>
    323a:	3e c1       	rjmp	.+636    	; 0x34b8 <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    323c:	e9 81       	ldd	r30, Y+1	; 0x01
    323e:	fa 81       	ldd	r31, Y+2	; 0x02
    3240:	83 81       	ldd	r24, Z+3	; 0x03
    3242:	81 30       	cpi	r24, 0x01	; 1
    3244:	49 f4       	brne	.+18     	; 0x3258 <PWM_vInit+0x614>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
    3246:	af e4       	ldi	r26, 0x4F	; 79
    3248:	b0 e0       	ldi	r27, 0x00	; 0
    324a:	ef e4       	ldi	r30, 0x4F	; 79
    324c:	f0 e0       	ldi	r31, 0x00	; 0
    324e:	80 81       	ld	r24, Z
    3250:	8f 7c       	andi	r24, 0xCF	; 207
    3252:	80 62       	ori	r24, 0x20	; 32
    3254:	8c 93       	st	X, r24
    3256:	30 c1       	rjmp	.+608    	; 0x34b8 <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    3258:	e9 81       	ldd	r30, Y+1	; 0x01
    325a:	fa 81       	ldd	r31, Y+2	; 0x02
    325c:	83 81       	ldd	r24, Z+3	; 0x03
    325e:	88 23       	and	r24, r24
    3260:	09 f0       	breq	.+2      	; 0x3264 <PWM_vInit+0x620>
    3262:	2a c1       	rjmp	.+596    	; 0x34b8 <PWM_vInit+0x874>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
    3264:	af e4       	ldi	r26, 0x4F	; 79
    3266:	b0 e0       	ldi	r27, 0x00	; 0
    3268:	ef e4       	ldi	r30, 0x4F	; 79
    326a:	f0 e0       	ldi	r31, 0x00	; 0
    326c:	80 81       	ld	r24, Z
    326e:	80 63       	ori	r24, 0x30	; 48
    3270:	8c 93       	st	X, r24
    3272:	22 c1       	rjmp	.+580    	; 0x34b8 <PWM_vInit+0x874>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER1_PhaseOCR:
			TCCR1A_REG = (TCCR1A_REG & 0xFC) | 3;
    3274:	af e4       	ldi	r26, 0x4F	; 79
    3276:	b0 e0       	ldi	r27, 0x00	; 0
    3278:	ef e4       	ldi	r30, 0x4F	; 79
    327a:	f0 e0       	ldi	r31, 0x00	; 0
    327c:	80 81       	ld	r24, Z
    327e:	83 60       	ori	r24, 0x03	; 3
    3280:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7) | 0x10;
    3282:	ae e4       	ldi	r26, 0x4E	; 78
    3284:	b0 e0       	ldi	r27, 0x00	; 0
    3286:	ee e4       	ldi	r30, 0x4E	; 78
    3288:	f0 e0       	ldi	r31, 0x00	; 0
    328a:	80 81       	ld	r24, Z
    328c:	87 7e       	andi	r24, 0xE7	; 231
    328e:	80 61       	ori	r24, 0x10	; 16
    3290:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    3292:	e9 81       	ldd	r30, Y+1	; 0x01
    3294:	fa 81       	ldd	r31, Y+2	; 0x02
    3296:	82 81       	ldd	r24, Z+2	; 0x02
    3298:	81 30       	cpi	r24, 0x01	; 1
    329a:	41 f4       	brne	.+16     	; 0x32ac <PWM_vInit+0x668>
				TIMSK_REG |= 0x3C;
    329c:	a9 e5       	ldi	r26, 0x59	; 89
    329e:	b0 e0       	ldi	r27, 0x00	; 0
    32a0:	e9 e5       	ldi	r30, 0x59	; 89
    32a2:	f0 e0       	ldi	r31, 0x00	; 0
    32a4:	80 81       	ld	r24, Z
    32a6:	8c 63       	ori	r24, 0x3C	; 60
    32a8:	8c 93       	st	X, r24
    32aa:	06 c1       	rjmp	.+524    	; 0x34b8 <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    32ac:	e9 81       	ldd	r30, Y+1	; 0x01
    32ae:	fa 81       	ldd	r31, Y+2	; 0x02
    32b0:	82 81       	ldd	r24, Z+2	; 0x02
    32b2:	88 23       	and	r24, r24
    32b4:	09 f0       	breq	.+2      	; 0x32b8 <PWM_vInit+0x674>
    32b6:	00 c1       	rjmp	.+512    	; 0x34b8 <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    32b8:	e9 81       	ldd	r30, Y+1	; 0x01
    32ba:	fa 81       	ldd	r31, Y+2	; 0x02
    32bc:	83 81       	ldd	r24, Z+3	; 0x03
    32be:	81 30       	cpi	r24, 0x01	; 1
    32c0:	49 f4       	brne	.+18     	; 0x32d4 <PWM_vInit+0x690>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
    32c2:	af e4       	ldi	r26, 0x4F	; 79
    32c4:	b0 e0       	ldi	r27, 0x00	; 0
    32c6:	ef e4       	ldi	r30, 0x4F	; 79
    32c8:	f0 e0       	ldi	r31, 0x00	; 0
    32ca:	80 81       	ld	r24, Z
    32cc:	8f 7c       	andi	r24, 0xCF	; 207
    32ce:	80 62       	ori	r24, 0x20	; 32
    32d0:	8c 93       	st	X, r24
    32d2:	f2 c0       	rjmp	.+484    	; 0x34b8 <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    32d4:	e9 81       	ldd	r30, Y+1	; 0x01
    32d6:	fa 81       	ldd	r31, Y+2	; 0x02
    32d8:	83 81       	ldd	r24, Z+3	; 0x03
    32da:	88 23       	and	r24, r24
    32dc:	09 f0       	breq	.+2      	; 0x32e0 <PWM_vInit+0x69c>
    32de:	ec c0       	rjmp	.+472    	; 0x34b8 <PWM_vInit+0x874>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
    32e0:	af e4       	ldi	r26, 0x4F	; 79
    32e2:	b0 e0       	ldi	r27, 0x00	; 0
    32e4:	ef e4       	ldi	r30, 0x4F	; 79
    32e6:	f0 e0       	ldi	r31, 0x00	; 0
    32e8:	80 81       	ld	r24, Z
    32ea:	80 63       	ori	r24, 0x30	; 48
    32ec:	8c 93       	st	X, r24
    32ee:	e4 c0       	rjmp	.+456    	; 0x34b8 <PWM_vInit+0x874>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER1_FastICR:
			TCCR1A_REG = (TCCR1A_REG & 0xFC) | 2;
    32f0:	af e4       	ldi	r26, 0x4F	; 79
    32f2:	b0 e0       	ldi	r27, 0x00	; 0
    32f4:	ef e4       	ldi	r30, 0x4F	; 79
    32f6:	f0 e0       	ldi	r31, 0x00	; 0
    32f8:	80 81       	ld	r24, Z
    32fa:	8c 7f       	andi	r24, 0xFC	; 252
    32fc:	82 60       	ori	r24, 0x02	; 2
    32fe:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7) | 0x18;
    3300:	ae e4       	ldi	r26, 0x4E	; 78
    3302:	b0 e0       	ldi	r27, 0x00	; 0
    3304:	ee e4       	ldi	r30, 0x4E	; 78
    3306:	f0 e0       	ldi	r31, 0x00	; 0
    3308:	80 81       	ld	r24, Z
    330a:	88 61       	ori	r24, 0x18	; 24
    330c:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    330e:	e9 81       	ldd	r30, Y+1	; 0x01
    3310:	fa 81       	ldd	r31, Y+2	; 0x02
    3312:	82 81       	ldd	r24, Z+2	; 0x02
    3314:	81 30       	cpi	r24, 0x01	; 1
    3316:	41 f4       	brne	.+16     	; 0x3328 <PWM_vInit+0x6e4>
				TIMSK_REG |= 0x3C;
    3318:	a9 e5       	ldi	r26, 0x59	; 89
    331a:	b0 e0       	ldi	r27, 0x00	; 0
    331c:	e9 e5       	ldi	r30, 0x59	; 89
    331e:	f0 e0       	ldi	r31, 0x00	; 0
    3320:	80 81       	ld	r24, Z
    3322:	8c 63       	ori	r24, 0x3C	; 60
    3324:	8c 93       	st	X, r24
    3326:	c8 c0       	rjmp	.+400    	; 0x34b8 <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    3328:	e9 81       	ldd	r30, Y+1	; 0x01
    332a:	fa 81       	ldd	r31, Y+2	; 0x02
    332c:	82 81       	ldd	r24, Z+2	; 0x02
    332e:	88 23       	and	r24, r24
    3330:	09 f0       	breq	.+2      	; 0x3334 <PWM_vInit+0x6f0>
    3332:	c2 c0       	rjmp	.+388    	; 0x34b8 <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    3334:	e9 81       	ldd	r30, Y+1	; 0x01
    3336:	fa 81       	ldd	r31, Y+2	; 0x02
    3338:	83 81       	ldd	r24, Z+3	; 0x03
    333a:	81 30       	cpi	r24, 0x01	; 1
    333c:	49 f4       	brne	.+18     	; 0x3350 <PWM_vInit+0x70c>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
    333e:	af e4       	ldi	r26, 0x4F	; 79
    3340:	b0 e0       	ldi	r27, 0x00	; 0
    3342:	ef e4       	ldi	r30, 0x4F	; 79
    3344:	f0 e0       	ldi	r31, 0x00	; 0
    3346:	80 81       	ld	r24, Z
    3348:	8f 7c       	andi	r24, 0xCF	; 207
    334a:	80 62       	ori	r24, 0x20	; 32
    334c:	8c 93       	st	X, r24
    334e:	b4 c0       	rjmp	.+360    	; 0x34b8 <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    3350:	e9 81       	ldd	r30, Y+1	; 0x01
    3352:	fa 81       	ldd	r31, Y+2	; 0x02
    3354:	83 81       	ldd	r24, Z+3	; 0x03
    3356:	88 23       	and	r24, r24
    3358:	09 f0       	breq	.+2      	; 0x335c <PWM_vInit+0x718>
    335a:	ae c0       	rjmp	.+348    	; 0x34b8 <PWM_vInit+0x874>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
    335c:	af e4       	ldi	r26, 0x4F	; 79
    335e:	b0 e0       	ldi	r27, 0x00	; 0
    3360:	ef e4       	ldi	r30, 0x4F	; 79
    3362:	f0 e0       	ldi	r31, 0x00	; 0
    3364:	80 81       	ld	r24, Z
    3366:	80 63       	ori	r24, 0x30	; 48
    3368:	8c 93       	st	X, r24
    336a:	a6 c0       	rjmp	.+332    	; 0x34b8 <PWM_vInit+0x874>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER1_FastOCR:
			TCCR1A_REG = (TCCR1A_REG & 0xFC) | 3;
    336c:	af e4       	ldi	r26, 0x4F	; 79
    336e:	b0 e0       	ldi	r27, 0x00	; 0
    3370:	ef e4       	ldi	r30, 0x4F	; 79
    3372:	f0 e0       	ldi	r31, 0x00	; 0
    3374:	80 81       	ld	r24, Z
    3376:	83 60       	ori	r24, 0x03	; 3
    3378:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7) | 0x18;
    337a:	ae e4       	ldi	r26, 0x4E	; 78
    337c:	b0 e0       	ldi	r27, 0x00	; 0
    337e:	ee e4       	ldi	r30, 0x4E	; 78
    3380:	f0 e0       	ldi	r31, 0x00	; 0
    3382:	80 81       	ld	r24, Z
    3384:	88 61       	ori	r24, 0x18	; 24
    3386:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    3388:	e9 81       	ldd	r30, Y+1	; 0x01
    338a:	fa 81       	ldd	r31, Y+2	; 0x02
    338c:	82 81       	ldd	r24, Z+2	; 0x02
    338e:	81 30       	cpi	r24, 0x01	; 1
    3390:	41 f4       	brne	.+16     	; 0x33a2 <PWM_vInit+0x75e>
				TIMSK_REG |= 0x3C;
    3392:	a9 e5       	ldi	r26, 0x59	; 89
    3394:	b0 e0       	ldi	r27, 0x00	; 0
    3396:	e9 e5       	ldi	r30, 0x59	; 89
    3398:	f0 e0       	ldi	r31, 0x00	; 0
    339a:	80 81       	ld	r24, Z
    339c:	8c 63       	ori	r24, 0x3C	; 60
    339e:	8c 93       	st	X, r24
    33a0:	8b c0       	rjmp	.+278    	; 0x34b8 <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    33a2:	e9 81       	ldd	r30, Y+1	; 0x01
    33a4:	fa 81       	ldd	r31, Y+2	; 0x02
    33a6:	82 81       	ldd	r24, Z+2	; 0x02
    33a8:	88 23       	and	r24, r24
    33aa:	09 f0       	breq	.+2      	; 0x33ae <PWM_vInit+0x76a>
    33ac:	85 c0       	rjmp	.+266    	; 0x34b8 <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    33ae:	e9 81       	ldd	r30, Y+1	; 0x01
    33b0:	fa 81       	ldd	r31, Y+2	; 0x02
    33b2:	83 81       	ldd	r24, Z+3	; 0x03
    33b4:	81 30       	cpi	r24, 0x01	; 1
    33b6:	49 f4       	brne	.+18     	; 0x33ca <PWM_vInit+0x786>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
    33b8:	af e4       	ldi	r26, 0x4F	; 79
    33ba:	b0 e0       	ldi	r27, 0x00	; 0
    33bc:	ef e4       	ldi	r30, 0x4F	; 79
    33be:	f0 e0       	ldi	r31, 0x00	; 0
    33c0:	80 81       	ld	r24, Z
    33c2:	8f 7c       	andi	r24, 0xCF	; 207
    33c4:	80 62       	ori	r24, 0x20	; 32
    33c6:	8c 93       	st	X, r24
    33c8:	77 c0       	rjmp	.+238    	; 0x34b8 <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    33ca:	e9 81       	ldd	r30, Y+1	; 0x01
    33cc:	fa 81       	ldd	r31, Y+2	; 0x02
    33ce:	83 81       	ldd	r24, Z+3	; 0x03
    33d0:	88 23       	and	r24, r24
    33d2:	09 f0       	breq	.+2      	; 0x33d6 <PWM_vInit+0x792>
    33d4:	71 c0       	rjmp	.+226    	; 0x34b8 <PWM_vInit+0x874>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
    33d6:	af e4       	ldi	r26, 0x4F	; 79
    33d8:	b0 e0       	ldi	r27, 0x00	; 0
    33da:	ef e4       	ldi	r30, 0x4F	; 79
    33dc:	f0 e0       	ldi	r31, 0x00	; 0
    33de:	80 81       	ld	r24, Z
    33e0:	80 63       	ori	r24, 0x30	; 48
    33e2:	8c 93       	st	X, r24
    33e4:	69 c0       	rjmp	.+210    	; 0x34b8 <PWM_vInit+0x874>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER2_PhaseCorrect:
			TCCR2_REG = (TCCR2_REG & 0xB7) | 0x40;
    33e6:	a5 e4       	ldi	r26, 0x45	; 69
    33e8:	b0 e0       	ldi	r27, 0x00	; 0
    33ea:	e5 e4       	ldi	r30, 0x45	; 69
    33ec:	f0 e0       	ldi	r31, 0x00	; 0
    33ee:	80 81       	ld	r24, Z
    33f0:	87 7b       	andi	r24, 0xB7	; 183
    33f2:	80 64       	ori	r24, 0x40	; 64
    33f4:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    33f6:	e9 81       	ldd	r30, Y+1	; 0x01
    33f8:	fa 81       	ldd	r31, Y+2	; 0x02
    33fa:	82 81       	ldd	r24, Z+2	; 0x02
    33fc:	81 30       	cpi	r24, 0x01	; 1
    33fe:	41 f4       	brne	.+16     	; 0x3410 <PWM_vInit+0x7cc>
				TIMSK_REG |= 0xC0;
    3400:	a9 e5       	ldi	r26, 0x59	; 89
    3402:	b0 e0       	ldi	r27, 0x00	; 0
    3404:	e9 e5       	ldi	r30, 0x59	; 89
    3406:	f0 e0       	ldi	r31, 0x00	; 0
    3408:	80 81       	ld	r24, Z
    340a:	80 6c       	ori	r24, 0xC0	; 192
    340c:	8c 93       	st	X, r24
    340e:	54 c0       	rjmp	.+168    	; 0x34b8 <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    3410:	e9 81       	ldd	r30, Y+1	; 0x01
    3412:	fa 81       	ldd	r31, Y+2	; 0x02
    3414:	82 81       	ldd	r24, Z+2	; 0x02
    3416:	88 23       	and	r24, r24
    3418:	09 f0       	breq	.+2      	; 0x341c <PWM_vInit+0x7d8>
    341a:	4e c0       	rjmp	.+156    	; 0x34b8 <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    341c:	e9 81       	ldd	r30, Y+1	; 0x01
    341e:	fa 81       	ldd	r31, Y+2	; 0x02
    3420:	83 81       	ldd	r24, Z+3	; 0x03
    3422:	81 30       	cpi	r24, 0x01	; 1
    3424:	49 f4       	brne	.+18     	; 0x3438 <PWM_vInit+0x7f4>
					TCCR2_REG = (TCCR1A_REG & 0xCF) | 0x20;
    3426:	a5 e4       	ldi	r26, 0x45	; 69
    3428:	b0 e0       	ldi	r27, 0x00	; 0
    342a:	ef e4       	ldi	r30, 0x4F	; 79
    342c:	f0 e0       	ldi	r31, 0x00	; 0
    342e:	80 81       	ld	r24, Z
    3430:	8f 7c       	andi	r24, 0xCF	; 207
    3432:	80 62       	ori	r24, 0x20	; 32
    3434:	8c 93       	st	X, r24
    3436:	40 c0       	rjmp	.+128    	; 0x34b8 <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    3438:	e9 81       	ldd	r30, Y+1	; 0x01
    343a:	fa 81       	ldd	r31, Y+2	; 0x02
    343c:	83 81       	ldd	r24, Z+3	; 0x03
    343e:	88 23       	and	r24, r24
    3440:	d9 f5       	brne	.+118    	; 0x34b8 <PWM_vInit+0x874>
					TCCR2_REG = (TCCR1A_REG & 0xCF) | 0x30;
    3442:	a5 e4       	ldi	r26, 0x45	; 69
    3444:	b0 e0       	ldi	r27, 0x00	; 0
    3446:	ef e4       	ldi	r30, 0x4F	; 79
    3448:	f0 e0       	ldi	r31, 0x00	; 0
    344a:	80 81       	ld	r24, Z
    344c:	80 63       	ori	r24, 0x30	; 48
    344e:	8c 93       	st	X, r24
    3450:	33 c0       	rjmp	.+102    	; 0x34b8 <PWM_vInit+0x874>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER2_FastPWM:
			TCCR2_REG = (TCCR2_REG & 0xB7) | 0x48;
    3452:	a5 e4       	ldi	r26, 0x45	; 69
    3454:	b0 e0       	ldi	r27, 0x00	; 0
    3456:	e5 e4       	ldi	r30, 0x45	; 69
    3458:	f0 e0       	ldi	r31, 0x00	; 0
    345a:	80 81       	ld	r24, Z
    345c:	88 64       	ori	r24, 0x48	; 72
    345e:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    3460:	e9 81       	ldd	r30, Y+1	; 0x01
    3462:	fa 81       	ldd	r31, Y+2	; 0x02
    3464:	82 81       	ldd	r24, Z+2	; 0x02
    3466:	81 30       	cpi	r24, 0x01	; 1
    3468:	41 f4       	brne	.+16     	; 0x347a <PWM_vInit+0x836>
				TIMSK_REG |= 0xC0;
    346a:	a9 e5       	ldi	r26, 0x59	; 89
    346c:	b0 e0       	ldi	r27, 0x00	; 0
    346e:	e9 e5       	ldi	r30, 0x59	; 89
    3470:	f0 e0       	ldi	r31, 0x00	; 0
    3472:	80 81       	ld	r24, Z
    3474:	80 6c       	ori	r24, 0xC0	; 192
    3476:	8c 93       	st	X, r24
    3478:	1f c0       	rjmp	.+62     	; 0x34b8 <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    347a:	e9 81       	ldd	r30, Y+1	; 0x01
    347c:	fa 81       	ldd	r31, Y+2	; 0x02
    347e:	82 81       	ldd	r24, Z+2	; 0x02
    3480:	88 23       	and	r24, r24
    3482:	d1 f4       	brne	.+52     	; 0x34b8 <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    3484:	e9 81       	ldd	r30, Y+1	; 0x01
    3486:	fa 81       	ldd	r31, Y+2	; 0x02
    3488:	83 81       	ldd	r24, Z+3	; 0x03
    348a:	81 30       	cpi	r24, 0x01	; 1
    348c:	49 f4       	brne	.+18     	; 0x34a0 <PWM_vInit+0x85c>
					TCCR2_REG = (TCCR1A_REG & 0xCF) | 0x20;
    348e:	a5 e4       	ldi	r26, 0x45	; 69
    3490:	b0 e0       	ldi	r27, 0x00	; 0
    3492:	ef e4       	ldi	r30, 0x4F	; 79
    3494:	f0 e0       	ldi	r31, 0x00	; 0
    3496:	80 81       	ld	r24, Z
    3498:	8f 7c       	andi	r24, 0xCF	; 207
    349a:	80 62       	ori	r24, 0x20	; 32
    349c:	8c 93       	st	X, r24
    349e:	0c c0       	rjmp	.+24     	; 0x34b8 <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    34a0:	e9 81       	ldd	r30, Y+1	; 0x01
    34a2:	fa 81       	ldd	r31, Y+2	; 0x02
    34a4:	83 81       	ldd	r24, Z+3	; 0x03
    34a6:	88 23       	and	r24, r24
    34a8:	39 f4       	brne	.+14     	; 0x34b8 <PWM_vInit+0x874>
					TCCR2_REG = (TCCR1A_REG & 0xCF) | 0x30;
    34aa:	a5 e4       	ldi	r26, 0x45	; 69
    34ac:	b0 e0       	ldi	r27, 0x00	; 0
    34ae:	ef e4       	ldi	r30, 0x4F	; 79
    34b0:	f0 e0       	ldi	r31, 0x00	; 0
    34b2:	80 81       	ld	r24, Z
    34b4:	80 63       	ori	r24, 0x30	; 48
    34b6:	8c 93       	st	X, r24
			else{ /* Do Nothing */ }
			break;
		default: /* Do Nothing */ break;
		}
	}
}
    34b8:	0f 90       	pop	r0
    34ba:	0f 90       	pop	r0
    34bc:	0f 90       	pop	r0
    34be:	0f 90       	pop	r0
    34c0:	cf 91       	pop	r28
    34c2:	df 91       	pop	r29
    34c4:	08 95       	ret

000034c6 <PWM_vSetICR>:

void PWM_vSetICR(const PWM_cfg_t *PWM, u16 Copy_u16ICRValue){
    34c6:	df 93       	push	r29
    34c8:	cf 93       	push	r28
    34ca:	00 d0       	rcall	.+0      	; 0x34cc <PWM_vSetICR+0x6>
    34cc:	00 d0       	rcall	.+0      	; 0x34ce <PWM_vSetICR+0x8>
    34ce:	cd b7       	in	r28, 0x3d	; 61
    34d0:	de b7       	in	r29, 0x3e	; 62
    34d2:	9a 83       	std	Y+2, r25	; 0x02
    34d4:	89 83       	std	Y+1, r24	; 0x01
    34d6:	7c 83       	std	Y+4, r23	; 0x04
    34d8:	6b 83       	std	Y+3, r22	; 0x03
	if(PWM != NULL){
    34da:	89 81       	ldd	r24, Y+1	; 0x01
    34dc:	9a 81       	ldd	r25, Y+2	; 0x02
    34de:	00 97       	sbiw	r24, 0x00	; 0
    34e0:	79 f0       	breq	.+30     	; 0x3500 <PWM_vSetICR+0x3a>
		switch(PWM->PWM_TimerChannel){
    34e2:	e9 81       	ldd	r30, Y+1	; 0x01
    34e4:	fa 81       	ldd	r31, Y+2	; 0x02
    34e6:	80 81       	ld	r24, Z
    34e8:	88 2f       	mov	r24, r24
    34ea:	90 e0       	ldi	r25, 0x00	; 0
    34ec:	02 97       	sbiw	r24, 0x02	; 2
    34ee:	8c 30       	cpi	r24, 0x0C	; 12
    34f0:	91 05       	cpc	r25, r1
    34f2:	30 f4       	brcc	.+12     	; 0x3500 <PWM_vSetICR+0x3a>
		case TIMER1_PhaseFreqOCR:
		case TIMER1_PhaseICR:
		case TIMER1_PhaseOCR:
		case TIMER1_FastICR:
		case TIMER1_FastOCR:
			ICR1_REG = Copy_u16ICRValue;
    34f4:	e6 e4       	ldi	r30, 0x46	; 70
    34f6:	f0 e0       	ldi	r31, 0x00	; 0
    34f8:	8b 81       	ldd	r24, Y+3	; 0x03
    34fa:	9c 81       	ldd	r25, Y+4	; 0x04
    34fc:	91 83       	std	Z+1, r25	; 0x01
    34fe:	80 83       	st	Z, r24
			break;
		default: /* Do Nothing */ break;
		}
	}
}
    3500:	0f 90       	pop	r0
    3502:	0f 90       	pop	r0
    3504:	0f 90       	pop	r0
    3506:	0f 90       	pop	r0
    3508:	cf 91       	pop	r28
    350a:	df 91       	pop	r29
    350c:	08 95       	ret

0000350e <PWM_vSetOCR>:

void PWM_vSetOCR(const PWM_cfg_t *PWM, u16 Copy_u16OCRValue){
    350e:	df 93       	push	r29
    3510:	cf 93       	push	r28
    3512:	00 d0       	rcall	.+0      	; 0x3514 <PWM_vSetOCR+0x6>
    3514:	00 d0       	rcall	.+0      	; 0x3516 <PWM_vSetOCR+0x8>
    3516:	00 d0       	rcall	.+0      	; 0x3518 <PWM_vSetOCR+0xa>
    3518:	cd b7       	in	r28, 0x3d	; 61
    351a:	de b7       	in	r29, 0x3e	; 62
    351c:	9a 83       	std	Y+2, r25	; 0x02
    351e:	89 83       	std	Y+1, r24	; 0x01
    3520:	7c 83       	std	Y+4, r23	; 0x04
    3522:	6b 83       	std	Y+3, r22	; 0x03
	if(PWM != NULL){
    3524:	89 81       	ldd	r24, Y+1	; 0x01
    3526:	9a 81       	ldd	r25, Y+2	; 0x02
    3528:	00 97       	sbiw	r24, 0x00	; 0
    352a:	61 f1       	breq	.+88     	; 0x3584 <PWM_vSetOCR+0x76>
		switch(PWM->PWM_TimerChannel){
    352c:	e9 81       	ldd	r30, Y+1	; 0x01
    352e:	fa 81       	ldd	r31, Y+2	; 0x02
    3530:	80 81       	ld	r24, Z
    3532:	28 2f       	mov	r18, r24
    3534:	30 e0       	ldi	r19, 0x00	; 0
    3536:	3e 83       	std	Y+6, r19	; 0x06
    3538:	2d 83       	std	Y+5, r18	; 0x05
    353a:	8d 81       	ldd	r24, Y+5	; 0x05
    353c:	9e 81       	ldd	r25, Y+6	; 0x06
    353e:	8e 30       	cpi	r24, 0x0E	; 14
    3540:	91 05       	cpc	r25, r1
    3542:	54 f4       	brge	.+20     	; 0x3558 <PWM_vSetOCR+0x4a>
    3544:	2d 81       	ldd	r18, Y+5	; 0x05
    3546:	3e 81       	ldd	r19, Y+6	; 0x06
    3548:	22 30       	cpi	r18, 0x02	; 2
    354a:	31 05       	cpc	r19, r1
    354c:	84 f4       	brge	.+32     	; 0x356e <PWM_vSetOCR+0x60>
    354e:	8d 81       	ldd	r24, Y+5	; 0x05
    3550:	9e 81       	ldd	r25, Y+6	; 0x06
    3552:	99 23       	and	r25, r25
    3554:	bc f0       	brlt	.+46     	; 0x3584 <PWM_vSetOCR+0x76>
    3556:	06 c0       	rjmp	.+12     	; 0x3564 <PWM_vSetOCR+0x56>
    3558:	2d 81       	ldd	r18, Y+5	; 0x05
    355a:	3e 81       	ldd	r19, Y+6	; 0x06
    355c:	20 31       	cpi	r18, 0x10	; 16
    355e:	31 05       	cpc	r19, r1
    3560:	8c f4       	brge	.+34     	; 0x3584 <PWM_vSetOCR+0x76>
    3562:	0c c0       	rjmp	.+24     	; 0x357c <PWM_vSetOCR+0x6e>
		case TIMER0_PhaseCorrect:
		case TIMER0_FastPWM:
			OCR0_REG = (u8)Copy_u16OCRValue;
    3564:	ec e5       	ldi	r30, 0x5C	; 92
    3566:	f0 e0       	ldi	r31, 0x00	; 0
    3568:	8b 81       	ldd	r24, Y+3	; 0x03
    356a:	80 83       	st	Z, r24
    356c:	0b c0       	rjmp	.+22     	; 0x3584 <PWM_vSetOCR+0x76>
		case TIMER1_PhaseFreqOCR:
		case TIMER1_PhaseICR:
		case TIMER1_PhaseOCR:
		case TIMER1_FastICR:
		case TIMER1_FastOCR:
			OCR1B_REG = Copy_u16OCRValue;
    356e:	e8 e4       	ldi	r30, 0x48	; 72
    3570:	f0 e0       	ldi	r31, 0x00	; 0
    3572:	8b 81       	ldd	r24, Y+3	; 0x03
    3574:	9c 81       	ldd	r25, Y+4	; 0x04
    3576:	91 83       	std	Z+1, r25	; 0x01
    3578:	80 83       	st	Z, r24
    357a:	04 c0       	rjmp	.+8      	; 0x3584 <PWM_vSetOCR+0x76>
			break;
		case TIMER2_PhaseCorrect:
		case TIMER2_FastPWM:
			OCR2_REG = (u8)Copy_u16OCRValue;
    357c:	e3 e4       	ldi	r30, 0x43	; 67
    357e:	f0 e0       	ldi	r31, 0x00	; 0
    3580:	8b 81       	ldd	r24, Y+3	; 0x03
    3582:	80 83       	st	Z, r24
			break;
		default: /* Do Nothing */ break;
		}
	}
}
    3584:	26 96       	adiw	r28, 0x06	; 6
    3586:	0f b6       	in	r0, 0x3f	; 63
    3588:	f8 94       	cli
    358a:	de bf       	out	0x3e, r29	; 62
    358c:	0f be       	out	0x3f, r0	; 63
    358e:	cd bf       	out	0x3d, r28	; 61
    3590:	cf 91       	pop	r28
    3592:	df 91       	pop	r29
    3594:	08 95       	ret

00003596 <PWM_vStart>:

void PWM_vStart(const PWM_cfg_t *PWM){
    3596:	df 93       	push	r29
    3598:	cf 93       	push	r28
    359a:	cd b7       	in	r28, 0x3d	; 61
    359c:	de b7       	in	r29, 0x3e	; 62
    359e:	2a 97       	sbiw	r28, 0x0a	; 10
    35a0:	0f b6       	in	r0, 0x3f	; 63
    35a2:	f8 94       	cli
    35a4:	de bf       	out	0x3e, r29	; 62
    35a6:	0f be       	out	0x3f, r0	; 63
    35a8:	cd bf       	out	0x3d, r28	; 61
    35aa:	9a 83       	std	Y+2, r25	; 0x02
    35ac:	89 83       	std	Y+1, r24	; 0x01
	if(PWM != NULL){
    35ae:	89 81       	ldd	r24, Y+1	; 0x01
    35b0:	9a 81       	ldd	r25, Y+2	; 0x02
    35b2:	00 97       	sbiw	r24, 0x00	; 0
    35b4:	09 f4       	brne	.+2      	; 0x35b8 <PWM_vStart+0x22>
    35b6:	a7 c1       	rjmp	.+846    	; 0x3906 <PWM_vStart+0x370>
		switch(PWM->PWM_TimerChannel){
    35b8:	e9 81       	ldd	r30, Y+1	; 0x01
    35ba:	fa 81       	ldd	r31, Y+2	; 0x02
    35bc:	80 81       	ld	r24, Z
    35be:	28 2f       	mov	r18, r24
    35c0:	30 e0       	ldi	r19, 0x00	; 0
    35c2:	3a 87       	std	Y+10, r19	; 0x0a
    35c4:	29 87       	std	Y+9, r18	; 0x09
    35c6:	89 85       	ldd	r24, Y+9	; 0x09
    35c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    35ca:	8e 30       	cpi	r24, 0x0E	; 14
    35cc:	91 05       	cpc	r25, r1
    35ce:	64 f4       	brge	.+24     	; 0x35e8 <PWM_vStart+0x52>
    35d0:	29 85       	ldd	r18, Y+9	; 0x09
    35d2:	3a 85       	ldd	r19, Y+10	; 0x0a
    35d4:	22 30       	cpi	r18, 0x02	; 2
    35d6:	31 05       	cpc	r19, r1
    35d8:	0c f0       	brlt	.+2      	; 0x35dc <PWM_vStart+0x46>
    35da:	90 c0       	rjmp	.+288    	; 0x36fc <PWM_vStart+0x166>
    35dc:	89 85       	ldd	r24, Y+9	; 0x09
    35de:	9a 85       	ldd	r25, Y+10	; 0x0a
    35e0:	99 23       	and	r25, r25
    35e2:	0c f4       	brge	.+2      	; 0x35e6 <PWM_vStart+0x50>
    35e4:	90 c1       	rjmp	.+800    	; 0x3906 <PWM_vStart+0x370>
    35e6:	07 c0       	rjmp	.+14     	; 0x35f6 <PWM_vStart+0x60>
    35e8:	29 85       	ldd	r18, Y+9	; 0x09
    35ea:	3a 85       	ldd	r19, Y+10	; 0x0a
    35ec:	20 31       	cpi	r18, 0x10	; 16
    35ee:	31 05       	cpc	r19, r1
    35f0:	0c f0       	brlt	.+2      	; 0x35f4 <PWM_vStart+0x5e>
    35f2:	89 c1       	rjmp	.+786    	; 0x3906 <PWM_vStart+0x370>
    35f4:	06 c1       	rjmp	.+524    	; 0x3802 <PWM_vStart+0x26c>
		case TIMER0_PhaseCorrect:
		case TIMER0_FastPWM:
			DIO_vSetPinDir(PORTB, DIO_PIN_NUM_3, DIO_OUTPUT);
    35f6:	81 e0       	ldi	r24, 0x01	; 1
    35f8:	63 e0       	ldi	r22, 0x03	; 3
    35fa:	41 e0       	ldi	r20, 0x01	; 1
    35fc:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <DIO_vSetPinDir>
			switch(PWM->PWM_TimerPrescale){
    3600:	e9 81       	ldd	r30, Y+1	; 0x01
    3602:	fa 81       	ldd	r31, Y+2	; 0x02
    3604:	81 81       	ldd	r24, Z+1	; 0x01
    3606:	28 2f       	mov	r18, r24
    3608:	30 e0       	ldi	r19, 0x00	; 0
    360a:	38 87       	std	Y+8, r19	; 0x08
    360c:	2f 83       	std	Y+7, r18	; 0x07
    360e:	8f 81       	ldd	r24, Y+7	; 0x07
    3610:	98 85       	ldd	r25, Y+8	; 0x08
    3612:	83 30       	cpi	r24, 0x03	; 3
    3614:	91 05       	cpc	r25, r1
    3616:	09 f4       	brne	.+2      	; 0x361a <PWM_vStart+0x84>
    3618:	45 c0       	rjmp	.+138    	; 0x36a4 <PWM_vStart+0x10e>
    361a:	2f 81       	ldd	r18, Y+7	; 0x07
    361c:	38 85       	ldd	r19, Y+8	; 0x08
    361e:	24 30       	cpi	r18, 0x04	; 4
    3620:	31 05       	cpc	r19, r1
    3622:	7c f4       	brge	.+30     	; 0x3642 <PWM_vStart+0xac>
    3624:	8f 81       	ldd	r24, Y+7	; 0x07
    3626:	98 85       	ldd	r25, Y+8	; 0x08
    3628:	81 30       	cpi	r24, 0x01	; 1
    362a:	91 05       	cpc	r25, r1
    362c:	49 f1       	breq	.+82     	; 0x3680 <PWM_vStart+0xea>
    362e:	2f 81       	ldd	r18, Y+7	; 0x07
    3630:	38 85       	ldd	r19, Y+8	; 0x08
    3632:	22 30       	cpi	r18, 0x02	; 2
    3634:	31 05       	cpc	r19, r1
    3636:	6c f5       	brge	.+90     	; 0x3692 <PWM_vStart+0xfc>
    3638:	8f 81       	ldd	r24, Y+7	; 0x07
    363a:	98 85       	ldd	r25, Y+8	; 0x08
    363c:	00 97       	sbiw	r24, 0x00	; 0
    363e:	c1 f0       	breq	.+48     	; 0x3670 <PWM_vStart+0xda>
    3640:	62 c1       	rjmp	.+708    	; 0x3906 <PWM_vStart+0x370>
    3642:	2f 81       	ldd	r18, Y+7	; 0x07
    3644:	38 85       	ldd	r19, Y+8	; 0x08
    3646:	25 30       	cpi	r18, 0x05	; 5
    3648:	31 05       	cpc	r19, r1
    364a:	09 f4       	brne	.+2      	; 0x364e <PWM_vStart+0xb8>
    364c:	3d c0       	rjmp	.+122    	; 0x36c8 <PWM_vStart+0x132>
    364e:	8f 81       	ldd	r24, Y+7	; 0x07
    3650:	98 85       	ldd	r25, Y+8	; 0x08
    3652:	85 30       	cpi	r24, 0x05	; 5
    3654:	91 05       	cpc	r25, r1
    3656:	7c f1       	brlt	.+94     	; 0x36b6 <PWM_vStart+0x120>
    3658:	2f 81       	ldd	r18, Y+7	; 0x07
    365a:	38 85       	ldd	r19, Y+8	; 0x08
    365c:	26 30       	cpi	r18, 0x06	; 6
    365e:	31 05       	cpc	r19, r1
    3660:	e1 f1       	breq	.+120    	; 0x36da <PWM_vStart+0x144>
    3662:	8f 81       	ldd	r24, Y+7	; 0x07
    3664:	98 85       	ldd	r25, Y+8	; 0x08
    3666:	87 30       	cpi	r24, 0x07	; 7
    3668:	91 05       	cpc	r25, r1
    366a:	09 f4       	brne	.+2      	; 0x366e <PWM_vStart+0xd8>
    366c:	3f c0       	rjmp	.+126    	; 0x36ec <PWM_vStart+0x156>
    366e:	4b c1       	rjmp	.+662    	; 0x3906 <PWM_vStart+0x370>
			case PRE_NO_CLK:
				TCCR0_REG = (TCCR0_REG&0xF8);
    3670:	a3 e5       	ldi	r26, 0x53	; 83
    3672:	b0 e0       	ldi	r27, 0x00	; 0
    3674:	e3 e5       	ldi	r30, 0x53	; 83
    3676:	f0 e0       	ldi	r31, 0x00	; 0
    3678:	80 81       	ld	r24, Z
    367a:	88 7f       	andi	r24, 0xF8	; 248
    367c:	8c 93       	st	X, r24
    367e:	43 c1       	rjmp	.+646    	; 0x3906 <PWM_vStart+0x370>
				break;
			case PRE_0:
				TCCR0_REG = (TCCR0_REG&0xF8) | 1;
    3680:	a3 e5       	ldi	r26, 0x53	; 83
    3682:	b0 e0       	ldi	r27, 0x00	; 0
    3684:	e3 e5       	ldi	r30, 0x53	; 83
    3686:	f0 e0       	ldi	r31, 0x00	; 0
    3688:	80 81       	ld	r24, Z
    368a:	88 7f       	andi	r24, 0xF8	; 248
    368c:	81 60       	ori	r24, 0x01	; 1
    368e:	8c 93       	st	X, r24
    3690:	3a c1       	rjmp	.+628    	; 0x3906 <PWM_vStart+0x370>
				break;
			case PRE_8:
				TCCR0_REG = (TCCR0_REG&0xF8) | 2;
    3692:	a3 e5       	ldi	r26, 0x53	; 83
    3694:	b0 e0       	ldi	r27, 0x00	; 0
    3696:	e3 e5       	ldi	r30, 0x53	; 83
    3698:	f0 e0       	ldi	r31, 0x00	; 0
    369a:	80 81       	ld	r24, Z
    369c:	88 7f       	andi	r24, 0xF8	; 248
    369e:	82 60       	ori	r24, 0x02	; 2
    36a0:	8c 93       	st	X, r24
    36a2:	31 c1       	rjmp	.+610    	; 0x3906 <PWM_vStart+0x370>
				break;
			case PRE_64:
				TCCR0_REG = (TCCR0_REG&0xF8) | 3;
    36a4:	a3 e5       	ldi	r26, 0x53	; 83
    36a6:	b0 e0       	ldi	r27, 0x00	; 0
    36a8:	e3 e5       	ldi	r30, 0x53	; 83
    36aa:	f0 e0       	ldi	r31, 0x00	; 0
    36ac:	80 81       	ld	r24, Z
    36ae:	88 7f       	andi	r24, 0xF8	; 248
    36b0:	83 60       	ori	r24, 0x03	; 3
    36b2:	8c 93       	st	X, r24
    36b4:	28 c1       	rjmp	.+592    	; 0x3906 <PWM_vStart+0x370>
				break;
			case PRE_256:
				TCCR0_REG = (TCCR0_REG&0xF8) | 4;
    36b6:	a3 e5       	ldi	r26, 0x53	; 83
    36b8:	b0 e0       	ldi	r27, 0x00	; 0
    36ba:	e3 e5       	ldi	r30, 0x53	; 83
    36bc:	f0 e0       	ldi	r31, 0x00	; 0
    36be:	80 81       	ld	r24, Z
    36c0:	88 7f       	andi	r24, 0xF8	; 248
    36c2:	84 60       	ori	r24, 0x04	; 4
    36c4:	8c 93       	st	X, r24
    36c6:	1f c1       	rjmp	.+574    	; 0x3906 <PWM_vStart+0x370>
				break;
			case PRE_1024:
				TCCR0_REG = (TCCR0_REG&0xF8) | 5;
    36c8:	a3 e5       	ldi	r26, 0x53	; 83
    36ca:	b0 e0       	ldi	r27, 0x00	; 0
    36cc:	e3 e5       	ldi	r30, 0x53	; 83
    36ce:	f0 e0       	ldi	r31, 0x00	; 0
    36d0:	80 81       	ld	r24, Z
    36d2:	88 7f       	andi	r24, 0xF8	; 248
    36d4:	85 60       	ori	r24, 0x05	; 5
    36d6:	8c 93       	st	X, r24
    36d8:	16 c1       	rjmp	.+556    	; 0x3906 <PWM_vStart+0x370>
				break;
			case PRE_EXT_FALLING:
				TCCR0_REG = (TCCR0_REG&0xF8) | 6;
    36da:	a3 e5       	ldi	r26, 0x53	; 83
    36dc:	b0 e0       	ldi	r27, 0x00	; 0
    36de:	e3 e5       	ldi	r30, 0x53	; 83
    36e0:	f0 e0       	ldi	r31, 0x00	; 0
    36e2:	80 81       	ld	r24, Z
    36e4:	88 7f       	andi	r24, 0xF8	; 248
    36e6:	86 60       	ori	r24, 0x06	; 6
    36e8:	8c 93       	st	X, r24
    36ea:	0d c1       	rjmp	.+538    	; 0x3906 <PWM_vStart+0x370>
				break;
			case PRE_EXT_RISING:
				TCCR0_REG = (TCCR0_REG&0xF8) | 7;
    36ec:	a3 e5       	ldi	r26, 0x53	; 83
    36ee:	b0 e0       	ldi	r27, 0x00	; 0
    36f0:	e3 e5       	ldi	r30, 0x53	; 83
    36f2:	f0 e0       	ldi	r31, 0x00	; 0
    36f4:	80 81       	ld	r24, Z
    36f6:	87 60       	ori	r24, 0x07	; 7
    36f8:	8c 93       	st	X, r24
    36fa:	05 c1       	rjmp	.+522    	; 0x3906 <PWM_vStart+0x370>
		case TIMER1_PhaseFreqOCR:
		case TIMER1_PhaseICR:
		case TIMER1_PhaseOCR:
		case TIMER1_FastICR:
		case TIMER1_FastOCR:
			DIO_vSetPinDir(PORTD, DIO_PIN_NUM_4, DIO_OUTPUT);
    36fc:	83 e0       	ldi	r24, 0x03	; 3
    36fe:	64 e0       	ldi	r22, 0x04	; 4
    3700:	41 e0       	ldi	r20, 0x01	; 1
    3702:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <DIO_vSetPinDir>
			switch(PWM->PWM_TimerPrescale){
    3706:	e9 81       	ldd	r30, Y+1	; 0x01
    3708:	fa 81       	ldd	r31, Y+2	; 0x02
    370a:	81 81       	ldd	r24, Z+1	; 0x01
    370c:	28 2f       	mov	r18, r24
    370e:	30 e0       	ldi	r19, 0x00	; 0
    3710:	3e 83       	std	Y+6, r19	; 0x06
    3712:	2d 83       	std	Y+5, r18	; 0x05
    3714:	8d 81       	ldd	r24, Y+5	; 0x05
    3716:	9e 81       	ldd	r25, Y+6	; 0x06
    3718:	83 30       	cpi	r24, 0x03	; 3
    371a:	91 05       	cpc	r25, r1
    371c:	09 f4       	brne	.+2      	; 0x3720 <PWM_vStart+0x18a>
    371e:	45 c0       	rjmp	.+138    	; 0x37aa <PWM_vStart+0x214>
    3720:	2d 81       	ldd	r18, Y+5	; 0x05
    3722:	3e 81       	ldd	r19, Y+6	; 0x06
    3724:	24 30       	cpi	r18, 0x04	; 4
    3726:	31 05       	cpc	r19, r1
    3728:	7c f4       	brge	.+30     	; 0x3748 <PWM_vStart+0x1b2>
    372a:	8d 81       	ldd	r24, Y+5	; 0x05
    372c:	9e 81       	ldd	r25, Y+6	; 0x06
    372e:	81 30       	cpi	r24, 0x01	; 1
    3730:	91 05       	cpc	r25, r1
    3732:	49 f1       	breq	.+82     	; 0x3786 <PWM_vStart+0x1f0>
    3734:	2d 81       	ldd	r18, Y+5	; 0x05
    3736:	3e 81       	ldd	r19, Y+6	; 0x06
    3738:	22 30       	cpi	r18, 0x02	; 2
    373a:	31 05       	cpc	r19, r1
    373c:	6c f5       	brge	.+90     	; 0x3798 <PWM_vStart+0x202>
    373e:	8d 81       	ldd	r24, Y+5	; 0x05
    3740:	9e 81       	ldd	r25, Y+6	; 0x06
    3742:	00 97       	sbiw	r24, 0x00	; 0
    3744:	c1 f0       	breq	.+48     	; 0x3776 <PWM_vStart+0x1e0>
    3746:	df c0       	rjmp	.+446    	; 0x3906 <PWM_vStart+0x370>
    3748:	2d 81       	ldd	r18, Y+5	; 0x05
    374a:	3e 81       	ldd	r19, Y+6	; 0x06
    374c:	25 30       	cpi	r18, 0x05	; 5
    374e:	31 05       	cpc	r19, r1
    3750:	09 f4       	brne	.+2      	; 0x3754 <PWM_vStart+0x1be>
    3752:	3d c0       	rjmp	.+122    	; 0x37ce <PWM_vStart+0x238>
    3754:	8d 81       	ldd	r24, Y+5	; 0x05
    3756:	9e 81       	ldd	r25, Y+6	; 0x06
    3758:	85 30       	cpi	r24, 0x05	; 5
    375a:	91 05       	cpc	r25, r1
    375c:	7c f1       	brlt	.+94     	; 0x37bc <PWM_vStart+0x226>
    375e:	2d 81       	ldd	r18, Y+5	; 0x05
    3760:	3e 81       	ldd	r19, Y+6	; 0x06
    3762:	26 30       	cpi	r18, 0x06	; 6
    3764:	31 05       	cpc	r19, r1
    3766:	e1 f1       	breq	.+120    	; 0x37e0 <PWM_vStart+0x24a>
    3768:	8d 81       	ldd	r24, Y+5	; 0x05
    376a:	9e 81       	ldd	r25, Y+6	; 0x06
    376c:	87 30       	cpi	r24, 0x07	; 7
    376e:	91 05       	cpc	r25, r1
    3770:	09 f4       	brne	.+2      	; 0x3774 <PWM_vStart+0x1de>
    3772:	3f c0       	rjmp	.+126    	; 0x37f2 <PWM_vStart+0x25c>
    3774:	c8 c0       	rjmp	.+400    	; 0x3906 <PWM_vStart+0x370>
			case PRE_NO_CLK:
				TCCR1B_REG = (TCCR1B_REG&0xF8);
    3776:	ae e4       	ldi	r26, 0x4E	; 78
    3778:	b0 e0       	ldi	r27, 0x00	; 0
    377a:	ee e4       	ldi	r30, 0x4E	; 78
    377c:	f0 e0       	ldi	r31, 0x00	; 0
    377e:	80 81       	ld	r24, Z
    3780:	88 7f       	andi	r24, 0xF8	; 248
    3782:	8c 93       	st	X, r24
    3784:	c0 c0       	rjmp	.+384    	; 0x3906 <PWM_vStart+0x370>
				break;
			case PRE_0:
				TCCR1B_REG = (TCCR1B_REG&0xF8) | 1;
    3786:	ae e4       	ldi	r26, 0x4E	; 78
    3788:	b0 e0       	ldi	r27, 0x00	; 0
    378a:	ee e4       	ldi	r30, 0x4E	; 78
    378c:	f0 e0       	ldi	r31, 0x00	; 0
    378e:	80 81       	ld	r24, Z
    3790:	88 7f       	andi	r24, 0xF8	; 248
    3792:	81 60       	ori	r24, 0x01	; 1
    3794:	8c 93       	st	X, r24
    3796:	b7 c0       	rjmp	.+366    	; 0x3906 <PWM_vStart+0x370>
				break;
			case PRE_8:
				TCCR1B_REG = (TCCR1B_REG&0xF8) | 2;
    3798:	ae e4       	ldi	r26, 0x4E	; 78
    379a:	b0 e0       	ldi	r27, 0x00	; 0
    379c:	ee e4       	ldi	r30, 0x4E	; 78
    379e:	f0 e0       	ldi	r31, 0x00	; 0
    37a0:	80 81       	ld	r24, Z
    37a2:	88 7f       	andi	r24, 0xF8	; 248
    37a4:	82 60       	ori	r24, 0x02	; 2
    37a6:	8c 93       	st	X, r24
    37a8:	ae c0       	rjmp	.+348    	; 0x3906 <PWM_vStart+0x370>
				break;
			case PRE_64:
				TCCR1B_REG = (TCCR1B_REG&0xF8) | 3;
    37aa:	ae e4       	ldi	r26, 0x4E	; 78
    37ac:	b0 e0       	ldi	r27, 0x00	; 0
    37ae:	ee e4       	ldi	r30, 0x4E	; 78
    37b0:	f0 e0       	ldi	r31, 0x00	; 0
    37b2:	80 81       	ld	r24, Z
    37b4:	88 7f       	andi	r24, 0xF8	; 248
    37b6:	83 60       	ori	r24, 0x03	; 3
    37b8:	8c 93       	st	X, r24
    37ba:	a5 c0       	rjmp	.+330    	; 0x3906 <PWM_vStart+0x370>
				break;
			case PRE_256:
				TCCR1B_REG = (TCCR1B_REG&0xF8) | 4;
    37bc:	ae e4       	ldi	r26, 0x4E	; 78
    37be:	b0 e0       	ldi	r27, 0x00	; 0
    37c0:	ee e4       	ldi	r30, 0x4E	; 78
    37c2:	f0 e0       	ldi	r31, 0x00	; 0
    37c4:	80 81       	ld	r24, Z
    37c6:	88 7f       	andi	r24, 0xF8	; 248
    37c8:	84 60       	ori	r24, 0x04	; 4
    37ca:	8c 93       	st	X, r24
    37cc:	9c c0       	rjmp	.+312    	; 0x3906 <PWM_vStart+0x370>
				break;
			case PRE_1024:
				TCCR1B_REG = (TCCR1B_REG&0xF8) | 5;
    37ce:	ae e4       	ldi	r26, 0x4E	; 78
    37d0:	b0 e0       	ldi	r27, 0x00	; 0
    37d2:	ee e4       	ldi	r30, 0x4E	; 78
    37d4:	f0 e0       	ldi	r31, 0x00	; 0
    37d6:	80 81       	ld	r24, Z
    37d8:	88 7f       	andi	r24, 0xF8	; 248
    37da:	85 60       	ori	r24, 0x05	; 5
    37dc:	8c 93       	st	X, r24
    37de:	93 c0       	rjmp	.+294    	; 0x3906 <PWM_vStart+0x370>
				break;
			case PRE_EXT_FALLING:
				TCCR1B_REG = (TCCR1B_REG&0xF8) | 6;
    37e0:	ae e4       	ldi	r26, 0x4E	; 78
    37e2:	b0 e0       	ldi	r27, 0x00	; 0
    37e4:	ee e4       	ldi	r30, 0x4E	; 78
    37e6:	f0 e0       	ldi	r31, 0x00	; 0
    37e8:	80 81       	ld	r24, Z
    37ea:	88 7f       	andi	r24, 0xF8	; 248
    37ec:	86 60       	ori	r24, 0x06	; 6
    37ee:	8c 93       	st	X, r24
    37f0:	8a c0       	rjmp	.+276    	; 0x3906 <PWM_vStart+0x370>
				break;
			case PRE_EXT_RISING:
				TCCR1B_REG = (TCCR1B_REG&0xF8) | 7;
    37f2:	ae e4       	ldi	r26, 0x4E	; 78
    37f4:	b0 e0       	ldi	r27, 0x00	; 0
    37f6:	ee e4       	ldi	r30, 0x4E	; 78
    37f8:	f0 e0       	ldi	r31, 0x00	; 0
    37fa:	80 81       	ld	r24, Z
    37fc:	87 60       	ori	r24, 0x07	; 7
    37fe:	8c 93       	st	X, r24
    3800:	82 c0       	rjmp	.+260    	; 0x3906 <PWM_vStart+0x370>
			default: /* Do Nothing */ break;
			}
			break;
		case TIMER2_PhaseCorrect:
		case TIMER2_FastPWM:
			DIO_vSetPinDir(PORTD, DIO_PIN_NUM_7, DIO_OUTPUT);
    3802:	83 e0       	ldi	r24, 0x03	; 3
    3804:	67 e0       	ldi	r22, 0x07	; 7
    3806:	41 e0       	ldi	r20, 0x01	; 1
    3808:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <DIO_vSetPinDir>
			switch(PWM->PWM_TimerPrescale){
    380c:	e9 81       	ldd	r30, Y+1	; 0x01
    380e:	fa 81       	ldd	r31, Y+2	; 0x02
    3810:	81 81       	ldd	r24, Z+1	; 0x01
    3812:	28 2f       	mov	r18, r24
    3814:	30 e0       	ldi	r19, 0x00	; 0
    3816:	3c 83       	std	Y+4, r19	; 0x04
    3818:	2b 83       	std	Y+3, r18	; 0x03
    381a:	8b 81       	ldd	r24, Y+3	; 0x03
    381c:	9c 81       	ldd	r25, Y+4	; 0x04
    381e:	83 30       	cpi	r24, 0x03	; 3
    3820:	91 05       	cpc	r25, r1
    3822:	09 f4       	brne	.+2      	; 0x3826 <PWM_vStart+0x290>
    3824:	4e c0       	rjmp	.+156    	; 0x38c2 <PWM_vStart+0x32c>
    3826:	2b 81       	ldd	r18, Y+3	; 0x03
    3828:	3c 81       	ldd	r19, Y+4	; 0x04
    382a:	24 30       	cpi	r18, 0x04	; 4
    382c:	31 05       	cpc	r19, r1
    382e:	7c f4       	brge	.+30     	; 0x384e <PWM_vStart+0x2b8>
    3830:	8b 81       	ldd	r24, Y+3	; 0x03
    3832:	9c 81       	ldd	r25, Y+4	; 0x04
    3834:	81 30       	cpi	r24, 0x01	; 1
    3836:	91 05       	cpc	r25, r1
    3838:	49 f1       	breq	.+82     	; 0x388c <PWM_vStart+0x2f6>
    383a:	2b 81       	ldd	r18, Y+3	; 0x03
    383c:	3c 81       	ldd	r19, Y+4	; 0x04
    383e:	22 30       	cpi	r18, 0x02	; 2
    3840:	31 05       	cpc	r19, r1
    3842:	6c f5       	brge	.+90     	; 0x389e <PWM_vStart+0x308>
    3844:	8b 81       	ldd	r24, Y+3	; 0x03
    3846:	9c 81       	ldd	r25, Y+4	; 0x04
    3848:	00 97       	sbiw	r24, 0x00	; 0
    384a:	c1 f0       	breq	.+48     	; 0x387c <PWM_vStart+0x2e6>
    384c:	5c c0       	rjmp	.+184    	; 0x3906 <PWM_vStart+0x370>
    384e:	2b 81       	ldd	r18, Y+3	; 0x03
    3850:	3c 81       	ldd	r19, Y+4	; 0x04
    3852:	25 30       	cpi	r18, 0x05	; 5
    3854:	31 05       	cpc	r19, r1
    3856:	09 f4       	brne	.+2      	; 0x385a <PWM_vStart+0x2c4>
    3858:	4f c0       	rjmp	.+158    	; 0x38f8 <PWM_vStart+0x362>
    385a:	8b 81       	ldd	r24, Y+3	; 0x03
    385c:	9c 81       	ldd	r25, Y+4	; 0x04
    385e:	85 30       	cpi	r24, 0x05	; 5
    3860:	91 05       	cpc	r25, r1
    3862:	0c f4       	brge	.+2      	; 0x3866 <PWM_vStart+0x2d0>
    3864:	40 c0       	rjmp	.+128    	; 0x38e6 <PWM_vStart+0x350>
    3866:	2b 81       	ldd	r18, Y+3	; 0x03
    3868:	3c 81       	ldd	r19, Y+4	; 0x04
    386a:	28 30       	cpi	r18, 0x08	; 8
    386c:	31 05       	cpc	r19, r1
    386e:	01 f1       	breq	.+64     	; 0x38b0 <PWM_vStart+0x31a>
    3870:	8b 81       	ldd	r24, Y+3	; 0x03
    3872:	9c 81       	ldd	r25, Y+4	; 0x04
    3874:	89 30       	cpi	r24, 0x09	; 9
    3876:	91 05       	cpc	r25, r1
    3878:	69 f1       	breq	.+90     	; 0x38d4 <PWM_vStart+0x33e>
    387a:	45 c0       	rjmp	.+138    	; 0x3906 <PWM_vStart+0x370>
			case PRE_NO_CLK:
				TCCR2_REG = (TCCR2_REG&0xF8);
    387c:	a5 e4       	ldi	r26, 0x45	; 69
    387e:	b0 e0       	ldi	r27, 0x00	; 0
    3880:	e5 e4       	ldi	r30, 0x45	; 69
    3882:	f0 e0       	ldi	r31, 0x00	; 0
    3884:	80 81       	ld	r24, Z
    3886:	88 7f       	andi	r24, 0xF8	; 248
    3888:	8c 93       	st	X, r24
    388a:	3d c0       	rjmp	.+122    	; 0x3906 <PWM_vStart+0x370>
				break;
			case PRE_0:
				TCCR2_REG = (TCCR2_REG&0xF8) | 1;
    388c:	a5 e4       	ldi	r26, 0x45	; 69
    388e:	b0 e0       	ldi	r27, 0x00	; 0
    3890:	e5 e4       	ldi	r30, 0x45	; 69
    3892:	f0 e0       	ldi	r31, 0x00	; 0
    3894:	80 81       	ld	r24, Z
    3896:	88 7f       	andi	r24, 0xF8	; 248
    3898:	81 60       	ori	r24, 0x01	; 1
    389a:	8c 93       	st	X, r24
    389c:	34 c0       	rjmp	.+104    	; 0x3906 <PWM_vStart+0x370>
				break;
			case PRE_8:
				TCCR2_REG = (TCCR2_REG&0xF8) | 2;
    389e:	a5 e4       	ldi	r26, 0x45	; 69
    38a0:	b0 e0       	ldi	r27, 0x00	; 0
    38a2:	e5 e4       	ldi	r30, 0x45	; 69
    38a4:	f0 e0       	ldi	r31, 0x00	; 0
    38a6:	80 81       	ld	r24, Z
    38a8:	88 7f       	andi	r24, 0xF8	; 248
    38aa:	82 60       	ori	r24, 0x02	; 2
    38ac:	8c 93       	st	X, r24
    38ae:	2b c0       	rjmp	.+86     	; 0x3906 <PWM_vStart+0x370>
				break;
			case PRE_32:
				TCCR2_REG = (TCCR2_REG&0xF8) | 3;
    38b0:	a5 e4       	ldi	r26, 0x45	; 69
    38b2:	b0 e0       	ldi	r27, 0x00	; 0
    38b4:	e5 e4       	ldi	r30, 0x45	; 69
    38b6:	f0 e0       	ldi	r31, 0x00	; 0
    38b8:	80 81       	ld	r24, Z
    38ba:	88 7f       	andi	r24, 0xF8	; 248
    38bc:	83 60       	ori	r24, 0x03	; 3
    38be:	8c 93       	st	X, r24
    38c0:	22 c0       	rjmp	.+68     	; 0x3906 <PWM_vStart+0x370>
				break;
			case PRE_64:
				TCCR2_REG = (TCCR2_REG&0xF8) | 4;
    38c2:	a5 e4       	ldi	r26, 0x45	; 69
    38c4:	b0 e0       	ldi	r27, 0x00	; 0
    38c6:	e5 e4       	ldi	r30, 0x45	; 69
    38c8:	f0 e0       	ldi	r31, 0x00	; 0
    38ca:	80 81       	ld	r24, Z
    38cc:	88 7f       	andi	r24, 0xF8	; 248
    38ce:	84 60       	ori	r24, 0x04	; 4
    38d0:	8c 93       	st	X, r24
    38d2:	19 c0       	rjmp	.+50     	; 0x3906 <PWM_vStart+0x370>
				break;
			case PRE_128:
				TCCR2_REG = (TCCR2_REG&0xF8) | 5;
    38d4:	a5 e4       	ldi	r26, 0x45	; 69
    38d6:	b0 e0       	ldi	r27, 0x00	; 0
    38d8:	e5 e4       	ldi	r30, 0x45	; 69
    38da:	f0 e0       	ldi	r31, 0x00	; 0
    38dc:	80 81       	ld	r24, Z
    38de:	88 7f       	andi	r24, 0xF8	; 248
    38e0:	85 60       	ori	r24, 0x05	; 5
    38e2:	8c 93       	st	X, r24
    38e4:	10 c0       	rjmp	.+32     	; 0x3906 <PWM_vStart+0x370>
				break;
			case PRE_256:
				TCCR2_REG = (TCCR2_REG&0xF8) | 6;
    38e6:	a5 e4       	ldi	r26, 0x45	; 69
    38e8:	b0 e0       	ldi	r27, 0x00	; 0
    38ea:	e5 e4       	ldi	r30, 0x45	; 69
    38ec:	f0 e0       	ldi	r31, 0x00	; 0
    38ee:	80 81       	ld	r24, Z
    38f0:	88 7f       	andi	r24, 0xF8	; 248
    38f2:	86 60       	ori	r24, 0x06	; 6
    38f4:	8c 93       	st	X, r24
    38f6:	07 c0       	rjmp	.+14     	; 0x3906 <PWM_vStart+0x370>
				break;
			case PRE_1024:
				TCCR2_REG = (TCCR2_REG&0xF8) | 7;
    38f8:	a5 e4       	ldi	r26, 0x45	; 69
    38fa:	b0 e0       	ldi	r27, 0x00	; 0
    38fc:	e5 e4       	ldi	r30, 0x45	; 69
    38fe:	f0 e0       	ldi	r31, 0x00	; 0
    3900:	80 81       	ld	r24, Z
    3902:	87 60       	ori	r24, 0x07	; 7
    3904:	8c 93       	st	X, r24
			}
			break;
		default: /* Do Nothing */ break;
		}
	}
}
    3906:	2a 96       	adiw	r28, 0x0a	; 10
    3908:	0f b6       	in	r0, 0x3f	; 63
    390a:	f8 94       	cli
    390c:	de bf       	out	0x3e, r29	; 62
    390e:	0f be       	out	0x3f, r0	; 63
    3910:	cd bf       	out	0x3d, r28	; 61
    3912:	cf 91       	pop	r28
    3914:	df 91       	pop	r29
    3916:	08 95       	ret

00003918 <PWM_vStop>:

void PWM_vStop(const PWM_cfg_t *PWM){
    3918:	df 93       	push	r29
    391a:	cf 93       	push	r28
    391c:	00 d0       	rcall	.+0      	; 0x391e <PWM_vStop+0x6>
    391e:	00 d0       	rcall	.+0      	; 0x3920 <PWM_vStop+0x8>
    3920:	cd b7       	in	r28, 0x3d	; 61
    3922:	de b7       	in	r29, 0x3e	; 62
    3924:	9a 83       	std	Y+2, r25	; 0x02
    3926:	89 83       	std	Y+1, r24	; 0x01
	if(PWM != NULL){
    3928:	89 81       	ldd	r24, Y+1	; 0x01
    392a:	9a 81       	ldd	r25, Y+2	; 0x02
    392c:	00 97       	sbiw	r24, 0x00	; 0
    392e:	99 f1       	breq	.+102    	; 0x3996 <PWM_vStop+0x7e>
		switch(PWM->PWM_TimerChannel){
    3930:	e9 81       	ldd	r30, Y+1	; 0x01
    3932:	fa 81       	ldd	r31, Y+2	; 0x02
    3934:	80 81       	ld	r24, Z
    3936:	28 2f       	mov	r18, r24
    3938:	30 e0       	ldi	r19, 0x00	; 0
    393a:	3c 83       	std	Y+4, r19	; 0x04
    393c:	2b 83       	std	Y+3, r18	; 0x03
    393e:	8b 81       	ldd	r24, Y+3	; 0x03
    3940:	9c 81       	ldd	r25, Y+4	; 0x04
    3942:	8e 30       	cpi	r24, 0x0E	; 14
    3944:	91 05       	cpc	r25, r1
    3946:	54 f4       	brge	.+20     	; 0x395c <PWM_vStop+0x44>
    3948:	2b 81       	ldd	r18, Y+3	; 0x03
    394a:	3c 81       	ldd	r19, Y+4	; 0x04
    394c:	22 30       	cpi	r18, 0x02	; 2
    394e:	31 05       	cpc	r19, r1
    3950:	9c f4       	brge	.+38     	; 0x3978 <PWM_vStop+0x60>
    3952:	8b 81       	ldd	r24, Y+3	; 0x03
    3954:	9c 81       	ldd	r25, Y+4	; 0x04
    3956:	99 23       	and	r25, r25
    3958:	f4 f0       	brlt	.+60     	; 0x3996 <PWM_vStop+0x7e>
    395a:	06 c0       	rjmp	.+12     	; 0x3968 <PWM_vStop+0x50>
    395c:	2b 81       	ldd	r18, Y+3	; 0x03
    395e:	3c 81       	ldd	r19, Y+4	; 0x04
    3960:	20 31       	cpi	r18, 0x10	; 16
    3962:	31 05       	cpc	r19, r1
    3964:	c4 f4       	brge	.+48     	; 0x3996 <PWM_vStop+0x7e>
    3966:	10 c0       	rjmp	.+32     	; 0x3988 <PWM_vStop+0x70>
		case TIMER0_PhaseCorrect:
		case TIMER0_FastPWM:
			TCCR0_REG &= 0xF8;
    3968:	a3 e5       	ldi	r26, 0x53	; 83
    396a:	b0 e0       	ldi	r27, 0x00	; 0
    396c:	e3 e5       	ldi	r30, 0x53	; 83
    396e:	f0 e0       	ldi	r31, 0x00	; 0
    3970:	80 81       	ld	r24, Z
    3972:	88 7f       	andi	r24, 0xF8	; 248
    3974:	8c 93       	st	X, r24
    3976:	0f c0       	rjmp	.+30     	; 0x3996 <PWM_vStop+0x7e>
		case TIMER1_PhaseFreqOCR:
		case TIMER1_PhaseICR:
		case TIMER1_PhaseOCR:
		case TIMER1_FastICR:
		case TIMER1_FastOCR:
			TCCR1B_REG &= 0xF8;
    3978:	ae e4       	ldi	r26, 0x4E	; 78
    397a:	b0 e0       	ldi	r27, 0x00	; 0
    397c:	ee e4       	ldi	r30, 0x4E	; 78
    397e:	f0 e0       	ldi	r31, 0x00	; 0
    3980:	80 81       	ld	r24, Z
    3982:	88 7f       	andi	r24, 0xF8	; 248
    3984:	8c 93       	st	X, r24
    3986:	07 c0       	rjmp	.+14     	; 0x3996 <PWM_vStop+0x7e>
			break;
		case TIMER2_PhaseCorrect:
		case TIMER2_FastPWM:
			TCCR2_REG &= 0xF8;
    3988:	a5 e4       	ldi	r26, 0x45	; 69
    398a:	b0 e0       	ldi	r27, 0x00	; 0
    398c:	e5 e4       	ldi	r30, 0x45	; 69
    398e:	f0 e0       	ldi	r31, 0x00	; 0
    3990:	80 81       	ld	r24, Z
    3992:	88 7f       	andi	r24, 0xF8	; 248
    3994:	8c 93       	st	X, r24
			break;
		default: /* Do Nothing */ break;
		}
	}
}
    3996:	0f 90       	pop	r0
    3998:	0f 90       	pop	r0
    399a:	0f 90       	pop	r0
    399c:	0f 90       	pop	r0
    399e:	cf 91       	pop	r28
    39a0:	df 91       	pop	r29
    39a2:	08 95       	ret

000039a4 <GIE_Enable>:
/*
The I-bit is cleared by hardware after an interrupt
has occurred, and is set by the RETI instruction to enable subsequent interrupts.
The I-bit can also be set and cleared by the application with ---the SEI and CLI---  instruction
  */
void GIE_Enable(){
    39a4:	df 93       	push	r29
    39a6:	cf 93       	push	r28
    39a8:	cd b7       	in	r28, 0x3d	; 61
    39aa:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, 7);
    39ac:	af e5       	ldi	r26, 0x5F	; 95
    39ae:	b0 e0       	ldi	r27, 0x00	; 0
    39b0:	ef e5       	ldi	r30, 0x5F	; 95
    39b2:	f0 e0       	ldi	r31, 0x00	; 0
    39b4:	80 81       	ld	r24, Z
    39b6:	80 68       	ori	r24, 0x80	; 128
    39b8:	8c 93       	st	X, r24
}
    39ba:	cf 91       	pop	r28
    39bc:	df 91       	pop	r29
    39be:	08 95       	ret

000039c0 <GIE_Disable>:

void GIE_Disable(){
    39c0:	df 93       	push	r29
    39c2:	cf 93       	push	r28
    39c4:	cd b7       	in	r28, 0x3d	; 61
    39c6:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG, 7);
    39c8:	af e5       	ldi	r26, 0x5F	; 95
    39ca:	b0 e0       	ldi	r27, 0x00	; 0
    39cc:	ef e5       	ldi	r30, 0x5F	; 95
    39ce:	f0 e0       	ldi	r31, 0x00	; 0
    39d0:	80 81       	ld	r24, Z
    39d2:	8f 77       	andi	r24, 0x7F	; 127
    39d4:	8c 93       	st	X, r24
}
    39d6:	cf 91       	pop	r28
    39d8:	df 91       	pop	r29
    39da:	08 95       	ret

000039dc <EXTI_Enable>:

static pf PF1_CallBack ;
static pf PF2_CallBack;
static pf PF3_CallBack;

void EXTI_Enable(u8 INT){
    39dc:	df 93       	push	r29
    39de:	cf 93       	push	r28
    39e0:	0f 92       	push	r0
    39e2:	cd b7       	in	r28, 0x3d	; 61
    39e4:	de b7       	in	r29, 0x3e	; 62
    39e6:	89 83       	std	Y+1, r24	; 0x01
	//Enable Interrupt
	SET_BIT(GICR, INT);
    39e8:	ab e5       	ldi	r26, 0x5B	; 91
    39ea:	b0 e0       	ldi	r27, 0x00	; 0
    39ec:	eb e5       	ldi	r30, 0x5B	; 91
    39ee:	f0 e0       	ldi	r31, 0x00	; 0
    39f0:	80 81       	ld	r24, Z
    39f2:	48 2f       	mov	r20, r24
    39f4:	89 81       	ldd	r24, Y+1	; 0x01
    39f6:	28 2f       	mov	r18, r24
    39f8:	30 e0       	ldi	r19, 0x00	; 0
    39fa:	81 e0       	ldi	r24, 0x01	; 1
    39fc:	90 e0       	ldi	r25, 0x00	; 0
    39fe:	02 2e       	mov	r0, r18
    3a00:	02 c0       	rjmp	.+4      	; 0x3a06 <EXTI_Enable+0x2a>
    3a02:	88 0f       	add	r24, r24
    3a04:	99 1f       	adc	r25, r25
    3a06:	0a 94       	dec	r0
    3a08:	e2 f7       	brpl	.-8      	; 0x3a02 <EXTI_Enable+0x26>
    3a0a:	84 2b       	or	r24, r20
    3a0c:	8c 93       	st	X, r24
}
    3a0e:	0f 90       	pop	r0
    3a10:	cf 91       	pop	r28
    3a12:	df 91       	pop	r29
    3a14:	08 95       	ret

00003a16 <EXTI_Disable>:


void EXTI_Disable(u8 INT){
    3a16:	df 93       	push	r29
    3a18:	cf 93       	push	r28
    3a1a:	0f 92       	push	r0
    3a1c:	cd b7       	in	r28, 0x3d	; 61
    3a1e:	de b7       	in	r29, 0x3e	; 62
    3a20:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(GICR, INT); //Disable bit INT in GICR REG (INT0 , INT1 ,INT2)
    3a22:	ab e5       	ldi	r26, 0x5B	; 91
    3a24:	b0 e0       	ldi	r27, 0x00	; 0
    3a26:	eb e5       	ldi	r30, 0x5B	; 91
    3a28:	f0 e0       	ldi	r31, 0x00	; 0
    3a2a:	80 81       	ld	r24, Z
    3a2c:	48 2f       	mov	r20, r24
    3a2e:	89 81       	ldd	r24, Y+1	; 0x01
    3a30:	28 2f       	mov	r18, r24
    3a32:	30 e0       	ldi	r19, 0x00	; 0
    3a34:	81 e0       	ldi	r24, 0x01	; 1
    3a36:	90 e0       	ldi	r25, 0x00	; 0
    3a38:	02 2e       	mov	r0, r18
    3a3a:	02 c0       	rjmp	.+4      	; 0x3a40 <EXTI_Disable+0x2a>
    3a3c:	88 0f       	add	r24, r24
    3a3e:	99 1f       	adc	r25, r25
    3a40:	0a 94       	dec	r0
    3a42:	e2 f7       	brpl	.-8      	; 0x3a3c <EXTI_Disable+0x26>
    3a44:	80 95       	com	r24
    3a46:	84 23       	and	r24, r20
    3a48:	8c 93       	st	X, r24
}
    3a4a:	0f 90       	pop	r0
    3a4c:	cf 91       	pop	r28
    3a4e:	df 91       	pop	r29
    3a50:	08 95       	ret

00003a52 <EXTI_InitMode>:

tenuErrorStatus EXTI_InitMode(u8 INT, u8 mode){
    3a52:	df 93       	push	r29
    3a54:	cf 93       	push	r28
    3a56:	00 d0       	rcall	.+0      	; 0x3a58 <EXTI_InitMode+0x6>
    3a58:	0f 92       	push	r0
    3a5a:	cd b7       	in	r28, 0x3d	; 61
    3a5c:	de b7       	in	r29, 0x3e	; 62
    3a5e:	8a 83       	std	Y+2, r24	; 0x02
    3a60:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus enuReturnStateLoc = EOK;
    3a62:	19 82       	std	Y+1, r1	; 0x01
	if(INT == EXTI_INT0){
    3a64:	8a 81       	ldd	r24, Y+2	; 0x02
    3a66:	86 30       	cpi	r24, 0x06	; 6
    3a68:	09 f0       	breq	.+2      	; 0x3a6c <EXTI_InitMode+0x1a>
    3a6a:	4b c0       	rjmp	.+150    	; 0x3b02 <EXTI_InitMode+0xb0>
		if (mode == EXTI_LOW_SGNL){
    3a6c:	8b 81       	ldd	r24, Y+3	; 0x03
    3a6e:	81 30       	cpi	r24, 0x01	; 1
    3a70:	79 f4       	brne	.+30     	; 0x3a90 <EXTI_InitMode+0x3e>
			CLR_BIT(MCUCR, EXTI_ISC00);
    3a72:	a5 e5       	ldi	r26, 0x55	; 85
    3a74:	b0 e0       	ldi	r27, 0x00	; 0
    3a76:	e5 e5       	ldi	r30, 0x55	; 85
    3a78:	f0 e0       	ldi	r31, 0x00	; 0
    3a7a:	80 81       	ld	r24, Z
    3a7c:	8e 7f       	andi	r24, 0xFE	; 254
    3a7e:	8c 93       	st	X, r24
			CLR_BIT(MCUCR, EXTI_ISC01);
    3a80:	a5 e5       	ldi	r26, 0x55	; 85
    3a82:	b0 e0       	ldi	r27, 0x00	; 0
    3a84:	e5 e5       	ldi	r30, 0x55	; 85
    3a86:	f0 e0       	ldi	r31, 0x00	; 0
    3a88:	80 81       	ld	r24, Z
    3a8a:	8d 7f       	andi	r24, 0xFD	; 253
    3a8c:	8c 93       	st	X, r24
    3a8e:	a6 c0       	rjmp	.+332    	; 0x3bdc <EXTI_InitMode+0x18a>
		}else if (mode == EXTI_LOG_CHNG){
    3a90:	8b 81       	ldd	r24, Y+3	; 0x03
    3a92:	82 30       	cpi	r24, 0x02	; 2
    3a94:	79 f4       	brne	.+30     	; 0x3ab4 <EXTI_InitMode+0x62>
			SET_BIT(MCUCR, EXTI_ISC00);
    3a96:	a5 e5       	ldi	r26, 0x55	; 85
    3a98:	b0 e0       	ldi	r27, 0x00	; 0
    3a9a:	e5 e5       	ldi	r30, 0x55	; 85
    3a9c:	f0 e0       	ldi	r31, 0x00	; 0
    3a9e:	80 81       	ld	r24, Z
    3aa0:	81 60       	ori	r24, 0x01	; 1
    3aa2:	8c 93       	st	X, r24
			CLR_BIT(MCUCR, EXTI_ISC01);
    3aa4:	a5 e5       	ldi	r26, 0x55	; 85
    3aa6:	b0 e0       	ldi	r27, 0x00	; 0
    3aa8:	e5 e5       	ldi	r30, 0x55	; 85
    3aaa:	f0 e0       	ldi	r31, 0x00	; 0
    3aac:	80 81       	ld	r24, Z
    3aae:	8d 7f       	andi	r24, 0xFD	; 253
    3ab0:	8c 93       	st	X, r24
    3ab2:	94 c0       	rjmp	.+296    	; 0x3bdc <EXTI_InitMode+0x18a>
		}else if (mode == EXTI_FAL_EDGE){
    3ab4:	8b 81       	ldd	r24, Y+3	; 0x03
    3ab6:	83 30       	cpi	r24, 0x03	; 3
    3ab8:	79 f4       	brne	.+30     	; 0x3ad8 <EXTI_InitMode+0x86>
			CLR_BIT(MCUCR, EXTI_ISC00);
    3aba:	a5 e5       	ldi	r26, 0x55	; 85
    3abc:	b0 e0       	ldi	r27, 0x00	; 0
    3abe:	e5 e5       	ldi	r30, 0x55	; 85
    3ac0:	f0 e0       	ldi	r31, 0x00	; 0
    3ac2:	80 81       	ld	r24, Z
    3ac4:	8e 7f       	andi	r24, 0xFE	; 254
    3ac6:	8c 93       	st	X, r24
			SET_BIT(MCUCR, EXTI_ISC01);
    3ac8:	a5 e5       	ldi	r26, 0x55	; 85
    3aca:	b0 e0       	ldi	r27, 0x00	; 0
    3acc:	e5 e5       	ldi	r30, 0x55	; 85
    3ace:	f0 e0       	ldi	r31, 0x00	; 0
    3ad0:	80 81       	ld	r24, Z
    3ad2:	82 60       	ori	r24, 0x02	; 2
    3ad4:	8c 93       	st	X, r24
    3ad6:	82 c0       	rjmp	.+260    	; 0x3bdc <EXTI_InitMode+0x18a>
		}else if(mode == EXTI_RAIS_EDGE){
    3ad8:	8b 81       	ldd	r24, Y+3	; 0x03
    3ada:	84 30       	cpi	r24, 0x04	; 4
    3adc:	79 f4       	brne	.+30     	; 0x3afc <EXTI_InitMode+0xaa>
			SET_BIT(MCUCR, EXTI_ISC00);
    3ade:	a5 e5       	ldi	r26, 0x55	; 85
    3ae0:	b0 e0       	ldi	r27, 0x00	; 0
    3ae2:	e5 e5       	ldi	r30, 0x55	; 85
    3ae4:	f0 e0       	ldi	r31, 0x00	; 0
    3ae6:	80 81       	ld	r24, Z
    3ae8:	81 60       	ori	r24, 0x01	; 1
    3aea:	8c 93       	st	X, r24
			SET_BIT(MCUCR, EXTI_ISC01);
    3aec:	a5 e5       	ldi	r26, 0x55	; 85
    3aee:	b0 e0       	ldi	r27, 0x00	; 0
    3af0:	e5 e5       	ldi	r30, 0x55	; 85
    3af2:	f0 e0       	ldi	r31, 0x00	; 0
    3af4:	80 81       	ld	r24, Z
    3af6:	82 60       	ori	r24, 0x02	; 2
    3af8:	8c 93       	st	X, r24
    3afa:	70 c0       	rjmp	.+224    	; 0x3bdc <EXTI_InitMode+0x18a>
		}else{
			enuReturnStateLoc = PARAM_OUT_RANGE;
    3afc:	81 e0       	ldi	r24, 0x01	; 1
    3afe:	89 83       	std	Y+1, r24	; 0x01
    3b00:	6d c0       	rjmp	.+218    	; 0x3bdc <EXTI_InitMode+0x18a>
		}

	}else if(INT == EXTI_INT1){
    3b02:	8a 81       	ldd	r24, Y+2	; 0x02
    3b04:	87 30       	cpi	r24, 0x07	; 7
    3b06:	09 f0       	breq	.+2      	; 0x3b0a <EXTI_InitMode+0xb8>
    3b08:	4b c0       	rjmp	.+150    	; 0x3ba0 <EXTI_InitMode+0x14e>
		if (mode == EXTI_LOW_SGNL){
    3b0a:	8b 81       	ldd	r24, Y+3	; 0x03
    3b0c:	81 30       	cpi	r24, 0x01	; 1
    3b0e:	79 f4       	brne	.+30     	; 0x3b2e <EXTI_InitMode+0xdc>
			CLR_BIT(MCUCR, EXTI_ISC10);
    3b10:	a5 e5       	ldi	r26, 0x55	; 85
    3b12:	b0 e0       	ldi	r27, 0x00	; 0
    3b14:	e5 e5       	ldi	r30, 0x55	; 85
    3b16:	f0 e0       	ldi	r31, 0x00	; 0
    3b18:	80 81       	ld	r24, Z
    3b1a:	8b 7f       	andi	r24, 0xFB	; 251
    3b1c:	8c 93       	st	X, r24
			CLR_BIT(MCUCR, EXTI_ISC11);
    3b1e:	a5 e5       	ldi	r26, 0x55	; 85
    3b20:	b0 e0       	ldi	r27, 0x00	; 0
    3b22:	e5 e5       	ldi	r30, 0x55	; 85
    3b24:	f0 e0       	ldi	r31, 0x00	; 0
    3b26:	80 81       	ld	r24, Z
    3b28:	87 7f       	andi	r24, 0xF7	; 247
    3b2a:	8c 93       	st	X, r24
    3b2c:	57 c0       	rjmp	.+174    	; 0x3bdc <EXTI_InitMode+0x18a>
		}else if (mode == EXTI_LOG_CHNG){
    3b2e:	8b 81       	ldd	r24, Y+3	; 0x03
    3b30:	82 30       	cpi	r24, 0x02	; 2
    3b32:	79 f4       	brne	.+30     	; 0x3b52 <EXTI_InitMode+0x100>
			SET_BIT(MCUCR, EXTI_ISC10);
    3b34:	a5 e5       	ldi	r26, 0x55	; 85
    3b36:	b0 e0       	ldi	r27, 0x00	; 0
    3b38:	e5 e5       	ldi	r30, 0x55	; 85
    3b3a:	f0 e0       	ldi	r31, 0x00	; 0
    3b3c:	80 81       	ld	r24, Z
    3b3e:	84 60       	ori	r24, 0x04	; 4
    3b40:	8c 93       	st	X, r24
			CLR_BIT(MCUCR, EXTI_ISC11);
    3b42:	a5 e5       	ldi	r26, 0x55	; 85
    3b44:	b0 e0       	ldi	r27, 0x00	; 0
    3b46:	e5 e5       	ldi	r30, 0x55	; 85
    3b48:	f0 e0       	ldi	r31, 0x00	; 0
    3b4a:	80 81       	ld	r24, Z
    3b4c:	87 7f       	andi	r24, 0xF7	; 247
    3b4e:	8c 93       	st	X, r24
    3b50:	45 c0       	rjmp	.+138    	; 0x3bdc <EXTI_InitMode+0x18a>
		}else if (mode == EXTI_FAL_EDGE){
    3b52:	8b 81       	ldd	r24, Y+3	; 0x03
    3b54:	83 30       	cpi	r24, 0x03	; 3
    3b56:	79 f4       	brne	.+30     	; 0x3b76 <EXTI_InitMode+0x124>
			CLR_BIT(MCUCR, EXTI_ISC10);
    3b58:	a5 e5       	ldi	r26, 0x55	; 85
    3b5a:	b0 e0       	ldi	r27, 0x00	; 0
    3b5c:	e5 e5       	ldi	r30, 0x55	; 85
    3b5e:	f0 e0       	ldi	r31, 0x00	; 0
    3b60:	80 81       	ld	r24, Z
    3b62:	8b 7f       	andi	r24, 0xFB	; 251
    3b64:	8c 93       	st	X, r24
			SET_BIT(MCUCR, EXTI_ISC11);
    3b66:	a5 e5       	ldi	r26, 0x55	; 85
    3b68:	b0 e0       	ldi	r27, 0x00	; 0
    3b6a:	e5 e5       	ldi	r30, 0x55	; 85
    3b6c:	f0 e0       	ldi	r31, 0x00	; 0
    3b6e:	80 81       	ld	r24, Z
    3b70:	88 60       	ori	r24, 0x08	; 8
    3b72:	8c 93       	st	X, r24
    3b74:	33 c0       	rjmp	.+102    	; 0x3bdc <EXTI_InitMode+0x18a>
		}else if(mode == EXTI_RAIS_EDGE){
    3b76:	8b 81       	ldd	r24, Y+3	; 0x03
    3b78:	84 30       	cpi	r24, 0x04	; 4
    3b7a:	79 f4       	brne	.+30     	; 0x3b9a <EXTI_InitMode+0x148>
			SET_BIT(MCUCR, EXTI_ISC10);
    3b7c:	a5 e5       	ldi	r26, 0x55	; 85
    3b7e:	b0 e0       	ldi	r27, 0x00	; 0
    3b80:	e5 e5       	ldi	r30, 0x55	; 85
    3b82:	f0 e0       	ldi	r31, 0x00	; 0
    3b84:	80 81       	ld	r24, Z
    3b86:	84 60       	ori	r24, 0x04	; 4
    3b88:	8c 93       	st	X, r24
			SET_BIT(MCUCR, EXTI_ISC11);
    3b8a:	a5 e5       	ldi	r26, 0x55	; 85
    3b8c:	b0 e0       	ldi	r27, 0x00	; 0
    3b8e:	e5 e5       	ldi	r30, 0x55	; 85
    3b90:	f0 e0       	ldi	r31, 0x00	; 0
    3b92:	80 81       	ld	r24, Z
    3b94:	88 60       	ori	r24, 0x08	; 8
    3b96:	8c 93       	st	X, r24
    3b98:	21 c0       	rjmp	.+66     	; 0x3bdc <EXTI_InitMode+0x18a>
		}else{
			enuReturnStateLoc = PARAM_OUT_RANGE;
    3b9a:	81 e0       	ldi	r24, 0x01	; 1
    3b9c:	89 83       	std	Y+1, r24	; 0x01
    3b9e:	1e c0       	rjmp	.+60     	; 0x3bdc <EXTI_InitMode+0x18a>
		}

	}else if(INT == EXTI_INT2){
    3ba0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ba2:	85 30       	cpi	r24, 0x05	; 5
    3ba4:	c9 f4       	brne	.+50     	; 0x3bd8 <EXTI_InitMode+0x186>
		if(mode == EXTI_FAL_EDGE){
    3ba6:	8b 81       	ldd	r24, Y+3	; 0x03
    3ba8:	83 30       	cpi	r24, 0x03	; 3
    3baa:	41 f4       	brne	.+16     	; 0x3bbc <EXTI_InitMode+0x16a>
			CLR_BIT(MCUCSR, EXTI_ISC2);
    3bac:	a4 e5       	ldi	r26, 0x54	; 84
    3bae:	b0 e0       	ldi	r27, 0x00	; 0
    3bb0:	e4 e5       	ldi	r30, 0x54	; 84
    3bb2:	f0 e0       	ldi	r31, 0x00	; 0
    3bb4:	80 81       	ld	r24, Z
    3bb6:	8f 7b       	andi	r24, 0xBF	; 191
    3bb8:	8c 93       	st	X, r24
    3bba:	10 c0       	rjmp	.+32     	; 0x3bdc <EXTI_InitMode+0x18a>
		}else if(mode == EXTI_RAIS_EDGE){
    3bbc:	8b 81       	ldd	r24, Y+3	; 0x03
    3bbe:	84 30       	cpi	r24, 0x04	; 4
    3bc0:	41 f4       	brne	.+16     	; 0x3bd2 <EXTI_InitMode+0x180>
			SET_BIT(MCUCSR, EXTI_ISC2);
    3bc2:	a4 e5       	ldi	r26, 0x54	; 84
    3bc4:	b0 e0       	ldi	r27, 0x00	; 0
    3bc6:	e4 e5       	ldi	r30, 0x54	; 84
    3bc8:	f0 e0       	ldi	r31, 0x00	; 0
    3bca:	80 81       	ld	r24, Z
    3bcc:	80 64       	ori	r24, 0x40	; 64
    3bce:	8c 93       	st	X, r24
    3bd0:	05 c0       	rjmp	.+10     	; 0x3bdc <EXTI_InitMode+0x18a>
		}else{
			enuReturnStateLoc = PARAM_OUT_RANGE;
    3bd2:	81 e0       	ldi	r24, 0x01	; 1
    3bd4:	89 83       	std	Y+1, r24	; 0x01
    3bd6:	02 c0       	rjmp	.+4      	; 0x3bdc <EXTI_InitMode+0x18a>
		}
	}
	else{
		enuReturnStateLoc = PARAM_OUT_RANGE;
    3bd8:	81 e0       	ldi	r24, 0x01	; 1
    3bda:	89 83       	std	Y+1, r24	; 0x01
	}

	return enuReturnStateLoc;
    3bdc:	89 81       	ldd	r24, Y+1	; 0x01

}
    3bde:	0f 90       	pop	r0
    3be0:	0f 90       	pop	r0
    3be2:	0f 90       	pop	r0
    3be4:	cf 91       	pop	r28
    3be6:	df 91       	pop	r29
    3be8:	08 95       	ret

00003bea <EXTI_CheckIntFlag>:

u8 EXTI_CheckIntFlag(u8 INT)    //check if  specific interrupt flag is up
{
    3bea:	df 93       	push	r29
    3bec:	cf 93       	push	r28
    3bee:	00 d0       	rcall	.+0      	; 0x3bf0 <EXTI_CheckIntFlag+0x6>
    3bf0:	cd b7       	in	r28, 0x3d	; 61
    3bf2:	de b7       	in	r29, 0x3e	; 62
    3bf4:	89 83       	std	Y+1, r24	; 0x01
	if(INT == EXTI_INT0)
    3bf6:	89 81       	ldd	r24, Y+1	; 0x01
    3bf8:	86 30       	cpi	r24, 0x06	; 6
    3bfa:	91 f4       	brne	.+36     	; 0x3c20 <EXTI_CheckIntFlag+0x36>
	{
		if (GET_BIT(GIFR, EXTI_INTF0) == HIGH)
    3bfc:	ea e5       	ldi	r30, 0x5A	; 90
    3bfe:	f0 e0       	ldi	r31, 0x00	; 0
    3c00:	80 81       	ld	r24, Z
    3c02:	82 95       	swap	r24
    3c04:	86 95       	lsr	r24
    3c06:	86 95       	lsr	r24
    3c08:	83 70       	andi	r24, 0x03	; 3
    3c0a:	88 2f       	mov	r24, r24
    3c0c:	90 e0       	ldi	r25, 0x00	; 0
    3c0e:	81 70       	andi	r24, 0x01	; 1
    3c10:	90 70       	andi	r25, 0x00	; 0
    3c12:	88 23       	and	r24, r24
    3c14:	19 f0       	breq	.+6      	; 0x3c1c <EXTI_CheckIntFlag+0x32>
		{
			return 1;
    3c16:	81 e0       	ldi	r24, 0x01	; 1
    3c18:	8a 83       	std	Y+2, r24	; 0x02
    3c1a:	28 c0       	rjmp	.+80     	; 0x3c6c <EXTI_CheckIntFlag+0x82>
		}
		else
		{
			return 0;
    3c1c:	1a 82       	std	Y+2, r1	; 0x02
    3c1e:	26 c0       	rjmp	.+76     	; 0x3c6c <EXTI_CheckIntFlag+0x82>
		}
	}
	else if(INT == EXTI_INT1)
    3c20:	89 81       	ldd	r24, Y+1	; 0x01
    3c22:	87 30       	cpi	r24, 0x07	; 7
    3c24:	69 f4       	brne	.+26     	; 0x3c40 <EXTI_CheckIntFlag+0x56>
	{
		if (GET_BIT(GIFR, EXTI_INTF1) == HIGH)
    3c26:	ea e5       	ldi	r30, 0x5A	; 90
    3c28:	f0 e0       	ldi	r31, 0x00	; 0
    3c2a:	80 81       	ld	r24, Z
    3c2c:	88 1f       	adc	r24, r24
    3c2e:	88 27       	eor	r24, r24
    3c30:	88 1f       	adc	r24, r24
    3c32:	81 30       	cpi	r24, 0x01	; 1
    3c34:	19 f4       	brne	.+6      	; 0x3c3c <EXTI_CheckIntFlag+0x52>
		{
			return 1 ;
    3c36:	81 e0       	ldi	r24, 0x01	; 1
    3c38:	8a 83       	std	Y+2, r24	; 0x02
    3c3a:	18 c0       	rjmp	.+48     	; 0x3c6c <EXTI_CheckIntFlag+0x82>
		}
		else
		{
			return 0;
    3c3c:	1a 82       	std	Y+2, r1	; 0x02
    3c3e:	16 c0       	rjmp	.+44     	; 0x3c6c <EXTI_CheckIntFlag+0x82>
		}
	}
	else if(INT == EXTI_INT2)
    3c40:	89 81       	ldd	r24, Y+1	; 0x01
    3c42:	85 30       	cpi	r24, 0x05	; 5
    3c44:	89 f4       	brne	.+34     	; 0x3c68 <EXTI_CheckIntFlag+0x7e>
	{
		if (GET_BIT(GIFR, EXTI_INTF2) == HIGH)
    3c46:	ea e5       	ldi	r30, 0x5A	; 90
    3c48:	f0 e0       	ldi	r31, 0x00	; 0
    3c4a:	80 81       	ld	r24, Z
    3c4c:	82 95       	swap	r24
    3c4e:	86 95       	lsr	r24
    3c50:	87 70       	andi	r24, 0x07	; 7
    3c52:	88 2f       	mov	r24, r24
    3c54:	90 e0       	ldi	r25, 0x00	; 0
    3c56:	81 70       	andi	r24, 0x01	; 1
    3c58:	90 70       	andi	r25, 0x00	; 0
    3c5a:	88 23       	and	r24, r24
    3c5c:	19 f0       	breq	.+6      	; 0x3c64 <EXTI_CheckIntFlag+0x7a>
		{
			return 1 ;
    3c5e:	81 e0       	ldi	r24, 0x01	; 1
    3c60:	8a 83       	std	Y+2, r24	; 0x02
    3c62:	04 c0       	rjmp	.+8      	; 0x3c6c <EXTI_CheckIntFlag+0x82>
		}
		else
		{
			return 0;
    3c64:	1a 82       	std	Y+2, r1	; 0x02
    3c66:	02 c0       	rjmp	.+4      	; 0x3c6c <EXTI_CheckIntFlag+0x82>
		}
	}

	return -1;
    3c68:	8f ef       	ldi	r24, 0xFF	; 255
    3c6a:	8a 83       	std	Y+2, r24	; 0x02
    3c6c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3c6e:	0f 90       	pop	r0
    3c70:	0f 90       	pop	r0
    3c72:	cf 91       	pop	r28
    3c74:	df 91       	pop	r29
    3c76:	08 95       	ret

00003c78 <EXTI_FnCallBack_INT0>:

void EXTI_FnCallBack_INT0(pf callback){
    3c78:	df 93       	push	r29
    3c7a:	cf 93       	push	r28
    3c7c:	00 d0       	rcall	.+0      	; 0x3c7e <EXTI_FnCallBack_INT0+0x6>
    3c7e:	cd b7       	in	r28, 0x3d	; 61
    3c80:	de b7       	in	r29, 0x3e	; 62
    3c82:	9a 83       	std	Y+2, r25	; 0x02
    3c84:	89 83       	std	Y+1, r24	; 0x01
	PF1_CallBack = callback;
    3c86:	89 81       	ldd	r24, Y+1	; 0x01
    3c88:	9a 81       	ldd	r25, Y+2	; 0x02
    3c8a:	90 93 0b 05 	sts	0x050B, r25
    3c8e:	80 93 0a 05 	sts	0x050A, r24
}
    3c92:	0f 90       	pop	r0
    3c94:	0f 90       	pop	r0
    3c96:	cf 91       	pop	r28
    3c98:	df 91       	pop	r29
    3c9a:	08 95       	ret

00003c9c <EXTI_FnCallBack_INT1>:
void EXTI_FnCallBack_INT1(pf callback){
    3c9c:	df 93       	push	r29
    3c9e:	cf 93       	push	r28
    3ca0:	00 d0       	rcall	.+0      	; 0x3ca2 <EXTI_FnCallBack_INT1+0x6>
    3ca2:	cd b7       	in	r28, 0x3d	; 61
    3ca4:	de b7       	in	r29, 0x3e	; 62
    3ca6:	9a 83       	std	Y+2, r25	; 0x02
    3ca8:	89 83       	std	Y+1, r24	; 0x01
	PF2_CallBack = callback;
    3caa:	89 81       	ldd	r24, Y+1	; 0x01
    3cac:	9a 81       	ldd	r25, Y+2	; 0x02
    3cae:	90 93 0d 05 	sts	0x050D, r25
    3cb2:	80 93 0c 05 	sts	0x050C, r24
}
    3cb6:	0f 90       	pop	r0
    3cb8:	0f 90       	pop	r0
    3cba:	cf 91       	pop	r28
    3cbc:	df 91       	pop	r29
    3cbe:	08 95       	ret

00003cc0 <EXTI_FnCallBack_INT2>:
void EXTI_FnCallBack_INT2(pf callback){
    3cc0:	df 93       	push	r29
    3cc2:	cf 93       	push	r28
    3cc4:	00 d0       	rcall	.+0      	; 0x3cc6 <EXTI_FnCallBack_INT2+0x6>
    3cc6:	cd b7       	in	r28, 0x3d	; 61
    3cc8:	de b7       	in	r29, 0x3e	; 62
    3cca:	9a 83       	std	Y+2, r25	; 0x02
    3ccc:	89 83       	std	Y+1, r24	; 0x01
	PF3_CallBack = callback;
    3cce:	89 81       	ldd	r24, Y+1	; 0x01
    3cd0:	9a 81       	ldd	r25, Y+2	; 0x02
    3cd2:	90 93 0f 05 	sts	0x050F, r25
    3cd6:	80 93 0e 05 	sts	0x050E, r24
}
    3cda:	0f 90       	pop	r0
    3cdc:	0f 90       	pop	r0
    3cde:	cf 91       	pop	r28
    3ce0:	df 91       	pop	r29
    3ce2:	08 95       	ret

00003ce4 <__vector_1>:

void __vector_1() {
    3ce4:	1f 92       	push	r1
    3ce6:	0f 92       	push	r0
    3ce8:	0f b6       	in	r0, 0x3f	; 63
    3cea:	0f 92       	push	r0
    3cec:	11 24       	eor	r1, r1
    3cee:	2f 93       	push	r18
    3cf0:	3f 93       	push	r19
    3cf2:	4f 93       	push	r20
    3cf4:	5f 93       	push	r21
    3cf6:	6f 93       	push	r22
    3cf8:	7f 93       	push	r23
    3cfa:	8f 93       	push	r24
    3cfc:	9f 93       	push	r25
    3cfe:	af 93       	push	r26
    3d00:	bf 93       	push	r27
    3d02:	ef 93       	push	r30
    3d04:	ff 93       	push	r31
    3d06:	df 93       	push	r29
    3d08:	cf 93       	push	r28
    3d0a:	cd b7       	in	r28, 0x3d	; 61
    3d0c:	de b7       	in	r29, 0x3e	; 62
	PF1_CallBack();
    3d0e:	e0 91 0a 05 	lds	r30, 0x050A
    3d12:	f0 91 0b 05 	lds	r31, 0x050B
    3d16:	09 95       	icall
}
    3d18:	cf 91       	pop	r28
    3d1a:	df 91       	pop	r29
    3d1c:	ff 91       	pop	r31
    3d1e:	ef 91       	pop	r30
    3d20:	bf 91       	pop	r27
    3d22:	af 91       	pop	r26
    3d24:	9f 91       	pop	r25
    3d26:	8f 91       	pop	r24
    3d28:	7f 91       	pop	r23
    3d2a:	6f 91       	pop	r22
    3d2c:	5f 91       	pop	r21
    3d2e:	4f 91       	pop	r20
    3d30:	3f 91       	pop	r19
    3d32:	2f 91       	pop	r18
    3d34:	0f 90       	pop	r0
    3d36:	0f be       	out	0x3f, r0	; 63
    3d38:	0f 90       	pop	r0
    3d3a:	1f 90       	pop	r1
    3d3c:	18 95       	reti

00003d3e <__vector_2>:


void __vector_2() {
    3d3e:	1f 92       	push	r1
    3d40:	0f 92       	push	r0
    3d42:	0f b6       	in	r0, 0x3f	; 63
    3d44:	0f 92       	push	r0
    3d46:	11 24       	eor	r1, r1
    3d48:	2f 93       	push	r18
    3d4a:	3f 93       	push	r19
    3d4c:	4f 93       	push	r20
    3d4e:	5f 93       	push	r21
    3d50:	6f 93       	push	r22
    3d52:	7f 93       	push	r23
    3d54:	8f 93       	push	r24
    3d56:	9f 93       	push	r25
    3d58:	af 93       	push	r26
    3d5a:	bf 93       	push	r27
    3d5c:	ef 93       	push	r30
    3d5e:	ff 93       	push	r31
    3d60:	df 93       	push	r29
    3d62:	cf 93       	push	r28
    3d64:	cd b7       	in	r28, 0x3d	; 61
    3d66:	de b7       	in	r29, 0x3e	; 62
	PF2_CallBack();
    3d68:	e0 91 0c 05 	lds	r30, 0x050C
    3d6c:	f0 91 0d 05 	lds	r31, 0x050D
    3d70:	09 95       	icall
}
    3d72:	cf 91       	pop	r28
    3d74:	df 91       	pop	r29
    3d76:	ff 91       	pop	r31
    3d78:	ef 91       	pop	r30
    3d7a:	bf 91       	pop	r27
    3d7c:	af 91       	pop	r26
    3d7e:	9f 91       	pop	r25
    3d80:	8f 91       	pop	r24
    3d82:	7f 91       	pop	r23
    3d84:	6f 91       	pop	r22
    3d86:	5f 91       	pop	r21
    3d88:	4f 91       	pop	r20
    3d8a:	3f 91       	pop	r19
    3d8c:	2f 91       	pop	r18
    3d8e:	0f 90       	pop	r0
    3d90:	0f be       	out	0x3f, r0	; 63
    3d92:	0f 90       	pop	r0
    3d94:	1f 90       	pop	r1
    3d96:	18 95       	reti

00003d98 <__vector_3>:


void __vector_3() {
    3d98:	1f 92       	push	r1
    3d9a:	0f 92       	push	r0
    3d9c:	0f b6       	in	r0, 0x3f	; 63
    3d9e:	0f 92       	push	r0
    3da0:	11 24       	eor	r1, r1
    3da2:	2f 93       	push	r18
    3da4:	3f 93       	push	r19
    3da6:	4f 93       	push	r20
    3da8:	5f 93       	push	r21
    3daa:	6f 93       	push	r22
    3dac:	7f 93       	push	r23
    3dae:	8f 93       	push	r24
    3db0:	9f 93       	push	r25
    3db2:	af 93       	push	r26
    3db4:	bf 93       	push	r27
    3db6:	ef 93       	push	r30
    3db8:	ff 93       	push	r31
    3dba:	df 93       	push	r29
    3dbc:	cf 93       	push	r28
    3dbe:	cd b7       	in	r28, 0x3d	; 61
    3dc0:	de b7       	in	r29, 0x3e	; 62
	PF3_CallBack();
    3dc2:	e0 91 0e 05 	lds	r30, 0x050E
    3dc6:	f0 91 0f 05 	lds	r31, 0x050F
    3dca:	09 95       	icall
}
    3dcc:	cf 91       	pop	r28
    3dce:	df 91       	pop	r29
    3dd0:	ff 91       	pop	r31
    3dd2:	ef 91       	pop	r30
    3dd4:	bf 91       	pop	r27
    3dd6:	af 91       	pop	r26
    3dd8:	9f 91       	pop	r25
    3dda:	8f 91       	pop	r24
    3ddc:	7f 91       	pop	r23
    3dde:	6f 91       	pop	r22
    3de0:	5f 91       	pop	r21
    3de2:	4f 91       	pop	r20
    3de4:	3f 91       	pop	r19
    3de6:	2f 91       	pop	r18
    3de8:	0f 90       	pop	r0
    3dea:	0f be       	out	0x3f, r0	; 63
    3dec:	0f 90       	pop	r0
    3dee:	1f 90       	pop	r1
    3df0:	18 95       	reti

00003df2 <DIO_voidInit>:
#include "DIO_priv.h"



void DIO_voidInit(void)
{
    3df2:	df 93       	push	r29
    3df4:	cf 93       	push	r28
    3df6:	cd b7       	in	r28, 0x3d	; 61
    3df8:	de b7       	in	r29, 0x3e	; 62
   DDRA = CONC(DIO_PIN_DIR_7 ,DIO_PIN_DIR_6 ,DIO_PIN_DIR_5 ,DIO_PIN_DIR_4 ,DIO_PIN_DIR_3 ,DIO_PIN_DIR_2 ,DIO_PIN_DIR_1 ,DIO_PIN_DIR_0 );
    3dfa:	ea e3       	ldi	r30, 0x3A	; 58
    3dfc:	f0 e0       	ldi	r31, 0x00	; 0
    3dfe:	8f ee       	ldi	r24, 0xEF	; 239
    3e00:	80 83       	st	Z, r24
   DDRB = CONC(DIO_PIN_DIR_15,DIO_PIN_DIR_14,DIO_PIN_DIR_13,DIO_PIN_DIR_12,DIO_PIN_DIR_11,DIO_PIN_DIR_10,DIO_PIN_DIR_9 ,DIO_PIN_DIR_8 );
    3e02:	e7 e3       	ldi	r30, 0x37	; 55
    3e04:	f0 e0       	ldi	r31, 0x00	; 0
    3e06:	8f ef       	ldi	r24, 0xFF	; 255
    3e08:	80 83       	st	Z, r24
   DDRC = CONC(DIO_PIN_DIR_23,DIO_PIN_DIR_22,DIO_PIN_DIR_21,DIO_PIN_DIR_20,DIO_PIN_DIR_19,DIO_PIN_DIR_18,DIO_PIN_DIR_17,DIO_PIN_DIR_16);
    3e0a:	e4 e3       	ldi	r30, 0x34	; 52
    3e0c:	f0 e0       	ldi	r31, 0x00	; 0
    3e0e:	8f ef       	ldi	r24, 0xFF	; 255
    3e10:	80 83       	st	Z, r24
   DDRD = CONC(DIO_PIN_DIR_31,DIO_PIN_DIR_30,DIO_PIN_DIR_29,DIO_PIN_DIR_28,DIO_PIN_DIR_27,DIO_PIN_DIR_26,DIO_PIN_DIR_25,DIO_PIN_DIR_24);
    3e12:	e1 e3       	ldi	r30, 0x31	; 49
    3e14:	f0 e0       	ldi	r31, 0x00	; 0
    3e16:	8f ef       	ldi	r24, 0xFF	; 255
    3e18:	80 83       	st	Z, r24

}
    3e1a:	cf 91       	pop	r28
    3e1c:	df 91       	pop	r29
    3e1e:	08 95       	ret

00003e20 <DIO_vSetPinDir>:
//sets data direction of 1 pin in a port
void DIO_vSetPinDir(u8 Copy_u8PortName, u8 Copy_u8PinNum, u8 Copy_u8PinDir){
    3e20:	df 93       	push	r29
    3e22:	cf 93       	push	r28
    3e24:	cd b7       	in	r28, 0x3d	; 61
    3e26:	de b7       	in	r29, 0x3e	; 62
    3e28:	27 97       	sbiw	r28, 0x07	; 7
    3e2a:	0f b6       	in	r0, 0x3f	; 63
    3e2c:	f8 94       	cli
    3e2e:	de bf       	out	0x3e, r29	; 62
    3e30:	0f be       	out	0x3f, r0	; 63
    3e32:	cd bf       	out	0x3d, r28	; 61
    3e34:	89 83       	std	Y+1, r24	; 0x01
    3e36:	6a 83       	std	Y+2, r22	; 0x02
    3e38:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8PinDir == DIO_OUTPUT)
    3e3a:	8b 81       	ldd	r24, Y+3	; 0x03
    3e3c:	81 30       	cpi	r24, 0x01	; 1
    3e3e:	09 f0       	breq	.+2      	; 0x3e42 <DIO_vSetPinDir+0x22>
    3e40:	6f c0       	rjmp	.+222    	; 0x3f20 <DIO_vSetPinDir+0x100>
	{
		switch(Copy_u8PortName)
    3e42:	89 81       	ldd	r24, Y+1	; 0x01
    3e44:	28 2f       	mov	r18, r24
    3e46:	30 e0       	ldi	r19, 0x00	; 0
    3e48:	3f 83       	std	Y+7, r19	; 0x07
    3e4a:	2e 83       	std	Y+6, r18	; 0x06
    3e4c:	8e 81       	ldd	r24, Y+6	; 0x06
    3e4e:	9f 81       	ldd	r25, Y+7	; 0x07
    3e50:	81 30       	cpi	r24, 0x01	; 1
    3e52:	91 05       	cpc	r25, r1
    3e54:	49 f1       	breq	.+82     	; 0x3ea8 <DIO_vSetPinDir+0x88>
    3e56:	2e 81       	ldd	r18, Y+6	; 0x06
    3e58:	3f 81       	ldd	r19, Y+7	; 0x07
    3e5a:	22 30       	cpi	r18, 0x02	; 2
    3e5c:	31 05       	cpc	r19, r1
    3e5e:	2c f4       	brge	.+10     	; 0x3e6a <DIO_vSetPinDir+0x4a>
    3e60:	8e 81       	ldd	r24, Y+6	; 0x06
    3e62:	9f 81       	ldd	r25, Y+7	; 0x07
    3e64:	00 97       	sbiw	r24, 0x00	; 0
    3e66:	61 f0       	breq	.+24     	; 0x3e80 <DIO_vSetPinDir+0x60>
    3e68:	d2 c0       	rjmp	.+420    	; 0x400e <DIO_vSetPinDir+0x1ee>
    3e6a:	2e 81       	ldd	r18, Y+6	; 0x06
    3e6c:	3f 81       	ldd	r19, Y+7	; 0x07
    3e6e:	22 30       	cpi	r18, 0x02	; 2
    3e70:	31 05       	cpc	r19, r1
    3e72:	71 f1       	breq	.+92     	; 0x3ed0 <DIO_vSetPinDir+0xb0>
    3e74:	8e 81       	ldd	r24, Y+6	; 0x06
    3e76:	9f 81       	ldd	r25, Y+7	; 0x07
    3e78:	83 30       	cpi	r24, 0x03	; 3
    3e7a:	91 05       	cpc	r25, r1
    3e7c:	e9 f1       	breq	.+122    	; 0x3ef8 <DIO_vSetPinDir+0xd8>
    3e7e:	c7 c0       	rjmp	.+398    	; 0x400e <DIO_vSetPinDir+0x1ee>
		{
		case PORTA: SET_BIT(DDRA, Copy_u8PinNum); break;
    3e80:	aa e3       	ldi	r26, 0x3A	; 58
    3e82:	b0 e0       	ldi	r27, 0x00	; 0
    3e84:	ea e3       	ldi	r30, 0x3A	; 58
    3e86:	f0 e0       	ldi	r31, 0x00	; 0
    3e88:	80 81       	ld	r24, Z
    3e8a:	48 2f       	mov	r20, r24
    3e8c:	8a 81       	ldd	r24, Y+2	; 0x02
    3e8e:	28 2f       	mov	r18, r24
    3e90:	30 e0       	ldi	r19, 0x00	; 0
    3e92:	81 e0       	ldi	r24, 0x01	; 1
    3e94:	90 e0       	ldi	r25, 0x00	; 0
    3e96:	02 2e       	mov	r0, r18
    3e98:	02 c0       	rjmp	.+4      	; 0x3e9e <DIO_vSetPinDir+0x7e>
    3e9a:	88 0f       	add	r24, r24
    3e9c:	99 1f       	adc	r25, r25
    3e9e:	0a 94       	dec	r0
    3ea0:	e2 f7       	brpl	.-8      	; 0x3e9a <DIO_vSetPinDir+0x7a>
    3ea2:	84 2b       	or	r24, r20
    3ea4:	8c 93       	st	X, r24
    3ea6:	b3 c0       	rjmp	.+358    	; 0x400e <DIO_vSetPinDir+0x1ee>
		case PORTB: SET_BIT(DDRB, Copy_u8PinNum); break;
    3ea8:	a7 e3       	ldi	r26, 0x37	; 55
    3eaa:	b0 e0       	ldi	r27, 0x00	; 0
    3eac:	e7 e3       	ldi	r30, 0x37	; 55
    3eae:	f0 e0       	ldi	r31, 0x00	; 0
    3eb0:	80 81       	ld	r24, Z
    3eb2:	48 2f       	mov	r20, r24
    3eb4:	8a 81       	ldd	r24, Y+2	; 0x02
    3eb6:	28 2f       	mov	r18, r24
    3eb8:	30 e0       	ldi	r19, 0x00	; 0
    3eba:	81 e0       	ldi	r24, 0x01	; 1
    3ebc:	90 e0       	ldi	r25, 0x00	; 0
    3ebe:	02 2e       	mov	r0, r18
    3ec0:	02 c0       	rjmp	.+4      	; 0x3ec6 <DIO_vSetPinDir+0xa6>
    3ec2:	88 0f       	add	r24, r24
    3ec4:	99 1f       	adc	r25, r25
    3ec6:	0a 94       	dec	r0
    3ec8:	e2 f7       	brpl	.-8      	; 0x3ec2 <DIO_vSetPinDir+0xa2>
    3eca:	84 2b       	or	r24, r20
    3ecc:	8c 93       	st	X, r24
    3ece:	9f c0       	rjmp	.+318    	; 0x400e <DIO_vSetPinDir+0x1ee>
		case PORTC: SET_BIT(DDRC, Copy_u8PinNum); break;
    3ed0:	a4 e3       	ldi	r26, 0x34	; 52
    3ed2:	b0 e0       	ldi	r27, 0x00	; 0
    3ed4:	e4 e3       	ldi	r30, 0x34	; 52
    3ed6:	f0 e0       	ldi	r31, 0x00	; 0
    3ed8:	80 81       	ld	r24, Z
    3eda:	48 2f       	mov	r20, r24
    3edc:	8a 81       	ldd	r24, Y+2	; 0x02
    3ede:	28 2f       	mov	r18, r24
    3ee0:	30 e0       	ldi	r19, 0x00	; 0
    3ee2:	81 e0       	ldi	r24, 0x01	; 1
    3ee4:	90 e0       	ldi	r25, 0x00	; 0
    3ee6:	02 2e       	mov	r0, r18
    3ee8:	02 c0       	rjmp	.+4      	; 0x3eee <DIO_vSetPinDir+0xce>
    3eea:	88 0f       	add	r24, r24
    3eec:	99 1f       	adc	r25, r25
    3eee:	0a 94       	dec	r0
    3ef0:	e2 f7       	brpl	.-8      	; 0x3eea <DIO_vSetPinDir+0xca>
    3ef2:	84 2b       	or	r24, r20
    3ef4:	8c 93       	st	X, r24
    3ef6:	8b c0       	rjmp	.+278    	; 0x400e <DIO_vSetPinDir+0x1ee>
		case PORTD: SET_BIT(DDRD, Copy_u8PinNum); break;
    3ef8:	a1 e3       	ldi	r26, 0x31	; 49
    3efa:	b0 e0       	ldi	r27, 0x00	; 0
    3efc:	e1 e3       	ldi	r30, 0x31	; 49
    3efe:	f0 e0       	ldi	r31, 0x00	; 0
    3f00:	80 81       	ld	r24, Z
    3f02:	48 2f       	mov	r20, r24
    3f04:	8a 81       	ldd	r24, Y+2	; 0x02
    3f06:	28 2f       	mov	r18, r24
    3f08:	30 e0       	ldi	r19, 0x00	; 0
    3f0a:	81 e0       	ldi	r24, 0x01	; 1
    3f0c:	90 e0       	ldi	r25, 0x00	; 0
    3f0e:	02 2e       	mov	r0, r18
    3f10:	02 c0       	rjmp	.+4      	; 0x3f16 <DIO_vSetPinDir+0xf6>
    3f12:	88 0f       	add	r24, r24
    3f14:	99 1f       	adc	r25, r25
    3f16:	0a 94       	dec	r0
    3f18:	e2 f7       	brpl	.-8      	; 0x3f12 <DIO_vSetPinDir+0xf2>
    3f1a:	84 2b       	or	r24, r20
    3f1c:	8c 93       	st	X, r24
    3f1e:	77 c0       	rjmp	.+238    	; 0x400e <DIO_vSetPinDir+0x1ee>
		}
	}
	else if(Copy_u8PinDir == DIO_INPUT)
    3f20:	8b 81       	ldd	r24, Y+3	; 0x03
    3f22:	88 23       	and	r24, r24
    3f24:	09 f0       	breq	.+2      	; 0x3f28 <DIO_vSetPinDir+0x108>
    3f26:	73 c0       	rjmp	.+230    	; 0x400e <DIO_vSetPinDir+0x1ee>
	{
		switch(Copy_u8PortName)
    3f28:	89 81       	ldd	r24, Y+1	; 0x01
    3f2a:	28 2f       	mov	r18, r24
    3f2c:	30 e0       	ldi	r19, 0x00	; 0
    3f2e:	3d 83       	std	Y+5, r19	; 0x05
    3f30:	2c 83       	std	Y+4, r18	; 0x04
    3f32:	8c 81       	ldd	r24, Y+4	; 0x04
    3f34:	9d 81       	ldd	r25, Y+5	; 0x05
    3f36:	81 30       	cpi	r24, 0x01	; 1
    3f38:	91 05       	cpc	r25, r1
    3f3a:	59 f1       	breq	.+86     	; 0x3f92 <DIO_vSetPinDir+0x172>
    3f3c:	2c 81       	ldd	r18, Y+4	; 0x04
    3f3e:	3d 81       	ldd	r19, Y+5	; 0x05
    3f40:	22 30       	cpi	r18, 0x02	; 2
    3f42:	31 05       	cpc	r19, r1
    3f44:	2c f4       	brge	.+10     	; 0x3f50 <DIO_vSetPinDir+0x130>
    3f46:	8c 81       	ldd	r24, Y+4	; 0x04
    3f48:	9d 81       	ldd	r25, Y+5	; 0x05
    3f4a:	00 97       	sbiw	r24, 0x00	; 0
    3f4c:	69 f0       	breq	.+26     	; 0x3f68 <DIO_vSetPinDir+0x148>
    3f4e:	5f c0       	rjmp	.+190    	; 0x400e <DIO_vSetPinDir+0x1ee>
    3f50:	2c 81       	ldd	r18, Y+4	; 0x04
    3f52:	3d 81       	ldd	r19, Y+5	; 0x05
    3f54:	22 30       	cpi	r18, 0x02	; 2
    3f56:	31 05       	cpc	r19, r1
    3f58:	89 f1       	breq	.+98     	; 0x3fbc <DIO_vSetPinDir+0x19c>
    3f5a:	8c 81       	ldd	r24, Y+4	; 0x04
    3f5c:	9d 81       	ldd	r25, Y+5	; 0x05
    3f5e:	83 30       	cpi	r24, 0x03	; 3
    3f60:	91 05       	cpc	r25, r1
    3f62:	09 f4       	brne	.+2      	; 0x3f66 <DIO_vSetPinDir+0x146>
    3f64:	40 c0       	rjmp	.+128    	; 0x3fe6 <DIO_vSetPinDir+0x1c6>
    3f66:	53 c0       	rjmp	.+166    	; 0x400e <DIO_vSetPinDir+0x1ee>
		{
		case PORTA: CLR_BIT(DDRA, Copy_u8PinNum); break;
    3f68:	aa e3       	ldi	r26, 0x3A	; 58
    3f6a:	b0 e0       	ldi	r27, 0x00	; 0
    3f6c:	ea e3       	ldi	r30, 0x3A	; 58
    3f6e:	f0 e0       	ldi	r31, 0x00	; 0
    3f70:	80 81       	ld	r24, Z
    3f72:	48 2f       	mov	r20, r24
    3f74:	8a 81       	ldd	r24, Y+2	; 0x02
    3f76:	28 2f       	mov	r18, r24
    3f78:	30 e0       	ldi	r19, 0x00	; 0
    3f7a:	81 e0       	ldi	r24, 0x01	; 1
    3f7c:	90 e0       	ldi	r25, 0x00	; 0
    3f7e:	02 2e       	mov	r0, r18
    3f80:	02 c0       	rjmp	.+4      	; 0x3f86 <DIO_vSetPinDir+0x166>
    3f82:	88 0f       	add	r24, r24
    3f84:	99 1f       	adc	r25, r25
    3f86:	0a 94       	dec	r0
    3f88:	e2 f7       	brpl	.-8      	; 0x3f82 <DIO_vSetPinDir+0x162>
    3f8a:	80 95       	com	r24
    3f8c:	84 23       	and	r24, r20
    3f8e:	8c 93       	st	X, r24
    3f90:	3e c0       	rjmp	.+124    	; 0x400e <DIO_vSetPinDir+0x1ee>
		case PORTB: CLR_BIT(DDRB, Copy_u8PinNum); break;
    3f92:	a7 e3       	ldi	r26, 0x37	; 55
    3f94:	b0 e0       	ldi	r27, 0x00	; 0
    3f96:	e7 e3       	ldi	r30, 0x37	; 55
    3f98:	f0 e0       	ldi	r31, 0x00	; 0
    3f9a:	80 81       	ld	r24, Z
    3f9c:	48 2f       	mov	r20, r24
    3f9e:	8a 81       	ldd	r24, Y+2	; 0x02
    3fa0:	28 2f       	mov	r18, r24
    3fa2:	30 e0       	ldi	r19, 0x00	; 0
    3fa4:	81 e0       	ldi	r24, 0x01	; 1
    3fa6:	90 e0       	ldi	r25, 0x00	; 0
    3fa8:	02 2e       	mov	r0, r18
    3faa:	02 c0       	rjmp	.+4      	; 0x3fb0 <DIO_vSetPinDir+0x190>
    3fac:	88 0f       	add	r24, r24
    3fae:	99 1f       	adc	r25, r25
    3fb0:	0a 94       	dec	r0
    3fb2:	e2 f7       	brpl	.-8      	; 0x3fac <DIO_vSetPinDir+0x18c>
    3fb4:	80 95       	com	r24
    3fb6:	84 23       	and	r24, r20
    3fb8:	8c 93       	st	X, r24
    3fba:	29 c0       	rjmp	.+82     	; 0x400e <DIO_vSetPinDir+0x1ee>
		case PORTC: CLR_BIT(DDRC, Copy_u8PinNum); break;
    3fbc:	a4 e3       	ldi	r26, 0x34	; 52
    3fbe:	b0 e0       	ldi	r27, 0x00	; 0
    3fc0:	e4 e3       	ldi	r30, 0x34	; 52
    3fc2:	f0 e0       	ldi	r31, 0x00	; 0
    3fc4:	80 81       	ld	r24, Z
    3fc6:	48 2f       	mov	r20, r24
    3fc8:	8a 81       	ldd	r24, Y+2	; 0x02
    3fca:	28 2f       	mov	r18, r24
    3fcc:	30 e0       	ldi	r19, 0x00	; 0
    3fce:	81 e0       	ldi	r24, 0x01	; 1
    3fd0:	90 e0       	ldi	r25, 0x00	; 0
    3fd2:	02 2e       	mov	r0, r18
    3fd4:	02 c0       	rjmp	.+4      	; 0x3fda <DIO_vSetPinDir+0x1ba>
    3fd6:	88 0f       	add	r24, r24
    3fd8:	99 1f       	adc	r25, r25
    3fda:	0a 94       	dec	r0
    3fdc:	e2 f7       	brpl	.-8      	; 0x3fd6 <DIO_vSetPinDir+0x1b6>
    3fde:	80 95       	com	r24
    3fe0:	84 23       	and	r24, r20
    3fe2:	8c 93       	st	X, r24
    3fe4:	14 c0       	rjmp	.+40     	; 0x400e <DIO_vSetPinDir+0x1ee>
		case PORTD: CLR_BIT(DDRD, Copy_u8PinNum); break;
    3fe6:	a1 e3       	ldi	r26, 0x31	; 49
    3fe8:	b0 e0       	ldi	r27, 0x00	; 0
    3fea:	e1 e3       	ldi	r30, 0x31	; 49
    3fec:	f0 e0       	ldi	r31, 0x00	; 0
    3fee:	80 81       	ld	r24, Z
    3ff0:	48 2f       	mov	r20, r24
    3ff2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ff4:	28 2f       	mov	r18, r24
    3ff6:	30 e0       	ldi	r19, 0x00	; 0
    3ff8:	81 e0       	ldi	r24, 0x01	; 1
    3ffa:	90 e0       	ldi	r25, 0x00	; 0
    3ffc:	02 2e       	mov	r0, r18
    3ffe:	02 c0       	rjmp	.+4      	; 0x4004 <DIO_vSetPinDir+0x1e4>
    4000:	88 0f       	add	r24, r24
    4002:	99 1f       	adc	r25, r25
    4004:	0a 94       	dec	r0
    4006:	e2 f7       	brpl	.-8      	; 0x4000 <DIO_vSetPinDir+0x1e0>
    4008:	80 95       	com	r24
    400a:	84 23       	and	r24, r20
    400c:	8c 93       	st	X, r24
		}
	}
}
    400e:	27 96       	adiw	r28, 0x07	; 7
    4010:	0f b6       	in	r0, 0x3f	; 63
    4012:	f8 94       	cli
    4014:	de bf       	out	0x3e, r29	; 62
    4016:	0f be       	out	0x3f, r0	; 63
    4018:	cd bf       	out	0x3d, r28	; 61
    401a:	cf 91       	pop	r28
    401c:	df 91       	pop	r29
    401e:	08 95       	ret

00004020 <DIO_InitCertainPort>:
void DIO_InitCertainPort(u8 PORT)
{
    4020:	df 93       	push	r29
    4022:	cf 93       	push	r28
    4024:	0f 92       	push	r0
    4026:	cd b7       	in	r28, 0x3d	; 61
    4028:	de b7       	in	r29, 0x3e	; 62
    402a:	89 83       	std	Y+1, r24	; 0x01
	if(PORT == ODRA){
    402c:	eb e3       	ldi	r30, 0x3B	; 59
    402e:	f0 e0       	ldi	r31, 0x00	; 0
    4030:	90 81       	ld	r25, Z
    4032:	89 81       	ldd	r24, Y+1	; 0x01
    4034:	98 17       	cp	r25, r24
    4036:	29 f4       	brne	.+10     	; 0x4042 <DIO_InitCertainPort+0x22>
		DDRA = CONC(DIO_PIN_DIR_7 ,DIO_PIN_DIR_6 ,DIO_PIN_DIR_5 ,DIO_PIN_DIR_4 ,DIO_PIN_DIR_3 ,DIO_PIN_DIR_2 ,DIO_PIN_DIR_1 ,DIO_PIN_DIR_0 );
    4038:	ea e3       	ldi	r30, 0x3A	; 58
    403a:	f0 e0       	ldi	r31, 0x00	; 0
    403c:	8f ee       	ldi	r24, 0xEF	; 239
    403e:	80 83       	st	Z, r24
    4040:	20 c0       	rjmp	.+64     	; 0x4082 <DIO_InitCertainPort+0x62>
	}else if(PORT == ODRB){
    4042:	e8 e3       	ldi	r30, 0x38	; 56
    4044:	f0 e0       	ldi	r31, 0x00	; 0
    4046:	90 81       	ld	r25, Z
    4048:	89 81       	ldd	r24, Y+1	; 0x01
    404a:	98 17       	cp	r25, r24
    404c:	29 f4       	brne	.+10     	; 0x4058 <DIO_InitCertainPort+0x38>
		DDRB = CONC(DIO_PIN_DIR_15,DIO_PIN_DIR_14,DIO_PIN_DIR_13,DIO_PIN_DIR_12,DIO_PIN_DIR_11,DIO_PIN_DIR_10,DIO_PIN_DIR_9 ,DIO_PIN_DIR_8 );
    404e:	e7 e3       	ldi	r30, 0x37	; 55
    4050:	f0 e0       	ldi	r31, 0x00	; 0
    4052:	8f ef       	ldi	r24, 0xFF	; 255
    4054:	80 83       	st	Z, r24
    4056:	15 c0       	rjmp	.+42     	; 0x4082 <DIO_InitCertainPort+0x62>
	}else if(PORT == ODRC){
    4058:	e5 e3       	ldi	r30, 0x35	; 53
    405a:	f0 e0       	ldi	r31, 0x00	; 0
    405c:	90 81       	ld	r25, Z
    405e:	89 81       	ldd	r24, Y+1	; 0x01
    4060:	98 17       	cp	r25, r24
    4062:	29 f4       	brne	.+10     	; 0x406e <DIO_InitCertainPort+0x4e>
		DDRC = CONC(DIO_PIN_DIR_23,DIO_PIN_DIR_22,DIO_PIN_DIR_21,DIO_PIN_DIR_20,DIO_PIN_DIR_19,DIO_PIN_DIR_18,DIO_PIN_DIR_17,DIO_PIN_DIR_16);
    4064:	e4 e3       	ldi	r30, 0x34	; 52
    4066:	f0 e0       	ldi	r31, 0x00	; 0
    4068:	8f ef       	ldi	r24, 0xFF	; 255
    406a:	80 83       	st	Z, r24
    406c:	0a c0       	rjmp	.+20     	; 0x4082 <DIO_InitCertainPort+0x62>
	}else if(PORT == ODRD){
    406e:	e2 e3       	ldi	r30, 0x32	; 50
    4070:	f0 e0       	ldi	r31, 0x00	; 0
    4072:	90 81       	ld	r25, Z
    4074:	89 81       	ldd	r24, Y+1	; 0x01
    4076:	98 17       	cp	r25, r24
    4078:	21 f4       	brne	.+8      	; 0x4082 <DIO_InitCertainPort+0x62>
		DDRD = CONC(DIO_PIN_DIR_31,DIO_PIN_DIR_30,DIO_PIN_DIR_29,DIO_PIN_DIR_28,DIO_PIN_DIR_27,DIO_PIN_DIR_26,DIO_PIN_DIR_25,DIO_PIN_DIR_24);
    407a:	e1 e3       	ldi	r30, 0x31	; 49
    407c:	f0 e0       	ldi	r31, 0x00	; 0
    407e:	8f ef       	ldi	r24, 0xFF	; 255
    4080:	80 83       	st	Z, r24
	}
	return;
}
    4082:	0f 90       	pop	r0
    4084:	cf 91       	pop	r28
    4086:	df 91       	pop	r29
    4088:	08 95       	ret

0000408a <DIO_enuWritePin>:



tenuErrorStatus DIO_enuWritePin(u8 u8PinNumCpy,u8 u8PinValueCpy)
{
    408a:	df 93       	push	r29
    408c:	cf 93       	push	r28
    408e:	cd b7       	in	r28, 0x3d	; 61
    4090:	de b7       	in	r29, 0x3e	; 62
    4092:	2b 97       	sbiw	r28, 0x0b	; 11
    4094:	0f b6       	in	r0, 0x3f	; 63
    4096:	f8 94       	cli
    4098:	de bf       	out	0x3e, r29	; 62
    409a:	0f be       	out	0x3f, r0	; 63
    409c:	cd bf       	out	0x3d, r28	; 61
    409e:	8a 83       	std	Y+2, r24	; 0x02
    40a0:	6b 83       	std	Y+3, r22	; 0x03

	tenuErrorStatus enuReturnStateLoc = EOK;
    40a2:	19 82       	std	Y+1, r1	; 0x01
	if (u8PinNumCpy >= DIO_PIN_NUM_0 && u8PinNumCpy <= DIO_PIN_NUM_7)
    40a4:	8a 81       	ldd	r24, Y+2	; 0x02
    40a6:	88 30       	cpi	r24, 0x08	; 8
    40a8:	d8 f5       	brcc	.+118    	; 0x4120 <DIO_enuWritePin+0x96>
	{
		switch (u8PinValueCpy)
    40aa:	8b 81       	ldd	r24, Y+3	; 0x03
    40ac:	28 2f       	mov	r18, r24
    40ae:	30 e0       	ldi	r19, 0x00	; 0
    40b0:	3b 87       	std	Y+11, r19	; 0x0b
    40b2:	2a 87       	std	Y+10, r18	; 0x0a
    40b4:	8a 85       	ldd	r24, Y+10	; 0x0a
    40b6:	9b 85       	ldd	r25, Y+11	; 0x0b
    40b8:	00 97       	sbiw	r24, 0x00	; 0
    40ba:	31 f0       	breq	.+12     	; 0x40c8 <DIO_enuWritePin+0x3e>
    40bc:	2a 85       	ldd	r18, Y+10	; 0x0a
    40be:	3b 85       	ldd	r19, Y+11	; 0x0b
    40c0:	21 30       	cpi	r18, 0x01	; 1
    40c2:	31 05       	cpc	r19, r1
    40c4:	b1 f0       	breq	.+44     	; 0x40f2 <DIO_enuWritePin+0x68>
    40c6:	29 c0       	rjmp	.+82     	; 0x411a <DIO_enuWritePin+0x90>
		{
			case DIO_LOW :
			 CLR_BIT (ODRA ,  u8PinNumCpy);
    40c8:	ab e3       	ldi	r26, 0x3B	; 59
    40ca:	b0 e0       	ldi	r27, 0x00	; 0
    40cc:	eb e3       	ldi	r30, 0x3B	; 59
    40ce:	f0 e0       	ldi	r31, 0x00	; 0
    40d0:	80 81       	ld	r24, Z
    40d2:	48 2f       	mov	r20, r24
    40d4:	8a 81       	ldd	r24, Y+2	; 0x02
    40d6:	28 2f       	mov	r18, r24
    40d8:	30 e0       	ldi	r19, 0x00	; 0
    40da:	81 e0       	ldi	r24, 0x01	; 1
    40dc:	90 e0       	ldi	r25, 0x00	; 0
    40de:	02 2e       	mov	r0, r18
    40e0:	02 c0       	rjmp	.+4      	; 0x40e6 <DIO_enuWritePin+0x5c>
    40e2:	88 0f       	add	r24, r24
    40e4:	99 1f       	adc	r25, r25
    40e6:	0a 94       	dec	r0
    40e8:	e2 f7       	brpl	.-8      	; 0x40e2 <DIO_enuWritePin+0x58>
    40ea:	80 95       	com	r24
    40ec:	84 23       	and	r24, r20
    40ee:	8c 93       	st	X, r24
    40f0:	f8 c0       	rjmp	.+496    	; 0x42e2 <DIO_enuWritePin+0x258>
			break;
			case DIO_HIGH :
			 SET_BIT(ODRA , u8PinNumCpy);
    40f2:	ab e3       	ldi	r26, 0x3B	; 59
    40f4:	b0 e0       	ldi	r27, 0x00	; 0
    40f6:	eb e3       	ldi	r30, 0x3B	; 59
    40f8:	f0 e0       	ldi	r31, 0x00	; 0
    40fa:	80 81       	ld	r24, Z
    40fc:	48 2f       	mov	r20, r24
    40fe:	8a 81       	ldd	r24, Y+2	; 0x02
    4100:	28 2f       	mov	r18, r24
    4102:	30 e0       	ldi	r19, 0x00	; 0
    4104:	81 e0       	ldi	r24, 0x01	; 1
    4106:	90 e0       	ldi	r25, 0x00	; 0
    4108:	02 2e       	mov	r0, r18
    410a:	02 c0       	rjmp	.+4      	; 0x4110 <DIO_enuWritePin+0x86>
    410c:	88 0f       	add	r24, r24
    410e:	99 1f       	adc	r25, r25
    4110:	0a 94       	dec	r0
    4112:	e2 f7       	brpl	.-8      	; 0x410c <DIO_enuWritePin+0x82>
    4114:	84 2b       	or	r24, r20
    4116:	8c 93       	st	X, r24
    4118:	e4 c0       	rjmp	.+456    	; 0x42e2 <DIO_enuWritePin+0x258>
			break ;
			default :
			enuReturnStateLoc = PARAM_OUT_RANGE ;
    411a:	81 e0       	ldi	r24, 0x01	; 1
    411c:	89 83       	std	Y+1, r24	; 0x01
    411e:	e1 c0       	rjmp	.+450    	; 0x42e2 <DIO_enuWritePin+0x258>
		}
	}
	else if (u8PinNumCpy >= DIO_PIN_NUM_8 && u8PinNumCpy <= DIO_PIN_NUM_15)
    4120:	8a 81       	ldd	r24, Y+2	; 0x02
    4122:	88 30       	cpi	r24, 0x08	; 8
    4124:	08 f4       	brcc	.+2      	; 0x4128 <DIO_enuWritePin+0x9e>
    4126:	45 c0       	rjmp	.+138    	; 0x41b2 <DIO_enuWritePin+0x128>
    4128:	8a 81       	ldd	r24, Y+2	; 0x02
    412a:	80 31       	cpi	r24, 0x10	; 16
    412c:	08 f0       	brcs	.+2      	; 0x4130 <DIO_enuWritePin+0xa6>
    412e:	41 c0       	rjmp	.+130    	; 0x41b2 <DIO_enuWritePin+0x128>
	{
		switch (u8PinValueCpy)
    4130:	8b 81       	ldd	r24, Y+3	; 0x03
    4132:	28 2f       	mov	r18, r24
    4134:	30 e0       	ldi	r19, 0x00	; 0
    4136:	39 87       	std	Y+9, r19	; 0x09
    4138:	28 87       	std	Y+8, r18	; 0x08
    413a:	88 85       	ldd	r24, Y+8	; 0x08
    413c:	99 85       	ldd	r25, Y+9	; 0x09
    413e:	00 97       	sbiw	r24, 0x00	; 0
    4140:	31 f0       	breq	.+12     	; 0x414e <DIO_enuWritePin+0xc4>
    4142:	28 85       	ldd	r18, Y+8	; 0x08
    4144:	39 85       	ldd	r19, Y+9	; 0x09
    4146:	21 30       	cpi	r18, 0x01	; 1
    4148:	31 05       	cpc	r19, r1
    414a:	c9 f0       	breq	.+50     	; 0x417e <DIO_enuWritePin+0xf4>
    414c:	2f c0       	rjmp	.+94     	; 0x41ac <DIO_enuWritePin+0x122>
		{
			case DIO_LOW :
			 CLR_BIT (ODRB ,  u8PinNumCpy%8); //0 1 2 3 4 5 6 7 => 8%8 = 0, 9%8 = 1, 10%8 = 2, 11%8 = 3, 12%8 = 4, 13%8 = 5, 14%8 = 6, 15%8 = 7
    414e:	a8 e3       	ldi	r26, 0x38	; 56
    4150:	b0 e0       	ldi	r27, 0x00	; 0
    4152:	e8 e3       	ldi	r30, 0x38	; 56
    4154:	f0 e0       	ldi	r31, 0x00	; 0
    4156:	80 81       	ld	r24, Z
    4158:	48 2f       	mov	r20, r24
    415a:	8a 81       	ldd	r24, Y+2	; 0x02
    415c:	88 2f       	mov	r24, r24
    415e:	90 e0       	ldi	r25, 0x00	; 0
    4160:	9c 01       	movw	r18, r24
    4162:	27 70       	andi	r18, 0x07	; 7
    4164:	30 70       	andi	r19, 0x00	; 0
    4166:	81 e0       	ldi	r24, 0x01	; 1
    4168:	90 e0       	ldi	r25, 0x00	; 0
    416a:	02 2e       	mov	r0, r18
    416c:	02 c0       	rjmp	.+4      	; 0x4172 <DIO_enuWritePin+0xe8>
    416e:	88 0f       	add	r24, r24
    4170:	99 1f       	adc	r25, r25
    4172:	0a 94       	dec	r0
    4174:	e2 f7       	brpl	.-8      	; 0x416e <DIO_enuWritePin+0xe4>
    4176:	80 95       	com	r24
    4178:	84 23       	and	r24, r20
    417a:	8c 93       	st	X, r24
    417c:	b2 c0       	rjmp	.+356    	; 0x42e2 <DIO_enuWritePin+0x258>
			break;
			case DIO_HIGH :
			 SET_BIT(ODRB , u8PinNumCpy%8);
    417e:	a8 e3       	ldi	r26, 0x38	; 56
    4180:	b0 e0       	ldi	r27, 0x00	; 0
    4182:	e8 e3       	ldi	r30, 0x38	; 56
    4184:	f0 e0       	ldi	r31, 0x00	; 0
    4186:	80 81       	ld	r24, Z
    4188:	48 2f       	mov	r20, r24
    418a:	8a 81       	ldd	r24, Y+2	; 0x02
    418c:	88 2f       	mov	r24, r24
    418e:	90 e0       	ldi	r25, 0x00	; 0
    4190:	9c 01       	movw	r18, r24
    4192:	27 70       	andi	r18, 0x07	; 7
    4194:	30 70       	andi	r19, 0x00	; 0
    4196:	81 e0       	ldi	r24, 0x01	; 1
    4198:	90 e0       	ldi	r25, 0x00	; 0
    419a:	02 2e       	mov	r0, r18
    419c:	02 c0       	rjmp	.+4      	; 0x41a2 <DIO_enuWritePin+0x118>
    419e:	88 0f       	add	r24, r24
    41a0:	99 1f       	adc	r25, r25
    41a2:	0a 94       	dec	r0
    41a4:	e2 f7       	brpl	.-8      	; 0x419e <DIO_enuWritePin+0x114>
    41a6:	84 2b       	or	r24, r20
    41a8:	8c 93       	st	X, r24
    41aa:	9b c0       	rjmp	.+310    	; 0x42e2 <DIO_enuWritePin+0x258>
			break ;
			default :
			enuReturnStateLoc = PARAM_OUT_RANGE ;
    41ac:	81 e0       	ldi	r24, 0x01	; 1
    41ae:	89 83       	std	Y+1, r24	; 0x01
    41b0:	98 c0       	rjmp	.+304    	; 0x42e2 <DIO_enuWritePin+0x258>
		}
	}
	else if (u8PinNumCpy >= DIO_PIN_NUM_16 && u8PinNumCpy <= DIO_PIN_NUM_23)
    41b2:	8a 81       	ldd	r24, Y+2	; 0x02
    41b4:	80 31       	cpi	r24, 0x10	; 16
    41b6:	08 f4       	brcc	.+2      	; 0x41ba <DIO_enuWritePin+0x130>
    41b8:	45 c0       	rjmp	.+138    	; 0x4244 <DIO_enuWritePin+0x1ba>
    41ba:	8a 81       	ldd	r24, Y+2	; 0x02
    41bc:	88 31       	cpi	r24, 0x18	; 24
    41be:	08 f0       	brcs	.+2      	; 0x41c2 <DIO_enuWritePin+0x138>
    41c0:	41 c0       	rjmp	.+130    	; 0x4244 <DIO_enuWritePin+0x1ba>
	{
		switch (u8PinValueCpy)
    41c2:	8b 81       	ldd	r24, Y+3	; 0x03
    41c4:	28 2f       	mov	r18, r24
    41c6:	30 e0       	ldi	r19, 0x00	; 0
    41c8:	3f 83       	std	Y+7, r19	; 0x07
    41ca:	2e 83       	std	Y+6, r18	; 0x06
    41cc:	8e 81       	ldd	r24, Y+6	; 0x06
    41ce:	9f 81       	ldd	r25, Y+7	; 0x07
    41d0:	00 97       	sbiw	r24, 0x00	; 0
    41d2:	31 f0       	breq	.+12     	; 0x41e0 <DIO_enuWritePin+0x156>
    41d4:	2e 81       	ldd	r18, Y+6	; 0x06
    41d6:	3f 81       	ldd	r19, Y+7	; 0x07
    41d8:	21 30       	cpi	r18, 0x01	; 1
    41da:	31 05       	cpc	r19, r1
    41dc:	c9 f0       	breq	.+50     	; 0x4210 <DIO_enuWritePin+0x186>
    41de:	2f c0       	rjmp	.+94     	; 0x423e <DIO_enuWritePin+0x1b4>
		{
			case DIO_LOW :
			 CLR_BIT (ODRC ,  u8PinNumCpy%16);
    41e0:	a5 e3       	ldi	r26, 0x35	; 53
    41e2:	b0 e0       	ldi	r27, 0x00	; 0
    41e4:	e5 e3       	ldi	r30, 0x35	; 53
    41e6:	f0 e0       	ldi	r31, 0x00	; 0
    41e8:	80 81       	ld	r24, Z
    41ea:	48 2f       	mov	r20, r24
    41ec:	8a 81       	ldd	r24, Y+2	; 0x02
    41ee:	88 2f       	mov	r24, r24
    41f0:	90 e0       	ldi	r25, 0x00	; 0
    41f2:	9c 01       	movw	r18, r24
    41f4:	2f 70       	andi	r18, 0x0F	; 15
    41f6:	30 70       	andi	r19, 0x00	; 0
    41f8:	81 e0       	ldi	r24, 0x01	; 1
    41fa:	90 e0       	ldi	r25, 0x00	; 0
    41fc:	02 2e       	mov	r0, r18
    41fe:	02 c0       	rjmp	.+4      	; 0x4204 <DIO_enuWritePin+0x17a>
    4200:	88 0f       	add	r24, r24
    4202:	99 1f       	adc	r25, r25
    4204:	0a 94       	dec	r0
    4206:	e2 f7       	brpl	.-8      	; 0x4200 <DIO_enuWritePin+0x176>
    4208:	80 95       	com	r24
    420a:	84 23       	and	r24, r20
    420c:	8c 93       	st	X, r24
    420e:	69 c0       	rjmp	.+210    	; 0x42e2 <DIO_enuWritePin+0x258>
			break;
			case DIO_HIGH :
			 SET_BIT(ODRC , u8PinNumCpy%16);
    4210:	a5 e3       	ldi	r26, 0x35	; 53
    4212:	b0 e0       	ldi	r27, 0x00	; 0
    4214:	e5 e3       	ldi	r30, 0x35	; 53
    4216:	f0 e0       	ldi	r31, 0x00	; 0
    4218:	80 81       	ld	r24, Z
    421a:	48 2f       	mov	r20, r24
    421c:	8a 81       	ldd	r24, Y+2	; 0x02
    421e:	88 2f       	mov	r24, r24
    4220:	90 e0       	ldi	r25, 0x00	; 0
    4222:	9c 01       	movw	r18, r24
    4224:	2f 70       	andi	r18, 0x0F	; 15
    4226:	30 70       	andi	r19, 0x00	; 0
    4228:	81 e0       	ldi	r24, 0x01	; 1
    422a:	90 e0       	ldi	r25, 0x00	; 0
    422c:	02 2e       	mov	r0, r18
    422e:	02 c0       	rjmp	.+4      	; 0x4234 <DIO_enuWritePin+0x1aa>
    4230:	88 0f       	add	r24, r24
    4232:	99 1f       	adc	r25, r25
    4234:	0a 94       	dec	r0
    4236:	e2 f7       	brpl	.-8      	; 0x4230 <DIO_enuWritePin+0x1a6>
    4238:	84 2b       	or	r24, r20
    423a:	8c 93       	st	X, r24
    423c:	52 c0       	rjmp	.+164    	; 0x42e2 <DIO_enuWritePin+0x258>
			break ;
			default :
			enuReturnStateLoc = PARAM_OUT_RANGE ;
    423e:	81 e0       	ldi	r24, 0x01	; 1
    4240:	89 83       	std	Y+1, r24	; 0x01
    4242:	4f c0       	rjmp	.+158    	; 0x42e2 <DIO_enuWritePin+0x258>
		}
	}
	else if (u8PinNumCpy >= DIO_PIN_NUM_24 && u8PinNumCpy <= DIO_PIN_NUM_31)
    4244:	8a 81       	ldd	r24, Y+2	; 0x02
    4246:	88 31       	cpi	r24, 0x18	; 24
    4248:	08 f4       	brcc	.+2      	; 0x424c <DIO_enuWritePin+0x1c2>
    424a:	49 c0       	rjmp	.+146    	; 0x42de <DIO_enuWritePin+0x254>
    424c:	8a 81       	ldd	r24, Y+2	; 0x02
    424e:	80 32       	cpi	r24, 0x20	; 32
    4250:	08 f0       	brcs	.+2      	; 0x4254 <DIO_enuWritePin+0x1ca>
    4252:	45 c0       	rjmp	.+138    	; 0x42de <DIO_enuWritePin+0x254>
	{
		switch (u8PinValueCpy)
    4254:	8b 81       	ldd	r24, Y+3	; 0x03
    4256:	28 2f       	mov	r18, r24
    4258:	30 e0       	ldi	r19, 0x00	; 0
    425a:	3d 83       	std	Y+5, r19	; 0x05
    425c:	2c 83       	std	Y+4, r18	; 0x04
    425e:	8c 81       	ldd	r24, Y+4	; 0x04
    4260:	9d 81       	ldd	r25, Y+5	; 0x05
    4262:	00 97       	sbiw	r24, 0x00	; 0
    4264:	31 f0       	breq	.+12     	; 0x4272 <DIO_enuWritePin+0x1e8>
    4266:	2c 81       	ldd	r18, Y+4	; 0x04
    4268:	3d 81       	ldd	r19, Y+5	; 0x05
    426a:	21 30       	cpi	r18, 0x01	; 1
    426c:	31 05       	cpc	r19, r1
    426e:	d9 f0       	breq	.+54     	; 0x42a6 <DIO_enuWritePin+0x21c>
    4270:	33 c0       	rjmp	.+102    	; 0x42d8 <DIO_enuWritePin+0x24e>
		{
			case DIO_LOW :
			 CLR_BIT (ODRD ,  u8PinNumCpy%24);
    4272:	a2 e3       	ldi	r26, 0x32	; 50
    4274:	b0 e0       	ldi	r27, 0x00	; 0
    4276:	e2 e3       	ldi	r30, 0x32	; 50
    4278:	f0 e0       	ldi	r31, 0x00	; 0
    427a:	80 81       	ld	r24, Z
    427c:	48 2f       	mov	r20, r24
    427e:	8a 81       	ldd	r24, Y+2	; 0x02
    4280:	98 e1       	ldi	r25, 0x18	; 24
    4282:	69 2f       	mov	r22, r25
    4284:	0e 94 53 30 	call	0x60a6	; 0x60a6 <__udivmodqi4>
    4288:	89 2f       	mov	r24, r25
    428a:	28 2f       	mov	r18, r24
    428c:	30 e0       	ldi	r19, 0x00	; 0
    428e:	81 e0       	ldi	r24, 0x01	; 1
    4290:	90 e0       	ldi	r25, 0x00	; 0
    4292:	02 2e       	mov	r0, r18
    4294:	02 c0       	rjmp	.+4      	; 0x429a <DIO_enuWritePin+0x210>
    4296:	88 0f       	add	r24, r24
    4298:	99 1f       	adc	r25, r25
    429a:	0a 94       	dec	r0
    429c:	e2 f7       	brpl	.-8      	; 0x4296 <DIO_enuWritePin+0x20c>
    429e:	80 95       	com	r24
    42a0:	84 23       	and	r24, r20
    42a2:	8c 93       	st	X, r24
    42a4:	1e c0       	rjmp	.+60     	; 0x42e2 <DIO_enuWritePin+0x258>
			break;
			case DIO_HIGH :
			 SET_BIT(ODRD , u8PinNumCpy%24);
    42a6:	a2 e3       	ldi	r26, 0x32	; 50
    42a8:	b0 e0       	ldi	r27, 0x00	; 0
    42aa:	e2 e3       	ldi	r30, 0x32	; 50
    42ac:	f0 e0       	ldi	r31, 0x00	; 0
    42ae:	80 81       	ld	r24, Z
    42b0:	48 2f       	mov	r20, r24
    42b2:	8a 81       	ldd	r24, Y+2	; 0x02
    42b4:	98 e1       	ldi	r25, 0x18	; 24
    42b6:	69 2f       	mov	r22, r25
    42b8:	0e 94 53 30 	call	0x60a6	; 0x60a6 <__udivmodqi4>
    42bc:	89 2f       	mov	r24, r25
    42be:	28 2f       	mov	r18, r24
    42c0:	30 e0       	ldi	r19, 0x00	; 0
    42c2:	81 e0       	ldi	r24, 0x01	; 1
    42c4:	90 e0       	ldi	r25, 0x00	; 0
    42c6:	02 2e       	mov	r0, r18
    42c8:	02 c0       	rjmp	.+4      	; 0x42ce <DIO_enuWritePin+0x244>
    42ca:	88 0f       	add	r24, r24
    42cc:	99 1f       	adc	r25, r25
    42ce:	0a 94       	dec	r0
    42d0:	e2 f7       	brpl	.-8      	; 0x42ca <DIO_enuWritePin+0x240>
    42d2:	84 2b       	or	r24, r20
    42d4:	8c 93       	st	X, r24
    42d6:	05 c0       	rjmp	.+10     	; 0x42e2 <DIO_enuWritePin+0x258>
			break ;
			default :
			enuReturnStateLoc = PARAM_OUT_RANGE ;
    42d8:	81 e0       	ldi	r24, 0x01	; 1
    42da:	89 83       	std	Y+1, r24	; 0x01
    42dc:	02 c0       	rjmp	.+4      	; 0x42e2 <DIO_enuWritePin+0x258>
		}
	}
	else
	{
		enuReturnStateLoc = PARAM_OUT_RANGE ;
    42de:	81 e0       	ldi	r24, 0x01	; 1
    42e0:	89 83       	std	Y+1, r24	; 0x01
	}

	return enuReturnStateLoc ;
    42e2:	89 81       	ldd	r24, Y+1	; 0x01

}
    42e4:	2b 96       	adiw	r28, 0x0b	; 11
    42e6:	0f b6       	in	r0, 0x3f	; 63
    42e8:	f8 94       	cli
    42ea:	de bf       	out	0x3e, r29	; 62
    42ec:	0f be       	out	0x3f, r0	; 63
    42ee:	cd bf       	out	0x3d, r28	; 61
    42f0:	cf 91       	pop	r28
    42f2:	df 91       	pop	r29
    42f4:	08 95       	ret

000042f6 <DIO_enuReadPin>:
//#define GET_BIT(byte,pos) ( (byte >> pos) & 1 )
//4 => 0100 
//GET_BIT(4, 1)     0100 >> 1 = 00010 & 0001 = 0

tenuErrorStatus DIO_enuReadPin(u8 u8PinNumCpy ,u8 *pu8PinValueCpy )
{
    42f6:	df 93       	push	r29
    42f8:	cf 93       	push	r28
    42fa:	00 d0       	rcall	.+0      	; 0x42fc <DIO_enuReadPin+0x6>
    42fc:	00 d0       	rcall	.+0      	; 0x42fe <DIO_enuReadPin+0x8>
    42fe:	cd b7       	in	r28, 0x3d	; 61
    4300:	de b7       	in	r29, 0x3e	; 62
    4302:	8a 83       	std	Y+2, r24	; 0x02
    4304:	7c 83       	std	Y+4, r23	; 0x04
    4306:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus  enuReturnStateLoc = EOK;
    4308:	19 82       	std	Y+1, r1	; 0x01

	if (pu8PinValueCpy != NULL_PTR)
    430a:	8b 81       	ldd	r24, Y+3	; 0x03
    430c:	9c 81       	ldd	r25, Y+4	; 0x04
    430e:	00 97       	sbiw	r24, 0x00	; 0
    4310:	09 f4       	brne	.+2      	; 0x4314 <DIO_enuReadPin+0x1e>
    4312:	71 c0       	rjmp	.+226    	; 0x43f6 <DIO_enuReadPin+0x100>
	{
		//IDR
		if (u8PinNumCpy >= DIO_PIN_NUM_0 && u8PinNumCpy <= DIO_PIN_NUM_7)
    4314:	8a 81       	ldd	r24, Y+2	; 0x02
    4316:	88 30       	cpi	r24, 0x08	; 8
    4318:	a0 f4       	brcc	.+40     	; 0x4342 <DIO_enuReadPin+0x4c>
		{
			*pu8PinValueCpy  = GET_BIT(IDRA , u8PinNumCpy);
    431a:	e9 e3       	ldi	r30, 0x39	; 57
    431c:	f0 e0       	ldi	r31, 0x00	; 0
    431e:	80 81       	ld	r24, Z
    4320:	28 2f       	mov	r18, r24
    4322:	30 e0       	ldi	r19, 0x00	; 0
    4324:	8a 81       	ldd	r24, Y+2	; 0x02
    4326:	88 2f       	mov	r24, r24
    4328:	90 e0       	ldi	r25, 0x00	; 0
    432a:	a9 01       	movw	r20, r18
    432c:	02 c0       	rjmp	.+4      	; 0x4332 <DIO_enuReadPin+0x3c>
    432e:	55 95       	asr	r21
    4330:	47 95       	ror	r20
    4332:	8a 95       	dec	r24
    4334:	e2 f7       	brpl	.-8      	; 0x432e <DIO_enuReadPin+0x38>
    4336:	ca 01       	movw	r24, r20
    4338:	81 70       	andi	r24, 0x01	; 1
    433a:	eb 81       	ldd	r30, Y+3	; 0x03
    433c:	fc 81       	ldd	r31, Y+4	; 0x04
    433e:	80 83       	st	Z, r24
    4340:	5c c0       	rjmp	.+184    	; 0x43fa <DIO_enuReadPin+0x104>
		}
		else if (u8PinNumCpy >= DIO_PIN_NUM_8 && u8PinNumCpy <= DIO_PIN_NUM_15)
    4342:	8a 81       	ldd	r24, Y+2	; 0x02
    4344:	88 30       	cpi	r24, 0x08	; 8
    4346:	c8 f0       	brcs	.+50     	; 0x437a <DIO_enuReadPin+0x84>
    4348:	8a 81       	ldd	r24, Y+2	; 0x02
    434a:	80 31       	cpi	r24, 0x10	; 16
    434c:	b0 f4       	brcc	.+44     	; 0x437a <DIO_enuReadPin+0x84>
		{
			*pu8PinValueCpy  = GET_BIT(IDRB , u8PinNumCpy%8);
    434e:	e6 e3       	ldi	r30, 0x36	; 54
    4350:	f0 e0       	ldi	r31, 0x00	; 0
    4352:	80 81       	ld	r24, Z
    4354:	28 2f       	mov	r18, r24
    4356:	30 e0       	ldi	r19, 0x00	; 0
    4358:	8a 81       	ldd	r24, Y+2	; 0x02
    435a:	88 2f       	mov	r24, r24
    435c:	90 e0       	ldi	r25, 0x00	; 0
    435e:	87 70       	andi	r24, 0x07	; 7
    4360:	90 70       	andi	r25, 0x00	; 0
    4362:	a9 01       	movw	r20, r18
    4364:	02 c0       	rjmp	.+4      	; 0x436a <DIO_enuReadPin+0x74>
    4366:	55 95       	asr	r21
    4368:	47 95       	ror	r20
    436a:	8a 95       	dec	r24
    436c:	e2 f7       	brpl	.-8      	; 0x4366 <DIO_enuReadPin+0x70>
    436e:	ca 01       	movw	r24, r20
    4370:	81 70       	andi	r24, 0x01	; 1
    4372:	eb 81       	ldd	r30, Y+3	; 0x03
    4374:	fc 81       	ldd	r31, Y+4	; 0x04
    4376:	80 83       	st	Z, r24
    4378:	40 c0       	rjmp	.+128    	; 0x43fa <DIO_enuReadPin+0x104>
		}
		else if (u8PinNumCpy >= DIO_PIN_NUM_16 && u8PinNumCpy <= DIO_PIN_NUM_23)
    437a:	8a 81       	ldd	r24, Y+2	; 0x02
    437c:	80 31       	cpi	r24, 0x10	; 16
    437e:	c8 f0       	brcs	.+50     	; 0x43b2 <DIO_enuReadPin+0xbc>
    4380:	8a 81       	ldd	r24, Y+2	; 0x02
    4382:	88 31       	cpi	r24, 0x18	; 24
    4384:	b0 f4       	brcc	.+44     	; 0x43b2 <DIO_enuReadPin+0xbc>
		{
			*pu8PinValueCpy  = GET_BIT(IDRC , u8PinNumCpy%16);
    4386:	e3 e3       	ldi	r30, 0x33	; 51
    4388:	f0 e0       	ldi	r31, 0x00	; 0
    438a:	80 81       	ld	r24, Z
    438c:	28 2f       	mov	r18, r24
    438e:	30 e0       	ldi	r19, 0x00	; 0
    4390:	8a 81       	ldd	r24, Y+2	; 0x02
    4392:	88 2f       	mov	r24, r24
    4394:	90 e0       	ldi	r25, 0x00	; 0
    4396:	8f 70       	andi	r24, 0x0F	; 15
    4398:	90 70       	andi	r25, 0x00	; 0
    439a:	a9 01       	movw	r20, r18
    439c:	02 c0       	rjmp	.+4      	; 0x43a2 <DIO_enuReadPin+0xac>
    439e:	55 95       	asr	r21
    43a0:	47 95       	ror	r20
    43a2:	8a 95       	dec	r24
    43a4:	e2 f7       	brpl	.-8      	; 0x439e <DIO_enuReadPin+0xa8>
    43a6:	ca 01       	movw	r24, r20
    43a8:	81 70       	andi	r24, 0x01	; 1
    43aa:	eb 81       	ldd	r30, Y+3	; 0x03
    43ac:	fc 81       	ldd	r31, Y+4	; 0x04
    43ae:	80 83       	st	Z, r24
    43b0:	24 c0       	rjmp	.+72     	; 0x43fa <DIO_enuReadPin+0x104>
		}
		else if (u8PinNumCpy >= DIO_PIN_NUM_24 && u8PinNumCpy <= DIO_PIN_NUM_31)
    43b2:	8a 81       	ldd	r24, Y+2	; 0x02
    43b4:	88 31       	cpi	r24, 0x18	; 24
    43b6:	e0 f0       	brcs	.+56     	; 0x43f0 <DIO_enuReadPin+0xfa>
    43b8:	8a 81       	ldd	r24, Y+2	; 0x02
    43ba:	80 32       	cpi	r24, 0x20	; 32
    43bc:	c8 f4       	brcc	.+50     	; 0x43f0 <DIO_enuReadPin+0xfa>
		{
			*pu8PinValueCpy  = GET_BIT(IDRD , u8PinNumCpy%24);
    43be:	e0 e3       	ldi	r30, 0x30	; 48
    43c0:	f0 e0       	ldi	r31, 0x00	; 0
    43c2:	80 81       	ld	r24, Z
    43c4:	28 2f       	mov	r18, r24
    43c6:	30 e0       	ldi	r19, 0x00	; 0
    43c8:	8a 81       	ldd	r24, Y+2	; 0x02
    43ca:	98 e1       	ldi	r25, 0x18	; 24
    43cc:	69 2f       	mov	r22, r25
    43ce:	0e 94 53 30 	call	0x60a6	; 0x60a6 <__udivmodqi4>
    43d2:	89 2f       	mov	r24, r25
    43d4:	88 2f       	mov	r24, r24
    43d6:	90 e0       	ldi	r25, 0x00	; 0
    43d8:	a9 01       	movw	r20, r18
    43da:	02 c0       	rjmp	.+4      	; 0x43e0 <DIO_enuReadPin+0xea>
    43dc:	55 95       	asr	r21
    43de:	47 95       	ror	r20
    43e0:	8a 95       	dec	r24
    43e2:	e2 f7       	brpl	.-8      	; 0x43dc <DIO_enuReadPin+0xe6>
    43e4:	ca 01       	movw	r24, r20
    43e6:	81 70       	andi	r24, 0x01	; 1
    43e8:	eb 81       	ldd	r30, Y+3	; 0x03
    43ea:	fc 81       	ldd	r31, Y+4	; 0x04
    43ec:	80 83       	st	Z, r24
    43ee:	05 c0       	rjmp	.+10     	; 0x43fa <DIO_enuReadPin+0x104>
		}
		else
		{
			enuReturnStateLoc = PARAM_OUT_RANGE ;
    43f0:	81 e0       	ldi	r24, 0x01	; 1
    43f2:	89 83       	std	Y+1, r24	; 0x01
    43f4:	02 c0       	rjmp	.+4      	; 0x43fa <DIO_enuReadPin+0x104>
		}
	}
	else
	{
		enuReturnStateLoc = PARAM_NULL_PTR ;
    43f6:	82 e0       	ldi	r24, 0x02	; 2
    43f8:	89 83       	std	Y+1, r24	; 0x01
	}

	return enuReturnStateLoc ;
    43fa:	89 81       	ldd	r24, Y+1	; 0x01

}
    43fc:	0f 90       	pop	r0
    43fe:	0f 90       	pop	r0
    4400:	0f 90       	pop	r0
    4402:	0f 90       	pop	r0
    4404:	cf 91       	pop	r28
    4406:	df 91       	pop	r29
    4408:	08 95       	ret

0000440a <DIO_enuStatePullup>:

tenuErrorStatus DIO_enuStatePullup(u8 u8PinNumCpy, u8 u8StateCpy)
{
    440a:	df 93       	push	r29
    440c:	cf 93       	push	r28
    440e:	00 d0       	rcall	.+0      	; 0x4410 <DIO_enuStatePullup+0x6>
    4410:	cd b7       	in	r28, 0x3d	; 61
    4412:	de b7       	in	r29, 0x3e	; 62
    4414:	89 83       	std	Y+1, r24	; 0x01
    4416:	6a 83       	std	Y+2, r22	; 0x02
   return DIO_enuWritePin(u8PinNumCpy,u8StateCpy);
    4418:	89 81       	ldd	r24, Y+1	; 0x01
    441a:	6a 81       	ldd	r22, Y+2	; 0x02
    441c:	0e 94 45 20 	call	0x408a	; 0x408a <DIO_enuWritePin>
}
    4420:	0f 90       	pop	r0
    4422:	0f 90       	pop	r0
    4424:	cf 91       	pop	r28
    4426:	df 91       	pop	r29
    4428:	08 95       	ret

0000442a <DIO_enuWriteGroup>:



tenuErrorStatus DIO_enuWriteGroup(u8 *pau8PinNumCpy,u8 * pau8PinValueCpy , u8 u8SizeCpy)
{
    442a:	df 93       	push	r29
    442c:	cf 93       	push	r28
    442e:	cd b7       	in	r28, 0x3d	; 61
    4430:	de b7       	in	r29, 0x3e	; 62
    4432:	27 97       	sbiw	r28, 0x07	; 7
    4434:	0f b6       	in	r0, 0x3f	; 63
    4436:	f8 94       	cli
    4438:	de bf       	out	0x3e, r29	; 62
    443a:	0f be       	out	0x3f, r0	; 63
    443c:	cd bf       	out	0x3d, r28	; 61
    443e:	9c 83       	std	Y+4, r25	; 0x04
    4440:	8b 83       	std	Y+3, r24	; 0x03
    4442:	7e 83       	std	Y+6, r23	; 0x06
    4444:	6d 83       	std	Y+5, r22	; 0x05
    4446:	4f 83       	std	Y+7, r20	; 0x07
	tenuErrorStatus enuReturnStateLoc = EOK;
    4448:	1a 82       	std	Y+2, r1	; 0x02
	u8 u8CntrLoc;
	for (u8CntrLoc = 0 ; u8CntrLoc < u8SizeCpy ; u8CntrLoc++)
    444a:	19 82       	std	Y+1, r1	; 0x01
    444c:	1d c0       	rjmp	.+58     	; 0x4488 <DIO_enuWriteGroup+0x5e>
	{
		enuReturnStateLoc = DIO_enuWritePin(pau8PinNumCpy[u8CntrLoc],pau8PinValueCpy[u8CntrLoc]);
    444e:	89 81       	ldd	r24, Y+1	; 0x01
    4450:	28 2f       	mov	r18, r24
    4452:	30 e0       	ldi	r19, 0x00	; 0
    4454:	8b 81       	ldd	r24, Y+3	; 0x03
    4456:	9c 81       	ldd	r25, Y+4	; 0x04
    4458:	fc 01       	movw	r30, r24
    445a:	e2 0f       	add	r30, r18
    445c:	f3 1f       	adc	r31, r19
    445e:	40 81       	ld	r20, Z
    4460:	89 81       	ldd	r24, Y+1	; 0x01
    4462:	28 2f       	mov	r18, r24
    4464:	30 e0       	ldi	r19, 0x00	; 0
    4466:	8d 81       	ldd	r24, Y+5	; 0x05
    4468:	9e 81       	ldd	r25, Y+6	; 0x06
    446a:	fc 01       	movw	r30, r24
    446c:	e2 0f       	add	r30, r18
    446e:	f3 1f       	adc	r31, r19
    4470:	90 81       	ld	r25, Z
    4472:	84 2f       	mov	r24, r20
    4474:	69 2f       	mov	r22, r25
    4476:	0e 94 45 20 	call	0x408a	; 0x408a <DIO_enuWritePin>
    447a:	8a 83       	std	Y+2, r24	; 0x02
		if (enuReturnStateLoc != EOK)
    447c:	8a 81       	ldd	r24, Y+2	; 0x02
    447e:	88 23       	and	r24, r24
    4480:	39 f4       	brne	.+14     	; 0x4490 <DIO_enuWriteGroup+0x66>

tenuErrorStatus DIO_enuWriteGroup(u8 *pau8PinNumCpy,u8 * pau8PinValueCpy , u8 u8SizeCpy)
{
	tenuErrorStatus enuReturnStateLoc = EOK;
	u8 u8CntrLoc;
	for (u8CntrLoc = 0 ; u8CntrLoc < u8SizeCpy ; u8CntrLoc++)
    4482:	89 81       	ldd	r24, Y+1	; 0x01
    4484:	8f 5f       	subi	r24, 0xFF	; 255
    4486:	89 83       	std	Y+1, r24	; 0x01
    4488:	99 81       	ldd	r25, Y+1	; 0x01
    448a:	8f 81       	ldd	r24, Y+7	; 0x07
    448c:	98 17       	cp	r25, r24
    448e:	f8 f2       	brcs	.-66     	; 0x444e <DIO_enuWriteGroup+0x24>
		if (enuReturnStateLoc != EOK)
		{
			break;
		}
	}
	return enuReturnStateLoc;
    4490:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4492:	27 96       	adiw	r28, 0x07	; 7
    4494:	0f b6       	in	r0, 0x3f	; 63
    4496:	f8 94       	cli
    4498:	de bf       	out	0x3e, r29	; 62
    449a:	0f be       	out	0x3f, r0	; 63
    449c:	cd bf       	out	0x3d, r28	; 61
    449e:	cf 91       	pop	r28
    44a0:	df 91       	pop	r29
    44a2:	08 95       	ret

000044a4 <Siren_vInit>:

void __vector_11(void) __attribute__((signal));
static PWM_cfg_t CURRENT_SIREN;
static enu_siren_state CURRENT_STATE;

void Siren_vInit(){
    44a4:	df 93       	push	r29
    44a6:	cf 93       	push	r28
    44a8:	cd b7       	in	r28, 0x3d	; 61
    44aa:	de b7       	in	r29, 0x3e	; 62
#if SIREN_TIMER == SIREN_TIMER0
	/* PWM0 implementation */

	CURRENT_SIREN.PWM_InvertOrNot = PWM_NonInvertingMode;
    44ac:	81 e0       	ldi	r24, 0x01	; 1
    44ae:	80 93 13 05 	sts	0x0513, r24
	CURRENT_SIREN.PWM_TimerChannel = TIMER0_FastPWM;
    44b2:	81 e0       	ldi	r24, 0x01	; 1
    44b4:	80 93 10 05 	sts	0x0510, r24
	CURRENT_SIREN.PWM_TimerPrescale = PRE_64;
    44b8:	83 e0       	ldi	r24, 0x03	; 3
    44ba:	80 93 11 05 	sts	0x0511, r24
	CURRENT_SIREN.PWM_ToggleMode = PWM_OCmode;
    44be:	10 92 12 05 	sts	0x0512, r1
	DIO_vSetPinDir(PORTB, DIO_PIN_NUM_3, DIO_OUTPUT);
    44c2:	81 e0       	ldi	r24, 0x01	; 1
    44c4:	63 e0       	ldi	r22, 0x03	; 3
    44c6:	41 e0       	ldi	r20, 0x01	; 1
    44c8:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <DIO_vSetPinDir>
	PWM_vInit(&CURRENT_SIREN);
    44cc:	80 e1       	ldi	r24, 0x10	; 16
    44ce:	95 e0       	ldi	r25, 0x05	; 5
    44d0:	0e 94 22 16 	call	0x2c44	; 0x2c44 <PWM_vInit>
	TIMSK_REG = (1<<TOIE0);
    44d4:	e9 e5       	ldi	r30, 0x59	; 89
    44d6:	f0 e0       	ldi	r31, 0x00	; 0
    44d8:	81 e0       	ldi	r24, 0x01	; 1
    44da:	80 83       	st	Z, r24
	GIE_Enable();
    44dc:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <GIE_Enable>
	CURRENT_STATE = siren_off;
    44e0:	10 92 14 05 	sts	0x0514, r1

#elif SIREN_TIMER == SIREN_TIMER2
	/* PWM2 implementation */

#endif
}
    44e4:	cf 91       	pop	r28
    44e6:	df 91       	pop	r29
    44e8:	08 95       	ret

000044ea <SIREN_vChangeSound>:

void SIREN_vChangeSound(u16 Copy_u16Frequency){
    44ea:	0f 93       	push	r16
    44ec:	1f 93       	push	r17
    44ee:	df 93       	push	r29
    44f0:	cf 93       	push	r28
    44f2:	00 d0       	rcall	.+0      	; 0x44f4 <SIREN_vChangeSound+0xa>
    44f4:	0f 92       	push	r0
    44f6:	cd b7       	in	r28, 0x3d	; 61
    44f8:	de b7       	in	r29, 0x3e	; 62
    44fa:	9b 83       	std	Y+3, r25	; 0x03
    44fc:	8a 83       	std	Y+2, r24	; 0x02
	u8 prescaler = 1;
    44fe:	81 e0       	ldi	r24, 0x01	; 1
    4500:	89 83       	std	Y+1, r24	; 0x01
	if(siren_off == CURRENT_STATE){
    4502:	80 91 14 05 	lds	r24, 0x0514
    4506:	88 23       	and	r24, r24
    4508:	39 f4       	brne	.+14     	; 0x4518 <SIREN_vChangeSound+0x2e>
		PWM_vStart(&CURRENT_SIREN);
    450a:	80 e1       	ldi	r24, 0x10	; 16
    450c:	95 e0       	ldi	r25, 0x05	; 5
    450e:	0e 94 cb 1a 	call	0x3596	; 0x3596 <PWM_vStart>
		CURRENT_STATE = siren_on;
    4512:	81 e0       	ldi	r24, 0x01	; 1
    4514:	80 93 14 05 	sts	0x0514, r24
	}
#if SIREN_TIMER == SIREN_TIMER0
	OCR0_REG = (u16)(F_CPU / (2 * Copy_u16Frequency * prescaler)) - 1;
    4518:	0c e5       	ldi	r16, 0x5C	; 92
    451a:	10 e0       	ldi	r17, 0x00	; 0
    451c:	89 81       	ldd	r24, Y+1	; 0x01
    451e:	28 2f       	mov	r18, r24
    4520:	30 e0       	ldi	r19, 0x00	; 0
    4522:	8a 81       	ldd	r24, Y+2	; 0x02
    4524:	9b 81       	ldd	r25, Y+3	; 0x03
    4526:	ac 01       	movw	r20, r24
    4528:	24 9f       	mul	r18, r20
    452a:	c0 01       	movw	r24, r0
    452c:	25 9f       	mul	r18, r21
    452e:	90 0d       	add	r25, r0
    4530:	34 9f       	mul	r19, r20
    4532:	90 0d       	add	r25, r0
    4534:	11 24       	eor	r1, r1
    4536:	88 0f       	add	r24, r24
    4538:	99 1f       	adc	r25, r25
    453a:	9c 01       	movw	r18, r24
    453c:	40 e0       	ldi	r20, 0x00	; 0
    453e:	50 e0       	ldi	r21, 0x00	; 0
    4540:	80 e0       	ldi	r24, 0x00	; 0
    4542:	92 e1       	ldi	r25, 0x12	; 18
    4544:	aa e7       	ldi	r26, 0x7A	; 122
    4546:	b0 e0       	ldi	r27, 0x00	; 0
    4548:	bc 01       	movw	r22, r24
    454a:	cd 01       	movw	r24, r26
    454c:	0e 94 5f 30 	call	0x60be	; 0x60be <__udivmodsi4>
    4550:	da 01       	movw	r26, r20
    4552:	c9 01       	movw	r24, r18
    4554:	81 50       	subi	r24, 0x01	; 1
    4556:	f8 01       	movw	r30, r16
    4558:	80 83       	st	Z, r24

#elif SIREN_TIMER == SIREN_TIMER2
	/* PWM2 implementation */

#endif
}
    455a:	0f 90       	pop	r0
    455c:	0f 90       	pop	r0
    455e:	0f 90       	pop	r0
    4560:	cf 91       	pop	r28
    4562:	df 91       	pop	r29
    4564:	1f 91       	pop	r17
    4566:	0f 91       	pop	r16
    4568:	08 95       	ret

0000456a <SIREN_vStop>:

void SIREN_vStop(){
    456a:	df 93       	push	r29
    456c:	cf 93       	push	r28
    456e:	cd b7       	in	r28, 0x3d	; 61
    4570:	de b7       	in	r29, 0x3e	; 62
#if SIREN_TIMER == SIREN_TIMER0
	PWM_vStop(&CURRENT_SIREN);
    4572:	80 e1       	ldi	r24, 0x10	; 16
    4574:	95 e0       	ldi	r25, 0x05	; 5
    4576:	0e 94 8c 1c 	call	0x3918	; 0x3918 <PWM_vStop>
	CURRENT_STATE = siren_off;
    457a:	10 92 14 05 	sts	0x0514, r1

#elif SIREN_TIMER == SIREN_TIMER2
	/* PWM2 implementation */

#endif
}
    457e:	cf 91       	pop	r28
    4580:	df 91       	pop	r29
    4582:	08 95       	ret

00004584 <__vector_11>:

/* TIMER0 OVF ISR */
void __vector_11(void){
    4584:	1f 92       	push	r1
    4586:	0f 92       	push	r0
    4588:	0f b6       	in	r0, 0x3f	; 63
    458a:	0f 92       	push	r0
    458c:	11 24       	eor	r1, r1
    458e:	8f 93       	push	r24
    4590:	9f 93       	push	r25
    4592:	af 93       	push	r26
    4594:	bf 93       	push	r27
    4596:	ef 93       	push	r30
    4598:	ff 93       	push	r31
    459a:	df 93       	push	r29
    459c:	cf 93       	push	r28
    459e:	cd b7       	in	r28, 0x3d	; 61
    45a0:	de b7       	in	r29, 0x3e	; 62
	TOGGLE_BIT(ODRB, DIO_PIN_NUM_3);
    45a2:	a8 e3       	ldi	r26, 0x38	; 56
    45a4:	b0 e0       	ldi	r27, 0x00	; 0
    45a6:	e8 e3       	ldi	r30, 0x38	; 56
    45a8:	f0 e0       	ldi	r31, 0x00	; 0
    45aa:	90 81       	ld	r25, Z
    45ac:	88 e0       	ldi	r24, 0x08	; 8
    45ae:	89 27       	eor	r24, r25
    45b0:	8c 93       	st	X, r24
}
    45b2:	cf 91       	pop	r28
    45b4:	df 91       	pop	r29
    45b6:	ff 91       	pop	r31
    45b8:	ef 91       	pop	r30
    45ba:	bf 91       	pop	r27
    45bc:	af 91       	pop	r26
    45be:	9f 91       	pop	r25
    45c0:	8f 91       	pop	r24
    45c2:	0f 90       	pop	r0
    45c4:	0f be       	out	0x3f, r0	; 63
    45c6:	0f 90       	pop	r0
    45c8:	1f 90       	pop	r1
    45ca:	18 95       	reti

000045cc <SERVO_vInit>:
 */


#include "SERVO_prog.h"

void SERVO_vInit(const SERVO_PWM_cfg_t * Servo_PWM){
    45cc:	df 93       	push	r29
    45ce:	cf 93       	push	r28
    45d0:	00 d0       	rcall	.+0      	; 0x45d2 <SERVO_vInit+0x6>
    45d2:	cd b7       	in	r28, 0x3d	; 61
    45d4:	de b7       	in	r29, 0x3e	; 62
    45d6:	9a 83       	std	Y+2, r25	; 0x02
    45d8:	89 83       	std	Y+1, r24	; 0x01
	if(Servo_PWM != NULL){
    45da:	89 81       	ldd	r24, Y+1	; 0x01
    45dc:	9a 81       	ldd	r25, Y+2	; 0x02
    45de:	00 97       	sbiw	r24, 0x00	; 0
    45e0:	41 f1       	breq	.+80     	; 0x4632 <SERVO_vInit+0x66>
		PWM_vInit(&(Servo_PWM->ServoPWM));
    45e2:	89 81       	ldd	r24, Y+1	; 0x01
    45e4:	9a 81       	ldd	r25, Y+2	; 0x02
    45e6:	0e 94 22 16 	call	0x2c44	; 0x2c44 <PWM_vInit>
		if( (Servo_PWM->ServoPWM.PWM_TimerChannel == TIMER1_PhaseFreqICR) || (Servo_PWM->ServoPWM.PWM_TimerChannel == TIMER1_PhaseICR) || (Servo_PWM->ServoPWM.PWM_TimerChannel == TIMER1_FastICR) ){
    45ea:	e9 81       	ldd	r30, Y+1	; 0x01
    45ec:	fa 81       	ldd	r31, Y+2	; 0x02
    45ee:	80 81       	ld	r24, Z
    45f0:	88 30       	cpi	r24, 0x08	; 8
    45f2:	51 f0       	breq	.+20     	; 0x4608 <SERVO_vInit+0x3c>
    45f4:	e9 81       	ldd	r30, Y+1	; 0x01
    45f6:	fa 81       	ldd	r31, Y+2	; 0x02
    45f8:	80 81       	ld	r24, Z
    45fa:	8a 30       	cpi	r24, 0x0A	; 10
    45fc:	29 f0       	breq	.+10     	; 0x4608 <SERVO_vInit+0x3c>
    45fe:	e9 81       	ldd	r30, Y+1	; 0x01
    4600:	fa 81       	ldd	r31, Y+2	; 0x02
    4602:	80 81       	ld	r24, Z
    4604:	8c 30       	cpi	r24, 0x0C	; 12
    4606:	49 f4       	brne	.+18     	; 0x461a <SERVO_vInit+0x4e>
			PWM_vSetICR(&(Servo_PWM->ServoPWM), Servo_PWM->ICR_Value);
    4608:	89 81       	ldd	r24, Y+1	; 0x01
    460a:	9a 81       	ldd	r25, Y+2	; 0x02
    460c:	e9 81       	ldd	r30, Y+1	; 0x01
    460e:	fa 81       	ldd	r31, Y+2	; 0x02
    4610:	25 81       	ldd	r18, Z+5	; 0x05
    4612:	36 81       	ldd	r19, Z+6	; 0x06
    4614:	b9 01       	movw	r22, r18
    4616:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <PWM_vSetICR>
		}
		SERVO_vChangeDirection(Servo_PWM, Servo_PWM->ServoInitialDirection);
    461a:	e9 81       	ldd	r30, Y+1	; 0x01
    461c:	fa 81       	ldd	r31, Y+2	; 0x02
    461e:	24 81       	ldd	r18, Z+4	; 0x04
    4620:	89 81       	ldd	r24, Y+1	; 0x01
    4622:	9a 81       	ldd	r25, Y+2	; 0x02
    4624:	62 2f       	mov	r22, r18
    4626:	0e 94 1e 23 	call	0x463c	; 0x463c <SERVO_vChangeDirection>
		PWM_vStart(&(Servo_PWM->ServoPWM));
    462a:	89 81       	ldd	r24, Y+1	; 0x01
    462c:	9a 81       	ldd	r25, Y+2	; 0x02
    462e:	0e 94 cb 1a 	call	0x3596	; 0x3596 <PWM_vStart>
	}
}
    4632:	0f 90       	pop	r0
    4634:	0f 90       	pop	r0
    4636:	cf 91       	pop	r28
    4638:	df 91       	pop	r29
    463a:	08 95       	ret

0000463c <SERVO_vChangeDirection>:

void SERVO_vChangeDirection(const SERVO_PWM_cfg_t *Servo_PWM, enu_servoDirections Copy_enuDirection){
    463c:	df 93       	push	r29
    463e:	cf 93       	push	r28
    4640:	00 d0       	rcall	.+0      	; 0x4642 <SERVO_vChangeDirection+0x6>
    4642:	00 d0       	rcall	.+0      	; 0x4644 <SERVO_vChangeDirection+0x8>
    4644:	0f 92       	push	r0
    4646:	cd b7       	in	r28, 0x3d	; 61
    4648:	de b7       	in	r29, 0x3e	; 62
    464a:	9a 83       	std	Y+2, r25	; 0x02
    464c:	89 83       	std	Y+1, r24	; 0x01
    464e:	6b 83       	std	Y+3, r22	; 0x03
	switch(Copy_enuDirection){
    4650:	8b 81       	ldd	r24, Y+3	; 0x03
    4652:	28 2f       	mov	r18, r24
    4654:	30 e0       	ldi	r19, 0x00	; 0
    4656:	3d 83       	std	Y+5, r19	; 0x05
    4658:	2c 83       	std	Y+4, r18	; 0x04
    465a:	8c 81       	ldd	r24, Y+4	; 0x04
    465c:	9d 81       	ldd	r25, Y+5	; 0x05
    465e:	81 30       	cpi	r24, 0x01	; 1
    4660:	91 05       	cpc	r25, r1
    4662:	99 f0       	breq	.+38     	; 0x468a <SERVO_vChangeDirection+0x4e>
    4664:	2c 81       	ldd	r18, Y+4	; 0x04
    4666:	3d 81       	ldd	r19, Y+5	; 0x05
    4668:	22 30       	cpi	r18, 0x02	; 2
    466a:	31 05       	cpc	r19, r1
    466c:	c1 f0       	breq	.+48     	; 0x469e <SERVO_vChangeDirection+0x62>
    466e:	8c 81       	ldd	r24, Y+4	; 0x04
    4670:	9d 81       	ldd	r25, Y+5	; 0x05
    4672:	00 97       	sbiw	r24, 0x00	; 0
    4674:	e9 f4       	brne	.+58     	; 0x46b0 <SERVO_vChangeDirection+0x74>
	case SERVO_0:
		PWM_vSetOCR(&(Servo_PWM->ServoPWM), Servo_PWM->OCR_0degree_Value);
    4676:	89 81       	ldd	r24, Y+1	; 0x01
    4678:	9a 81       	ldd	r25, Y+2	; 0x02
    467a:	e9 81       	ldd	r30, Y+1	; 0x01
    467c:	fa 81       	ldd	r31, Y+2	; 0x02
    467e:	27 81       	ldd	r18, Z+7	; 0x07
    4680:	30 85       	ldd	r19, Z+8	; 0x08
    4682:	b9 01       	movw	r22, r18
    4684:	0e 94 87 1a 	call	0x350e	; 0x350e <PWM_vSetOCR>
    4688:	13 c0       	rjmp	.+38     	; 0x46b0 <SERVO_vChangeDirection+0x74>
		break;
	case SERVO_90:
		PWM_vSetOCR(&(Servo_PWM->ServoPWM), Servo_PWM->OCR_90degree_Value);
    468a:	89 81       	ldd	r24, Y+1	; 0x01
    468c:	9a 81       	ldd	r25, Y+2	; 0x02
    468e:	e9 81       	ldd	r30, Y+1	; 0x01
    4690:	fa 81       	ldd	r31, Y+2	; 0x02
    4692:	21 85       	ldd	r18, Z+9	; 0x09
    4694:	32 85       	ldd	r19, Z+10	; 0x0a
    4696:	b9 01       	movw	r22, r18
    4698:	0e 94 87 1a 	call	0x350e	; 0x350e <PWM_vSetOCR>
    469c:	09 c0       	rjmp	.+18     	; 0x46b0 <SERVO_vChangeDirection+0x74>
		break;
	case SERVO_180:
		PWM_vSetOCR(&(Servo_PWM->ServoPWM), Servo_PWM->OCR_180degree_Value);
    469e:	89 81       	ldd	r24, Y+1	; 0x01
    46a0:	9a 81       	ldd	r25, Y+2	; 0x02
    46a2:	e9 81       	ldd	r30, Y+1	; 0x01
    46a4:	fa 81       	ldd	r31, Y+2	; 0x02
    46a6:	23 85       	ldd	r18, Z+11	; 0x0b
    46a8:	34 85       	ldd	r19, Z+12	; 0x0c
    46aa:	b9 01       	movw	r22, r18
    46ac:	0e 94 87 1a 	call	0x350e	; 0x350e <PWM_vSetOCR>
		break;
	default: /* Do Nothing */ break;
	}
}
    46b0:	0f 90       	pop	r0
    46b2:	0f 90       	pop	r0
    46b4:	0f 90       	pop	r0
    46b6:	0f 90       	pop	r0
    46b8:	0f 90       	pop	r0
    46ba:	cf 91       	pop	r28
    46bc:	df 91       	pop	r29
    46be:	08 95       	ret

000046c0 <SERVO_vStart>:

void SERVO_vStart(const SERVO_PWM_cfg_t *Servo_PWM){
    46c0:	df 93       	push	r29
    46c2:	cf 93       	push	r28
    46c4:	00 d0       	rcall	.+0      	; 0x46c6 <SERVO_vStart+0x6>
    46c6:	cd b7       	in	r28, 0x3d	; 61
    46c8:	de b7       	in	r29, 0x3e	; 62
    46ca:	9a 83       	std	Y+2, r25	; 0x02
    46cc:	89 83       	std	Y+1, r24	; 0x01
	PWM_vStart(&(Servo_PWM->ServoPWM));
    46ce:	89 81       	ldd	r24, Y+1	; 0x01
    46d0:	9a 81       	ldd	r25, Y+2	; 0x02
    46d2:	0e 94 cb 1a 	call	0x3596	; 0x3596 <PWM_vStart>
}
    46d6:	0f 90       	pop	r0
    46d8:	0f 90       	pop	r0
    46da:	cf 91       	pop	r28
    46dc:	df 91       	pop	r29
    46de:	08 95       	ret

000046e0 <SERVO_vStop>:

void SERVO_vStop(const SERVO_PWM_cfg_t *Servo_PWM){
    46e0:	df 93       	push	r29
    46e2:	cf 93       	push	r28
    46e4:	00 d0       	rcall	.+0      	; 0x46e6 <SERVO_vStop+0x6>
    46e6:	cd b7       	in	r28, 0x3d	; 61
    46e8:	de b7       	in	r29, 0x3e	; 62
    46ea:	9a 83       	std	Y+2, r25	; 0x02
    46ec:	89 83       	std	Y+1, r24	; 0x01
	PWM_vStop(&(Servo_PWM->ServoPWM));
    46ee:	89 81       	ldd	r24, Y+1	; 0x01
    46f0:	9a 81       	ldd	r25, Y+2	; 0x02
    46f2:	0e 94 8c 1c 	call	0x3918	; 0x3918 <PWM_vStop>
}
    46f6:	0f 90       	pop	r0
    46f8:	0f 90       	pop	r0
    46fa:	cf 91       	pop	r28
    46fc:	df 91       	pop	r29
    46fe:	08 95       	ret

00004700 <Lcd_Init>:
static void Lcd_SendData(u8 data);
#if LCD_MODE == LCD_MODE_4_BIT
static void Lcd_Enter_4Bit_Mode(void);
#endif

void Lcd_Init(const Lcd_DisplayControlType* control) {
    4700:	df 93       	push	r29
    4702:	cf 93       	push	r28
    4704:	00 d0       	rcall	.+0      	; 0x4706 <Lcd_Init+0x6>
    4706:	cd b7       	in	r28, 0x3d	; 61
    4708:	de b7       	in	r29, 0x3e	; 62
    470a:	9a 83       	std	Y+2, r25	; 0x02
    470c:	89 83       	std	Y+1, r24	; 0x01
#if LCD_MODE == LCD_MODE_4_BIT
    Lcd_Enter_4Bit_Mode();
#endif

    Lcd_ControlDisplay(control);
    470e:	89 81       	ldd	r24, Y+1	; 0x01
    4710:	9a 81       	ldd	r25, Y+2	; 0x02
    4712:	0e 94 58 28 	call	0x50b0	; 0x50b0 <Lcd_ControlDisplay>

   /* Display Clear */
   Lcd_SendCommand(0b00000001);
    4716:	81 e0       	ldi	r24, 0x01	; 1
    4718:	0e 94 62 29 	call	0x52c4	; 0x52c4 <Lcd_SendCommand>
}
    471c:	0f 90       	pop	r0
    471e:	0f 90       	pop	r0
    4720:	cf 91       	pop	r28
    4722:	df 91       	pop	r29
    4724:	08 95       	ret

00004726 <Lcd_DisplayCharcter>:


void Lcd_DisplayCharcter(char data) {
    4726:	df 93       	push	r29
    4728:	cf 93       	push	r28
    472a:	0f 92       	push	r0
    472c:	cd b7       	in	r28, 0x3d	; 61
    472e:	de b7       	in	r29, 0x3e	; 62
    4730:	89 83       	std	Y+1, r24	; 0x01
    Lcd_SendData(data);
    4732:	89 81       	ldd	r24, Y+1	; 0x01
    4734:	0e 94 04 2a 	call	0x5408	; 0x5408 <Lcd_SendData>
}
    4738:	0f 90       	pop	r0
    473a:	cf 91       	pop	r28
    473c:	df 91       	pop	r29
    473e:	08 95       	ret

00004740 <Lcd_DisplayString>:

void Lcd_DisplayString(const char* str) {
    4740:	df 93       	push	r29
    4742:	cf 93       	push	r28
    4744:	00 d0       	rcall	.+0      	; 0x4746 <Lcd_DisplayString+0x6>
    4746:	00 d0       	rcall	.+0      	; 0x4748 <Lcd_DisplayString+0x8>
    4748:	cd b7       	in	r28, 0x3d	; 61
    474a:	de b7       	in	r29, 0x3e	; 62
    474c:	9c 83       	std	Y+4, r25	; 0x04
    474e:	8b 83       	std	Y+3, r24	; 0x03
	int i = 0;
    4750:	1a 82       	std	Y+2, r1	; 0x02
    4752:	19 82       	std	Y+1, r1	; 0x01
    4754:	0f c0       	rjmp	.+30     	; 0x4774 <Lcd_DisplayString+0x34>
    while (str[i] != '\0') {
        Lcd_SendData(str[i]);
    4756:	29 81       	ldd	r18, Y+1	; 0x01
    4758:	3a 81       	ldd	r19, Y+2	; 0x02
    475a:	8b 81       	ldd	r24, Y+3	; 0x03
    475c:	9c 81       	ldd	r25, Y+4	; 0x04
    475e:	fc 01       	movw	r30, r24
    4760:	e2 0f       	add	r30, r18
    4762:	f3 1f       	adc	r31, r19
    4764:	80 81       	ld	r24, Z
    4766:	0e 94 04 2a 	call	0x5408	; 0x5408 <Lcd_SendData>
        i++;
    476a:	89 81       	ldd	r24, Y+1	; 0x01
    476c:	9a 81       	ldd	r25, Y+2	; 0x02
    476e:	01 96       	adiw	r24, 0x01	; 1
    4770:	9a 83       	std	Y+2, r25	; 0x02
    4772:	89 83       	std	Y+1, r24	; 0x01
    Lcd_SendData(data);
}

void Lcd_DisplayString(const char* str) {
	int i = 0;
    while (str[i] != '\0') {
    4774:	29 81       	ldd	r18, Y+1	; 0x01
    4776:	3a 81       	ldd	r19, Y+2	; 0x02
    4778:	8b 81       	ldd	r24, Y+3	; 0x03
    477a:	9c 81       	ldd	r25, Y+4	; 0x04
    477c:	fc 01       	movw	r30, r24
    477e:	e2 0f       	add	r30, r18
    4780:	f3 1f       	adc	r31, r19
    4782:	80 81       	ld	r24, Z
    4784:	88 23       	and	r24, r24
    4786:	39 f7       	brne	.-50     	; 0x4756 <Lcd_DisplayString+0x16>
        Lcd_SendData(str[i]);
        i++;
    }
}
    4788:	0f 90       	pop	r0
    478a:	0f 90       	pop	r0
    478c:	0f 90       	pop	r0
    478e:	0f 90       	pop	r0
    4790:	cf 91       	pop	r28
    4792:	df 91       	pop	r29
    4794:	08 95       	ret

00004796 <Lcd_DisplayNumber>:

void Lcd_DisplayNumber(s32 number) {
    4796:	af 92       	push	r10
    4798:	bf 92       	push	r11
    479a:	cf 92       	push	r12
    479c:	df 92       	push	r13
    479e:	ef 92       	push	r14
    47a0:	ff 92       	push	r15
    47a2:	0f 93       	push	r16
    47a4:	1f 93       	push	r17
    47a6:	df 93       	push	r29
    47a8:	cf 93       	push	r28
    47aa:	cd b7       	in	r28, 0x3d	; 61
    47ac:	de b7       	in	r29, 0x3e	; 62
    47ae:	c3 56       	subi	r28, 0x63	; 99
    47b0:	d0 40       	sbci	r29, 0x00	; 0
    47b2:	0f b6       	in	r0, 0x3f	; 63
    47b4:	f8 94       	cli
    47b6:	de bf       	out	0x3e, r29	; 62
    47b8:	0f be       	out	0x3f, r0	; 63
    47ba:	cd bf       	out	0x3d, r28	; 61
    47bc:	6a 87       	std	Y+10, r22	; 0x0a
    47be:	7b 87       	std	Y+11, r23	; 0x0b
    47c0:	8c 87       	std	Y+12, r24	; 0x0c
    47c2:	9d 87       	std	Y+13, r25	; 0x0d
    u64 reversed = 0;
    47c4:	1a 82       	std	Y+2, r1	; 0x02
    47c6:	1b 82       	std	Y+3, r1	; 0x03
    47c8:	1c 82       	std	Y+4, r1	; 0x04
    47ca:	1d 82       	std	Y+5, r1	; 0x05
    47cc:	1e 82       	std	Y+6, r1	; 0x06
    47ce:	1f 82       	std	Y+7, r1	; 0x07
    47d0:	18 86       	std	Y+8, r1	; 0x08
    47d2:	19 86       	std	Y+9, r1	; 0x09
    u8 digitsCounter = 0;
    47d4:	19 82       	std	Y+1, r1	; 0x01
    if (number < 0) {
    47d6:	8a 85       	ldd	r24, Y+10	; 0x0a
    47d8:	9b 85       	ldd	r25, Y+11	; 0x0b
    47da:	ac 85       	ldd	r26, Y+12	; 0x0c
    47dc:	bd 85       	ldd	r27, Y+13	; 0x0d
    47de:	bb 23       	and	r27, r27
    47e0:	94 f4       	brge	.+36     	; 0x4806 <Lcd_DisplayNumber+0x70>
        number = number * -1;
    47e2:	8a 85       	ldd	r24, Y+10	; 0x0a
    47e4:	9b 85       	ldd	r25, Y+11	; 0x0b
    47e6:	ac 85       	ldd	r26, Y+12	; 0x0c
    47e8:	bd 85       	ldd	r27, Y+13	; 0x0d
    47ea:	b0 95       	com	r27
    47ec:	a0 95       	com	r26
    47ee:	90 95       	com	r25
    47f0:	81 95       	neg	r24
    47f2:	9f 4f       	sbci	r25, 0xFF	; 255
    47f4:	af 4f       	sbci	r26, 0xFF	; 255
    47f6:	bf 4f       	sbci	r27, 0xFF	; 255
    47f8:	8a 87       	std	Y+10, r24	; 0x0a
    47fa:	9b 87       	std	Y+11, r25	; 0x0b
    47fc:	ac 87       	std	Y+12, r26	; 0x0c
    47fe:	bd 87       	std	Y+13, r27	; 0x0d
        Lcd_SendData('-');
    4800:	8d e2       	ldi	r24, 0x2D	; 45
    4802:	0e 94 04 2a 	call	0x5408	; 0x5408 <Lcd_SendData>
    }
    do {
        reversed = (reversed*10) + (number%10);
    4806:	2a 81       	ldd	r18, Y+2	; 0x02
    4808:	3b 81       	ldd	r19, Y+3	; 0x03
    480a:	4c 81       	ldd	r20, Y+4	; 0x04
    480c:	5d 81       	ldd	r21, Y+5	; 0x05
    480e:	6e 81       	ldd	r22, Y+6	; 0x06
    4810:	7f 81       	ldd	r23, Y+7	; 0x07
    4812:	88 85       	ldd	r24, Y+8	; 0x08
    4814:	99 85       	ldd	r25, Y+9	; 0x09
    4816:	a2 2e       	mov	r10, r18
    4818:	b3 2e       	mov	r11, r19
    481a:	c4 2e       	mov	r12, r20
    481c:	d5 2e       	mov	r13, r21
    481e:	e6 2e       	mov	r14, r22
    4820:	f7 2e       	mov	r15, r23
    4822:	08 2f       	mov	r16, r24
    4824:	19 2f       	mov	r17, r25
    4826:	2a 2d       	mov	r18, r10
    4828:	3b 2d       	mov	r19, r11
    482a:	4c 2d       	mov	r20, r12
    482c:	5d 2d       	mov	r21, r13
    482e:	6e 2d       	mov	r22, r14
    4830:	7f 2d       	mov	r23, r15
    4832:	80 2f       	mov	r24, r16
    4834:	91 2f       	mov	r25, r17
    4836:	01 e0       	ldi	r16, 0x01	; 1
    4838:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    483c:	2e 8f       	std	Y+30, r18	; 0x1e
    483e:	3f 8f       	std	Y+31, r19	; 0x1f
    4840:	48 a3       	std	Y+32, r20	; 0x20
    4842:	59 a3       	std	Y+33, r21	; 0x21
    4844:	6a a3       	std	Y+34, r22	; 0x22
    4846:	7b a3       	std	Y+35, r23	; 0x23
    4848:	8c a3       	std	Y+36, r24	; 0x24
    484a:	9d a3       	std	Y+37, r25	; 0x25
    484c:	2e 8d       	ldd	r18, Y+30	; 0x1e
    484e:	3f 8d       	ldd	r19, Y+31	; 0x1f
    4850:	48 a1       	ldd	r20, Y+32	; 0x20
    4852:	59 a1       	ldd	r21, Y+33	; 0x21
    4854:	6a a1       	ldd	r22, Y+34	; 0x22
    4856:	7b a1       	ldd	r23, Y+35	; 0x23
    4858:	8c a1       	ldd	r24, Y+36	; 0x24
    485a:	9d a1       	ldd	r25, Y+37	; 0x25
    485c:	02 e0       	ldi	r16, 0x02	; 2
    485e:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    4862:	2e a3       	std	Y+38, r18	; 0x26
    4864:	3f a3       	std	Y+39, r19	; 0x27
    4866:	48 a7       	std	Y+40, r20	; 0x28
    4868:	59 a7       	std	Y+41, r21	; 0x29
    486a:	6a a7       	std	Y+42, r22	; 0x2a
    486c:	7b a7       	std	Y+43, r23	; 0x2b
    486e:	8c a7       	std	Y+44, r24	; 0x2c
    4870:	9d a7       	std	Y+45, r25	; 0x2d
    4872:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4874:	9e a1       	ldd	r25, Y+38	; 0x26
    4876:	89 0f       	add	r24, r25
    4878:	8e a7       	std	Y+46, r24	; 0x2e
    487a:	81 e0       	ldi	r24, 0x01	; 1
    487c:	8e ab       	std	Y+54, r24	; 0x36
    487e:	9e a5       	ldd	r25, Y+46	; 0x2e
    4880:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4882:	98 17       	cp	r25, r24
    4884:	08 f0       	brcs	.+2      	; 0x4888 <Lcd_DisplayNumber+0xf2>
    4886:	1e aa       	std	Y+54, r1	; 0x36
    4888:	9f 8d       	ldd	r25, Y+31	; 0x1f
    488a:	8f a1       	ldd	r24, Y+39	; 0x27
    488c:	98 0f       	add	r25, r24
    488e:	9f a7       	std	Y+47, r25	; 0x2f
    4890:	91 e0       	ldi	r25, 0x01	; 1
    4892:	9f ab       	std	Y+55, r25	; 0x37
    4894:	8f a5       	ldd	r24, Y+47	; 0x2f
    4896:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4898:	89 17       	cp	r24, r25
    489a:	08 f0       	brcs	.+2      	; 0x489e <Lcd_DisplayNumber+0x108>
    489c:	1f aa       	std	Y+55, r1	; 0x37
    489e:	8e a9       	ldd	r24, Y+54	; 0x36
    48a0:	9f a5       	ldd	r25, Y+47	; 0x2f
    48a2:	89 0f       	add	r24, r25
    48a4:	88 af       	std	Y+56, r24	; 0x38
    48a6:	81 e0       	ldi	r24, 0x01	; 1
    48a8:	89 af       	std	Y+57, r24	; 0x39
    48aa:	98 ad       	ldd	r25, Y+56	; 0x38
    48ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    48ae:	98 17       	cp	r25, r24
    48b0:	08 f0       	brcs	.+2      	; 0x48b4 <Lcd_DisplayNumber+0x11e>
    48b2:	19 ae       	std	Y+57, r1	; 0x39
    48b4:	9f a9       	ldd	r25, Y+55	; 0x37
    48b6:	89 ad       	ldd	r24, Y+57	; 0x39
    48b8:	98 2b       	or	r25, r24
    48ba:	9f ab       	std	Y+55, r25	; 0x37
    48bc:	98 ad       	ldd	r25, Y+56	; 0x38
    48be:	9f a7       	std	Y+47, r25	; 0x2f
    48c0:	88 a1       	ldd	r24, Y+32	; 0x20
    48c2:	98 a5       	ldd	r25, Y+40	; 0x28
    48c4:	89 0f       	add	r24, r25
    48c6:	88 ab       	std	Y+48, r24	; 0x30
    48c8:	81 e0       	ldi	r24, 0x01	; 1
    48ca:	8a af       	std	Y+58, r24	; 0x3a
    48cc:	98 a9       	ldd	r25, Y+48	; 0x30
    48ce:	88 a1       	ldd	r24, Y+32	; 0x20
    48d0:	98 17       	cp	r25, r24
    48d2:	08 f0       	brcs	.+2      	; 0x48d6 <Lcd_DisplayNumber+0x140>
    48d4:	1a ae       	std	Y+58, r1	; 0x3a
    48d6:	9f a9       	ldd	r25, Y+55	; 0x37
    48d8:	88 a9       	ldd	r24, Y+48	; 0x30
    48da:	98 0f       	add	r25, r24
    48dc:	9b af       	std	Y+59, r25	; 0x3b
    48de:	91 e0       	ldi	r25, 0x01	; 1
    48e0:	9c af       	std	Y+60, r25	; 0x3c
    48e2:	8b ad       	ldd	r24, Y+59	; 0x3b
    48e4:	98 a9       	ldd	r25, Y+48	; 0x30
    48e6:	89 17       	cp	r24, r25
    48e8:	08 f0       	brcs	.+2      	; 0x48ec <Lcd_DisplayNumber+0x156>
    48ea:	1c ae       	std	Y+60, r1	; 0x3c
    48ec:	8a ad       	ldd	r24, Y+58	; 0x3a
    48ee:	9c ad       	ldd	r25, Y+60	; 0x3c
    48f0:	89 2b       	or	r24, r25
    48f2:	8a af       	std	Y+58, r24	; 0x3a
    48f4:	8b ad       	ldd	r24, Y+59	; 0x3b
    48f6:	88 ab       	std	Y+48, r24	; 0x30
    48f8:	99 a1       	ldd	r25, Y+33	; 0x21
    48fa:	89 a5       	ldd	r24, Y+41	; 0x29
    48fc:	98 0f       	add	r25, r24
    48fe:	99 ab       	std	Y+49, r25	; 0x31
    4900:	91 e0       	ldi	r25, 0x01	; 1
    4902:	9d af       	std	Y+61, r25	; 0x3d
    4904:	89 a9       	ldd	r24, Y+49	; 0x31
    4906:	99 a1       	ldd	r25, Y+33	; 0x21
    4908:	89 17       	cp	r24, r25
    490a:	08 f0       	brcs	.+2      	; 0x490e <Lcd_DisplayNumber+0x178>
    490c:	1d ae       	std	Y+61, r1	; 0x3d
    490e:	8a ad       	ldd	r24, Y+58	; 0x3a
    4910:	99 a9       	ldd	r25, Y+49	; 0x31
    4912:	89 0f       	add	r24, r25
    4914:	8e af       	std	Y+62, r24	; 0x3e
    4916:	81 e0       	ldi	r24, 0x01	; 1
    4918:	8f af       	std	Y+63, r24	; 0x3f
    491a:	9e ad       	ldd	r25, Y+62	; 0x3e
    491c:	89 a9       	ldd	r24, Y+49	; 0x31
    491e:	98 17       	cp	r25, r24
    4920:	08 f0       	brcs	.+2      	; 0x4924 <Lcd_DisplayNumber+0x18e>
    4922:	1f ae       	std	Y+63, r1	; 0x3f
    4924:	9d ad       	ldd	r25, Y+61	; 0x3d
    4926:	8f ad       	ldd	r24, Y+63	; 0x3f
    4928:	98 2b       	or	r25, r24
    492a:	9d af       	std	Y+61, r25	; 0x3d
    492c:	9e ad       	ldd	r25, Y+62	; 0x3e
    492e:	99 ab       	std	Y+49, r25	; 0x31
    4930:	8a a1       	ldd	r24, Y+34	; 0x22
    4932:	9a a5       	ldd	r25, Y+42	; 0x2a
    4934:	89 0f       	add	r24, r25
    4936:	8a ab       	std	Y+50, r24	; 0x32
    4938:	81 e0       	ldi	r24, 0x01	; 1
    493a:	21 96       	adiw	r28, 0x01	; 1
    493c:	8f af       	std	Y+63, r24	; 0x3f
    493e:	21 97       	sbiw	r28, 0x01	; 1
    4940:	9a a9       	ldd	r25, Y+50	; 0x32
    4942:	8a a1       	ldd	r24, Y+34	; 0x22
    4944:	98 17       	cp	r25, r24
    4946:	18 f0       	brcs	.+6      	; 0x494e <Lcd_DisplayNumber+0x1b8>
    4948:	21 96       	adiw	r28, 0x01	; 1
    494a:	1f ae       	std	Y+63, r1	; 0x3f
    494c:	21 97       	sbiw	r28, 0x01	; 1
    494e:	9d ad       	ldd	r25, Y+61	; 0x3d
    4950:	8a a9       	ldd	r24, Y+50	; 0x32
    4952:	98 0f       	add	r25, r24
    4954:	22 96       	adiw	r28, 0x02	; 2
    4956:	9f af       	std	Y+63, r25	; 0x3f
    4958:	22 97       	sbiw	r28, 0x02	; 2
    495a:	91 e0       	ldi	r25, 0x01	; 1
    495c:	23 96       	adiw	r28, 0x03	; 3
    495e:	9f af       	std	Y+63, r25	; 0x3f
    4960:	23 97       	sbiw	r28, 0x03	; 3
    4962:	22 96       	adiw	r28, 0x02	; 2
    4964:	8f ad       	ldd	r24, Y+63	; 0x3f
    4966:	22 97       	sbiw	r28, 0x02	; 2
    4968:	9a a9       	ldd	r25, Y+50	; 0x32
    496a:	89 17       	cp	r24, r25
    496c:	18 f0       	brcs	.+6      	; 0x4974 <Lcd_DisplayNumber+0x1de>
    496e:	23 96       	adiw	r28, 0x03	; 3
    4970:	1f ae       	std	Y+63, r1	; 0x3f
    4972:	23 97       	sbiw	r28, 0x03	; 3
    4974:	21 96       	adiw	r28, 0x01	; 1
    4976:	8f ad       	ldd	r24, Y+63	; 0x3f
    4978:	21 97       	sbiw	r28, 0x01	; 1
    497a:	23 96       	adiw	r28, 0x03	; 3
    497c:	9f ad       	ldd	r25, Y+63	; 0x3f
    497e:	23 97       	sbiw	r28, 0x03	; 3
    4980:	89 2b       	or	r24, r25
    4982:	21 96       	adiw	r28, 0x01	; 1
    4984:	8f af       	std	Y+63, r24	; 0x3f
    4986:	21 97       	sbiw	r28, 0x01	; 1
    4988:	22 96       	adiw	r28, 0x02	; 2
    498a:	8f ad       	ldd	r24, Y+63	; 0x3f
    498c:	22 97       	sbiw	r28, 0x02	; 2
    498e:	8a ab       	std	Y+50, r24	; 0x32
    4990:	9b a1       	ldd	r25, Y+35	; 0x23
    4992:	8b a5       	ldd	r24, Y+43	; 0x2b
    4994:	98 0f       	add	r25, r24
    4996:	9b ab       	std	Y+51, r25	; 0x33
    4998:	91 e0       	ldi	r25, 0x01	; 1
    499a:	24 96       	adiw	r28, 0x04	; 4
    499c:	9f af       	std	Y+63, r25	; 0x3f
    499e:	24 97       	sbiw	r28, 0x04	; 4
    49a0:	8b a9       	ldd	r24, Y+51	; 0x33
    49a2:	9b a1       	ldd	r25, Y+35	; 0x23
    49a4:	89 17       	cp	r24, r25
    49a6:	18 f0       	brcs	.+6      	; 0x49ae <Lcd_DisplayNumber+0x218>
    49a8:	24 96       	adiw	r28, 0x04	; 4
    49aa:	1f ae       	std	Y+63, r1	; 0x3f
    49ac:	24 97       	sbiw	r28, 0x04	; 4
    49ae:	21 96       	adiw	r28, 0x01	; 1
    49b0:	8f ad       	ldd	r24, Y+63	; 0x3f
    49b2:	21 97       	sbiw	r28, 0x01	; 1
    49b4:	9b a9       	ldd	r25, Y+51	; 0x33
    49b6:	89 0f       	add	r24, r25
    49b8:	25 96       	adiw	r28, 0x05	; 5
    49ba:	8f af       	std	Y+63, r24	; 0x3f
    49bc:	25 97       	sbiw	r28, 0x05	; 5
    49be:	81 e0       	ldi	r24, 0x01	; 1
    49c0:	26 96       	adiw	r28, 0x06	; 6
    49c2:	8f af       	std	Y+63, r24	; 0x3f
    49c4:	26 97       	sbiw	r28, 0x06	; 6
    49c6:	25 96       	adiw	r28, 0x05	; 5
    49c8:	9f ad       	ldd	r25, Y+63	; 0x3f
    49ca:	25 97       	sbiw	r28, 0x05	; 5
    49cc:	8b a9       	ldd	r24, Y+51	; 0x33
    49ce:	98 17       	cp	r25, r24
    49d0:	18 f0       	brcs	.+6      	; 0x49d8 <Lcd_DisplayNumber+0x242>
    49d2:	26 96       	adiw	r28, 0x06	; 6
    49d4:	1f ae       	std	Y+63, r1	; 0x3f
    49d6:	26 97       	sbiw	r28, 0x06	; 6
    49d8:	24 96       	adiw	r28, 0x04	; 4
    49da:	9f ad       	ldd	r25, Y+63	; 0x3f
    49dc:	24 97       	sbiw	r28, 0x04	; 4
    49de:	26 96       	adiw	r28, 0x06	; 6
    49e0:	8f ad       	ldd	r24, Y+63	; 0x3f
    49e2:	26 97       	sbiw	r28, 0x06	; 6
    49e4:	98 2b       	or	r25, r24
    49e6:	24 96       	adiw	r28, 0x04	; 4
    49e8:	9f af       	std	Y+63, r25	; 0x3f
    49ea:	24 97       	sbiw	r28, 0x04	; 4
    49ec:	25 96       	adiw	r28, 0x05	; 5
    49ee:	9f ad       	ldd	r25, Y+63	; 0x3f
    49f0:	25 97       	sbiw	r28, 0x05	; 5
    49f2:	9b ab       	std	Y+51, r25	; 0x33
    49f4:	8c a1       	ldd	r24, Y+36	; 0x24
    49f6:	9c a5       	ldd	r25, Y+44	; 0x2c
    49f8:	89 0f       	add	r24, r25
    49fa:	8c ab       	std	Y+52, r24	; 0x34
    49fc:	81 e0       	ldi	r24, 0x01	; 1
    49fe:	27 96       	adiw	r28, 0x07	; 7
    4a00:	8f af       	std	Y+63, r24	; 0x3f
    4a02:	27 97       	sbiw	r28, 0x07	; 7
    4a04:	9c a9       	ldd	r25, Y+52	; 0x34
    4a06:	8c a1       	ldd	r24, Y+36	; 0x24
    4a08:	98 17       	cp	r25, r24
    4a0a:	18 f0       	brcs	.+6      	; 0x4a12 <Lcd_DisplayNumber+0x27c>
    4a0c:	27 96       	adiw	r28, 0x07	; 7
    4a0e:	1f ae       	std	Y+63, r1	; 0x3f
    4a10:	27 97       	sbiw	r28, 0x07	; 7
    4a12:	24 96       	adiw	r28, 0x04	; 4
    4a14:	9f ad       	ldd	r25, Y+63	; 0x3f
    4a16:	24 97       	sbiw	r28, 0x04	; 4
    4a18:	8c a9       	ldd	r24, Y+52	; 0x34
    4a1a:	98 0f       	add	r25, r24
    4a1c:	28 96       	adiw	r28, 0x08	; 8
    4a1e:	9f af       	std	Y+63, r25	; 0x3f
    4a20:	28 97       	sbiw	r28, 0x08	; 8
    4a22:	91 e0       	ldi	r25, 0x01	; 1
    4a24:	29 96       	adiw	r28, 0x09	; 9
    4a26:	9f af       	std	Y+63, r25	; 0x3f
    4a28:	29 97       	sbiw	r28, 0x09	; 9
    4a2a:	28 96       	adiw	r28, 0x08	; 8
    4a2c:	8f ad       	ldd	r24, Y+63	; 0x3f
    4a2e:	28 97       	sbiw	r28, 0x08	; 8
    4a30:	9c a9       	ldd	r25, Y+52	; 0x34
    4a32:	89 17       	cp	r24, r25
    4a34:	18 f0       	brcs	.+6      	; 0x4a3c <Lcd_DisplayNumber+0x2a6>
    4a36:	29 96       	adiw	r28, 0x09	; 9
    4a38:	1f ae       	std	Y+63, r1	; 0x3f
    4a3a:	29 97       	sbiw	r28, 0x09	; 9
    4a3c:	27 96       	adiw	r28, 0x07	; 7
    4a3e:	8f ad       	ldd	r24, Y+63	; 0x3f
    4a40:	27 97       	sbiw	r28, 0x07	; 7
    4a42:	29 96       	adiw	r28, 0x09	; 9
    4a44:	9f ad       	ldd	r25, Y+63	; 0x3f
    4a46:	29 97       	sbiw	r28, 0x09	; 9
    4a48:	89 2b       	or	r24, r25
    4a4a:	27 96       	adiw	r28, 0x07	; 7
    4a4c:	8f af       	std	Y+63, r24	; 0x3f
    4a4e:	27 97       	sbiw	r28, 0x07	; 7
    4a50:	28 96       	adiw	r28, 0x08	; 8
    4a52:	8f ad       	ldd	r24, Y+63	; 0x3f
    4a54:	28 97       	sbiw	r28, 0x08	; 8
    4a56:	8c ab       	std	Y+52, r24	; 0x34
    4a58:	9d a1       	ldd	r25, Y+37	; 0x25
    4a5a:	8d a5       	ldd	r24, Y+45	; 0x2d
    4a5c:	98 0f       	add	r25, r24
    4a5e:	9d ab       	std	Y+53, r25	; 0x35
    4a60:	27 96       	adiw	r28, 0x07	; 7
    4a62:	8f ad       	ldd	r24, Y+63	; 0x3f
    4a64:	27 97       	sbiw	r28, 0x07	; 7
    4a66:	9d a9       	ldd	r25, Y+53	; 0x35
    4a68:	89 0f       	add	r24, r25
    4a6a:	8d ab       	std	Y+53, r24	; 0x35
    4a6c:	8e a5       	ldd	r24, Y+46	; 0x2e
    4a6e:	8e 8b       	std	Y+22, r24	; 0x16
    4a70:	9f a5       	ldd	r25, Y+47	; 0x2f
    4a72:	9f 8b       	std	Y+23, r25	; 0x17
    4a74:	88 a9       	ldd	r24, Y+48	; 0x30
    4a76:	88 8f       	std	Y+24, r24	; 0x18
    4a78:	99 a9       	ldd	r25, Y+49	; 0x31
    4a7a:	99 8f       	std	Y+25, r25	; 0x19
    4a7c:	8a a9       	ldd	r24, Y+50	; 0x32
    4a7e:	8a 8f       	std	Y+26, r24	; 0x1a
    4a80:	9b a9       	ldd	r25, Y+51	; 0x33
    4a82:	9b 8f       	std	Y+27, r25	; 0x1b
    4a84:	8c a9       	ldd	r24, Y+52	; 0x34
    4a86:	8c 8f       	std	Y+28, r24	; 0x1c
    4a88:	9d a9       	ldd	r25, Y+53	; 0x35
    4a8a:	9d 8f       	std	Y+29, r25	; 0x1d
    4a8c:	8a 85       	ldd	r24, Y+10	; 0x0a
    4a8e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4a90:	ac 85       	ldd	r26, Y+12	; 0x0c
    4a92:	bd 85       	ldd	r27, Y+13	; 0x0d
    4a94:	2a e0       	ldi	r18, 0x0A	; 10
    4a96:	30 e0       	ldi	r19, 0x00	; 0
    4a98:	40 e0       	ldi	r20, 0x00	; 0
    4a9a:	50 e0       	ldi	r21, 0x00	; 0
    4a9c:	bc 01       	movw	r22, r24
    4a9e:	cd 01       	movw	r24, r26
    4aa0:	0e 94 81 30 	call	0x6102	; 0x6102 <__divmodsi4>
    4aa4:	dc 01       	movw	r26, r24
    4aa6:	cb 01       	movw	r24, r22
    4aa8:	9c 01       	movw	r18, r24
    4aaa:	ad 01       	movw	r20, r26
    4aac:	da 01       	movw	r26, r20
    4aae:	c9 01       	movw	r24, r18
    4ab0:	bb 0f       	add	r27, r27
    4ab2:	88 0b       	sbc	r24, r24
    4ab4:	98 2f       	mov	r25, r24
    4ab6:	dc 01       	movw	r26, r24
    4ab8:	2e 87       	std	Y+14, r18	; 0x0e
    4aba:	3f 87       	std	Y+15, r19	; 0x0f
    4abc:	48 8b       	std	Y+16, r20	; 0x10
    4abe:	59 8b       	std	Y+17, r21	; 0x11
    4ac0:	8a 8b       	std	Y+18, r24	; 0x12
    4ac2:	8b 8b       	std	Y+19, r24	; 0x13
    4ac4:	8c 8b       	std	Y+20, r24	; 0x14
    4ac6:	8d 8b       	std	Y+21, r24	; 0x15
    4ac8:	8e 89       	ldd	r24, Y+22	; 0x16
    4aca:	9e 85       	ldd	r25, Y+14	; 0x0e
    4acc:	89 0f       	add	r24, r25
    4ace:	2a 96       	adiw	r28, 0x0a	; 10
    4ad0:	8f af       	std	Y+63, r24	; 0x3f
    4ad2:	2a 97       	sbiw	r28, 0x0a	; 10
    4ad4:	81 e0       	ldi	r24, 0x01	; 1
    4ad6:	62 96       	adiw	r28, 0x12	; 18
    4ad8:	8f af       	std	Y+63, r24	; 0x3f
    4ada:	62 97       	sbiw	r28, 0x12	; 18
    4adc:	2a 96       	adiw	r28, 0x0a	; 10
    4ade:	9f ad       	ldd	r25, Y+63	; 0x3f
    4ae0:	2a 97       	sbiw	r28, 0x0a	; 10
    4ae2:	8e 89       	ldd	r24, Y+22	; 0x16
    4ae4:	98 17       	cp	r25, r24
    4ae6:	18 f0       	brcs	.+6      	; 0x4aee <Lcd_DisplayNumber+0x358>
    4ae8:	62 96       	adiw	r28, 0x12	; 18
    4aea:	1f ae       	std	Y+63, r1	; 0x3f
    4aec:	62 97       	sbiw	r28, 0x12	; 18
    4aee:	9f 89       	ldd	r25, Y+23	; 0x17
    4af0:	8f 85       	ldd	r24, Y+15	; 0x0f
    4af2:	98 0f       	add	r25, r24
    4af4:	2b 96       	adiw	r28, 0x0b	; 11
    4af6:	9f af       	std	Y+63, r25	; 0x3f
    4af8:	2b 97       	sbiw	r28, 0x0b	; 11
    4afa:	91 e0       	ldi	r25, 0x01	; 1
    4afc:	63 96       	adiw	r28, 0x13	; 19
    4afe:	9f af       	std	Y+63, r25	; 0x3f
    4b00:	63 97       	sbiw	r28, 0x13	; 19
    4b02:	2b 96       	adiw	r28, 0x0b	; 11
    4b04:	8f ad       	ldd	r24, Y+63	; 0x3f
    4b06:	2b 97       	sbiw	r28, 0x0b	; 11
    4b08:	9f 89       	ldd	r25, Y+23	; 0x17
    4b0a:	89 17       	cp	r24, r25
    4b0c:	18 f0       	brcs	.+6      	; 0x4b14 <Lcd_DisplayNumber+0x37e>
    4b0e:	63 96       	adiw	r28, 0x13	; 19
    4b10:	1f ae       	std	Y+63, r1	; 0x3f
    4b12:	63 97       	sbiw	r28, 0x13	; 19
    4b14:	62 96       	adiw	r28, 0x12	; 18
    4b16:	8f ad       	ldd	r24, Y+63	; 0x3f
    4b18:	62 97       	sbiw	r28, 0x12	; 18
    4b1a:	2b 96       	adiw	r28, 0x0b	; 11
    4b1c:	9f ad       	ldd	r25, Y+63	; 0x3f
    4b1e:	2b 97       	sbiw	r28, 0x0b	; 11
    4b20:	89 0f       	add	r24, r25
    4b22:	64 96       	adiw	r28, 0x14	; 20
    4b24:	8f af       	std	Y+63, r24	; 0x3f
    4b26:	64 97       	sbiw	r28, 0x14	; 20
    4b28:	81 e0       	ldi	r24, 0x01	; 1
    4b2a:	65 96       	adiw	r28, 0x15	; 21
    4b2c:	8f af       	std	Y+63, r24	; 0x3f
    4b2e:	65 97       	sbiw	r28, 0x15	; 21
    4b30:	64 96       	adiw	r28, 0x14	; 20
    4b32:	9f ad       	ldd	r25, Y+63	; 0x3f
    4b34:	64 97       	sbiw	r28, 0x14	; 20
    4b36:	2b 96       	adiw	r28, 0x0b	; 11
    4b38:	8f ad       	ldd	r24, Y+63	; 0x3f
    4b3a:	2b 97       	sbiw	r28, 0x0b	; 11
    4b3c:	98 17       	cp	r25, r24
    4b3e:	18 f0       	brcs	.+6      	; 0x4b46 <Lcd_DisplayNumber+0x3b0>
    4b40:	65 96       	adiw	r28, 0x15	; 21
    4b42:	1f ae       	std	Y+63, r1	; 0x3f
    4b44:	65 97       	sbiw	r28, 0x15	; 21
    4b46:	63 96       	adiw	r28, 0x13	; 19
    4b48:	9f ad       	ldd	r25, Y+63	; 0x3f
    4b4a:	63 97       	sbiw	r28, 0x13	; 19
    4b4c:	65 96       	adiw	r28, 0x15	; 21
    4b4e:	8f ad       	ldd	r24, Y+63	; 0x3f
    4b50:	65 97       	sbiw	r28, 0x15	; 21
    4b52:	98 2b       	or	r25, r24
    4b54:	63 96       	adiw	r28, 0x13	; 19
    4b56:	9f af       	std	Y+63, r25	; 0x3f
    4b58:	63 97       	sbiw	r28, 0x13	; 19
    4b5a:	64 96       	adiw	r28, 0x14	; 20
    4b5c:	9f ad       	ldd	r25, Y+63	; 0x3f
    4b5e:	64 97       	sbiw	r28, 0x14	; 20
    4b60:	2b 96       	adiw	r28, 0x0b	; 11
    4b62:	9f af       	std	Y+63, r25	; 0x3f
    4b64:	2b 97       	sbiw	r28, 0x0b	; 11
    4b66:	88 8d       	ldd	r24, Y+24	; 0x18
    4b68:	98 89       	ldd	r25, Y+16	; 0x10
    4b6a:	89 0f       	add	r24, r25
    4b6c:	2c 96       	adiw	r28, 0x0c	; 12
    4b6e:	8f af       	std	Y+63, r24	; 0x3f
    4b70:	2c 97       	sbiw	r28, 0x0c	; 12
    4b72:	81 e0       	ldi	r24, 0x01	; 1
    4b74:	66 96       	adiw	r28, 0x16	; 22
    4b76:	8f af       	std	Y+63, r24	; 0x3f
    4b78:	66 97       	sbiw	r28, 0x16	; 22
    4b7a:	2c 96       	adiw	r28, 0x0c	; 12
    4b7c:	9f ad       	ldd	r25, Y+63	; 0x3f
    4b7e:	2c 97       	sbiw	r28, 0x0c	; 12
    4b80:	88 8d       	ldd	r24, Y+24	; 0x18
    4b82:	98 17       	cp	r25, r24
    4b84:	18 f0       	brcs	.+6      	; 0x4b8c <Lcd_DisplayNumber+0x3f6>
    4b86:	66 96       	adiw	r28, 0x16	; 22
    4b88:	1f ae       	std	Y+63, r1	; 0x3f
    4b8a:	66 97       	sbiw	r28, 0x16	; 22
    4b8c:	63 96       	adiw	r28, 0x13	; 19
    4b8e:	9f ad       	ldd	r25, Y+63	; 0x3f
    4b90:	63 97       	sbiw	r28, 0x13	; 19
    4b92:	2c 96       	adiw	r28, 0x0c	; 12
    4b94:	8f ad       	ldd	r24, Y+63	; 0x3f
    4b96:	2c 97       	sbiw	r28, 0x0c	; 12
    4b98:	98 0f       	add	r25, r24
    4b9a:	67 96       	adiw	r28, 0x17	; 23
    4b9c:	9f af       	std	Y+63, r25	; 0x3f
    4b9e:	67 97       	sbiw	r28, 0x17	; 23
    4ba0:	91 e0       	ldi	r25, 0x01	; 1
    4ba2:	68 96       	adiw	r28, 0x18	; 24
    4ba4:	9f af       	std	Y+63, r25	; 0x3f
    4ba6:	68 97       	sbiw	r28, 0x18	; 24
    4ba8:	67 96       	adiw	r28, 0x17	; 23
    4baa:	8f ad       	ldd	r24, Y+63	; 0x3f
    4bac:	67 97       	sbiw	r28, 0x17	; 23
    4bae:	2c 96       	adiw	r28, 0x0c	; 12
    4bb0:	9f ad       	ldd	r25, Y+63	; 0x3f
    4bb2:	2c 97       	sbiw	r28, 0x0c	; 12
    4bb4:	89 17       	cp	r24, r25
    4bb6:	18 f0       	brcs	.+6      	; 0x4bbe <Lcd_DisplayNumber+0x428>
    4bb8:	68 96       	adiw	r28, 0x18	; 24
    4bba:	1f ae       	std	Y+63, r1	; 0x3f
    4bbc:	68 97       	sbiw	r28, 0x18	; 24
    4bbe:	66 96       	adiw	r28, 0x16	; 22
    4bc0:	8f ad       	ldd	r24, Y+63	; 0x3f
    4bc2:	66 97       	sbiw	r28, 0x16	; 22
    4bc4:	68 96       	adiw	r28, 0x18	; 24
    4bc6:	9f ad       	ldd	r25, Y+63	; 0x3f
    4bc8:	68 97       	sbiw	r28, 0x18	; 24
    4bca:	89 2b       	or	r24, r25
    4bcc:	66 96       	adiw	r28, 0x16	; 22
    4bce:	8f af       	std	Y+63, r24	; 0x3f
    4bd0:	66 97       	sbiw	r28, 0x16	; 22
    4bd2:	67 96       	adiw	r28, 0x17	; 23
    4bd4:	8f ad       	ldd	r24, Y+63	; 0x3f
    4bd6:	67 97       	sbiw	r28, 0x17	; 23
    4bd8:	2c 96       	adiw	r28, 0x0c	; 12
    4bda:	8f af       	std	Y+63, r24	; 0x3f
    4bdc:	2c 97       	sbiw	r28, 0x0c	; 12
    4bde:	99 8d       	ldd	r25, Y+25	; 0x19
    4be0:	89 89       	ldd	r24, Y+17	; 0x11
    4be2:	98 0f       	add	r25, r24
    4be4:	2d 96       	adiw	r28, 0x0d	; 13
    4be6:	9f af       	std	Y+63, r25	; 0x3f
    4be8:	2d 97       	sbiw	r28, 0x0d	; 13
    4bea:	91 e0       	ldi	r25, 0x01	; 1
    4bec:	69 96       	adiw	r28, 0x19	; 25
    4bee:	9f af       	std	Y+63, r25	; 0x3f
    4bf0:	69 97       	sbiw	r28, 0x19	; 25
    4bf2:	2d 96       	adiw	r28, 0x0d	; 13
    4bf4:	8f ad       	ldd	r24, Y+63	; 0x3f
    4bf6:	2d 97       	sbiw	r28, 0x0d	; 13
    4bf8:	99 8d       	ldd	r25, Y+25	; 0x19
    4bfa:	89 17       	cp	r24, r25
    4bfc:	18 f0       	brcs	.+6      	; 0x4c04 <Lcd_DisplayNumber+0x46e>
    4bfe:	69 96       	adiw	r28, 0x19	; 25
    4c00:	1f ae       	std	Y+63, r1	; 0x3f
    4c02:	69 97       	sbiw	r28, 0x19	; 25
    4c04:	66 96       	adiw	r28, 0x16	; 22
    4c06:	8f ad       	ldd	r24, Y+63	; 0x3f
    4c08:	66 97       	sbiw	r28, 0x16	; 22
    4c0a:	2d 96       	adiw	r28, 0x0d	; 13
    4c0c:	9f ad       	ldd	r25, Y+63	; 0x3f
    4c0e:	2d 97       	sbiw	r28, 0x0d	; 13
    4c10:	89 0f       	add	r24, r25
    4c12:	6a 96       	adiw	r28, 0x1a	; 26
    4c14:	8f af       	std	Y+63, r24	; 0x3f
    4c16:	6a 97       	sbiw	r28, 0x1a	; 26
    4c18:	81 e0       	ldi	r24, 0x01	; 1
    4c1a:	6b 96       	adiw	r28, 0x1b	; 27
    4c1c:	8f af       	std	Y+63, r24	; 0x3f
    4c1e:	6b 97       	sbiw	r28, 0x1b	; 27
    4c20:	6a 96       	adiw	r28, 0x1a	; 26
    4c22:	9f ad       	ldd	r25, Y+63	; 0x3f
    4c24:	6a 97       	sbiw	r28, 0x1a	; 26
    4c26:	2d 96       	adiw	r28, 0x0d	; 13
    4c28:	8f ad       	ldd	r24, Y+63	; 0x3f
    4c2a:	2d 97       	sbiw	r28, 0x0d	; 13
    4c2c:	98 17       	cp	r25, r24
    4c2e:	18 f0       	brcs	.+6      	; 0x4c36 <Lcd_DisplayNumber+0x4a0>
    4c30:	6b 96       	adiw	r28, 0x1b	; 27
    4c32:	1f ae       	std	Y+63, r1	; 0x3f
    4c34:	6b 97       	sbiw	r28, 0x1b	; 27
    4c36:	69 96       	adiw	r28, 0x19	; 25
    4c38:	9f ad       	ldd	r25, Y+63	; 0x3f
    4c3a:	69 97       	sbiw	r28, 0x19	; 25
    4c3c:	6b 96       	adiw	r28, 0x1b	; 27
    4c3e:	8f ad       	ldd	r24, Y+63	; 0x3f
    4c40:	6b 97       	sbiw	r28, 0x1b	; 27
    4c42:	98 2b       	or	r25, r24
    4c44:	69 96       	adiw	r28, 0x19	; 25
    4c46:	9f af       	std	Y+63, r25	; 0x3f
    4c48:	69 97       	sbiw	r28, 0x19	; 25
    4c4a:	6a 96       	adiw	r28, 0x1a	; 26
    4c4c:	9f ad       	ldd	r25, Y+63	; 0x3f
    4c4e:	6a 97       	sbiw	r28, 0x1a	; 26
    4c50:	2d 96       	adiw	r28, 0x0d	; 13
    4c52:	9f af       	std	Y+63, r25	; 0x3f
    4c54:	2d 97       	sbiw	r28, 0x0d	; 13
    4c56:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4c58:	9a 89       	ldd	r25, Y+18	; 0x12
    4c5a:	89 0f       	add	r24, r25
    4c5c:	2e 96       	adiw	r28, 0x0e	; 14
    4c5e:	8f af       	std	Y+63, r24	; 0x3f
    4c60:	2e 97       	sbiw	r28, 0x0e	; 14
    4c62:	81 e0       	ldi	r24, 0x01	; 1
    4c64:	6c 96       	adiw	r28, 0x1c	; 28
    4c66:	8f af       	std	Y+63, r24	; 0x3f
    4c68:	6c 97       	sbiw	r28, 0x1c	; 28
    4c6a:	2e 96       	adiw	r28, 0x0e	; 14
    4c6c:	9f ad       	ldd	r25, Y+63	; 0x3f
    4c6e:	2e 97       	sbiw	r28, 0x0e	; 14
    4c70:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4c72:	98 17       	cp	r25, r24
    4c74:	18 f0       	brcs	.+6      	; 0x4c7c <Lcd_DisplayNumber+0x4e6>
    4c76:	6c 96       	adiw	r28, 0x1c	; 28
    4c78:	1f ae       	std	Y+63, r1	; 0x3f
    4c7a:	6c 97       	sbiw	r28, 0x1c	; 28
    4c7c:	69 96       	adiw	r28, 0x19	; 25
    4c7e:	9f ad       	ldd	r25, Y+63	; 0x3f
    4c80:	69 97       	sbiw	r28, 0x19	; 25
    4c82:	2e 96       	adiw	r28, 0x0e	; 14
    4c84:	8f ad       	ldd	r24, Y+63	; 0x3f
    4c86:	2e 97       	sbiw	r28, 0x0e	; 14
    4c88:	98 0f       	add	r25, r24
    4c8a:	6d 96       	adiw	r28, 0x1d	; 29
    4c8c:	9f af       	std	Y+63, r25	; 0x3f
    4c8e:	6d 97       	sbiw	r28, 0x1d	; 29
    4c90:	91 e0       	ldi	r25, 0x01	; 1
    4c92:	6e 96       	adiw	r28, 0x1e	; 30
    4c94:	9f af       	std	Y+63, r25	; 0x3f
    4c96:	6e 97       	sbiw	r28, 0x1e	; 30
    4c98:	6d 96       	adiw	r28, 0x1d	; 29
    4c9a:	8f ad       	ldd	r24, Y+63	; 0x3f
    4c9c:	6d 97       	sbiw	r28, 0x1d	; 29
    4c9e:	2e 96       	adiw	r28, 0x0e	; 14
    4ca0:	9f ad       	ldd	r25, Y+63	; 0x3f
    4ca2:	2e 97       	sbiw	r28, 0x0e	; 14
    4ca4:	89 17       	cp	r24, r25
    4ca6:	18 f0       	brcs	.+6      	; 0x4cae <Lcd_DisplayNumber+0x518>
    4ca8:	6e 96       	adiw	r28, 0x1e	; 30
    4caa:	1f ae       	std	Y+63, r1	; 0x3f
    4cac:	6e 97       	sbiw	r28, 0x1e	; 30
    4cae:	6c 96       	adiw	r28, 0x1c	; 28
    4cb0:	8f ad       	ldd	r24, Y+63	; 0x3f
    4cb2:	6c 97       	sbiw	r28, 0x1c	; 28
    4cb4:	6e 96       	adiw	r28, 0x1e	; 30
    4cb6:	9f ad       	ldd	r25, Y+63	; 0x3f
    4cb8:	6e 97       	sbiw	r28, 0x1e	; 30
    4cba:	89 2b       	or	r24, r25
    4cbc:	6c 96       	adiw	r28, 0x1c	; 28
    4cbe:	8f af       	std	Y+63, r24	; 0x3f
    4cc0:	6c 97       	sbiw	r28, 0x1c	; 28
    4cc2:	6d 96       	adiw	r28, 0x1d	; 29
    4cc4:	8f ad       	ldd	r24, Y+63	; 0x3f
    4cc6:	6d 97       	sbiw	r28, 0x1d	; 29
    4cc8:	2e 96       	adiw	r28, 0x0e	; 14
    4cca:	8f af       	std	Y+63, r24	; 0x3f
    4ccc:	2e 97       	sbiw	r28, 0x0e	; 14
    4cce:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4cd0:	8b 89       	ldd	r24, Y+19	; 0x13
    4cd2:	98 0f       	add	r25, r24
    4cd4:	2f 96       	adiw	r28, 0x0f	; 15
    4cd6:	9f af       	std	Y+63, r25	; 0x3f
    4cd8:	2f 97       	sbiw	r28, 0x0f	; 15
    4cda:	91 e0       	ldi	r25, 0x01	; 1
    4cdc:	6f 96       	adiw	r28, 0x1f	; 31
    4cde:	9f af       	std	Y+63, r25	; 0x3f
    4ce0:	6f 97       	sbiw	r28, 0x1f	; 31
    4ce2:	2f 96       	adiw	r28, 0x0f	; 15
    4ce4:	8f ad       	ldd	r24, Y+63	; 0x3f
    4ce6:	2f 97       	sbiw	r28, 0x0f	; 15
    4ce8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4cea:	89 17       	cp	r24, r25
    4cec:	18 f0       	brcs	.+6      	; 0x4cf4 <Lcd_DisplayNumber+0x55e>
    4cee:	6f 96       	adiw	r28, 0x1f	; 31
    4cf0:	1f ae       	std	Y+63, r1	; 0x3f
    4cf2:	6f 97       	sbiw	r28, 0x1f	; 31
    4cf4:	6c 96       	adiw	r28, 0x1c	; 28
    4cf6:	8f ad       	ldd	r24, Y+63	; 0x3f
    4cf8:	6c 97       	sbiw	r28, 0x1c	; 28
    4cfa:	2f 96       	adiw	r28, 0x0f	; 15
    4cfc:	9f ad       	ldd	r25, Y+63	; 0x3f
    4cfe:	2f 97       	sbiw	r28, 0x0f	; 15
    4d00:	89 0f       	add	r24, r25
    4d02:	a0 96       	adiw	r28, 0x20	; 32
    4d04:	8f af       	std	Y+63, r24	; 0x3f
    4d06:	a0 97       	sbiw	r28, 0x20	; 32
    4d08:	81 e0       	ldi	r24, 0x01	; 1
    4d0a:	a1 96       	adiw	r28, 0x21	; 33
    4d0c:	8f af       	std	Y+63, r24	; 0x3f
    4d0e:	a1 97       	sbiw	r28, 0x21	; 33
    4d10:	a0 96       	adiw	r28, 0x20	; 32
    4d12:	9f ad       	ldd	r25, Y+63	; 0x3f
    4d14:	a0 97       	sbiw	r28, 0x20	; 32
    4d16:	2f 96       	adiw	r28, 0x0f	; 15
    4d18:	8f ad       	ldd	r24, Y+63	; 0x3f
    4d1a:	2f 97       	sbiw	r28, 0x0f	; 15
    4d1c:	98 17       	cp	r25, r24
    4d1e:	18 f0       	brcs	.+6      	; 0x4d26 <Lcd_DisplayNumber+0x590>
    4d20:	a1 96       	adiw	r28, 0x21	; 33
    4d22:	1f ae       	std	Y+63, r1	; 0x3f
    4d24:	a1 97       	sbiw	r28, 0x21	; 33
    4d26:	6f 96       	adiw	r28, 0x1f	; 31
    4d28:	9f ad       	ldd	r25, Y+63	; 0x3f
    4d2a:	6f 97       	sbiw	r28, 0x1f	; 31
    4d2c:	a1 96       	adiw	r28, 0x21	; 33
    4d2e:	8f ad       	ldd	r24, Y+63	; 0x3f
    4d30:	a1 97       	sbiw	r28, 0x21	; 33
    4d32:	98 2b       	or	r25, r24
    4d34:	6f 96       	adiw	r28, 0x1f	; 31
    4d36:	9f af       	std	Y+63, r25	; 0x3f
    4d38:	6f 97       	sbiw	r28, 0x1f	; 31
    4d3a:	a0 96       	adiw	r28, 0x20	; 32
    4d3c:	9f ad       	ldd	r25, Y+63	; 0x3f
    4d3e:	a0 97       	sbiw	r28, 0x20	; 32
    4d40:	2f 96       	adiw	r28, 0x0f	; 15
    4d42:	9f af       	std	Y+63, r25	; 0x3f
    4d44:	2f 97       	sbiw	r28, 0x0f	; 15
    4d46:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4d48:	9c 89       	ldd	r25, Y+20	; 0x14
    4d4a:	89 0f       	add	r24, r25
    4d4c:	60 96       	adiw	r28, 0x10	; 16
    4d4e:	8f af       	std	Y+63, r24	; 0x3f
    4d50:	60 97       	sbiw	r28, 0x10	; 16
    4d52:	81 e0       	ldi	r24, 0x01	; 1
    4d54:	a2 96       	adiw	r28, 0x22	; 34
    4d56:	8f af       	std	Y+63, r24	; 0x3f
    4d58:	a2 97       	sbiw	r28, 0x22	; 34
    4d5a:	60 96       	adiw	r28, 0x10	; 16
    4d5c:	9f ad       	ldd	r25, Y+63	; 0x3f
    4d5e:	60 97       	sbiw	r28, 0x10	; 16
    4d60:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4d62:	98 17       	cp	r25, r24
    4d64:	18 f0       	brcs	.+6      	; 0x4d6c <Lcd_DisplayNumber+0x5d6>
    4d66:	a2 96       	adiw	r28, 0x22	; 34
    4d68:	1f ae       	std	Y+63, r1	; 0x3f
    4d6a:	a2 97       	sbiw	r28, 0x22	; 34
    4d6c:	6f 96       	adiw	r28, 0x1f	; 31
    4d6e:	9f ad       	ldd	r25, Y+63	; 0x3f
    4d70:	6f 97       	sbiw	r28, 0x1f	; 31
    4d72:	60 96       	adiw	r28, 0x10	; 16
    4d74:	8f ad       	ldd	r24, Y+63	; 0x3f
    4d76:	60 97       	sbiw	r28, 0x10	; 16
    4d78:	98 0f       	add	r25, r24
    4d7a:	a3 96       	adiw	r28, 0x23	; 35
    4d7c:	9f af       	std	Y+63, r25	; 0x3f
    4d7e:	a3 97       	sbiw	r28, 0x23	; 35
    4d80:	91 e0       	ldi	r25, 0x01	; 1
    4d82:	a4 96       	adiw	r28, 0x24	; 36
    4d84:	9f af       	std	Y+63, r25	; 0x3f
    4d86:	a4 97       	sbiw	r28, 0x24	; 36
    4d88:	a3 96       	adiw	r28, 0x23	; 35
    4d8a:	8f ad       	ldd	r24, Y+63	; 0x3f
    4d8c:	a3 97       	sbiw	r28, 0x23	; 35
    4d8e:	60 96       	adiw	r28, 0x10	; 16
    4d90:	9f ad       	ldd	r25, Y+63	; 0x3f
    4d92:	60 97       	sbiw	r28, 0x10	; 16
    4d94:	89 17       	cp	r24, r25
    4d96:	18 f0       	brcs	.+6      	; 0x4d9e <Lcd_DisplayNumber+0x608>
    4d98:	a4 96       	adiw	r28, 0x24	; 36
    4d9a:	1f ae       	std	Y+63, r1	; 0x3f
    4d9c:	a4 97       	sbiw	r28, 0x24	; 36
    4d9e:	a2 96       	adiw	r28, 0x22	; 34
    4da0:	8f ad       	ldd	r24, Y+63	; 0x3f
    4da2:	a2 97       	sbiw	r28, 0x22	; 34
    4da4:	a4 96       	adiw	r28, 0x24	; 36
    4da6:	9f ad       	ldd	r25, Y+63	; 0x3f
    4da8:	a4 97       	sbiw	r28, 0x24	; 36
    4daa:	89 2b       	or	r24, r25
    4dac:	a2 96       	adiw	r28, 0x22	; 34
    4dae:	8f af       	std	Y+63, r24	; 0x3f
    4db0:	a2 97       	sbiw	r28, 0x22	; 34
    4db2:	a3 96       	adiw	r28, 0x23	; 35
    4db4:	8f ad       	ldd	r24, Y+63	; 0x3f
    4db6:	a3 97       	sbiw	r28, 0x23	; 35
    4db8:	60 96       	adiw	r28, 0x10	; 16
    4dba:	8f af       	std	Y+63, r24	; 0x3f
    4dbc:	60 97       	sbiw	r28, 0x10	; 16
    4dbe:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4dc0:	8d 89       	ldd	r24, Y+21	; 0x15
    4dc2:	98 0f       	add	r25, r24
    4dc4:	61 96       	adiw	r28, 0x11	; 17
    4dc6:	9f af       	std	Y+63, r25	; 0x3f
    4dc8:	61 97       	sbiw	r28, 0x11	; 17
    4dca:	a2 96       	adiw	r28, 0x22	; 34
    4dcc:	8f ad       	ldd	r24, Y+63	; 0x3f
    4dce:	a2 97       	sbiw	r28, 0x22	; 34
    4dd0:	61 96       	adiw	r28, 0x11	; 17
    4dd2:	9f ad       	ldd	r25, Y+63	; 0x3f
    4dd4:	61 97       	sbiw	r28, 0x11	; 17
    4dd6:	89 0f       	add	r24, r25
    4dd8:	61 96       	adiw	r28, 0x11	; 17
    4dda:	8f af       	std	Y+63, r24	; 0x3f
    4ddc:	61 97       	sbiw	r28, 0x11	; 17
    4dde:	2a 96       	adiw	r28, 0x0a	; 10
    4de0:	8f ad       	ldd	r24, Y+63	; 0x3f
    4de2:	2a 97       	sbiw	r28, 0x0a	; 10
    4de4:	8a 83       	std	Y+2, r24	; 0x02
    4de6:	2b 96       	adiw	r28, 0x0b	; 11
    4de8:	9f ad       	ldd	r25, Y+63	; 0x3f
    4dea:	2b 97       	sbiw	r28, 0x0b	; 11
    4dec:	9b 83       	std	Y+3, r25	; 0x03
    4dee:	2c 96       	adiw	r28, 0x0c	; 12
    4df0:	8f ad       	ldd	r24, Y+63	; 0x3f
    4df2:	2c 97       	sbiw	r28, 0x0c	; 12
    4df4:	8c 83       	std	Y+4, r24	; 0x04
    4df6:	2d 96       	adiw	r28, 0x0d	; 13
    4df8:	9f ad       	ldd	r25, Y+63	; 0x3f
    4dfa:	2d 97       	sbiw	r28, 0x0d	; 13
    4dfc:	9d 83       	std	Y+5, r25	; 0x05
    4dfe:	2e 96       	adiw	r28, 0x0e	; 14
    4e00:	8f ad       	ldd	r24, Y+63	; 0x3f
    4e02:	2e 97       	sbiw	r28, 0x0e	; 14
    4e04:	8e 83       	std	Y+6, r24	; 0x06
    4e06:	2f 96       	adiw	r28, 0x0f	; 15
    4e08:	9f ad       	ldd	r25, Y+63	; 0x3f
    4e0a:	2f 97       	sbiw	r28, 0x0f	; 15
    4e0c:	9f 83       	std	Y+7, r25	; 0x07
    4e0e:	60 96       	adiw	r28, 0x10	; 16
    4e10:	8f ad       	ldd	r24, Y+63	; 0x3f
    4e12:	60 97       	sbiw	r28, 0x10	; 16
    4e14:	88 87       	std	Y+8, r24	; 0x08
    4e16:	61 96       	adiw	r28, 0x11	; 17
    4e18:	9f ad       	ldd	r25, Y+63	; 0x3f
    4e1a:	61 97       	sbiw	r28, 0x11	; 17
    4e1c:	99 87       	std	Y+9, r25	; 0x09
        number /= 10;
    4e1e:	8a 85       	ldd	r24, Y+10	; 0x0a
    4e20:	9b 85       	ldd	r25, Y+11	; 0x0b
    4e22:	ac 85       	ldd	r26, Y+12	; 0x0c
    4e24:	bd 85       	ldd	r27, Y+13	; 0x0d
    4e26:	2a e0       	ldi	r18, 0x0A	; 10
    4e28:	30 e0       	ldi	r19, 0x00	; 0
    4e2a:	40 e0       	ldi	r20, 0x00	; 0
    4e2c:	50 e0       	ldi	r21, 0x00	; 0
    4e2e:	bc 01       	movw	r22, r24
    4e30:	cd 01       	movw	r24, r26
    4e32:	0e 94 81 30 	call	0x6102	; 0x6102 <__divmodsi4>
    4e36:	da 01       	movw	r26, r20
    4e38:	c9 01       	movw	r24, r18
    4e3a:	8a 87       	std	Y+10, r24	; 0x0a
    4e3c:	9b 87       	std	Y+11, r25	; 0x0b
    4e3e:	ac 87       	std	Y+12, r26	; 0x0c
    4e40:	bd 87       	std	Y+13, r27	; 0x0d
        digitsCounter++;
    4e42:	89 81       	ldd	r24, Y+1	; 0x01
    4e44:	8f 5f       	subi	r24, 0xFF	; 255
    4e46:	89 83       	std	Y+1, r24	; 0x01
    } while (number > 0);
    4e48:	8a 85       	ldd	r24, Y+10	; 0x0a
    4e4a:	9b 85       	ldd	r25, Y+11	; 0x0b
    4e4c:	ac 85       	ldd	r26, Y+12	; 0x0c
    4e4e:	bd 85       	ldd	r27, Y+13	; 0x0d
    4e50:	18 16       	cp	r1, r24
    4e52:	19 06       	cpc	r1, r25
    4e54:	1a 06       	cpc	r1, r26
    4e56:	1b 06       	cpc	r1, r27
    4e58:	0c f4       	brge	.+2      	; 0x4e5c <Lcd_DisplayNumber+0x6c6>
    4e5a:	d5 cc       	rjmp	.-1622   	; 0x4806 <Lcd_DisplayNumber+0x70>
    4e5c:	61 c0       	rjmp	.+194    	; 0x4f20 <Lcd_DisplayNumber+0x78a>
    while (digitsCounter > 0) {
        Lcd_SendData(reversed%10 + '0');
    4e5e:	aa 80       	ldd	r10, Y+2	; 0x02
    4e60:	bb 80       	ldd	r11, Y+3	; 0x03
    4e62:	cc 80       	ldd	r12, Y+4	; 0x04
    4e64:	dd 80       	ldd	r13, Y+5	; 0x05
    4e66:	ee 80       	ldd	r14, Y+6	; 0x06
    4e68:	ff 80       	ldd	r15, Y+7	; 0x07
    4e6a:	08 85       	ldd	r16, Y+8	; 0x08
    4e6c:	19 85       	ldd	r17, Y+9	; 0x09
    4e6e:	2a 2d       	mov	r18, r10
    4e70:	3b 2d       	mov	r19, r11
    4e72:	4c 2d       	mov	r20, r12
    4e74:	5d 2d       	mov	r21, r13
    4e76:	6e 2d       	mov	r22, r14
    4e78:	7f 2d       	mov	r23, r15
    4e7a:	80 2f       	mov	r24, r16
    4e7c:	91 2f       	mov	r25, r17
    4e7e:	0f 2e       	mov	r0, r31
    4e80:	fa e0       	ldi	r31, 0x0A	; 10
    4e82:	af 2e       	mov	r10, r31
    4e84:	f0 2d       	mov	r31, r0
    4e86:	bb 24       	eor	r11, r11
    4e88:	cc 24       	eor	r12, r12
    4e8a:	dd 24       	eor	r13, r13
    4e8c:	ee 24       	eor	r14, r14
    4e8e:	ff 24       	eor	r15, r15
    4e90:	00 e0       	ldi	r16, 0x00	; 0
    4e92:	10 e0       	ldi	r17, 0x00	; 0
    4e94:	0e 94 3d 07 	call	0xe7a	; 0xe7a <__umoddi3>
    4e98:	a2 2e       	mov	r10, r18
    4e9a:	b3 2e       	mov	r11, r19
    4e9c:	c4 2e       	mov	r12, r20
    4e9e:	d5 2e       	mov	r13, r21
    4ea0:	e6 2e       	mov	r14, r22
    4ea2:	f7 2e       	mov	r15, r23
    4ea4:	08 2f       	mov	r16, r24
    4ea6:	19 2f       	mov	r17, r25
    4ea8:	2a 2d       	mov	r18, r10
    4eaa:	3b 2d       	mov	r19, r11
    4eac:	4c 2d       	mov	r20, r12
    4eae:	5d 2d       	mov	r21, r13
    4eb0:	6e 2d       	mov	r22, r14
    4eb2:	7f 2d       	mov	r23, r15
    4eb4:	80 2f       	mov	r24, r16
    4eb6:	91 2f       	mov	r25, r17
    4eb8:	82 2f       	mov	r24, r18
    4eba:	80 5d       	subi	r24, 0xD0	; 208
    4ebc:	0e 94 04 2a 	call	0x5408	; 0x5408 <Lcd_SendData>
        reversed /= 10;
    4ec0:	aa 80       	ldd	r10, Y+2	; 0x02
    4ec2:	bb 80       	ldd	r11, Y+3	; 0x03
    4ec4:	cc 80       	ldd	r12, Y+4	; 0x04
    4ec6:	dd 80       	ldd	r13, Y+5	; 0x05
    4ec8:	ee 80       	ldd	r14, Y+6	; 0x06
    4eca:	ff 80       	ldd	r15, Y+7	; 0x07
    4ecc:	08 85       	ldd	r16, Y+8	; 0x08
    4ece:	19 85       	ldd	r17, Y+9	; 0x09
    4ed0:	2a 2d       	mov	r18, r10
    4ed2:	3b 2d       	mov	r19, r11
    4ed4:	4c 2d       	mov	r20, r12
    4ed6:	5d 2d       	mov	r21, r13
    4ed8:	6e 2d       	mov	r22, r14
    4eda:	7f 2d       	mov	r23, r15
    4edc:	80 2f       	mov	r24, r16
    4ede:	91 2f       	mov	r25, r17
    4ee0:	0f 2e       	mov	r0, r31
    4ee2:	fa e0       	ldi	r31, 0x0A	; 10
    4ee4:	af 2e       	mov	r10, r31
    4ee6:	f0 2d       	mov	r31, r0
    4ee8:	bb 24       	eor	r11, r11
    4eea:	cc 24       	eor	r12, r12
    4eec:	dd 24       	eor	r13, r13
    4eee:	ee 24       	eor	r14, r14
    4ef0:	ff 24       	eor	r15, r15
    4ef2:	00 e0       	ldi	r16, 0x00	; 0
    4ef4:	10 e0       	ldi	r17, 0x00	; 0
    4ef6:	0e 94 c8 00 	call	0x190	; 0x190 <__udivdi3>
    4efa:	a2 2e       	mov	r10, r18
    4efc:	b3 2e       	mov	r11, r19
    4efe:	c4 2e       	mov	r12, r20
    4f00:	d5 2e       	mov	r13, r21
    4f02:	e6 2e       	mov	r14, r22
    4f04:	f7 2e       	mov	r15, r23
    4f06:	08 2f       	mov	r16, r24
    4f08:	19 2f       	mov	r17, r25
    4f0a:	aa 82       	std	Y+2, r10	; 0x02
    4f0c:	bb 82       	std	Y+3, r11	; 0x03
    4f0e:	cc 82       	std	Y+4, r12	; 0x04
    4f10:	dd 82       	std	Y+5, r13	; 0x05
    4f12:	ee 82       	std	Y+6, r14	; 0x06
    4f14:	ff 82       	std	Y+7, r15	; 0x07
    4f16:	08 87       	std	Y+8, r16	; 0x08
    4f18:	19 87       	std	Y+9, r17	; 0x09
        digitsCounter--;
    4f1a:	89 81       	ldd	r24, Y+1	; 0x01
    4f1c:	81 50       	subi	r24, 0x01	; 1
    4f1e:	89 83       	std	Y+1, r24	; 0x01
    do {
        reversed = (reversed*10) + (number%10);
        number /= 10;
        digitsCounter++;
    } while (number > 0);
    while (digitsCounter > 0) {
    4f20:	89 81       	ldd	r24, Y+1	; 0x01
    4f22:	88 23       	and	r24, r24
    4f24:	09 f0       	breq	.+2      	; 0x4f28 <Lcd_DisplayNumber+0x792>
    4f26:	9b cf       	rjmp	.-202    	; 0x4e5e <Lcd_DisplayNumber+0x6c8>
        Lcd_SendData(reversed%10 + '0');
        reversed /= 10;
        digitsCounter--;
    }
}
    4f28:	cd 59       	subi	r28, 0x9D	; 157
    4f2a:	df 4f       	sbci	r29, 0xFF	; 255
    4f2c:	0f b6       	in	r0, 0x3f	; 63
    4f2e:	f8 94       	cli
    4f30:	de bf       	out	0x3e, r29	; 62
    4f32:	0f be       	out	0x3f, r0	; 63
    4f34:	cd bf       	out	0x3d, r28	; 61
    4f36:	cf 91       	pop	r28
    4f38:	df 91       	pop	r29
    4f3a:	1f 91       	pop	r17
    4f3c:	0f 91       	pop	r16
    4f3e:	ff 90       	pop	r15
    4f40:	ef 90       	pop	r14
    4f42:	df 90       	pop	r13
    4f44:	cf 90       	pop	r12
    4f46:	bf 90       	pop	r11
    4f48:	af 90       	pop	r10
    4f4a:	08 95       	ret

00004f4c <Lcd_ClearDisplay>:

void Lcd_ClearDisplay(void) {
    4f4c:	df 93       	push	r29
    4f4e:	cf 93       	push	r28
    4f50:	cd b7       	in	r28, 0x3d	; 61
    4f52:	de b7       	in	r29, 0x3e	; 62
    Lcd_SendCommand(1);
    4f54:	81 e0       	ldi	r24, 0x01	; 1
    4f56:	0e 94 62 29 	call	0x52c4	; 0x52c4 <Lcd_SendCommand>
}
    4f5a:	cf 91       	pop	r28
    4f5c:	df 91       	pop	r29
    4f5e:	08 95       	ret

00004f60 <Lcd_SetCursorPosition>:
// 1, 39 -> 1*0x40 + 39 = 0x40 + 0x27 = 0x67
void Lcd_SetCursorPosition(u8 row, u8 column) {
    4f60:	df 93       	push	r29
    4f62:	cf 93       	push	r28
    4f64:	00 d0       	rcall	.+0      	; 0x4f66 <Lcd_SetCursorPosition+0x6>
    4f66:	0f 92       	push	r0
    4f68:	cd b7       	in	r28, 0x3d	; 61
    4f6a:	de b7       	in	r29, 0x3e	; 62
    4f6c:	8a 83       	std	Y+2, r24	; 0x02
    4f6e:	6b 83       	std	Y+3, r22	; 0x03
    u8 address = row*0x40 + column;
    4f70:	8a 81       	ldd	r24, Y+2	; 0x02
    4f72:	88 2f       	mov	r24, r24
    4f74:	90 e0       	ldi	r25, 0x00	; 0
    4f76:	00 24       	eor	r0, r0
    4f78:	96 95       	lsr	r25
    4f7a:	87 95       	ror	r24
    4f7c:	07 94       	ror	r0
    4f7e:	96 95       	lsr	r25
    4f80:	87 95       	ror	r24
    4f82:	07 94       	ror	r0
    4f84:	98 2f       	mov	r25, r24
    4f86:	80 2d       	mov	r24, r0
    4f88:	98 2f       	mov	r25, r24
    4f8a:	8b 81       	ldd	r24, Y+3	; 0x03
    4f8c:	89 0f       	add	r24, r25
    4f8e:	89 83       	std	Y+1, r24	; 0x01
    SET_BIT(address, 7);
    4f90:	89 81       	ldd	r24, Y+1	; 0x01
    4f92:	80 68       	ori	r24, 0x80	; 128
    4f94:	89 83       	std	Y+1, r24	; 0x01
    Lcd_SendCommand(address);
    4f96:	89 81       	ldd	r24, Y+1	; 0x01
    4f98:	0e 94 62 29 	call	0x52c4	; 0x52c4 <Lcd_SendCommand>
}
    4f9c:	0f 90       	pop	r0
    4f9e:	0f 90       	pop	r0
    4fa0:	0f 90       	pop	r0
    4fa2:	cf 91       	pop	r28
    4fa4:	df 91       	pop	r29
    4fa6:	08 95       	ret

00004fa8 <Lcd_ShiftDisplayLeft>:

void Lcd_ShiftDisplayLeft(u8 count) {
    4fa8:	df 93       	push	r29
    4faa:	cf 93       	push	r28
    4fac:	0f 92       	push	r0
    4fae:	cd b7       	in	r28, 0x3d	; 61
    4fb0:	de b7       	in	r29, 0x3e	; 62
    4fb2:	89 83       	std	Y+1, r24	; 0x01
    4fb4:	06 c0       	rjmp	.+12     	; 0x4fc2 <Lcd_ShiftDisplayLeft+0x1a>
    while (count > 0) {
        Lcd_SendCommand(0b00011000);
    4fb6:	88 e1       	ldi	r24, 0x18	; 24
    4fb8:	0e 94 62 29 	call	0x52c4	; 0x52c4 <Lcd_SendCommand>
        count--;
    4fbc:	89 81       	ldd	r24, Y+1	; 0x01
    4fbe:	81 50       	subi	r24, 0x01	; 1
    4fc0:	89 83       	std	Y+1, r24	; 0x01
    SET_BIT(address, 7);
    Lcd_SendCommand(address);
}

void Lcd_ShiftDisplayLeft(u8 count) {
    while (count > 0) {
    4fc2:	89 81       	ldd	r24, Y+1	; 0x01
    4fc4:	88 23       	and	r24, r24
    4fc6:	b9 f7       	brne	.-18     	; 0x4fb6 <Lcd_ShiftDisplayLeft+0xe>
        Lcd_SendCommand(0b00011000);
        count--;
    }
}
    4fc8:	0f 90       	pop	r0
    4fca:	cf 91       	pop	r28
    4fcc:	df 91       	pop	r29
    4fce:	08 95       	ret

00004fd0 <Lcd_moveCursor>:
void Lcd_moveCursor(u8 row,u8 col)
{
    4fd0:	df 93       	push	r29
    4fd2:	cf 93       	push	r28
    4fd4:	00 d0       	rcall	.+0      	; 0x4fd6 <Lcd_moveCursor+0x6>
    4fd6:	00 d0       	rcall	.+0      	; 0x4fd8 <Lcd_moveCursor+0x8>
    4fd8:	0f 92       	push	r0
    4fda:	cd b7       	in	r28, 0x3d	; 61
    4fdc:	de b7       	in	r29, 0x3e	; 62
    4fde:	8a 83       	std	Y+2, r24	; 0x02
    4fe0:	6b 83       	std	Y+3, r22	; 0x03

	u8 Lcd_memory_address;
	switch(row)
    4fe2:	8a 81       	ldd	r24, Y+2	; 0x02
    4fe4:	28 2f       	mov	r18, r24
    4fe6:	30 e0       	ldi	r19, 0x00	; 0
    4fe8:	3d 83       	std	Y+5, r19	; 0x05
    4fea:	2c 83       	std	Y+4, r18	; 0x04
    4fec:	8c 81       	ldd	r24, Y+4	; 0x04
    4fee:	9d 81       	ldd	r25, Y+5	; 0x05
    4ff0:	00 97       	sbiw	r24, 0x00	; 0
    4ff2:	31 f0       	breq	.+12     	; 0x5000 <Lcd_moveCursor+0x30>
    4ff4:	2c 81       	ldd	r18, Y+4	; 0x04
    4ff6:	3d 81       	ldd	r19, Y+5	; 0x05
    4ff8:	21 30       	cpi	r18, 0x01	; 1
    4ffa:	31 05       	cpc	r19, r1
    4ffc:	21 f0       	breq	.+8      	; 0x5006 <Lcd_moveCursor+0x36>
    4ffe:	06 c0       	rjmp	.+12     	; 0x500c <Lcd_moveCursor+0x3c>
	{
	case 0:
		Lcd_memory_address = col;
    5000:	8b 81       	ldd	r24, Y+3	; 0x03
    5002:	89 83       	std	Y+1, r24	; 0x01
    5004:	03 c0       	rjmp	.+6      	; 0x500c <Lcd_moveCursor+0x3c>
		break;
	case 1:
		Lcd_memory_address = col + 0x40;
    5006:	8b 81       	ldd	r24, Y+3	; 0x03
    5008:	80 5c       	subi	r24, 0xC0	; 192
    500a:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/* Move the LCD cursor to this specific address */
	Lcd_SendCommand( Lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    500c:	89 81       	ldd	r24, Y+1	; 0x01
    500e:	80 68       	ori	r24, 0x80	; 128
    5010:	0e 94 62 29 	call	0x52c4	; 0x52c4 <Lcd_SendCommand>

}
    5014:	0f 90       	pop	r0
    5016:	0f 90       	pop	r0
    5018:	0f 90       	pop	r0
    501a:	0f 90       	pop	r0
    501c:	0f 90       	pop	r0
    501e:	cf 91       	pop	r28
    5020:	df 91       	pop	r29
    5022:	08 95       	ret

00005024 <Lcd_ShiftDisplayRight>:
void Lcd_ShiftDisplayRight(u8 count) {
    5024:	df 93       	push	r29
    5026:	cf 93       	push	r28
    5028:	0f 92       	push	r0
    502a:	cd b7       	in	r28, 0x3d	; 61
    502c:	de b7       	in	r29, 0x3e	; 62
    502e:	89 83       	std	Y+1, r24	; 0x01
    5030:	06 c0       	rjmp	.+12     	; 0x503e <Lcd_ShiftDisplayRight+0x1a>
    while (count > 0) {
        Lcd_SendCommand(0b00011100);
    5032:	8c e1       	ldi	r24, 0x1C	; 28
    5034:	0e 94 62 29 	call	0x52c4	; 0x52c4 <Lcd_SendCommand>
        count--;
    5038:	89 81       	ldd	r24, Y+1	; 0x01
    503a:	81 50       	subi	r24, 0x01	; 1
    503c:	89 83       	std	Y+1, r24	; 0x01
	/* Move the LCD cursor to this specific address */
	Lcd_SendCommand( Lcd_memory_address | LCD_SET_CURSOR_LOCATION);

}
void Lcd_ShiftDisplayRight(u8 count) {
    while (count > 0) {
    503e:	89 81       	ldd	r24, Y+1	; 0x01
    5040:	88 23       	and	r24, r24
    5042:	b9 f7       	brne	.-18     	; 0x5032 <Lcd_ShiftDisplayRight+0xe>
        Lcd_SendCommand(0b00011100);
        count--;
    }
}
    5044:	0f 90       	pop	r0
    5046:	cf 91       	pop	r28
    5048:	df 91       	pop	r29
    504a:	08 95       	ret

0000504c <Lcd_ReturnHome>:

void Lcd_ReturnHome(void) {
    504c:	df 93       	push	r29
    504e:	cf 93       	push	r28
    5050:	cd b7       	in	r28, 0x3d	; 61
    5052:	de b7       	in	r29, 0x3e	; 62
    Lcd_SendCommand(0b00000010);
    5054:	82 e0       	ldi	r24, 0x02	; 2
    5056:	0e 94 62 29 	call	0x52c4	; 0x52c4 <Lcd_SendCommand>
}
    505a:	cf 91       	pop	r28
    505c:	df 91       	pop	r29
    505e:	08 95       	ret

00005060 <Lcd_ShiftCursorRight>:

void Lcd_ShiftCursorRight(u8 count) {
    5060:	df 93       	push	r29
    5062:	cf 93       	push	r28
    5064:	0f 92       	push	r0
    5066:	cd b7       	in	r28, 0x3d	; 61
    5068:	de b7       	in	r29, 0x3e	; 62
    506a:	89 83       	std	Y+1, r24	; 0x01
    506c:	06 c0       	rjmp	.+12     	; 0x507a <Lcd_ShiftCursorRight+0x1a>
    while (count > 0) {
        Lcd_SendCommand(0b00010100);
    506e:	84 e1       	ldi	r24, 0x14	; 20
    5070:	0e 94 62 29 	call	0x52c4	; 0x52c4 <Lcd_SendCommand>
        count--;
    5074:	89 81       	ldd	r24, Y+1	; 0x01
    5076:	81 50       	subi	r24, 0x01	; 1
    5078:	89 83       	std	Y+1, r24	; 0x01
void Lcd_ReturnHome(void) {
    Lcd_SendCommand(0b00000010);
}

void Lcd_ShiftCursorRight(u8 count) {
    while (count > 0) {
    507a:	89 81       	ldd	r24, Y+1	; 0x01
    507c:	88 23       	and	r24, r24
    507e:	b9 f7       	brne	.-18     	; 0x506e <Lcd_ShiftCursorRight+0xe>
        Lcd_SendCommand(0b00010100);
        count--;
    }
}
    5080:	0f 90       	pop	r0
    5082:	cf 91       	pop	r28
    5084:	df 91       	pop	r29
    5086:	08 95       	ret

00005088 <Lcd_ShiftCursorLeft>:

void Lcd_ShiftCursorLeft(u8 count) {
    5088:	df 93       	push	r29
    508a:	cf 93       	push	r28
    508c:	0f 92       	push	r0
    508e:	cd b7       	in	r28, 0x3d	; 61
    5090:	de b7       	in	r29, 0x3e	; 62
    5092:	89 83       	std	Y+1, r24	; 0x01
    5094:	06 c0       	rjmp	.+12     	; 0x50a2 <Lcd_ShiftCursorLeft+0x1a>
    while (count > 0) {
        Lcd_SendCommand(0b00010000);
    5096:	80 e1       	ldi	r24, 0x10	; 16
    5098:	0e 94 62 29 	call	0x52c4	; 0x52c4 <Lcd_SendCommand>
        count--;
    509c:	89 81       	ldd	r24, Y+1	; 0x01
    509e:	81 50       	subi	r24, 0x01	; 1
    50a0:	89 83       	std	Y+1, r24	; 0x01
        count--;
    }
}

void Lcd_ShiftCursorLeft(u8 count) {
    while (count > 0) {
    50a2:	89 81       	ldd	r24, Y+1	; 0x01
    50a4:	88 23       	and	r24, r24
    50a6:	b9 f7       	brne	.-18     	; 0x5096 <Lcd_ShiftCursorLeft+0xe>
        Lcd_SendCommand(0b00010000);
        count--;
    }
}
    50a8:	0f 90       	pop	r0
    50aa:	cf 91       	pop	r28
    50ac:	df 91       	pop	r29
    50ae:	08 95       	ret

000050b0 <Lcd_ControlDisplay>:

void Lcd_ControlDisplay(const Lcd_DisplayControlType* control) {
    50b0:	df 93       	push	r29
    50b2:	cf 93       	push	r28
    50b4:	00 d0       	rcall	.+0      	; 0x50b6 <Lcd_ControlDisplay+0x6>
    50b6:	0f 92       	push	r0
    50b8:	cd b7       	in	r28, 0x3d	; 61
    50ba:	de b7       	in	r29, 0x3e	; 62
    50bc:	9b 83       	std	Y+3, r25	; 0x03
    50be:	8a 83       	std	Y+2, r24	; 0x02
    u8 command;
    /* Display ON/OFF Control */
    command = 0b00001000;
    50c0:	88 e0       	ldi	r24, 0x08	; 8
    50c2:	89 83       	std	Y+1, r24	; 0x01
    if (control->display == LCD_STATE_ON) {
    50c4:	ea 81       	ldd	r30, Y+2	; 0x02
    50c6:	fb 81       	ldd	r31, Y+3	; 0x03
    50c8:	80 81       	ld	r24, Z
    50ca:	81 30       	cpi	r24, 0x01	; 1
    50cc:	99 f4       	brne	.+38     	; 0x50f4 <Lcd_ControlDisplay+0x44>
        SET_BIT(command, 2);
    50ce:	89 81       	ldd	r24, Y+1	; 0x01
    50d0:	84 60       	ori	r24, 0x04	; 4
    50d2:	89 83       	std	Y+1, r24	; 0x01
        if (control->cursor == LCD_STATE_ON) {
    50d4:	ea 81       	ldd	r30, Y+2	; 0x02
    50d6:	fb 81       	ldd	r31, Y+3	; 0x03
    50d8:	81 81       	ldd	r24, Z+1	; 0x01
    50da:	81 30       	cpi	r24, 0x01	; 1
    50dc:	59 f4       	brne	.+22     	; 0x50f4 <Lcd_ControlDisplay+0x44>
            SET_BIT(command, 1);
    50de:	89 81       	ldd	r24, Y+1	; 0x01
    50e0:	82 60       	ori	r24, 0x02	; 2
    50e2:	89 83       	std	Y+1, r24	; 0x01
            if (control->cursorBlink == LCD_STATE_ON) {
    50e4:	ea 81       	ldd	r30, Y+2	; 0x02
    50e6:	fb 81       	ldd	r31, Y+3	; 0x03
    50e8:	82 81       	ldd	r24, Z+2	; 0x02
    50ea:	81 30       	cpi	r24, 0x01	; 1
    50ec:	19 f4       	brne	.+6      	; 0x50f4 <Lcd_ControlDisplay+0x44>
                SET_BIT(command, 0);
    50ee:	89 81       	ldd	r24, Y+1	; 0x01
    50f0:	81 60       	ori	r24, 0x01	; 1
    50f2:	89 83       	std	Y+1, r24	; 0x01
            }
        }
    }
    Lcd_SendCommand(command);
    50f4:	89 81       	ldd	r24, Y+1	; 0x01
    50f6:	0e 94 62 29 	call	0x52c4	; 0x52c4 <Lcd_SendCommand>
    /* Function Set */
#if LCD_MODE == LCD_MODE_8_BIT
    command = 0b00110000;
    50fa:	80 e3       	ldi	r24, 0x30	; 48
    50fc:	89 83       	std	Y+1, r24	; 0x01
#elif LCD_MODE == LCD_MODE_4_BIT
    command = 0b00100000;
#endif
    if (control->lines == LCD_LINES_2) {
    50fe:	ea 81       	ldd	r30, Y+2	; 0x02
    5100:	fb 81       	ldd	r31, Y+3	; 0x03
    5102:	83 81       	ldd	r24, Z+3	; 0x03
    5104:	81 30       	cpi	r24, 0x01	; 1
    5106:	19 f4       	brne	.+6      	; 0x510e <Lcd_ControlDisplay+0x5e>
        SET_BIT(command, 3);
    5108:	89 81       	ldd	r24, Y+1	; 0x01
    510a:	88 60       	ori	r24, 0x08	; 8
    510c:	89 83       	std	Y+1, r24	; 0x01
    }
    if (control->font == LCD_FONT_5X10) {
    510e:	ea 81       	ldd	r30, Y+2	; 0x02
    5110:	fb 81       	ldd	r31, Y+3	; 0x03
    5112:	84 81       	ldd	r24, Z+4	; 0x04
    5114:	81 30       	cpi	r24, 0x01	; 1
    5116:	19 f4       	brne	.+6      	; 0x511e <Lcd_ControlDisplay+0x6e>
        SET_BIT(command, 2);
    5118:	89 81       	ldd	r24, Y+1	; 0x01
    511a:	84 60       	ori	r24, 0x04	; 4
    511c:	89 83       	std	Y+1, r24	; 0x01
    }
    Lcd_SendCommand(command);
    511e:	89 81       	ldd	r24, Y+1	; 0x01
    5120:	0e 94 62 29 	call	0x52c4	; 0x52c4 <Lcd_SendCommand>
}
    5124:	0f 90       	pop	r0
    5126:	0f 90       	pop	r0
    5128:	0f 90       	pop	r0
    512a:	cf 91       	pop	r28
    512c:	df 91       	pop	r29
    512e:	08 95       	ret

00005130 <Lcd_SaveSpecialCharacter>:

void Lcd_SaveSpecialCharacter(u8 location, u8* pattern) {
    5130:	df 93       	push	r29
    5132:	cf 93       	push	r28
    5134:	00 d0       	rcall	.+0      	; 0x5136 <Lcd_SaveSpecialCharacter+0x6>
    5136:	00 d0       	rcall	.+0      	; 0x5138 <Lcd_SaveSpecialCharacter+0x8>
    5138:	cd b7       	in	r28, 0x3d	; 61
    513a:	de b7       	in	r29, 0x3e	; 62
    513c:	8a 83       	std	Y+2, r24	; 0x02
    513e:	7c 83       	std	Y+4, r23	; 0x04
    5140:	6b 83       	std	Y+3, r22	; 0x03
    u8 i;
    if (location < 8) {
    5142:	8a 81       	ldd	r24, Y+2	; 0x02
    5144:	88 30       	cpi	r24, 0x08	; 8
    5146:	18 f5       	brcc	.+70     	; 0x518e <Lcd_SaveSpecialCharacter+0x5e>
        location *= 8;
    5148:	8a 81       	ldd	r24, Y+2	; 0x02
    514a:	88 2f       	mov	r24, r24
    514c:	90 e0       	ldi	r25, 0x00	; 0
    514e:	88 0f       	add	r24, r24
    5150:	99 1f       	adc	r25, r25
    5152:	88 0f       	add	r24, r24
    5154:	99 1f       	adc	r25, r25
    5156:	88 0f       	add	r24, r24
    5158:	99 1f       	adc	r25, r25
    515a:	8a 83       	std	Y+2, r24	; 0x02
        SET_BIT(location, 6);
    515c:	8a 81       	ldd	r24, Y+2	; 0x02
    515e:	80 64       	ori	r24, 0x40	; 64
    5160:	8a 83       	std	Y+2, r24	; 0x02
        Lcd_SendCommand(location);
    5162:	8a 81       	ldd	r24, Y+2	; 0x02
    5164:	0e 94 62 29 	call	0x52c4	; 0x52c4 <Lcd_SendCommand>
        for (i=0; i<8; i++) {
    5168:	19 82       	std	Y+1, r1	; 0x01
    516a:	0e c0       	rjmp	.+28     	; 0x5188 <Lcd_SaveSpecialCharacter+0x58>
            Lcd_SendData(pattern[i]);
    516c:	89 81       	ldd	r24, Y+1	; 0x01
    516e:	28 2f       	mov	r18, r24
    5170:	30 e0       	ldi	r19, 0x00	; 0
    5172:	8b 81       	ldd	r24, Y+3	; 0x03
    5174:	9c 81       	ldd	r25, Y+4	; 0x04
    5176:	fc 01       	movw	r30, r24
    5178:	e2 0f       	add	r30, r18
    517a:	f3 1f       	adc	r31, r19
    517c:	80 81       	ld	r24, Z
    517e:	0e 94 04 2a 	call	0x5408	; 0x5408 <Lcd_SendData>
    u8 i;
    if (location < 8) {
        location *= 8;
        SET_BIT(location, 6);
        Lcd_SendCommand(location);
        for (i=0; i<8; i++) {
    5182:	89 81       	ldd	r24, Y+1	; 0x01
    5184:	8f 5f       	subi	r24, 0xFF	; 255
    5186:	89 83       	std	Y+1, r24	; 0x01
    5188:	89 81       	ldd	r24, Y+1	; 0x01
    518a:	88 30       	cpi	r24, 0x08	; 8
    518c:	78 f3       	brcs	.-34     	; 0x516c <Lcd_SaveSpecialCharacter+0x3c>
            Lcd_SendData(pattern[i]);
        }
    }
}
    518e:	0f 90       	pop	r0
    5190:	0f 90       	pop	r0
    5192:	0f 90       	pop	r0
    5194:	0f 90       	pop	r0
    5196:	cf 91       	pop	r28
    5198:	df 91       	pop	r29
    519a:	08 95       	ret

0000519c <Lcd_Print>:

void Lcd_Print(char* str, ...) {
    519c:	df 93       	push	r29
    519e:	cf 93       	push	r28
    51a0:	00 d0       	rcall	.+0      	; 0x51a2 <Lcd_Print+0x6>
    51a2:	00 d0       	rcall	.+0      	; 0x51a4 <Lcd_Print+0x8>
    51a4:	cd b7       	in	r28, 0x3d	; 61
    51a6:	de b7       	in	r29, 0x3e	; 62
	va_list var_list;
	va_start(var_list, str);
    51a8:	ce 01       	movw	r24, r28
    51aa:	0b 96       	adiw	r24, 0x0b	; 11
    51ac:	9a 83       	std	Y+2, r25	; 0x02
    51ae:	89 83       	std	Y+1, r24	; 0x01
    51b0:	7c c0       	rjmp	.+248    	; 0x52aa <Lcd_Print+0x10e>
	while(*str != '\0') {
		if (*str == '%') {
    51b2:	e9 85       	ldd	r30, Y+9	; 0x09
    51b4:	fa 85       	ldd	r31, Y+10	; 0x0a
    51b6:	80 81       	ld	r24, Z
    51b8:	85 32       	cpi	r24, 0x25	; 37
    51ba:	09 f0       	breq	.+2      	; 0x51be <Lcd_Print+0x22>
    51bc:	6c c0       	rjmp	.+216    	; 0x5296 <Lcd_Print+0xfa>
			str++;
    51be:	89 85       	ldd	r24, Y+9	; 0x09
    51c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    51c2:	01 96       	adiw	r24, 0x01	; 1
    51c4:	9a 87       	std	Y+10, r25	; 0x0a
    51c6:	89 87       	std	Y+9, r24	; 0x09
			switch(*str) {
    51c8:	e9 85       	ldd	r30, Y+9	; 0x09
    51ca:	fa 85       	ldd	r31, Y+10	; 0x0a
    51cc:	80 81       	ld	r24, Z
    51ce:	28 2f       	mov	r18, r24
    51d0:	30 e0       	ldi	r19, 0x00	; 0
    51d2:	3c 83       	std	Y+4, r19	; 0x04
    51d4:	2b 83       	std	Y+3, r18	; 0x03
    51d6:	8b 81       	ldd	r24, Y+3	; 0x03
    51d8:	9c 81       	ldd	r25, Y+4	; 0x04
    51da:	84 36       	cpi	r24, 0x64	; 100
    51dc:	91 05       	cpc	r25, r1
    51de:	11 f1       	breq	.+68     	; 0x5224 <Lcd_Print+0x88>
    51e0:	2b 81       	ldd	r18, Y+3	; 0x03
    51e2:	3c 81       	ldd	r19, Y+4	; 0x04
    51e4:	25 36       	cpi	r18, 0x65	; 101
    51e6:	31 05       	cpc	r19, r1
    51e8:	34 f4       	brge	.+12     	; 0x51f6 <Lcd_Print+0x5a>
    51ea:	8b 81       	ldd	r24, Y+3	; 0x03
    51ec:	9c 81       	ldd	r25, Y+4	; 0x04
    51ee:	83 36       	cpi	r24, 0x63	; 99
    51f0:	91 05       	cpc	r25, r1
    51f2:	61 f0       	breq	.+24     	; 0x520c <Lcd_Print+0x70>
    51f4:	4a c0       	rjmp	.+148    	; 0x528a <Lcd_Print+0xee>
    51f6:	2b 81       	ldd	r18, Y+3	; 0x03
    51f8:	3c 81       	ldd	r19, Y+4	; 0x04
    51fa:	2c 36       	cpi	r18, 0x6C	; 108
    51fc:	31 05       	cpc	r19, r1
    51fe:	a9 f1       	breq	.+106    	; 0x526a <Lcd_Print+0xce>
    5200:	8b 81       	ldd	r24, Y+3	; 0x03
    5202:	9c 81       	ldd	r25, Y+4	; 0x04
    5204:	85 37       	cpi	r24, 0x75	; 117
    5206:	91 05       	cpc	r25, r1
    5208:	f9 f0       	breq	.+62     	; 0x5248 <Lcd_Print+0xac>
    520a:	3f c0       	rjmp	.+126    	; 0x528a <Lcd_Print+0xee>
				case 'c':
                    Lcd_DisplayCharcter((char)va_arg(var_list, int));
    520c:	29 81       	ldd	r18, Y+1	; 0x01
    520e:	3a 81       	ldd	r19, Y+2	; 0x02
    5210:	c9 01       	movw	r24, r18
    5212:	02 96       	adiw	r24, 0x02	; 2
    5214:	9a 83       	std	Y+2, r25	; 0x02
    5216:	89 83       	std	Y+1, r24	; 0x01
    5218:	f9 01       	movw	r30, r18
    521a:	80 81       	ld	r24, Z
    521c:	91 81       	ldd	r25, Z+1	; 0x01
    521e:	0e 94 93 23 	call	0x4726	; 0x4726 <Lcd_DisplayCharcter>
    5222:	3e c0       	rjmp	.+124    	; 0x52a0 <Lcd_Print+0x104>
					break;
				case 'd':
                    Lcd_DisplayNumber((int)va_arg(var_list, int));
    5224:	29 81       	ldd	r18, Y+1	; 0x01
    5226:	3a 81       	ldd	r19, Y+2	; 0x02
    5228:	c9 01       	movw	r24, r18
    522a:	02 96       	adiw	r24, 0x02	; 2
    522c:	9a 83       	std	Y+2, r25	; 0x02
    522e:	89 83       	std	Y+1, r24	; 0x01
    5230:	f9 01       	movw	r30, r18
    5232:	80 81       	ld	r24, Z
    5234:	91 81       	ldd	r25, Z+1	; 0x01
    5236:	aa 27       	eor	r26, r26
    5238:	97 fd       	sbrc	r25, 7
    523a:	a0 95       	com	r26
    523c:	ba 2f       	mov	r27, r26
    523e:	bc 01       	movw	r22, r24
    5240:	cd 01       	movw	r24, r26
    5242:	0e 94 cb 23 	call	0x4796	; 0x4796 <Lcd_DisplayNumber>
    5246:	2c c0       	rjmp	.+88     	; 0x52a0 <Lcd_Print+0x104>
					break;
				case 'u':
                    Lcd_DisplayNumber((unsigned int)va_arg(var_list, unsigned int));
    5248:	29 81       	ldd	r18, Y+1	; 0x01
    524a:	3a 81       	ldd	r19, Y+2	; 0x02
    524c:	c9 01       	movw	r24, r18
    524e:	02 96       	adiw	r24, 0x02	; 2
    5250:	9a 83       	std	Y+2, r25	; 0x02
    5252:	89 83       	std	Y+1, r24	; 0x01
    5254:	f9 01       	movw	r30, r18
    5256:	80 81       	ld	r24, Z
    5258:	91 81       	ldd	r25, Z+1	; 0x01
    525a:	cc 01       	movw	r24, r24
    525c:	a0 e0       	ldi	r26, 0x00	; 0
    525e:	b0 e0       	ldi	r27, 0x00	; 0
    5260:	bc 01       	movw	r22, r24
    5262:	cd 01       	movw	r24, r26
    5264:	0e 94 cb 23 	call	0x4796	; 0x4796 <Lcd_DisplayNumber>
    5268:	1b c0       	rjmp	.+54     	; 0x52a0 <Lcd_Print+0x104>
					break;
				case 'l':
                    Lcd_DisplayNumber((long int)va_arg(var_list, long int));
    526a:	29 81       	ldd	r18, Y+1	; 0x01
    526c:	3a 81       	ldd	r19, Y+2	; 0x02
    526e:	c9 01       	movw	r24, r18
    5270:	04 96       	adiw	r24, 0x04	; 4
    5272:	9a 83       	std	Y+2, r25	; 0x02
    5274:	89 83       	std	Y+1, r24	; 0x01
    5276:	f9 01       	movw	r30, r18
    5278:	80 81       	ld	r24, Z
    527a:	91 81       	ldd	r25, Z+1	; 0x01
    527c:	a2 81       	ldd	r26, Z+2	; 0x02
    527e:	b3 81       	ldd	r27, Z+3	; 0x03
    5280:	bc 01       	movw	r22, r24
    5282:	cd 01       	movw	r24, r26
    5284:	0e 94 cb 23 	call	0x4796	; 0x4796 <Lcd_DisplayNumber>
    5288:	0b c0       	rjmp	.+22     	; 0x52a0 <Lcd_Print+0x104>
					break;
				default:
					Lcd_DisplayCharcter(*str);
    528a:	e9 85       	ldd	r30, Y+9	; 0x09
    528c:	fa 85       	ldd	r31, Y+10	; 0x0a
    528e:	80 81       	ld	r24, Z
    5290:	0e 94 93 23 	call	0x4726	; 0x4726 <Lcd_DisplayCharcter>
    5294:	05 c0       	rjmp	.+10     	; 0x52a0 <Lcd_Print+0x104>
					break;
			}
		}
		else {
			Lcd_DisplayCharcter(*str);
    5296:	e9 85       	ldd	r30, Y+9	; 0x09
    5298:	fa 85       	ldd	r31, Y+10	; 0x0a
    529a:	80 81       	ld	r24, Z
    529c:	0e 94 93 23 	call	0x4726	; 0x4726 <Lcd_DisplayCharcter>
		}
		str++;
    52a0:	89 85       	ldd	r24, Y+9	; 0x09
    52a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    52a4:	01 96       	adiw	r24, 0x01	; 1
    52a6:	9a 87       	std	Y+10, r25	; 0x0a
    52a8:	89 87       	std	Y+9, r24	; 0x09
}

void Lcd_Print(char* str, ...) {
	va_list var_list;
	va_start(var_list, str);
	while(*str != '\0') {
    52aa:	e9 85       	ldd	r30, Y+9	; 0x09
    52ac:	fa 85       	ldd	r31, Y+10	; 0x0a
    52ae:	80 81       	ld	r24, Z
    52b0:	88 23       	and	r24, r24
    52b2:	09 f0       	breq	.+2      	; 0x52b6 <Lcd_Print+0x11a>
    52b4:	7e cf       	rjmp	.-260    	; 0x51b2 <Lcd_Print+0x16>
		else {
			Lcd_DisplayCharcter(*str);
		}
		str++;
	}
}
    52b6:	0f 90       	pop	r0
    52b8:	0f 90       	pop	r0
    52ba:	0f 90       	pop	r0
    52bc:	0f 90       	pop	r0
    52be:	cf 91       	pop	r28
    52c0:	df 91       	pop	r29
    52c2:	08 95       	ret

000052c4 <Lcd_SendCommand>:



static void Lcd_SendCommand(u8 command) {
    52c4:	df 93       	push	r29
    52c6:	cf 93       	push	r28
    52c8:	cd b7       	in	r28, 0x3d	; 61
    52ca:	de b7       	in	r29, 0x3e	; 62
    52cc:	29 97       	sbiw	r28, 0x09	; 9
    52ce:	0f b6       	in	r0, 0x3f	; 63
    52d0:	f8 94       	cli
    52d2:	de bf       	out	0x3e, r29	; 62
    52d4:	0f be       	out	0x3f, r0	; 63
    52d6:	cd bf       	out	0x3d, r28	; 61
    52d8:	89 87       	std	Y+9, r24	; 0x09
    DIO_enuWritePin(LCD_PIN_RS, DIO_LOW);
    52da:	87 e0       	ldi	r24, 0x07	; 7
    52dc:	60 e0       	ldi	r22, 0x00	; 0
    52de:	0e 94 45 20 	call	0x408a	; 0x408a <DIO_enuWritePin>
    DIO_enuWritePin(LCD_PIN_RW, DIO_LOW);
    52e2:	86 e0       	ldi	r24, 0x06	; 6
    52e4:	60 e0       	ldi	r22, 0x00	; 0
    52e6:	0e 94 45 20 	call	0x408a	; 0x408a <DIO_enuWritePin>
#if LCD_MODE == LCD_MODE_8_BIT
    DIO_enuWritePin(LCD_PIN_D0, GET_BIT(command, 0));
    52ea:	89 85       	ldd	r24, Y+9	; 0x09
    52ec:	98 2f       	mov	r25, r24
    52ee:	91 70       	andi	r25, 0x01	; 1
    52f0:	80 e1       	ldi	r24, 0x10	; 16
    52f2:	69 2f       	mov	r22, r25
    52f4:	0e 94 45 20 	call	0x408a	; 0x408a <DIO_enuWritePin>
    DIO_enuWritePin(LCD_PIN_D1, GET_BIT(command, 1));
    52f8:	89 85       	ldd	r24, Y+9	; 0x09
    52fa:	86 95       	lsr	r24
    52fc:	98 2f       	mov	r25, r24
    52fe:	91 70       	andi	r25, 0x01	; 1
    5300:	81 e1       	ldi	r24, 0x11	; 17
    5302:	69 2f       	mov	r22, r25
    5304:	0e 94 45 20 	call	0x408a	; 0x408a <DIO_enuWritePin>
    DIO_enuWritePin(LCD_PIN_D2, GET_BIT(command, 2));
    5308:	89 85       	ldd	r24, Y+9	; 0x09
    530a:	86 95       	lsr	r24
    530c:	86 95       	lsr	r24
    530e:	98 2f       	mov	r25, r24
    5310:	91 70       	andi	r25, 0x01	; 1
    5312:	82 e1       	ldi	r24, 0x12	; 18
    5314:	69 2f       	mov	r22, r25
    5316:	0e 94 45 20 	call	0x408a	; 0x408a <DIO_enuWritePin>
    DIO_enuWritePin(LCD_PIN_D3, GET_BIT(command, 3));
    531a:	89 85       	ldd	r24, Y+9	; 0x09
    531c:	86 95       	lsr	r24
    531e:	86 95       	lsr	r24
    5320:	86 95       	lsr	r24
    5322:	98 2f       	mov	r25, r24
    5324:	91 70       	andi	r25, 0x01	; 1
    5326:	83 e1       	ldi	r24, 0x13	; 19
    5328:	69 2f       	mov	r22, r25
    532a:	0e 94 45 20 	call	0x408a	; 0x408a <DIO_enuWritePin>
#endif
    DIO_enuWritePin(LCD_PIN_D4, GET_BIT(command, 4));
    532e:	89 85       	ldd	r24, Y+9	; 0x09
    5330:	82 95       	swap	r24
    5332:	8f 70       	andi	r24, 0x0F	; 15
    5334:	98 2f       	mov	r25, r24
    5336:	91 70       	andi	r25, 0x01	; 1
    5338:	84 e1       	ldi	r24, 0x14	; 20
    533a:	69 2f       	mov	r22, r25
    533c:	0e 94 45 20 	call	0x408a	; 0x408a <DIO_enuWritePin>
    DIO_enuWritePin(LCD_PIN_D5, GET_BIT(command, 5));
    5340:	89 85       	ldd	r24, Y+9	; 0x09
    5342:	82 95       	swap	r24
    5344:	86 95       	lsr	r24
    5346:	87 70       	andi	r24, 0x07	; 7
    5348:	98 2f       	mov	r25, r24
    534a:	91 70       	andi	r25, 0x01	; 1
    534c:	85 e1       	ldi	r24, 0x15	; 21
    534e:	69 2f       	mov	r22, r25
    5350:	0e 94 45 20 	call	0x408a	; 0x408a <DIO_enuWritePin>
    DIO_enuWritePin(LCD_PIN_D6, GET_BIT(command, 6));
    5354:	89 85       	ldd	r24, Y+9	; 0x09
    5356:	82 95       	swap	r24
    5358:	86 95       	lsr	r24
    535a:	86 95       	lsr	r24
    535c:	83 70       	andi	r24, 0x03	; 3
    535e:	98 2f       	mov	r25, r24
    5360:	91 70       	andi	r25, 0x01	; 1
    5362:	86 e1       	ldi	r24, 0x16	; 22
    5364:	69 2f       	mov	r22, r25
    5366:	0e 94 45 20 	call	0x408a	; 0x408a <DIO_enuWritePin>
    DIO_enuWritePin(LCD_PIN_D7, GET_BIT(command, 7));
    536a:	89 85       	ldd	r24, Y+9	; 0x09
    536c:	98 2f       	mov	r25, r24
    536e:	99 1f       	adc	r25, r25
    5370:	99 27       	eor	r25, r25
    5372:	99 1f       	adc	r25, r25
    5374:	87 e1       	ldi	r24, 0x17	; 23
    5376:	69 2f       	mov	r22, r25
    5378:	0e 94 45 20 	call	0x408a	; 0x408a <DIO_enuWritePin>
    DIO_enuWritePin(LCD_PIN_EN, DIO_HIGH);
    537c:	85 e0       	ldi	r24, 0x05	; 5
    537e:	61 e0       	ldi	r22, 0x01	; 1
    5380:	0e 94 45 20 	call	0x408a	; 0x408a <DIO_enuWritePin>
    Delay_ms(2);
    5384:	1d 82       	std	Y+5, r1	; 0x05
    5386:	1e 82       	std	Y+6, r1	; 0x06
    5388:	1f 82       	std	Y+7, r1	; 0x07
    538a:	18 86       	std	Y+8, r1	; 0x08
    538c:	28 c0       	rjmp	.+80     	; 0x53de <Lcd_SendCommand+0x11a>
    538e:	80 ed       	ldi	r24, 0xD0	; 208
    5390:	97 e0       	ldi	r25, 0x07	; 7
    5392:	a0 e0       	ldi	r26, 0x00	; 0
    5394:	b0 e0       	ldi	r27, 0x00	; 0
    5396:	89 83       	std	Y+1, r24	; 0x01
    5398:	9a 83       	std	Y+2, r25	; 0x02
    539a:	ab 83       	std	Y+3, r26	; 0x03
    539c:	bc 83       	std	Y+4, r27	; 0x04
    539e:	0c c0       	rjmp	.+24     	; 0x53b8 <Lcd_SendCommand+0xf4>
    53a0:	00 00       	nop
    53a2:	89 81       	ldd	r24, Y+1	; 0x01
    53a4:	9a 81       	ldd	r25, Y+2	; 0x02
    53a6:	ab 81       	ldd	r26, Y+3	; 0x03
    53a8:	bc 81       	ldd	r27, Y+4	; 0x04
    53aa:	01 97       	sbiw	r24, 0x01	; 1
    53ac:	a1 09       	sbc	r26, r1
    53ae:	b1 09       	sbc	r27, r1
    53b0:	89 83       	std	Y+1, r24	; 0x01
    53b2:	9a 83       	std	Y+2, r25	; 0x02
    53b4:	ab 83       	std	Y+3, r26	; 0x03
    53b6:	bc 83       	std	Y+4, r27	; 0x04
    53b8:	89 81       	ldd	r24, Y+1	; 0x01
    53ba:	9a 81       	ldd	r25, Y+2	; 0x02
    53bc:	ab 81       	ldd	r26, Y+3	; 0x03
    53be:	bc 81       	ldd	r27, Y+4	; 0x04
    53c0:	00 97       	sbiw	r24, 0x00	; 0
    53c2:	a1 05       	cpc	r26, r1
    53c4:	b1 05       	cpc	r27, r1
    53c6:	61 f7       	brne	.-40     	; 0x53a0 <Lcd_SendCommand+0xdc>
    53c8:	8d 81       	ldd	r24, Y+5	; 0x05
    53ca:	9e 81       	ldd	r25, Y+6	; 0x06
    53cc:	af 81       	ldd	r26, Y+7	; 0x07
    53ce:	b8 85       	ldd	r27, Y+8	; 0x08
    53d0:	01 97       	sbiw	r24, 0x01	; 1
    53d2:	a1 09       	sbc	r26, r1
    53d4:	b1 09       	sbc	r27, r1
    53d6:	8d 83       	std	Y+5, r24	; 0x05
    53d8:	9e 83       	std	Y+6, r25	; 0x06
    53da:	af 83       	std	Y+7, r26	; 0x07
    53dc:	b8 87       	std	Y+8, r27	; 0x08
    53de:	8d 81       	ldd	r24, Y+5	; 0x05
    53e0:	9e 81       	ldd	r25, Y+6	; 0x06
    53e2:	af 81       	ldd	r26, Y+7	; 0x07
    53e4:	b8 85       	ldd	r27, Y+8	; 0x08
    53e6:	00 97       	sbiw	r24, 0x00	; 0
    53e8:	a1 05       	cpc	r26, r1
    53ea:	b1 05       	cpc	r27, r1
    53ec:	81 f6       	brne	.-96     	; 0x538e <Lcd_SendCommand+0xca>
    DIO_enuWritePin(LCD_PIN_EN, DIO_LOW);
    53ee:	85 e0       	ldi	r24, 0x05	; 5
    53f0:	60 e0       	ldi	r22, 0x00	; 0
    53f2:	0e 94 45 20 	call	0x408a	; 0x408a <DIO_enuWritePin>
    DIO_enuWritePin(LCD_PIN_D7, GET_BIT(command, 3));
    DIO_enuWritePin(LCD_PIN_EN, DIO_u8_HIGH);
    Delay_ms(2);
    DIO_enuWritePin(LCD_PIN_EN, DIO_u8_LOW);
#endif
}
    53f6:	29 96       	adiw	r28, 0x09	; 9
    53f8:	0f b6       	in	r0, 0x3f	; 63
    53fa:	f8 94       	cli
    53fc:	de bf       	out	0x3e, r29	; 62
    53fe:	0f be       	out	0x3f, r0	; 63
    5400:	cd bf       	out	0x3d, r28	; 61
    5402:	cf 91       	pop	r28
    5404:	df 91       	pop	r29
    5406:	08 95       	ret

00005408 <Lcd_SendData>:

static void Lcd_SendData(u8 data) {
    5408:	df 93       	push	r29
    540a:	cf 93       	push	r28
    540c:	cd b7       	in	r28, 0x3d	; 61
    540e:	de b7       	in	r29, 0x3e	; 62
    5410:	29 97       	sbiw	r28, 0x09	; 9
    5412:	0f b6       	in	r0, 0x3f	; 63
    5414:	f8 94       	cli
    5416:	de bf       	out	0x3e, r29	; 62
    5418:	0f be       	out	0x3f, r0	; 63
    541a:	cd bf       	out	0x3d, r28	; 61
    541c:	89 87       	std	Y+9, r24	; 0x09
	DIO_enuWritePin(LCD_PIN_RS, DIO_HIGH);
    541e:	87 e0       	ldi	r24, 0x07	; 7
    5420:	61 e0       	ldi	r22, 0x01	; 1
    5422:	0e 94 45 20 	call	0x408a	; 0x408a <DIO_enuWritePin>
	DIO_enuWritePin(LCD_PIN_RW, DIO_LOW);
    5426:	86 e0       	ldi	r24, 0x06	; 6
    5428:	60 e0       	ldi	r22, 0x00	; 0
    542a:	0e 94 45 20 	call	0x408a	; 0x408a <DIO_enuWritePin>
#if LCD_MODE == LCD_MODE_8_BIT
	DIO_enuWritePin(LCD_PIN_D0, GET_BIT(data, 0));
    542e:	89 85       	ldd	r24, Y+9	; 0x09
    5430:	98 2f       	mov	r25, r24
    5432:	91 70       	andi	r25, 0x01	; 1
    5434:	80 e1       	ldi	r24, 0x10	; 16
    5436:	69 2f       	mov	r22, r25
    5438:	0e 94 45 20 	call	0x408a	; 0x408a <DIO_enuWritePin>
	DIO_enuWritePin(LCD_PIN_D1, GET_BIT(data, 1));
    543c:	89 85       	ldd	r24, Y+9	; 0x09
    543e:	86 95       	lsr	r24
    5440:	98 2f       	mov	r25, r24
    5442:	91 70       	andi	r25, 0x01	; 1
    5444:	81 e1       	ldi	r24, 0x11	; 17
    5446:	69 2f       	mov	r22, r25
    5448:	0e 94 45 20 	call	0x408a	; 0x408a <DIO_enuWritePin>
    DIO_enuWritePin(LCD_PIN_D2, GET_BIT(data, 2));
    544c:	89 85       	ldd	r24, Y+9	; 0x09
    544e:	86 95       	lsr	r24
    5450:	86 95       	lsr	r24
    5452:	98 2f       	mov	r25, r24
    5454:	91 70       	andi	r25, 0x01	; 1
    5456:	82 e1       	ldi	r24, 0x12	; 18
    5458:	69 2f       	mov	r22, r25
    545a:	0e 94 45 20 	call	0x408a	; 0x408a <DIO_enuWritePin>
    DIO_enuWritePin(LCD_PIN_D3, GET_BIT(data, 3));
    545e:	89 85       	ldd	r24, Y+9	; 0x09
    5460:	86 95       	lsr	r24
    5462:	86 95       	lsr	r24
    5464:	86 95       	lsr	r24
    5466:	98 2f       	mov	r25, r24
    5468:	91 70       	andi	r25, 0x01	; 1
    546a:	83 e1       	ldi	r24, 0x13	; 19
    546c:	69 2f       	mov	r22, r25
    546e:	0e 94 45 20 	call	0x408a	; 0x408a <DIO_enuWritePin>
#endif
    DIO_enuWritePin(LCD_PIN_D4, GET_BIT(data, 4));
    5472:	89 85       	ldd	r24, Y+9	; 0x09
    5474:	82 95       	swap	r24
    5476:	8f 70       	andi	r24, 0x0F	; 15
    5478:	98 2f       	mov	r25, r24
    547a:	91 70       	andi	r25, 0x01	; 1
    547c:	84 e1       	ldi	r24, 0x14	; 20
    547e:	69 2f       	mov	r22, r25
    5480:	0e 94 45 20 	call	0x408a	; 0x408a <DIO_enuWritePin>
    DIO_enuWritePin(LCD_PIN_D5, GET_BIT(data, 5));
    5484:	89 85       	ldd	r24, Y+9	; 0x09
    5486:	82 95       	swap	r24
    5488:	86 95       	lsr	r24
    548a:	87 70       	andi	r24, 0x07	; 7
    548c:	98 2f       	mov	r25, r24
    548e:	91 70       	andi	r25, 0x01	; 1
    5490:	85 e1       	ldi	r24, 0x15	; 21
    5492:	69 2f       	mov	r22, r25
    5494:	0e 94 45 20 	call	0x408a	; 0x408a <DIO_enuWritePin>
    DIO_enuWritePin(LCD_PIN_D6, GET_BIT(data, 6));
    5498:	89 85       	ldd	r24, Y+9	; 0x09
    549a:	82 95       	swap	r24
    549c:	86 95       	lsr	r24
    549e:	86 95       	lsr	r24
    54a0:	83 70       	andi	r24, 0x03	; 3
    54a2:	98 2f       	mov	r25, r24
    54a4:	91 70       	andi	r25, 0x01	; 1
    54a6:	86 e1       	ldi	r24, 0x16	; 22
    54a8:	69 2f       	mov	r22, r25
    54aa:	0e 94 45 20 	call	0x408a	; 0x408a <DIO_enuWritePin>
    DIO_enuWritePin(LCD_PIN_D7, GET_BIT(data, 7));
    54ae:	89 85       	ldd	r24, Y+9	; 0x09
    54b0:	98 2f       	mov	r25, r24
    54b2:	99 1f       	adc	r25, r25
    54b4:	99 27       	eor	r25, r25
    54b6:	99 1f       	adc	r25, r25
    54b8:	87 e1       	ldi	r24, 0x17	; 23
    54ba:	69 2f       	mov	r22, r25
    54bc:	0e 94 45 20 	call	0x408a	; 0x408a <DIO_enuWritePin>
    DIO_enuWritePin(LCD_PIN_EN, DIO_HIGH);
    54c0:	85 e0       	ldi	r24, 0x05	; 5
    54c2:	61 e0       	ldi	r22, 0x01	; 1
    54c4:	0e 94 45 20 	call	0x408a	; 0x408a <DIO_enuWritePin>
    Delay_ms(2);
    54c8:	1d 82       	std	Y+5, r1	; 0x05
    54ca:	1e 82       	std	Y+6, r1	; 0x06
    54cc:	1f 82       	std	Y+7, r1	; 0x07
    54ce:	18 86       	std	Y+8, r1	; 0x08
    54d0:	28 c0       	rjmp	.+80     	; 0x5522 <Lcd_SendData+0x11a>
    54d2:	80 ed       	ldi	r24, 0xD0	; 208
    54d4:	97 e0       	ldi	r25, 0x07	; 7
    54d6:	a0 e0       	ldi	r26, 0x00	; 0
    54d8:	b0 e0       	ldi	r27, 0x00	; 0
    54da:	89 83       	std	Y+1, r24	; 0x01
    54dc:	9a 83       	std	Y+2, r25	; 0x02
    54de:	ab 83       	std	Y+3, r26	; 0x03
    54e0:	bc 83       	std	Y+4, r27	; 0x04
    54e2:	0c c0       	rjmp	.+24     	; 0x54fc <Lcd_SendData+0xf4>
    54e4:	00 00       	nop
    54e6:	89 81       	ldd	r24, Y+1	; 0x01
    54e8:	9a 81       	ldd	r25, Y+2	; 0x02
    54ea:	ab 81       	ldd	r26, Y+3	; 0x03
    54ec:	bc 81       	ldd	r27, Y+4	; 0x04
    54ee:	01 97       	sbiw	r24, 0x01	; 1
    54f0:	a1 09       	sbc	r26, r1
    54f2:	b1 09       	sbc	r27, r1
    54f4:	89 83       	std	Y+1, r24	; 0x01
    54f6:	9a 83       	std	Y+2, r25	; 0x02
    54f8:	ab 83       	std	Y+3, r26	; 0x03
    54fa:	bc 83       	std	Y+4, r27	; 0x04
    54fc:	89 81       	ldd	r24, Y+1	; 0x01
    54fe:	9a 81       	ldd	r25, Y+2	; 0x02
    5500:	ab 81       	ldd	r26, Y+3	; 0x03
    5502:	bc 81       	ldd	r27, Y+4	; 0x04
    5504:	00 97       	sbiw	r24, 0x00	; 0
    5506:	a1 05       	cpc	r26, r1
    5508:	b1 05       	cpc	r27, r1
    550a:	61 f7       	brne	.-40     	; 0x54e4 <Lcd_SendData+0xdc>
    550c:	8d 81       	ldd	r24, Y+5	; 0x05
    550e:	9e 81       	ldd	r25, Y+6	; 0x06
    5510:	af 81       	ldd	r26, Y+7	; 0x07
    5512:	b8 85       	ldd	r27, Y+8	; 0x08
    5514:	01 97       	sbiw	r24, 0x01	; 1
    5516:	a1 09       	sbc	r26, r1
    5518:	b1 09       	sbc	r27, r1
    551a:	8d 83       	std	Y+5, r24	; 0x05
    551c:	9e 83       	std	Y+6, r25	; 0x06
    551e:	af 83       	std	Y+7, r26	; 0x07
    5520:	b8 87       	std	Y+8, r27	; 0x08
    5522:	8d 81       	ldd	r24, Y+5	; 0x05
    5524:	9e 81       	ldd	r25, Y+6	; 0x06
    5526:	af 81       	ldd	r26, Y+7	; 0x07
    5528:	b8 85       	ldd	r27, Y+8	; 0x08
    552a:	00 97       	sbiw	r24, 0x00	; 0
    552c:	a1 05       	cpc	r26, r1
    552e:	b1 05       	cpc	r27, r1
    5530:	81 f6       	brne	.-96     	; 0x54d2 <Lcd_SendData+0xca>
    DIO_enuWritePin(LCD_PIN_EN, DIO_LOW);
    5532:	85 e0       	ldi	r24, 0x05	; 5
    5534:	60 e0       	ldi	r22, 0x00	; 0
    5536:	0e 94 45 20 	call	0x408a	; 0x408a <DIO_enuWritePin>
    DIO_enuWritePin(LCD_PIN_D7, GET_BIT(data, 3));
    DIO_enuWritePin(LCD_PIN_EN, DIO_HIGH);
    Delay_ms(2);
    DIO_enuWritePin(LCD_PIN_EN, DIO_LOW);
#endif
}
    553a:	29 96       	adiw	r28, 0x09	; 9
    553c:	0f b6       	in	r0, 0x3f	; 63
    553e:	f8 94       	cli
    5540:	de bf       	out	0x3e, r29	; 62
    5542:	0f be       	out	0x3f, r0	; 63
    5544:	cd bf       	out	0x3d, r28	; 61
    5546:	cf 91       	pop	r28
    5548:	df 91       	pop	r29
    554a:	08 95       	ret

0000554c <Bluetooth_vInit>:
		.GLOBAL_tcfgUartClkMode = UART_ASYNCHRONOUS,
		.GLOBAL_tcfgUartCommMode = UART_1X_SPEED,
		.GLOBAL_tcfgUartInterrupt = UART_INTERRUPT_DISABLED
};

void Bluetooth_vInit(){
    554c:	df 93       	push	r29
    554e:	cf 93       	push	r28
    5550:	cd b7       	in	r28, 0x3d	; 61
    5552:	de b7       	in	r29, 0x3e	; 62
	UART_vInit(&UART1);
    5554:	88 e5       	ldi	r24, 0x58	; 88
    5556:	93 e0       	ldi	r25, 0x03	; 3
    5558:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <UART_vInit>
}
    555c:	cf 91       	pop	r28
    555e:	df 91       	pop	r29
    5560:	08 95       	ret

00005562 <Bluetooth_vEnable>:

void Bluetooth_vEnable(){
    5562:	df 93       	push	r29
    5564:	cf 93       	push	r28
    5566:	cd b7       	in	r28, 0x3d	; 61
    5568:	de b7       	in	r29, 0x3e	; 62
	UART_vEnable(&UART1);
    556a:	88 e5       	ldi	r24, 0x58	; 88
    556c:	93 e0       	ldi	r25, 0x03	; 3
    556e:	0e 94 27 10 	call	0x204e	; 0x204e <UART_vEnable>
}
    5572:	cf 91       	pop	r28
    5574:	df 91       	pop	r29
    5576:	08 95       	ret

00005578 <Bluetooth_vDisable>:

void Bluetooth_vDisable(){
    5578:	df 93       	push	r29
    557a:	cf 93       	push	r28
    557c:	cd b7       	in	r28, 0x3d	; 61
    557e:	de b7       	in	r29, 0x3e	; 62
	UART_vDisable(&UART1);
    5580:	88 e5       	ldi	r24, 0x58	; 88
    5582:	93 e0       	ldi	r25, 0x03	; 3
    5584:	0e 94 41 10 	call	0x2082	; 0x2082 <UART_vDisable>
}
    5588:	cf 91       	pop	r28
    558a:	df 91       	pop	r29
    558c:	08 95       	ret

0000558e <Bluetooth_vSendData>:

void Bluetooth_vSendData(u8 Copy_u8Data){
    558e:	df 93       	push	r29
    5590:	cf 93       	push	r28
    5592:	0f 92       	push	r0
    5594:	cd b7       	in	r28, 0x3d	; 61
    5596:	de b7       	in	r29, 0x3e	; 62
    5598:	89 83       	std	Y+1, r24	; 0x01
	UART_vSendData(Copy_u8Data);
    559a:	89 81       	ldd	r24, Y+1	; 0x01
    559c:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <UART_vSendData>
}
    55a0:	0f 90       	pop	r0
    55a2:	cf 91       	pop	r28
    55a4:	df 91       	pop	r29
    55a6:	08 95       	ret

000055a8 <Bluetooth_u8ReceiveData>:

u8 Bluetooth_u8ReceiveData(void){
    55a8:	df 93       	push	r29
    55aa:	cf 93       	push	r28
    55ac:	cd b7       	in	r28, 0x3d	; 61
    55ae:	de b7       	in	r29, 0x3e	; 62
	static u8 LOCAL_u8ReceivedData;
	LOCAL_u8ReceivedData = UART_u8ReceiveData();
    55b0:	0e 94 75 10 	call	0x20ea	; 0x20ea <UART_u8ReceiveData>
    55b4:	80 93 15 05 	sts	0x0515, r24

	return LOCAL_u8ReceivedData;
    55b8:	80 91 15 05 	lds	r24, 0x0515
}
    55bc:	cf 91       	pop	r28
    55be:	df 91       	pop	r29
    55c0:	08 95       	ret

000055c2 <Bluetooth_vSendString>:

void Bluetooth_vSendString(u8 *Copy_u8Str){
    55c2:	df 93       	push	r29
    55c4:	cf 93       	push	r28
    55c6:	00 d0       	rcall	.+0      	; 0x55c8 <Bluetooth_vSendString+0x6>
    55c8:	cd b7       	in	r28, 0x3d	; 61
    55ca:	de b7       	in	r29, 0x3e	; 62
    55cc:	9a 83       	std	Y+2, r25	; 0x02
    55ce:	89 83       	std	Y+1, r24	; 0x01
	UART_vSendString(Copy_u8Str);
    55d0:	89 81       	ldd	r24, Y+1	; 0x01
    55d2:	9a 81       	ldd	r25, Y+2	; 0x02
    55d4:	0e 94 92 10 	call	0x2124	; 0x2124 <UART_vSendString>
}
    55d8:	0f 90       	pop	r0
    55da:	0f 90       	pop	r0
    55dc:	cf 91       	pop	r28
    55de:	df 91       	pop	r29
    55e0:	08 95       	ret

000055e2 <Bluetooth_vClearBuffer>:

void Bluetooth_vClearBuffer(){
    55e2:	df 93       	push	r29
    55e4:	cf 93       	push	r28
    55e6:	cd b7       	in	r28, 0x3d	; 61
    55e8:	de b7       	in	r29, 0x3e	; 62
	UART_vClearBuffer();
    55ea:	0e 94 af 10 	call	0x215e	; 0x215e <UART_vClearBuffer>
}
    55ee:	cf 91       	pop	r28
    55f0:	df 91       	pop	r29
    55f2:	08 95       	ret

000055f4 <main>:
		.TMR_TimerChannel = TIMER2_NORMAL,
		.TMR_ToggleMode = TMR_InterruptMode,
		.TMR_OCMode = OC_Disconnected,
		.TMR_Prescale = PRE_1024
};
void main(void){
    55f4:	df 93       	push	r29
    55f6:	cf 93       	push	r28
    55f8:	cd b7       	in	r28, 0x3d	; 61
    55fa:	de b7       	in	r29, 0x3e	; 62
    55fc:	c7 58       	subi	r28, 0x87	; 135
    55fe:	d0 40       	sbci	r29, 0x00	; 0
    5600:	0f b6       	in	r0, 0x3f	; 63
    5602:	f8 94       	cli
    5604:	de bf       	out	0x3e, r29	; 62
    5606:	0f be       	out	0x3f, r0	; 63
    5608:	cd bf       	out	0x3d, r28	; 61
	DIO_voidInit();
    560a:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <DIO_voidInit>
	Bluetooth_vInit();
    560e:	0e 94 a6 2a 	call	0x554c	; 0x554c <Bluetooth_vInit>
	SERVO_vInit(&SERVO1);
    5612:	81 ef       	ldi	r24, 0xF1	; 241
    5614:	94 e0       	ldi	r25, 0x04	; 4
    5616:	0e 94 e6 22 	call	0x45cc	; 0x45cc <SERVO_vInit>
	Siren_vInit();
    561a:	0e 94 52 22 	call	0x44a4	; 0x44a4 <Siren_vInit>
	Bluetooth_vEnable();
    561e:	0e 94 b1 2a 	call	0x5562	; 0x5562 <Bluetooth_vEnable>
	SERVO_vStart(&SERVO1);
    5622:	81 ef       	ldi	r24, 0xF1	; 241
    5624:	94 e0       	ldi	r25, 0x04	; 4
    5626:	0e 94 60 23 	call	0x46c0	; 0x46c0 <SERVO_vStart>
	TMR_vInit(&TIMER2);
    562a:	8e ef       	ldi	r24, 0xFE	; 254
    562c:	94 e0       	ldi	r25, 0x04	; 4
    562e:	0e 94 c3 10 	call	0x2186	; 0x2186 <TMR_vInit>
	Lcd_DisplayControlType LCD_type;
	LCD_type.cursor = LCD_STATE_OFF;
    5632:	fe 01       	movw	r30, r28
    5634:	e7 5a       	subi	r30, 0xA7	; 167
    5636:	ff 4f       	sbci	r31, 0xFF	; 255
    5638:	11 82       	std	Z+1, r1	; 0x01
	LCD_type.display = LCD_STATE_ON;
    563a:	fe 01       	movw	r30, r28
    563c:	e7 5a       	subi	r30, 0xA7	; 167
    563e:	ff 4f       	sbci	r31, 0xFF	; 255
    5640:	81 e0       	ldi	r24, 0x01	; 1
    5642:	80 83       	st	Z, r24
	LCD_type.cursorBlink = LCD_STATE_OFF;
    5644:	fe 01       	movw	r30, r28
    5646:	e7 5a       	subi	r30, 0xA7	; 167
    5648:	ff 4f       	sbci	r31, 0xFF	; 255
    564a:	12 82       	std	Z+2, r1	; 0x02
	LCD_type.font = LCD_FONT_5X7;
    564c:	fe 01       	movw	r30, r28
    564e:	e7 5a       	subi	r30, 0xA7	; 167
    5650:	ff 4f       	sbci	r31, 0xFF	; 255
    5652:	14 82       	std	Z+4, r1	; 0x04
	LCD_type.lines = LCD_LINES_2;
    5654:	fe 01       	movw	r30, r28
    5656:	e7 5a       	subi	r30, 0xA7	; 167
    5658:	ff 4f       	sbci	r31, 0xFF	; 255
    565a:	81 e0       	ldi	r24, 0x01	; 1
    565c:	83 83       	std	Z+3, r24	; 0x03
	Lcd_Init(&LCD_type);
    565e:	ce 01       	movw	r24, r28
    5660:	87 5a       	subi	r24, 0xA7	; 167
    5662:	9f 4f       	sbci	r25, 0xFF	; 255
    5664:	0e 94 80 23 	call	0x4700	; 0x4700 <Lcd_Init>

	Lcd_ClearDisplay();
    5668:	0e 94 a6 27 	call	0x4f4c	; 0x4f4c <Lcd_ClearDisplay>
	Lcd_ReturnHome();
    566c:	0e 94 26 28 	call	0x504c	; 0x504c <Lcd_ReturnHome>
	u8 receive;
	u8 i;
	u8 userName[30];
	u8 password[10];
	u8 user_num = 0;
    5670:	fe 01       	movw	r30, r28
    5672:	ea 5a       	subi	r30, 0xAA	; 170
    5674:	ff 4f       	sbci	r31, 0xFF	; 255
    5676:	10 82       	st	Z, r1
	u8 pass_num = 0;
    5678:	fe 01       	movw	r30, r28
    567a:	eb 5a       	subi	r30, 0xAB	; 171
    567c:	ff 4f       	sbci	r31, 0xFF	; 255
    567e:	10 82       	st	Z, r1
	u8 user_found = 0;
    5680:	fe 01       	movw	r30, r28
    5682:	ec 5a       	subi	r30, 0xAC	; 172
    5684:	ff 4f       	sbci	r31, 0xFF	; 255
    5686:	10 82       	st	Z, r1
	u8 choice;
	u8 attempts = 0;
    5688:	fe 01       	movw	r30, r28
    568a:	ee 5a       	subi	r30, 0xAE	; 174
    568c:	ff 4f       	sbci	r31, 0xFF	; 255
    568e:	10 82       	st	Z, r1
	u8 trials = 3;
    5690:	fe 01       	movw	r30, r28
    5692:	ef 5a       	subi	r30, 0xAF	; 175
    5694:	ff 4f       	sbci	r31, 0xFF	; 255
    5696:	83 e0       	ldi	r24, 0x03	; 3
    5698:	80 83       	st	Z, r24
	Lcd_DisplayString("      Controlled Home");
    569a:	8b e7       	ldi	r24, 0x7B	; 123
    569c:	90 e0       	ldi	r25, 0x00	; 0
    569e:	0e 94 a0 23 	call	0x4740	; 0x4740 <Lcd_DisplayString>

	while(1){
		Bluetooth_vClearBuffer();
    56a2:	0e 94 f1 2a 	call	0x55e2	; 0x55e2 <Bluetooth_vClearBuffer>

		Bluetooth_vSendString((u8*)"=== Welcome to Mobile Controlled Home ===\r\n");
    56a6:	81 e9       	ldi	r24, 0x91	; 145
    56a8:	90 e0       	ldi	r25, 0x00	; 0
    56aa:	0e 94 e1 2a 	call	0x55c2	; 0x55c2 <Bluetooth_vSendString>
		 Bluetooth_vClearBuffer();
    56ae:	0e 94 f1 2a 	call	0x55e2	; 0x55e2 <Bluetooth_vClearBuffer>
		//Bluetooth_vSendData('\0');
		Bluetooth_vSendString((u8*)"Enter User Name: ");
    56b2:	8d eb       	ldi	r24, 0xBD	; 189
    56b4:	90 e0       	ldi	r25, 0x00	; 0
    56b6:	0e 94 e1 2a 	call	0x55c2	; 0x55c2 <Bluetooth_vSendString>
		Bluetooth_vSendString((u8*)"\r\n");
    56ba:	8f ec       	ldi	r24, 0xCF	; 207
    56bc:	90 e0       	ldi	r25, 0x00	; 0
    56be:	0e 94 e1 2a 	call	0x55c2	; 0x55c2 <Bluetooth_vSendString>
		 for (i = 0; i < 30; i++) {
    56c2:	fe 01       	movw	r30, r28
    56c4:	e9 5a       	subi	r30, 0xA9	; 169
    56c6:	ff 4f       	sbci	r31, 0xFF	; 255
    56c8:	10 82       	st	Z, r1
    56ca:	26 c0       	rjmp	.+76     	; 0x5718 <main+0x124>

			receive = Bluetooth_u8ReceiveData();
    56cc:	0e 94 d4 2a 	call	0x55a8	; 0x55a8 <Bluetooth_u8ReceiveData>
    56d0:	fe 01       	movw	r30, r28
    56d2:	e8 5a       	subi	r30, 0xA8	; 168
    56d4:	ff 4f       	sbci	r31, 0xFF	; 255
    56d6:	80 83       	st	Z, r24
			if (receive == '\r') break; // End input on carriage return
    56d8:	fe 01       	movw	r30, r28
    56da:	e8 5a       	subi	r30, 0xA8	; 168
    56dc:	ff 4f       	sbci	r31, 0xFF	; 255
    56de:	80 81       	ld	r24, Z
    56e0:	8d 30       	cpi	r24, 0x0D	; 13
    56e2:	01 f1       	breq	.+64     	; 0x5724 <main+0x130>
			userName[i] = receive;
    56e4:	fe 01       	movw	r30, r28
    56e6:	e9 5a       	subi	r30, 0xA9	; 169
    56e8:	ff 4f       	sbci	r31, 0xFF	; 255
    56ea:	80 81       	ld	r24, Z
    56ec:	28 2f       	mov	r18, r24
    56ee:	30 e0       	ldi	r19, 0x00	; 0
    56f0:	ce 01       	movw	r24, r28
    56f2:	82 5a       	subi	r24, 0xA2	; 162
    56f4:	9f 4f       	sbci	r25, 0xFF	; 255
    56f6:	dc 01       	movw	r26, r24
    56f8:	a2 0f       	add	r26, r18
    56fa:	b3 1f       	adc	r27, r19
    56fc:	fe 01       	movw	r30, r28
    56fe:	e8 5a       	subi	r30, 0xA8	; 168
    5700:	ff 4f       	sbci	r31, 0xFF	; 255
    5702:	80 81       	ld	r24, Z
    5704:	8c 93       	st	X, r24
		Bluetooth_vSendString((u8*)"=== Welcome to Mobile Controlled Home ===\r\n");
		 Bluetooth_vClearBuffer();
		//Bluetooth_vSendData('\0');
		Bluetooth_vSendString((u8*)"Enter User Name: ");
		Bluetooth_vSendString((u8*)"\r\n");
		 for (i = 0; i < 30; i++) {
    5706:	de 01       	movw	r26, r28
    5708:	a9 5a       	subi	r26, 0xA9	; 169
    570a:	bf 4f       	sbci	r27, 0xFF	; 255
    570c:	fe 01       	movw	r30, r28
    570e:	e9 5a       	subi	r30, 0xA9	; 169
    5710:	ff 4f       	sbci	r31, 0xFF	; 255
    5712:	80 81       	ld	r24, Z
    5714:	8f 5f       	subi	r24, 0xFF	; 255
    5716:	8c 93       	st	X, r24
    5718:	fe 01       	movw	r30, r28
    571a:	e9 5a       	subi	r30, 0xA9	; 169
    571c:	ff 4f       	sbci	r31, 0xFF	; 255
    571e:	80 81       	ld	r24, Z
    5720:	8e 31       	cpi	r24, 0x1E	; 30
    5722:	a0 f2       	brcs	.-88     	; 0x56cc <main+0xd8>

			receive = Bluetooth_u8ReceiveData();
			if (receive == '\r') break; // End input on carriage return
			userName[i] = receive;
		}
		 userName[i] = '\0'; // Null-terminate the string
    5724:	fe 01       	movw	r30, r28
    5726:	e9 5a       	subi	r30, 0xA9	; 169
    5728:	ff 4f       	sbci	r31, 0xFF	; 255
    572a:	80 81       	ld	r24, Z
    572c:	28 2f       	mov	r18, r24
    572e:	30 e0       	ldi	r19, 0x00	; 0
    5730:	ce 01       	movw	r24, r28
    5732:	82 5a       	subi	r24, 0xA2	; 162
    5734:	9f 4f       	sbci	r25, 0xFF	; 255
    5736:	fc 01       	movw	r30, r24
    5738:	e2 0f       	add	r30, r18
    573a:	f3 1f       	adc	r31, r19
    573c:	10 82       	st	Z, r1



		for(i = 0; i < 10; i++){
    573e:	fe 01       	movw	r30, r28
    5740:	e9 5a       	subi	r30, 0xA9	; 169
    5742:	ff 4f       	sbci	r31, 0xFF	; 255
    5744:	10 82       	st	Z, r1
    5746:	30 c0       	rjmp	.+96     	; 0x57a8 <main+0x1b4>
			if(strcmp((char*) userName, (char*) users[i].user_name) == 0){
    5748:	fe 01       	movw	r30, r28
    574a:	e9 5a       	subi	r30, 0xA9	; 169
    574c:	ff 4f       	sbci	r31, 0xFF	; 255
    574e:	80 81       	ld	r24, Z
    5750:	88 2f       	mov	r24, r24
    5752:	90 e0       	ldi	r25, 0x00	; 0
    5754:	88 0f       	add	r24, r24
    5756:	99 1f       	adc	r25, r25
    5758:	88 0f       	add	r24, r24
    575a:	99 1f       	adc	r25, r25
    575c:	88 0f       	add	r24, r24
    575e:	99 1f       	adc	r25, r25
    5760:	9c 01       	movw	r18, r24
    5762:	22 0f       	add	r18, r18
    5764:	33 1f       	adc	r19, r19
    5766:	22 0f       	add	r18, r18
    5768:	33 1f       	adc	r19, r19
    576a:	82 0f       	add	r24, r18
    576c:	93 1f       	adc	r25, r19
    576e:	9c 01       	movw	r18, r24
    5770:	2f 59       	subi	r18, 0x9F	; 159
    5772:	3c 4f       	sbci	r19, 0xFC	; 252
    5774:	ce 01       	movw	r24, r28
    5776:	82 5a       	subi	r24, 0xA2	; 162
    5778:	9f 4f       	sbci	r25, 0xFF	; 255
    577a:	b9 01       	movw	r22, r18
    577c:	0e 94 f2 30 	call	0x61e4	; 0x61e4 <strcmp>
    5780:	00 97       	sbiw	r24, 0x00	; 0
    5782:	49 f4       	brne	.+18     	; 0x5796 <main+0x1a2>
				user_num = i+1;
    5784:	de 01       	movw	r26, r28
    5786:	aa 5a       	subi	r26, 0xAA	; 170
    5788:	bf 4f       	sbci	r27, 0xFF	; 255
    578a:	fe 01       	movw	r30, r28
    578c:	e9 5a       	subi	r30, 0xA9	; 169
    578e:	ff 4f       	sbci	r31, 0xFF	; 255
    5790:	80 81       	ld	r24, Z
    5792:	8f 5f       	subi	r24, 0xFF	; 255
    5794:	8c 93       	st	X, r24
		}
		 userName[i] = '\0'; // Null-terminate the string



		for(i = 0; i < 10; i++){
    5796:	de 01       	movw	r26, r28
    5798:	a9 5a       	subi	r26, 0xA9	; 169
    579a:	bf 4f       	sbci	r27, 0xFF	; 255
    579c:	fe 01       	movw	r30, r28
    579e:	e9 5a       	subi	r30, 0xA9	; 169
    57a0:	ff 4f       	sbci	r31, 0xFF	; 255
    57a2:	80 81       	ld	r24, Z
    57a4:	8f 5f       	subi	r24, 0xFF	; 255
    57a6:	8c 93       	st	X, r24
    57a8:	fe 01       	movw	r30, r28
    57aa:	e9 5a       	subi	r30, 0xA9	; 169
    57ac:	ff 4f       	sbci	r31, 0xFF	; 255
    57ae:	80 81       	ld	r24, Z
    57b0:	8a 30       	cpi	r24, 0x0A	; 10
    57b2:	50 f2       	brcs	.-108    	; 0x5748 <main+0x154>
			if(strcmp((char*) userName, (char*) users[i].user_name) == 0){
				user_num = i+1;
			}
		}
		Lcd_ReturnHome();
    57b4:	0e 94 26 28 	call	0x504c	; 0x504c <Lcd_ReturnHome>

		Lcd_DisplayString(" Received User     ");
    57b8:	82 ed       	ldi	r24, 0xD2	; 210
    57ba:	90 e0       	ldi	r25, 0x00	; 0
    57bc:	0e 94 a0 23 	call	0x4740	; 0x4740 <Lcd_DisplayString>
		Lcd_SetCursorPosition(1, 0);
    57c0:	81 e0       	ldi	r24, 0x01	; 1
    57c2:	60 e0       	ldi	r22, 0x00	; 0
    57c4:	0e 94 b0 27 	call	0x4f60	; 0x4f60 <Lcd_SetCursorPosition>
		Lcd_DisplayString((char*)userName);
    57c8:	ce 01       	movw	r24, r28
    57ca:	82 5a       	subi	r24, 0xA2	; 162
    57cc:	9f 4f       	sbci	r25, 0xFF	; 255
    57ce:	0e 94 a0 23 	call	0x4740	; 0x4740 <Lcd_DisplayString>
		Lcd_DisplayString("        ");
    57d2:	86 ee       	ldi	r24, 0xE6	; 230
    57d4:	90 e0       	ldi	r25, 0x00	; 0
    57d6:	0e 94 a0 23 	call	0x4740	; 0x4740 <Lcd_DisplayString>
		Bluetooth_vSendString((u8*)"Enter Password: ");
    57da:	8f ee       	ldi	r24, 0xEF	; 239
    57dc:	90 e0       	ldi	r25, 0x00	; 0
    57de:	0e 94 e1 2a 	call	0x55c2	; 0x55c2 <Bluetooth_vSendString>
    57e2:	8c c2       	rjmp	.+1304   	; 0x5cfc <main+0x708>
		//Bluetooth_vSendString((u8*)"\r\n");
		while(attempts < 3){
			for (i = 0; i < 10; i++) {
    57e4:	fe 01       	movw	r30, r28
    57e6:	e9 5a       	subi	r30, 0xA9	; 169
    57e8:	ff 4f       	sbci	r31, 0xFF	; 255
    57ea:	10 82       	st	Z, r1
    57ec:	34 c0       	rjmp	.+104    	; 0x5856 <main+0x262>
				 Bluetooth_vClearBuffer();
    57ee:	0e 94 f1 2a 	call	0x55e2	; 0x55e2 <Bluetooth_vClearBuffer>
				receive = Bluetooth_u8ReceiveData();
    57f2:	0e 94 d4 2a 	call	0x55a8	; 0x55a8 <Bluetooth_u8ReceiveData>
    57f6:	fe 01       	movw	r30, r28
    57f8:	e8 5a       	subi	r30, 0xA8	; 168
    57fa:	ff 4f       	sbci	r31, 0xFF	; 255
    57fc:	80 83       	st	Z, r24
				if (receive == '\r') break; // End input on carriage return
    57fe:	fe 01       	movw	r30, r28
    5800:	e8 5a       	subi	r30, 0xA8	; 168
    5802:	ff 4f       	sbci	r31, 0xFF	; 255
    5804:	80 81       	ld	r24, Z
    5806:	8d 30       	cpi	r24, 0x0D	; 13
    5808:	61 f1       	breq	.+88     	; 0x5862 <main+0x26e>
				if(receive >= '0' && receive <= '9')
    580a:	fe 01       	movw	r30, r28
    580c:	e8 5a       	subi	r30, 0xA8	; 168
    580e:	ff 4f       	sbci	r31, 0xFF	; 255
    5810:	80 81       	ld	r24, Z
    5812:	80 33       	cpi	r24, 0x30	; 48
    5814:	b8 f0       	brcs	.+46     	; 0x5844 <main+0x250>
    5816:	fe 01       	movw	r30, r28
    5818:	e8 5a       	subi	r30, 0xA8	; 168
    581a:	ff 4f       	sbci	r31, 0xFF	; 255
    581c:	80 81       	ld	r24, Z
    581e:	8a 33       	cpi	r24, 0x3A	; 58
    5820:	88 f4       	brcc	.+34     	; 0x5844 <main+0x250>
					password[i] = receive;
    5822:	fe 01       	movw	r30, r28
    5824:	e9 5a       	subi	r30, 0xA9	; 169
    5826:	ff 4f       	sbci	r31, 0xFF	; 255
    5828:	80 81       	ld	r24, Z
    582a:	28 2f       	mov	r18, r24
    582c:	30 e0       	ldi	r19, 0x00	; 0
    582e:	ce 01       	movw	r24, r28
    5830:	84 58       	subi	r24, 0x84	; 132
    5832:	9f 4f       	sbci	r25, 0xFF	; 255
    5834:	dc 01       	movw	r26, r24
    5836:	a2 0f       	add	r26, r18
    5838:	b3 1f       	adc	r27, r19
    583a:	fe 01       	movw	r30, r28
    583c:	e8 5a       	subi	r30, 0xA8	; 168
    583e:	ff 4f       	sbci	r31, 0xFF	; 255
    5840:	80 81       	ld	r24, Z
    5842:	8c 93       	st	X, r24
		Lcd_DisplayString((char*)userName);
		Lcd_DisplayString("        ");
		Bluetooth_vSendString((u8*)"Enter Password: ");
		//Bluetooth_vSendString((u8*)"\r\n");
		while(attempts < 3){
			for (i = 0; i < 10; i++) {
    5844:	de 01       	movw	r26, r28
    5846:	a9 5a       	subi	r26, 0xA9	; 169
    5848:	bf 4f       	sbci	r27, 0xFF	; 255
    584a:	fe 01       	movw	r30, r28
    584c:	e9 5a       	subi	r30, 0xA9	; 169
    584e:	ff 4f       	sbci	r31, 0xFF	; 255
    5850:	80 81       	ld	r24, Z
    5852:	8f 5f       	subi	r24, 0xFF	; 255
    5854:	8c 93       	st	X, r24
    5856:	fe 01       	movw	r30, r28
    5858:	e9 5a       	subi	r30, 0xA9	; 169
    585a:	ff 4f       	sbci	r31, 0xFF	; 255
    585c:	80 81       	ld	r24, Z
    585e:	8a 30       	cpi	r24, 0x0A	; 10
    5860:	30 f2       	brcs	.-116    	; 0x57ee <main+0x1fa>
				receive = Bluetooth_u8ReceiveData();
				if (receive == '\r') break; // End input on carriage return
				if(receive >= '0' && receive <= '9')
					password[i] = receive;
			}
			password[i] = '\0'; // Null-terminate the string
    5862:	fe 01       	movw	r30, r28
    5864:	e9 5a       	subi	r30, 0xA9	; 169
    5866:	ff 4f       	sbci	r31, 0xFF	; 255
    5868:	80 81       	ld	r24, Z
    586a:	28 2f       	mov	r18, r24
    586c:	30 e0       	ldi	r19, 0x00	; 0
    586e:	ce 01       	movw	r24, r28
    5870:	84 58       	subi	r24, 0x84	; 132
    5872:	9f 4f       	sbci	r25, 0xFF	; 255
    5874:	fc 01       	movw	r30, r24
    5876:	e2 0f       	add	r30, r18
    5878:	f3 1f       	adc	r31, r19
    587a:	10 82       	st	Z, r1
			for(i = 0; i < 10; i++){
    587c:	fe 01       	movw	r30, r28
    587e:	e9 5a       	subi	r30, 0xA9	; 169
    5880:	ff 4f       	sbci	r31, 0xFF	; 255
    5882:	10 82       	st	Z, r1
    5884:	31 c0       	rjmp	.+98     	; 0x58e8 <main+0x2f4>
				if(strcmp((char*) password, (char*) users[i].password) == 0){
    5886:	fe 01       	movw	r30, r28
    5888:	e9 5a       	subi	r30, 0xA9	; 169
    588a:	ff 4f       	sbci	r31, 0xFF	; 255
    588c:	80 81       	ld	r24, Z
    588e:	88 2f       	mov	r24, r24
    5890:	90 e0       	ldi	r25, 0x00	; 0
    5892:	88 0f       	add	r24, r24
    5894:	99 1f       	adc	r25, r25
    5896:	88 0f       	add	r24, r24
    5898:	99 1f       	adc	r25, r25
    589a:	88 0f       	add	r24, r24
    589c:	99 1f       	adc	r25, r25
    589e:	9c 01       	movw	r18, r24
    58a0:	22 0f       	add	r18, r18
    58a2:	33 1f       	adc	r19, r19
    58a4:	22 0f       	add	r18, r18
    58a6:	33 1f       	adc	r19, r19
    58a8:	82 0f       	add	r24, r18
    58aa:	93 1f       	adc	r25, r19
    58ac:	4e 96       	adiw	r24, 0x1e	; 30
    58ae:	9c 01       	movw	r18, r24
    58b0:	2f 59       	subi	r18, 0x9F	; 159
    58b2:	3c 4f       	sbci	r19, 0xFC	; 252
    58b4:	ce 01       	movw	r24, r28
    58b6:	84 58       	subi	r24, 0x84	; 132
    58b8:	9f 4f       	sbci	r25, 0xFF	; 255
    58ba:	b9 01       	movw	r22, r18
    58bc:	0e 94 f2 30 	call	0x61e4	; 0x61e4 <strcmp>
    58c0:	00 97       	sbiw	r24, 0x00	; 0
    58c2:	49 f4       	brne	.+18     	; 0x58d6 <main+0x2e2>
					pass_num = i+1;
    58c4:	de 01       	movw	r26, r28
    58c6:	ab 5a       	subi	r26, 0xAB	; 171
    58c8:	bf 4f       	sbci	r27, 0xFF	; 255
    58ca:	fe 01       	movw	r30, r28
    58cc:	e9 5a       	subi	r30, 0xA9	; 169
    58ce:	ff 4f       	sbci	r31, 0xFF	; 255
    58d0:	80 81       	ld	r24, Z
    58d2:	8f 5f       	subi	r24, 0xFF	; 255
    58d4:	8c 93       	st	X, r24
				if (receive == '\r') break; // End input on carriage return
				if(receive >= '0' && receive <= '9')
					password[i] = receive;
			}
			password[i] = '\0'; // Null-terminate the string
			for(i = 0; i < 10; i++){
    58d6:	de 01       	movw	r26, r28
    58d8:	a9 5a       	subi	r26, 0xA9	; 169
    58da:	bf 4f       	sbci	r27, 0xFF	; 255
    58dc:	fe 01       	movw	r30, r28
    58de:	e9 5a       	subi	r30, 0xA9	; 169
    58e0:	ff 4f       	sbci	r31, 0xFF	; 255
    58e2:	80 81       	ld	r24, Z
    58e4:	8f 5f       	subi	r24, 0xFF	; 255
    58e6:	8c 93       	st	X, r24
    58e8:	fe 01       	movw	r30, r28
    58ea:	e9 5a       	subi	r30, 0xA9	; 169
    58ec:	ff 4f       	sbci	r31, 0xFF	; 255
    58ee:	80 81       	ld	r24, Z
    58f0:	8a 30       	cpi	r24, 0x0A	; 10
    58f2:	48 f2       	brcs	.-110    	; 0x5886 <main+0x292>
				if(strcmp((char*) password, (char*) users[i].password) == 0){
					pass_num = i+1;
				}
			}
			Lcd_SetCursorPosition(0,0);
    58f4:	80 e0       	ldi	r24, 0x00	; 0
    58f6:	60 e0       	ldi	r22, 0x00	; 0
    58f8:	0e 94 b0 27 	call	0x4f60	; 0x4f60 <Lcd_SetCursorPosition>
			Lcd_DisplayString("Received Pass       ");
    58fc:	80 e0       	ldi	r24, 0x00	; 0
    58fe:	91 e0       	ldi	r25, 0x01	; 1
    5900:	0e 94 a0 23 	call	0x4740	; 0x4740 <Lcd_DisplayString>
			Lcd_SetCursorPosition(1, 0);
    5904:	81 e0       	ldi	r24, 0x01	; 1
    5906:	60 e0       	ldi	r22, 0x00	; 0
    5908:	0e 94 b0 27 	call	0x4f60	; 0x4f60 <Lcd_SetCursorPosition>
			Lcd_DisplayString((char*)password);
    590c:	ce 01       	movw	r24, r28
    590e:	84 58       	subi	r24, 0x84	; 132
    5910:	9f 4f       	sbci	r25, 0xFF	; 255
    5912:	0e 94 a0 23 	call	0x4740	; 0x4740 <Lcd_DisplayString>
			Lcd_DisplayString("        ");
    5916:	86 ee       	ldi	r24, 0xE6	; 230
    5918:	90 e0       	ldi	r25, 0x00	; 0
    591a:	0e 94 a0 23 	call	0x4740	; 0x4740 <Lcd_DisplayString>
			if(user_num == 0 || pass_num == 0 || user_num != pass_num){
    591e:	fe 01       	movw	r30, r28
    5920:	ea 5a       	subi	r30, 0xAA	; 170
    5922:	ff 4f       	sbci	r31, 0xFF	; 255
    5924:	80 81       	ld	r24, Z
    5926:	88 23       	and	r24, r24
    5928:	89 f0       	breq	.+34     	; 0x594c <main+0x358>
    592a:	fe 01       	movw	r30, r28
    592c:	eb 5a       	subi	r30, 0xAB	; 171
    592e:	ff 4f       	sbci	r31, 0xFF	; 255
    5930:	80 81       	ld	r24, Z
    5932:	88 23       	and	r24, r24
    5934:	59 f0       	breq	.+22     	; 0x594c <main+0x358>
    5936:	fe 01       	movw	r30, r28
    5938:	ea 5a       	subi	r30, 0xAA	; 170
    593a:	ff 4f       	sbci	r31, 0xFF	; 255
    593c:	de 01       	movw	r26, r28
    593e:	ab 5a       	subi	r26, 0xAB	; 171
    5940:	bf 4f       	sbci	r27, 0xFF	; 255
    5942:	90 81       	ld	r25, Z
    5944:	8c 91       	ld	r24, X
    5946:	98 17       	cp	r25, r24
    5948:	09 f4       	brne	.+2      	; 0x594c <main+0x358>
    594a:	bf c1       	rjmp	.+894    	; 0x5cca <main+0x6d6>
				trials--;
    594c:	de 01       	movw	r26, r28
    594e:	af 5a       	subi	r26, 0xAF	; 175
    5950:	bf 4f       	sbci	r27, 0xFF	; 255
    5952:	fe 01       	movw	r30, r28
    5954:	ef 5a       	subi	r30, 0xAF	; 175
    5956:	ff 4f       	sbci	r31, 0xFF	; 255
    5958:	80 81       	ld	r24, Z
    595a:	81 50       	subi	r24, 0x01	; 1
    595c:	8c 93       	st	X, r24
				Bluetooth_vSendString((u8*)"User Not Found\r\n");
    595e:	85 e1       	ldi	r24, 0x15	; 21
    5960:	91 e0       	ldi	r25, 0x01	; 1
    5962:	0e 94 e1 2a 	call	0x55c2	; 0x55c2 <Bluetooth_vSendString>
				Bluetooth_vSendString((u8*)"The remaining trials: ");
    5966:	86 e2       	ldi	r24, 0x26	; 38
    5968:	91 e0       	ldi	r25, 0x01	; 1
    596a:	0e 94 e1 2a 	call	0x55c2	; 0x55c2 <Bluetooth_vSendString>
				Bluetooth_vSendData((u8)trials+48);
    596e:	fe 01       	movw	r30, r28
    5970:	ef 5a       	subi	r30, 0xAF	; 175
    5972:	ff 4f       	sbci	r31, 0xFF	; 255
    5974:	80 81       	ld	r24, Z
    5976:	80 5d       	subi	r24, 0xD0	; 208
    5978:	0e 94 c7 2a 	call	0x558e	; 0x558e <Bluetooth_vSendData>
				Bluetooth_vSendString((u8*)"\r\n");
    597c:	8f ec       	ldi	r24, 0xCF	; 207
    597e:	90 e0       	ldi	r25, 0x00	; 0
    5980:	0e 94 e1 2a 	call	0x55c2	; 0x55c2 <Bluetooth_vSendString>

				attempts++;
    5984:	de 01       	movw	r26, r28
    5986:	ae 5a       	subi	r26, 0xAE	; 174
    5988:	bf 4f       	sbci	r27, 0xFF	; 255
    598a:	fe 01       	movw	r30, r28
    598c:	ee 5a       	subi	r30, 0xAE	; 174
    598e:	ff 4f       	sbci	r31, 0xFF	; 255
    5990:	80 81       	ld	r24, Z
    5992:	8f 5f       	subi	r24, 0xFF	; 255
    5994:	8c 93       	st	X, r24
				if(attempts == 3){
    5996:	fe 01       	movw	r30, r28
    5998:	ee 5a       	subi	r30, 0xAE	; 174
    599a:	ff 4f       	sbci	r31, 0xFF	; 255
    599c:	80 81       	ld	r24, Z
    599e:	83 30       	cpi	r24, 0x03	; 3
    59a0:	09 f0       	breq	.+2      	; 0x59a4 <main+0x3b0>
    59a2:	8e c1       	rjmp	.+796    	; 0x5cc0 <main+0x6cc>
					Bluetooth_vSendString((u8*)"You are a Thief\r\n");
    59a4:	8d e3       	ldi	r24, 0x3D	; 61
    59a6:	91 e0       	ldi	r25, 0x01	; 1
    59a8:	0e 94 e1 2a 	call	0x55c2	; 0x55c2 <Bluetooth_vSendString>
					TMR_vStartTimer(&TIMER2);
    59ac:	8e ef       	ldi	r24, 0xFE	; 254
    59ae:	94 e0       	ldi	r25, 0x04	; 4
    59b0:	0e 94 5f 13 	call	0x26be	; 0x26be <TMR_vStartTimer>
					timer2_flag = FLAG_OFF;
    59b4:	10 92 08 05 	sts	0x0508, r1
					//turn on red led
					DIO_enuWritePin(DIO_PIN_NUM_0, DIO_HIGH);
    59b8:	80 e0       	ldi	r24, 0x00	; 0
    59ba:	61 e0       	ldi	r22, 0x01	; 1
    59bc:	0e 94 45 20 	call	0x408a	; 0x408a <DIO_enuWritePin>
    59c0:	6d c1       	rjmp	.+730    	; 0x5c9c <main+0x6a8>
					/* While loop until flag is off */
					while(timer2_flag == FLAG_OFF){
						SIREN_vChangeSound(500);  // produce low sound
    59c2:	84 ef       	ldi	r24, 0xF4	; 244
    59c4:	91 e0       	ldi	r25, 0x01	; 1
    59c6:	0e 94 75 22 	call	0x44ea	; 0x44ea <SIREN_vChangeSound>
						Delay_ms(250);  // wait for 500ms
    59ca:	fe 01       	movw	r30, r28
    59cc:	e3 5b       	subi	r30, 0xB3	; 179
    59ce:	ff 4f       	sbci	r31, 0xFF	; 255
    59d0:	8f e1       	ldi	r24, 0x1F	; 31
    59d2:	90 e0       	ldi	r25, 0x00	; 0
    59d4:	a0 e0       	ldi	r26, 0x00	; 0
    59d6:	b0 e0       	ldi	r27, 0x00	; 0
    59d8:	80 83       	st	Z, r24
    59da:	91 83       	std	Z+1, r25	; 0x01
    59dc:	a2 83       	std	Z+2, r26	; 0x02
    59de:	b3 83       	std	Z+3, r27	; 0x03
    59e0:	3c c0       	rjmp	.+120    	; 0x5a5a <main+0x466>
    59e2:	fe 01       	movw	r30, r28
    59e4:	e7 5b       	subi	r30, 0xB7	; 183
    59e6:	ff 4f       	sbci	r31, 0xFF	; 255
    59e8:	80 ed       	ldi	r24, 0xD0	; 208
    59ea:	97 e0       	ldi	r25, 0x07	; 7
    59ec:	a0 e0       	ldi	r26, 0x00	; 0
    59ee:	b0 e0       	ldi	r27, 0x00	; 0
    59f0:	80 83       	st	Z, r24
    59f2:	91 83       	std	Z+1, r25	; 0x01
    59f4:	a2 83       	std	Z+2, r26	; 0x02
    59f6:	b3 83       	std	Z+3, r27	; 0x03
    59f8:	13 c0       	rjmp	.+38     	; 0x5a20 <main+0x42c>
    59fa:	00 00       	nop
    59fc:	9e 01       	movw	r18, r28
    59fe:	27 5b       	subi	r18, 0xB7	; 183
    5a00:	3f 4f       	sbci	r19, 0xFF	; 255
    5a02:	fe 01       	movw	r30, r28
    5a04:	e7 5b       	subi	r30, 0xB7	; 183
    5a06:	ff 4f       	sbci	r31, 0xFF	; 255
    5a08:	80 81       	ld	r24, Z
    5a0a:	91 81       	ldd	r25, Z+1	; 0x01
    5a0c:	a2 81       	ldd	r26, Z+2	; 0x02
    5a0e:	b3 81       	ldd	r27, Z+3	; 0x03
    5a10:	01 97       	sbiw	r24, 0x01	; 1
    5a12:	a1 09       	sbc	r26, r1
    5a14:	b1 09       	sbc	r27, r1
    5a16:	f9 01       	movw	r30, r18
    5a18:	80 83       	st	Z, r24
    5a1a:	91 83       	std	Z+1, r25	; 0x01
    5a1c:	a2 83       	std	Z+2, r26	; 0x02
    5a1e:	b3 83       	std	Z+3, r27	; 0x03
    5a20:	fe 01       	movw	r30, r28
    5a22:	e7 5b       	subi	r30, 0xB7	; 183
    5a24:	ff 4f       	sbci	r31, 0xFF	; 255
    5a26:	80 81       	ld	r24, Z
    5a28:	91 81       	ldd	r25, Z+1	; 0x01
    5a2a:	a2 81       	ldd	r26, Z+2	; 0x02
    5a2c:	b3 81       	ldd	r27, Z+3	; 0x03
    5a2e:	00 97       	sbiw	r24, 0x00	; 0
    5a30:	a1 05       	cpc	r26, r1
    5a32:	b1 05       	cpc	r27, r1
    5a34:	11 f7       	brne	.-60     	; 0x59fa <main+0x406>
    5a36:	9e 01       	movw	r18, r28
    5a38:	23 5b       	subi	r18, 0xB3	; 179
    5a3a:	3f 4f       	sbci	r19, 0xFF	; 255
    5a3c:	fe 01       	movw	r30, r28
    5a3e:	e3 5b       	subi	r30, 0xB3	; 179
    5a40:	ff 4f       	sbci	r31, 0xFF	; 255
    5a42:	80 81       	ld	r24, Z
    5a44:	91 81       	ldd	r25, Z+1	; 0x01
    5a46:	a2 81       	ldd	r26, Z+2	; 0x02
    5a48:	b3 81       	ldd	r27, Z+3	; 0x03
    5a4a:	01 97       	sbiw	r24, 0x01	; 1
    5a4c:	a1 09       	sbc	r26, r1
    5a4e:	b1 09       	sbc	r27, r1
    5a50:	f9 01       	movw	r30, r18
    5a52:	80 83       	st	Z, r24
    5a54:	91 83       	std	Z+1, r25	; 0x01
    5a56:	a2 83       	std	Z+2, r26	; 0x02
    5a58:	b3 83       	std	Z+3, r27	; 0x03
    5a5a:	fe 01       	movw	r30, r28
    5a5c:	e3 5b       	subi	r30, 0xB3	; 179
    5a5e:	ff 4f       	sbci	r31, 0xFF	; 255
    5a60:	80 81       	ld	r24, Z
    5a62:	91 81       	ldd	r25, Z+1	; 0x01
    5a64:	a2 81       	ldd	r26, Z+2	; 0x02
    5a66:	b3 81       	ldd	r27, Z+3	; 0x03
    5a68:	00 97       	sbiw	r24, 0x00	; 0
    5a6a:	a1 05       	cpc	r26, r1
    5a6c:	b1 05       	cpc	r27, r1
    5a6e:	09 f0       	breq	.+2      	; 0x5a72 <main+0x47e>
    5a70:	b8 cf       	rjmp	.-144    	; 0x59e2 <main+0x3ee>
						SIREN_vChangeSound(1100); // produce high sound
    5a72:	8c e4       	ldi	r24, 0x4C	; 76
    5a74:	94 e0       	ldi	r25, 0x04	; 4
    5a76:	0e 94 75 22 	call	0x44ea	; 0x44ea <SIREN_vChangeSound>
						Delay_ms(250);  // wait for 500ms
    5a7a:	fe 01       	movw	r30, r28
    5a7c:	eb 5b       	subi	r30, 0xBB	; 187
    5a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    5a80:	8f e1       	ldi	r24, 0x1F	; 31
    5a82:	90 e0       	ldi	r25, 0x00	; 0
    5a84:	a0 e0       	ldi	r26, 0x00	; 0
    5a86:	b0 e0       	ldi	r27, 0x00	; 0
    5a88:	80 83       	st	Z, r24
    5a8a:	91 83       	std	Z+1, r25	; 0x01
    5a8c:	a2 83       	std	Z+2, r26	; 0x02
    5a8e:	b3 83       	std	Z+3, r27	; 0x03
    5a90:	3c c0       	rjmp	.+120    	; 0x5b0a <main+0x516>
    5a92:	fe 01       	movw	r30, r28
    5a94:	ef 5b       	subi	r30, 0xBF	; 191
    5a96:	ff 4f       	sbci	r31, 0xFF	; 255
    5a98:	80 ed       	ldi	r24, 0xD0	; 208
    5a9a:	97 e0       	ldi	r25, 0x07	; 7
    5a9c:	a0 e0       	ldi	r26, 0x00	; 0
    5a9e:	b0 e0       	ldi	r27, 0x00	; 0
    5aa0:	80 83       	st	Z, r24
    5aa2:	91 83       	std	Z+1, r25	; 0x01
    5aa4:	a2 83       	std	Z+2, r26	; 0x02
    5aa6:	b3 83       	std	Z+3, r27	; 0x03
    5aa8:	13 c0       	rjmp	.+38     	; 0x5ad0 <main+0x4dc>
    5aaa:	00 00       	nop
    5aac:	9e 01       	movw	r18, r28
    5aae:	2f 5b       	subi	r18, 0xBF	; 191
    5ab0:	3f 4f       	sbci	r19, 0xFF	; 255
    5ab2:	fe 01       	movw	r30, r28
    5ab4:	ef 5b       	subi	r30, 0xBF	; 191
    5ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    5ab8:	80 81       	ld	r24, Z
    5aba:	91 81       	ldd	r25, Z+1	; 0x01
    5abc:	a2 81       	ldd	r26, Z+2	; 0x02
    5abe:	b3 81       	ldd	r27, Z+3	; 0x03
    5ac0:	01 97       	sbiw	r24, 0x01	; 1
    5ac2:	a1 09       	sbc	r26, r1
    5ac4:	b1 09       	sbc	r27, r1
    5ac6:	f9 01       	movw	r30, r18
    5ac8:	80 83       	st	Z, r24
    5aca:	91 83       	std	Z+1, r25	; 0x01
    5acc:	a2 83       	std	Z+2, r26	; 0x02
    5ace:	b3 83       	std	Z+3, r27	; 0x03
    5ad0:	fe 01       	movw	r30, r28
    5ad2:	ef 5b       	subi	r30, 0xBF	; 191
    5ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    5ad6:	80 81       	ld	r24, Z
    5ad8:	91 81       	ldd	r25, Z+1	; 0x01
    5ada:	a2 81       	ldd	r26, Z+2	; 0x02
    5adc:	b3 81       	ldd	r27, Z+3	; 0x03
    5ade:	00 97       	sbiw	r24, 0x00	; 0
    5ae0:	a1 05       	cpc	r26, r1
    5ae2:	b1 05       	cpc	r27, r1
    5ae4:	11 f7       	brne	.-60     	; 0x5aaa <main+0x4b6>
    5ae6:	9e 01       	movw	r18, r28
    5ae8:	2b 5b       	subi	r18, 0xBB	; 187
    5aea:	3f 4f       	sbci	r19, 0xFF	; 255
    5aec:	fe 01       	movw	r30, r28
    5aee:	eb 5b       	subi	r30, 0xBB	; 187
    5af0:	ff 4f       	sbci	r31, 0xFF	; 255
    5af2:	80 81       	ld	r24, Z
    5af4:	91 81       	ldd	r25, Z+1	; 0x01
    5af6:	a2 81       	ldd	r26, Z+2	; 0x02
    5af8:	b3 81       	ldd	r27, Z+3	; 0x03
    5afa:	01 97       	sbiw	r24, 0x01	; 1
    5afc:	a1 09       	sbc	r26, r1
    5afe:	b1 09       	sbc	r27, r1
    5b00:	f9 01       	movw	r30, r18
    5b02:	80 83       	st	Z, r24
    5b04:	91 83       	std	Z+1, r25	; 0x01
    5b06:	a2 83       	std	Z+2, r26	; 0x02
    5b08:	b3 83       	std	Z+3, r27	; 0x03
    5b0a:	fe 01       	movw	r30, r28
    5b0c:	eb 5b       	subi	r30, 0xBB	; 187
    5b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    5b10:	80 81       	ld	r24, Z
    5b12:	91 81       	ldd	r25, Z+1	; 0x01
    5b14:	a2 81       	ldd	r26, Z+2	; 0x02
    5b16:	b3 81       	ldd	r27, Z+3	; 0x03
    5b18:	00 97       	sbiw	r24, 0x00	; 0
    5b1a:	a1 05       	cpc	r26, r1
    5b1c:	b1 05       	cpc	r27, r1
    5b1e:	09 f0       	breq	.+2      	; 0x5b22 <main+0x52e>
    5b20:	b8 cf       	rjmp	.-144    	; 0x5a92 <main+0x49e>
						SIREN_vChangeSound(500);  // produce low sound
    5b22:	84 ef       	ldi	r24, 0xF4	; 244
    5b24:	91 e0       	ldi	r25, 0x01	; 1
    5b26:	0e 94 75 22 	call	0x44ea	; 0x44ea <SIREN_vChangeSound>
						Delay_ms(250);  // wait for 500ms
    5b2a:	8f e1       	ldi	r24, 0x1F	; 31
    5b2c:	90 e0       	ldi	r25, 0x00	; 0
    5b2e:	a0 e0       	ldi	r26, 0x00	; 0
    5b30:	b0 e0       	ldi	r27, 0x00	; 0
    5b32:	fe 01       	movw	r30, r28
    5b34:	fd 96       	adiw	r30, 0x3d	; 61
    5b36:	80 83       	st	Z, r24
    5b38:	91 83       	std	Z+1, r25	; 0x01
    5b3a:	a2 83       	std	Z+2, r26	; 0x02
    5b3c:	b3 83       	std	Z+3, r27	; 0x03
    5b3e:	2c c0       	rjmp	.+88     	; 0x5b98 <main+0x5a4>
    5b40:	80 ed       	ldi	r24, 0xD0	; 208
    5b42:	97 e0       	ldi	r25, 0x07	; 7
    5b44:	a0 e0       	ldi	r26, 0x00	; 0
    5b46:	b0 e0       	ldi	r27, 0x00	; 0
    5b48:	89 af       	std	Y+57, r24	; 0x39
    5b4a:	9a af       	std	Y+58, r25	; 0x3a
    5b4c:	ab af       	std	Y+59, r26	; 0x3b
    5b4e:	bc af       	std	Y+60, r27	; 0x3c
    5b50:	0c c0       	rjmp	.+24     	; 0x5b6a <main+0x576>
    5b52:	00 00       	nop
    5b54:	89 ad       	ldd	r24, Y+57	; 0x39
    5b56:	9a ad       	ldd	r25, Y+58	; 0x3a
    5b58:	ab ad       	ldd	r26, Y+59	; 0x3b
    5b5a:	bc ad       	ldd	r27, Y+60	; 0x3c
    5b5c:	01 97       	sbiw	r24, 0x01	; 1
    5b5e:	a1 09       	sbc	r26, r1
    5b60:	b1 09       	sbc	r27, r1
    5b62:	89 af       	std	Y+57, r24	; 0x39
    5b64:	9a af       	std	Y+58, r25	; 0x3a
    5b66:	ab af       	std	Y+59, r26	; 0x3b
    5b68:	bc af       	std	Y+60, r27	; 0x3c
    5b6a:	89 ad       	ldd	r24, Y+57	; 0x39
    5b6c:	9a ad       	ldd	r25, Y+58	; 0x3a
    5b6e:	ab ad       	ldd	r26, Y+59	; 0x3b
    5b70:	bc ad       	ldd	r27, Y+60	; 0x3c
    5b72:	00 97       	sbiw	r24, 0x00	; 0
    5b74:	a1 05       	cpc	r26, r1
    5b76:	b1 05       	cpc	r27, r1
    5b78:	61 f7       	brne	.-40     	; 0x5b52 <main+0x55e>
    5b7a:	fe 01       	movw	r30, r28
    5b7c:	fd 96       	adiw	r30, 0x3d	; 61
    5b7e:	80 81       	ld	r24, Z
    5b80:	91 81       	ldd	r25, Z+1	; 0x01
    5b82:	a2 81       	ldd	r26, Z+2	; 0x02
    5b84:	b3 81       	ldd	r27, Z+3	; 0x03
    5b86:	01 97       	sbiw	r24, 0x01	; 1
    5b88:	a1 09       	sbc	r26, r1
    5b8a:	b1 09       	sbc	r27, r1
    5b8c:	fe 01       	movw	r30, r28
    5b8e:	fd 96       	adiw	r30, 0x3d	; 61
    5b90:	80 83       	st	Z, r24
    5b92:	91 83       	std	Z+1, r25	; 0x01
    5b94:	a2 83       	std	Z+2, r26	; 0x02
    5b96:	b3 83       	std	Z+3, r27	; 0x03
    5b98:	fe 01       	movw	r30, r28
    5b9a:	fd 96       	adiw	r30, 0x3d	; 61
    5b9c:	80 81       	ld	r24, Z
    5b9e:	91 81       	ldd	r25, Z+1	; 0x01
    5ba0:	a2 81       	ldd	r26, Z+2	; 0x02
    5ba2:	b3 81       	ldd	r27, Z+3	; 0x03
    5ba4:	00 97       	sbiw	r24, 0x00	; 0
    5ba6:	a1 05       	cpc	r26, r1
    5ba8:	b1 05       	cpc	r27, r1
    5baa:	51 f6       	brne	.-108    	; 0x5b40 <main+0x54c>
						SIREN_vChangeSound(1100); // produce high sound
    5bac:	8c e4       	ldi	r24, 0x4C	; 76
    5bae:	94 e0       	ldi	r25, 0x04	; 4
    5bb0:	0e 94 75 22 	call	0x44ea	; 0x44ea <SIREN_vChangeSound>
						Delay_ms(250);
    5bb4:	8f e1       	ldi	r24, 0x1F	; 31
    5bb6:	90 e0       	ldi	r25, 0x00	; 0
    5bb8:	a0 e0       	ldi	r26, 0x00	; 0
    5bba:	b0 e0       	ldi	r27, 0x00	; 0
    5bbc:	8d ab       	std	Y+53, r24	; 0x35
    5bbe:	9e ab       	std	Y+54, r25	; 0x36
    5bc0:	af ab       	std	Y+55, r26	; 0x37
    5bc2:	b8 af       	std	Y+56, r27	; 0x38
    5bc4:	28 c0       	rjmp	.+80     	; 0x5c16 <main+0x622>
    5bc6:	80 ed       	ldi	r24, 0xD0	; 208
    5bc8:	97 e0       	ldi	r25, 0x07	; 7
    5bca:	a0 e0       	ldi	r26, 0x00	; 0
    5bcc:	b0 e0       	ldi	r27, 0x00	; 0
    5bce:	89 ab       	std	Y+49, r24	; 0x31
    5bd0:	9a ab       	std	Y+50, r25	; 0x32
    5bd2:	ab ab       	std	Y+51, r26	; 0x33
    5bd4:	bc ab       	std	Y+52, r27	; 0x34
    5bd6:	0c c0       	rjmp	.+24     	; 0x5bf0 <main+0x5fc>
    5bd8:	00 00       	nop
    5bda:	89 a9       	ldd	r24, Y+49	; 0x31
    5bdc:	9a a9       	ldd	r25, Y+50	; 0x32
    5bde:	ab a9       	ldd	r26, Y+51	; 0x33
    5be0:	bc a9       	ldd	r27, Y+52	; 0x34
    5be2:	01 97       	sbiw	r24, 0x01	; 1
    5be4:	a1 09       	sbc	r26, r1
    5be6:	b1 09       	sbc	r27, r1
    5be8:	89 ab       	std	Y+49, r24	; 0x31
    5bea:	9a ab       	std	Y+50, r25	; 0x32
    5bec:	ab ab       	std	Y+51, r26	; 0x33
    5bee:	bc ab       	std	Y+52, r27	; 0x34
    5bf0:	89 a9       	ldd	r24, Y+49	; 0x31
    5bf2:	9a a9       	ldd	r25, Y+50	; 0x32
    5bf4:	ab a9       	ldd	r26, Y+51	; 0x33
    5bf6:	bc a9       	ldd	r27, Y+52	; 0x34
    5bf8:	00 97       	sbiw	r24, 0x00	; 0
    5bfa:	a1 05       	cpc	r26, r1
    5bfc:	b1 05       	cpc	r27, r1
    5bfe:	61 f7       	brne	.-40     	; 0x5bd8 <main+0x5e4>
    5c00:	8d a9       	ldd	r24, Y+53	; 0x35
    5c02:	9e a9       	ldd	r25, Y+54	; 0x36
    5c04:	af a9       	ldd	r26, Y+55	; 0x37
    5c06:	b8 ad       	ldd	r27, Y+56	; 0x38
    5c08:	01 97       	sbiw	r24, 0x01	; 1
    5c0a:	a1 09       	sbc	r26, r1
    5c0c:	b1 09       	sbc	r27, r1
    5c0e:	8d ab       	std	Y+53, r24	; 0x35
    5c10:	9e ab       	std	Y+54, r25	; 0x36
    5c12:	af ab       	std	Y+55, r26	; 0x37
    5c14:	b8 af       	std	Y+56, r27	; 0x38
    5c16:	8d a9       	ldd	r24, Y+53	; 0x35
    5c18:	9e a9       	ldd	r25, Y+54	; 0x36
    5c1a:	af a9       	ldd	r26, Y+55	; 0x37
    5c1c:	b8 ad       	ldd	r27, Y+56	; 0x38
    5c1e:	00 97       	sbiw	r24, 0x00	; 0
    5c20:	a1 05       	cpc	r26, r1
    5c22:	b1 05       	cpc	r27, r1
    5c24:	81 f6       	brne	.-96     	; 0x5bc6 <main+0x5d2>
						SIREN_vStop();
    5c26:	0e 94 b5 22 	call	0x456a	; 0x456a <SIREN_vStop>
						Delay_ms(1000);
    5c2a:	8d e7       	ldi	r24, 0x7D	; 125
    5c2c:	90 e0       	ldi	r25, 0x00	; 0
    5c2e:	a0 e0       	ldi	r26, 0x00	; 0
    5c30:	b0 e0       	ldi	r27, 0x00	; 0
    5c32:	8d a7       	std	Y+45, r24	; 0x2d
    5c34:	9e a7       	std	Y+46, r25	; 0x2e
    5c36:	af a7       	std	Y+47, r26	; 0x2f
    5c38:	b8 ab       	std	Y+48, r27	; 0x30
    5c3a:	28 c0       	rjmp	.+80     	; 0x5c8c <main+0x698>
    5c3c:	80 ed       	ldi	r24, 0xD0	; 208
    5c3e:	97 e0       	ldi	r25, 0x07	; 7
    5c40:	a0 e0       	ldi	r26, 0x00	; 0
    5c42:	b0 e0       	ldi	r27, 0x00	; 0
    5c44:	89 a7       	std	Y+41, r24	; 0x29
    5c46:	9a a7       	std	Y+42, r25	; 0x2a
    5c48:	ab a7       	std	Y+43, r26	; 0x2b
    5c4a:	bc a7       	std	Y+44, r27	; 0x2c
    5c4c:	0c c0       	rjmp	.+24     	; 0x5c66 <main+0x672>
    5c4e:	00 00       	nop
    5c50:	89 a5       	ldd	r24, Y+41	; 0x29
    5c52:	9a a5       	ldd	r25, Y+42	; 0x2a
    5c54:	ab a5       	ldd	r26, Y+43	; 0x2b
    5c56:	bc a5       	ldd	r27, Y+44	; 0x2c
    5c58:	01 97       	sbiw	r24, 0x01	; 1
    5c5a:	a1 09       	sbc	r26, r1
    5c5c:	b1 09       	sbc	r27, r1
    5c5e:	89 a7       	std	Y+41, r24	; 0x29
    5c60:	9a a7       	std	Y+42, r25	; 0x2a
    5c62:	ab a7       	std	Y+43, r26	; 0x2b
    5c64:	bc a7       	std	Y+44, r27	; 0x2c
    5c66:	89 a5       	ldd	r24, Y+41	; 0x29
    5c68:	9a a5       	ldd	r25, Y+42	; 0x2a
    5c6a:	ab a5       	ldd	r26, Y+43	; 0x2b
    5c6c:	bc a5       	ldd	r27, Y+44	; 0x2c
    5c6e:	00 97       	sbiw	r24, 0x00	; 0
    5c70:	a1 05       	cpc	r26, r1
    5c72:	b1 05       	cpc	r27, r1
    5c74:	61 f7       	brne	.-40     	; 0x5c4e <main+0x65a>
    5c76:	8d a5       	ldd	r24, Y+45	; 0x2d
    5c78:	9e a5       	ldd	r25, Y+46	; 0x2e
    5c7a:	af a5       	ldd	r26, Y+47	; 0x2f
    5c7c:	b8 a9       	ldd	r27, Y+48	; 0x30
    5c7e:	01 97       	sbiw	r24, 0x01	; 1
    5c80:	a1 09       	sbc	r26, r1
    5c82:	b1 09       	sbc	r27, r1
    5c84:	8d a7       	std	Y+45, r24	; 0x2d
    5c86:	9e a7       	std	Y+46, r25	; 0x2e
    5c88:	af a7       	std	Y+47, r26	; 0x2f
    5c8a:	b8 ab       	std	Y+48, r27	; 0x30
    5c8c:	8d a5       	ldd	r24, Y+45	; 0x2d
    5c8e:	9e a5       	ldd	r25, Y+46	; 0x2e
    5c90:	af a5       	ldd	r26, Y+47	; 0x2f
    5c92:	b8 a9       	ldd	r27, Y+48	; 0x30
    5c94:	00 97       	sbiw	r24, 0x00	; 0
    5c96:	a1 05       	cpc	r26, r1
    5c98:	b1 05       	cpc	r27, r1
    5c9a:	81 f6       	brne	.-96     	; 0x5c3c <main+0x648>
					TMR_vStartTimer(&TIMER2);
					timer2_flag = FLAG_OFF;
					//turn on red led
					DIO_enuWritePin(DIO_PIN_NUM_0, DIO_HIGH);
					/* While loop until flag is off */
					while(timer2_flag == FLAG_OFF){
    5c9c:	80 91 08 05 	lds	r24, 0x0508
    5ca0:	88 23       	and	r24, r24
    5ca2:	09 f4       	brne	.+2      	; 0x5ca6 <main+0x6b2>
    5ca4:	8e ce       	rjmp	.-740    	; 0x59c2 <main+0x3ce>
						SIREN_vStop();
						Delay_ms(1000);

					}
					//SIREN_vStop();
					TMR_vStop(&TIMER2);
    5ca6:	8e ef       	ldi	r24, 0xFE	; 254
    5ca8:	94 e0       	ldi	r25, 0x04	; 4
    5caa:	0e 94 11 15 	call	0x2a22	; 0x2a22 <TMR_vStop>
					attempts = 0;
    5cae:	fe 01       	movw	r30, r28
    5cb0:	ee 5a       	subi	r30, 0xAE	; 174
    5cb2:	ff 4f       	sbci	r31, 0xFF	; 255
    5cb4:	10 82       	st	Z, r1
					trials = 3;
    5cb6:	fe 01       	movw	r30, r28
    5cb8:	ef 5a       	subi	r30, 0xAF	; 175
    5cba:	ff 4f       	sbci	r31, 0xFF	; 255
    5cbc:	83 e0       	ldi	r24, 0x03	; 3
    5cbe:	80 83       	st	Z, r24
				}
				Bluetooth_vSendString((u8*)"Enter Your Password Again: ");
    5cc0:	8f e4       	ldi	r24, 0x4F	; 79
    5cc2:	91 e0       	ldi	r25, 0x01	; 1
    5cc4:	0e 94 e1 2a 	call	0x55c2	; 0x55c2 <Bluetooth_vSendString>
    5cc8:	12 c0       	rjmp	.+36     	; 0x5cee <main+0x6fa>

			}else{
				attempts = 0;
    5cca:	fe 01       	movw	r30, r28
    5ccc:	ee 5a       	subi	r30, 0xAE	; 174
    5cce:	ff 4f       	sbci	r31, 0xFF	; 255
    5cd0:	10 82       	st	Z, r1
				trials = 3;
    5cd2:	fe 01       	movw	r30, r28
    5cd4:	ef 5a       	subi	r30, 0xAF	; 175
    5cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    5cd8:	83 e0       	ldi	r24, 0x03	; 3
    5cda:	80 83       	st	Z, r24
				Bluetooth_vSendString((u8*)"Welcome In Your Smart Home\r\n");
    5cdc:	8b e6       	ldi	r24, 0x6B	; 107
    5cde:	91 e0       	ldi	r25, 0x01	; 1
    5ce0:	0e 94 e1 2a 	call	0x55c2	; 0x55c2 <Bluetooth_vSendString>
				user_found = 1;
    5ce4:	fe 01       	movw	r30, r28
    5ce6:	ec 5a       	subi	r30, 0xAC	; 172
    5ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    5cea:	81 e0       	ldi	r24, 0x01	; 1
    5cec:	80 83       	st	Z, r24
			}

			if(user_found == 1){
    5cee:	fe 01       	movw	r30, r28
    5cf0:	ec 5a       	subi	r30, 0xAC	; 172
    5cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    5cf4:	80 81       	ld	r24, Z
    5cf6:	81 30       	cpi	r24, 0x01	; 1
    5cf8:	09 f4       	brne	.+2      	; 0x5cfc <main+0x708>
    5cfa:	cd c1       	rjmp	.+922    	; 0x6096 <main+0xaa2>
		Lcd_SetCursorPosition(1, 0);
		Lcd_DisplayString((char*)userName);
		Lcd_DisplayString("        ");
		Bluetooth_vSendString((u8*)"Enter Password: ");
		//Bluetooth_vSendString((u8*)"\r\n");
		while(attempts < 3){
    5cfc:	fe 01       	movw	r30, r28
    5cfe:	ee 5a       	subi	r30, 0xAE	; 174
    5d00:	ff 4f       	sbci	r31, 0xFF	; 255
    5d02:	80 81       	ld	r24, Z
    5d04:	83 30       	cpi	r24, 0x03	; 3
    5d06:	08 f4       	brcc	.+2      	; 0x5d0a <main+0x716>
    5d08:	6d cd       	rjmp	.-1318   	; 0x57e4 <main+0x1f0>
    5d0a:	c5 c1       	rjmp	.+906    	; 0x6096 <main+0xaa2>
			}
		}


		while(user_found == 1){
			Bluetooth_vClearBuffer();
    5d0c:	0e 94 f1 2a 	call	0x55e2	; 0x55e2 <Bluetooth_vClearBuffer>
			Bluetooth_vSendString((u8*)"Enter Your Choice\r\n");
    5d10:	88 e8       	ldi	r24, 0x88	; 136
    5d12:	91 e0       	ldi	r25, 0x01	; 1
    5d14:	0e 94 e1 2a 	call	0x55c2	; 0x55c2 <Bluetooth_vSendString>
			Bluetooth_vSendString((u8*)"1. For Open Door\r\n");
    5d18:	8c e9       	ldi	r24, 0x9C	; 156
    5d1a:	91 e0       	ldi	r25, 0x01	; 1
    5d1c:	0e 94 e1 2a 	call	0x55c2	; 0x55c2 <Bluetooth_vSendString>
			Bluetooth_vSendString((u8*)"2. For Close Door\r\n");
    5d20:	8f ea       	ldi	r24, 0xAF	; 175
    5d22:	91 e0       	ldi	r25, 0x01	; 1
    5d24:	0e 94 e1 2a 	call	0x55c2	; 0x55c2 <Bluetooth_vSendString>
			Bluetooth_vSendString((u8*)"3. For Turn On Led\r\n");
    5d28:	83 ec       	ldi	r24, 0xC3	; 195
    5d2a:	91 e0       	ldi	r25, 0x01	; 1
    5d2c:	0e 94 e1 2a 	call	0x55c2	; 0x55c2 <Bluetooth_vSendString>
			Bluetooth_vSendString((u8*)"4. For Turn Off Led\r\n");
    5d30:	88 ed       	ldi	r24, 0xD8	; 216
    5d32:	91 e0       	ldi	r25, 0x01	; 1
    5d34:	0e 94 e1 2a 	call	0x55c2	; 0x55c2 <Bluetooth_vSendString>
			Bluetooth_vSendString((u8*)"5. LogOut\r\n");
    5d38:	8e ee       	ldi	r24, 0xEE	; 238
    5d3a:	91 e0       	ldi	r25, 0x01	; 1
    5d3c:	0e 94 e1 2a 	call	0x55c2	; 0x55c2 <Bluetooth_vSendString>
			Bluetooth_vClearBuffer();
    5d40:	0e 94 f1 2a 	call	0x55e2	; 0x55e2 <Bluetooth_vClearBuffer>
			choice = Bluetooth_u8ReceiveData();
    5d44:	0e 94 d4 2a 	call	0x55a8	; 0x55a8 <Bluetooth_u8ReceiveData>
    5d48:	fe 01       	movw	r30, r28
    5d4a:	ed 5a       	subi	r30, 0xAD	; 173
    5d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    5d4e:	80 83       	st	Z, r24

			switch (choice) {
    5d50:	fe 01       	movw	r30, r28
    5d52:	ed 5a       	subi	r30, 0xAD	; 173
    5d54:	ff 4f       	sbci	r31, 0xFF	; 255
    5d56:	80 81       	ld	r24, Z
    5d58:	28 2f       	mov	r18, r24
    5d5a:	30 e0       	ldi	r19, 0x00	; 0
    5d5c:	ca 57       	subi	r28, 0x7A	; 122
    5d5e:	df 4f       	sbci	r29, 0xFF	; 255
    5d60:	39 83       	std	Y+1, r19	; 0x01
    5d62:	28 83       	st	Y, r18
    5d64:	c6 58       	subi	r28, 0x86	; 134
    5d66:	d0 40       	sbci	r29, 0x00	; 0
    5d68:	ca 57       	subi	r28, 0x7A	; 122
    5d6a:	df 4f       	sbci	r29, 0xFF	; 255
    5d6c:	88 81       	ld	r24, Y
    5d6e:	99 81       	ldd	r25, Y+1	; 0x01
    5d70:	c6 58       	subi	r28, 0x86	; 134
    5d72:	d0 40       	sbci	r29, 0x00	; 0
    5d74:	83 33       	cpi	r24, 0x33	; 51
    5d76:	91 05       	cpc	r25, r1
    5d78:	09 f4       	brne	.+2      	; 0x5d7c <main+0x788>
    5d7a:	bc c0       	rjmp	.+376    	; 0x5ef4 <main+0x900>
    5d7c:	ca 57       	subi	r28, 0x7A	; 122
    5d7e:	df 4f       	sbci	r29, 0xFF	; 255
    5d80:	e8 81       	ld	r30, Y
    5d82:	f9 81       	ldd	r31, Y+1	; 0x01
    5d84:	c6 58       	subi	r28, 0x86	; 134
    5d86:	d0 40       	sbci	r29, 0x00	; 0
    5d88:	e4 33       	cpi	r30, 0x34	; 52
    5d8a:	f1 05       	cpc	r31, r1
    5d8c:	a4 f4       	brge	.+40     	; 0x5db6 <main+0x7c2>
    5d8e:	ca 57       	subi	r28, 0x7A	; 122
    5d90:	df 4f       	sbci	r29, 0xFF	; 255
    5d92:	28 81       	ld	r18, Y
    5d94:	39 81       	ldd	r19, Y+1	; 0x01
    5d96:	c6 58       	subi	r28, 0x86	; 134
    5d98:	d0 40       	sbci	r29, 0x00	; 0
    5d9a:	21 33       	cpi	r18, 0x31	; 49
    5d9c:	31 05       	cpc	r19, r1
    5d9e:	01 f1       	breq	.+64     	; 0x5de0 <main+0x7ec>
    5da0:	ca 57       	subi	r28, 0x7A	; 122
    5da2:	df 4f       	sbci	r29, 0xFF	; 255
    5da4:	88 81       	ld	r24, Y
    5da6:	99 81       	ldd	r25, Y+1	; 0x01
    5da8:	c6 58       	subi	r28, 0x86	; 134
    5daa:	d0 40       	sbci	r29, 0x00	; 0
    5dac:	82 33       	cpi	r24, 0x32	; 50
    5dae:	91 05       	cpc	r25, r1
    5db0:	09 f4       	brne	.+2      	; 0x5db4 <main+0x7c0>
    5db2:	5b c0       	rjmp	.+182    	; 0x5e6a <main+0x876>
    5db4:	31 c1       	rjmp	.+610    	; 0x6018 <main+0xa24>
    5db6:	ca 57       	subi	r28, 0x7A	; 122
    5db8:	df 4f       	sbci	r29, 0xFF	; 255
    5dba:	e8 81       	ld	r30, Y
    5dbc:	f9 81       	ldd	r31, Y+1	; 0x01
    5dbe:	c6 58       	subi	r28, 0x86	; 134
    5dc0:	d0 40       	sbci	r29, 0x00	; 0
    5dc2:	e4 33       	cpi	r30, 0x34	; 52
    5dc4:	f1 05       	cpc	r31, r1
    5dc6:	09 f4       	brne	.+2      	; 0x5dca <main+0x7d6>
    5dc8:	d9 c0       	rjmp	.+434    	; 0x5f7c <main+0x988>
    5dca:	ca 57       	subi	r28, 0x7A	; 122
    5dcc:	df 4f       	sbci	r29, 0xFF	; 255
    5dce:	28 81       	ld	r18, Y
    5dd0:	39 81       	ldd	r19, Y+1	; 0x01
    5dd2:	c6 58       	subi	r28, 0x86	; 134
    5dd4:	d0 40       	sbci	r29, 0x00	; 0
    5dd6:	25 33       	cpi	r18, 0x35	; 53
    5dd8:	31 05       	cpc	r19, r1
    5dda:	09 f4       	brne	.+2      	; 0x5dde <main+0x7ea>
    5ddc:	13 c1       	rjmp	.+550    	; 0x6004 <main+0xa10>
    5dde:	1c c1       	rjmp	.+568    	; 0x6018 <main+0xa24>
				case '1':
					SERVO_vChangeDirection(&SERVO1, SERVO_180);
    5de0:	81 ef       	ldi	r24, 0xF1	; 241
    5de2:	94 e0       	ldi	r25, 0x04	; 4
    5de4:	62 e0       	ldi	r22, 0x02	; 2
    5de6:	0e 94 1e 23 	call	0x463c	; 0x463c <SERVO_vChangeDirection>
					Delay_ms(500);
    5dea:	8e e3       	ldi	r24, 0x3E	; 62
    5dec:	90 e0       	ldi	r25, 0x00	; 0
    5dee:	a0 e0       	ldi	r26, 0x00	; 0
    5df0:	b0 e0       	ldi	r27, 0x00	; 0
    5df2:	8d a3       	std	Y+37, r24	; 0x25
    5df4:	9e a3       	std	Y+38, r25	; 0x26
    5df6:	af a3       	std	Y+39, r26	; 0x27
    5df8:	b8 a7       	std	Y+40, r27	; 0x28
    5dfa:	28 c0       	rjmp	.+80     	; 0x5e4c <main+0x858>
    5dfc:	80 ed       	ldi	r24, 0xD0	; 208
    5dfe:	97 e0       	ldi	r25, 0x07	; 7
    5e00:	a0 e0       	ldi	r26, 0x00	; 0
    5e02:	b0 e0       	ldi	r27, 0x00	; 0
    5e04:	89 a3       	std	Y+33, r24	; 0x21
    5e06:	9a a3       	std	Y+34, r25	; 0x22
    5e08:	ab a3       	std	Y+35, r26	; 0x23
    5e0a:	bc a3       	std	Y+36, r27	; 0x24
    5e0c:	0c c0       	rjmp	.+24     	; 0x5e26 <main+0x832>
    5e0e:	00 00       	nop
    5e10:	89 a1       	ldd	r24, Y+33	; 0x21
    5e12:	9a a1       	ldd	r25, Y+34	; 0x22
    5e14:	ab a1       	ldd	r26, Y+35	; 0x23
    5e16:	bc a1       	ldd	r27, Y+36	; 0x24
    5e18:	01 97       	sbiw	r24, 0x01	; 1
    5e1a:	a1 09       	sbc	r26, r1
    5e1c:	b1 09       	sbc	r27, r1
    5e1e:	89 a3       	std	Y+33, r24	; 0x21
    5e20:	9a a3       	std	Y+34, r25	; 0x22
    5e22:	ab a3       	std	Y+35, r26	; 0x23
    5e24:	bc a3       	std	Y+36, r27	; 0x24
    5e26:	89 a1       	ldd	r24, Y+33	; 0x21
    5e28:	9a a1       	ldd	r25, Y+34	; 0x22
    5e2a:	ab a1       	ldd	r26, Y+35	; 0x23
    5e2c:	bc a1       	ldd	r27, Y+36	; 0x24
    5e2e:	00 97       	sbiw	r24, 0x00	; 0
    5e30:	a1 05       	cpc	r26, r1
    5e32:	b1 05       	cpc	r27, r1
    5e34:	61 f7       	brne	.-40     	; 0x5e0e <main+0x81a>
    5e36:	8d a1       	ldd	r24, Y+37	; 0x25
    5e38:	9e a1       	ldd	r25, Y+38	; 0x26
    5e3a:	af a1       	ldd	r26, Y+39	; 0x27
    5e3c:	b8 a5       	ldd	r27, Y+40	; 0x28
    5e3e:	01 97       	sbiw	r24, 0x01	; 1
    5e40:	a1 09       	sbc	r26, r1
    5e42:	b1 09       	sbc	r27, r1
    5e44:	8d a3       	std	Y+37, r24	; 0x25
    5e46:	9e a3       	std	Y+38, r25	; 0x26
    5e48:	af a3       	std	Y+39, r26	; 0x27
    5e4a:	b8 a7       	std	Y+40, r27	; 0x28
    5e4c:	8d a1       	ldd	r24, Y+37	; 0x25
    5e4e:	9e a1       	ldd	r25, Y+38	; 0x26
    5e50:	af a1       	ldd	r26, Y+39	; 0x27
    5e52:	b8 a5       	ldd	r27, Y+40	; 0x28
    5e54:	00 97       	sbiw	r24, 0x00	; 0
    5e56:	a1 05       	cpc	r26, r1
    5e58:	b1 05       	cpc	r27, r1
    5e5a:	81 f6       	brne	.-96     	; 0x5dfc <main+0x808>
					Bluetooth_vSendString((u8*)"Door is opened\r\n");
    5e5c:	8a ef       	ldi	r24, 0xFA	; 250
    5e5e:	91 e0       	ldi	r25, 0x01	; 1
    5e60:	0e 94 e1 2a 	call	0x55c2	; 0x55c2 <Bluetooth_vSendString>
					Bluetooth_vClearBuffer();
    5e64:	0e 94 f1 2a 	call	0x55e2	; 0x55e2 <Bluetooth_vClearBuffer>
    5e68:	16 c1       	rjmp	.+556    	; 0x6096 <main+0xaa2>
					break;
				case '2':
					SERVO_vChangeDirection(&SERVO1, SERVO_0);
    5e6a:	81 ef       	ldi	r24, 0xF1	; 241
    5e6c:	94 e0       	ldi	r25, 0x04	; 4
    5e6e:	60 e0       	ldi	r22, 0x00	; 0
    5e70:	0e 94 1e 23 	call	0x463c	; 0x463c <SERVO_vChangeDirection>
					Delay_ms(500);
    5e74:	8e e3       	ldi	r24, 0x3E	; 62
    5e76:	90 e0       	ldi	r25, 0x00	; 0
    5e78:	a0 e0       	ldi	r26, 0x00	; 0
    5e7a:	b0 e0       	ldi	r27, 0x00	; 0
    5e7c:	8d 8f       	std	Y+29, r24	; 0x1d
    5e7e:	9e 8f       	std	Y+30, r25	; 0x1e
    5e80:	af 8f       	std	Y+31, r26	; 0x1f
    5e82:	b8 a3       	std	Y+32, r27	; 0x20
    5e84:	28 c0       	rjmp	.+80     	; 0x5ed6 <main+0x8e2>
    5e86:	80 ed       	ldi	r24, 0xD0	; 208
    5e88:	97 e0       	ldi	r25, 0x07	; 7
    5e8a:	a0 e0       	ldi	r26, 0x00	; 0
    5e8c:	b0 e0       	ldi	r27, 0x00	; 0
    5e8e:	89 8f       	std	Y+25, r24	; 0x19
    5e90:	9a 8f       	std	Y+26, r25	; 0x1a
    5e92:	ab 8f       	std	Y+27, r26	; 0x1b
    5e94:	bc 8f       	std	Y+28, r27	; 0x1c
    5e96:	0c c0       	rjmp	.+24     	; 0x5eb0 <main+0x8bc>
    5e98:	00 00       	nop
    5e9a:	89 8d       	ldd	r24, Y+25	; 0x19
    5e9c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5e9e:	ab 8d       	ldd	r26, Y+27	; 0x1b
    5ea0:	bc 8d       	ldd	r27, Y+28	; 0x1c
    5ea2:	01 97       	sbiw	r24, 0x01	; 1
    5ea4:	a1 09       	sbc	r26, r1
    5ea6:	b1 09       	sbc	r27, r1
    5ea8:	89 8f       	std	Y+25, r24	; 0x19
    5eaa:	9a 8f       	std	Y+26, r25	; 0x1a
    5eac:	ab 8f       	std	Y+27, r26	; 0x1b
    5eae:	bc 8f       	std	Y+28, r27	; 0x1c
    5eb0:	89 8d       	ldd	r24, Y+25	; 0x19
    5eb2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5eb4:	ab 8d       	ldd	r26, Y+27	; 0x1b
    5eb6:	bc 8d       	ldd	r27, Y+28	; 0x1c
    5eb8:	00 97       	sbiw	r24, 0x00	; 0
    5eba:	a1 05       	cpc	r26, r1
    5ebc:	b1 05       	cpc	r27, r1
    5ebe:	61 f7       	brne	.-40     	; 0x5e98 <main+0x8a4>
    5ec0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5ec2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5ec4:	af 8d       	ldd	r26, Y+31	; 0x1f
    5ec6:	b8 a1       	ldd	r27, Y+32	; 0x20
    5ec8:	01 97       	sbiw	r24, 0x01	; 1
    5eca:	a1 09       	sbc	r26, r1
    5ecc:	b1 09       	sbc	r27, r1
    5ece:	8d 8f       	std	Y+29, r24	; 0x1d
    5ed0:	9e 8f       	std	Y+30, r25	; 0x1e
    5ed2:	af 8f       	std	Y+31, r26	; 0x1f
    5ed4:	b8 a3       	std	Y+32, r27	; 0x20
    5ed6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5ed8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5eda:	af 8d       	ldd	r26, Y+31	; 0x1f
    5edc:	b8 a1       	ldd	r27, Y+32	; 0x20
    5ede:	00 97       	sbiw	r24, 0x00	; 0
    5ee0:	a1 05       	cpc	r26, r1
    5ee2:	b1 05       	cpc	r27, r1
    5ee4:	81 f6       	brne	.-96     	; 0x5e86 <main+0x892>
					Bluetooth_vSendString((u8*)"Door is closed\r\n");
    5ee6:	8b e0       	ldi	r24, 0x0B	; 11
    5ee8:	92 e0       	ldi	r25, 0x02	; 2
    5eea:	0e 94 e1 2a 	call	0x55c2	; 0x55c2 <Bluetooth_vSendString>
					Bluetooth_vClearBuffer();
    5eee:	0e 94 f1 2a 	call	0x55e2	; 0x55e2 <Bluetooth_vClearBuffer>
    5ef2:	d1 c0       	rjmp	.+418    	; 0x6096 <main+0xaa2>
					break;
				case '3':
					DIO_enuWritePin(DIO_PIN_NUM_1, DIO_HIGH);
    5ef4:	81 e0       	ldi	r24, 0x01	; 1
    5ef6:	61 e0       	ldi	r22, 0x01	; 1
    5ef8:	0e 94 45 20 	call	0x408a	; 0x408a <DIO_enuWritePin>
					Delay_ms(500);
    5efc:	8e e3       	ldi	r24, 0x3E	; 62
    5efe:	90 e0       	ldi	r25, 0x00	; 0
    5f00:	a0 e0       	ldi	r26, 0x00	; 0
    5f02:	b0 e0       	ldi	r27, 0x00	; 0
    5f04:	8d 8b       	std	Y+21, r24	; 0x15
    5f06:	9e 8b       	std	Y+22, r25	; 0x16
    5f08:	af 8b       	std	Y+23, r26	; 0x17
    5f0a:	b8 8f       	std	Y+24, r27	; 0x18
    5f0c:	28 c0       	rjmp	.+80     	; 0x5f5e <main+0x96a>
    5f0e:	80 ed       	ldi	r24, 0xD0	; 208
    5f10:	97 e0       	ldi	r25, 0x07	; 7
    5f12:	a0 e0       	ldi	r26, 0x00	; 0
    5f14:	b0 e0       	ldi	r27, 0x00	; 0
    5f16:	89 8b       	std	Y+17, r24	; 0x11
    5f18:	9a 8b       	std	Y+18, r25	; 0x12
    5f1a:	ab 8b       	std	Y+19, r26	; 0x13
    5f1c:	bc 8b       	std	Y+20, r27	; 0x14
    5f1e:	0c c0       	rjmp	.+24     	; 0x5f38 <main+0x944>
    5f20:	00 00       	nop
    5f22:	89 89       	ldd	r24, Y+17	; 0x11
    5f24:	9a 89       	ldd	r25, Y+18	; 0x12
    5f26:	ab 89       	ldd	r26, Y+19	; 0x13
    5f28:	bc 89       	ldd	r27, Y+20	; 0x14
    5f2a:	01 97       	sbiw	r24, 0x01	; 1
    5f2c:	a1 09       	sbc	r26, r1
    5f2e:	b1 09       	sbc	r27, r1
    5f30:	89 8b       	std	Y+17, r24	; 0x11
    5f32:	9a 8b       	std	Y+18, r25	; 0x12
    5f34:	ab 8b       	std	Y+19, r26	; 0x13
    5f36:	bc 8b       	std	Y+20, r27	; 0x14
    5f38:	89 89       	ldd	r24, Y+17	; 0x11
    5f3a:	9a 89       	ldd	r25, Y+18	; 0x12
    5f3c:	ab 89       	ldd	r26, Y+19	; 0x13
    5f3e:	bc 89       	ldd	r27, Y+20	; 0x14
    5f40:	00 97       	sbiw	r24, 0x00	; 0
    5f42:	a1 05       	cpc	r26, r1
    5f44:	b1 05       	cpc	r27, r1
    5f46:	61 f7       	brne	.-40     	; 0x5f20 <main+0x92c>
    5f48:	8d 89       	ldd	r24, Y+21	; 0x15
    5f4a:	9e 89       	ldd	r25, Y+22	; 0x16
    5f4c:	af 89       	ldd	r26, Y+23	; 0x17
    5f4e:	b8 8d       	ldd	r27, Y+24	; 0x18
    5f50:	01 97       	sbiw	r24, 0x01	; 1
    5f52:	a1 09       	sbc	r26, r1
    5f54:	b1 09       	sbc	r27, r1
    5f56:	8d 8b       	std	Y+21, r24	; 0x15
    5f58:	9e 8b       	std	Y+22, r25	; 0x16
    5f5a:	af 8b       	std	Y+23, r26	; 0x17
    5f5c:	b8 8f       	std	Y+24, r27	; 0x18
    5f5e:	8d 89       	ldd	r24, Y+21	; 0x15
    5f60:	9e 89       	ldd	r25, Y+22	; 0x16
    5f62:	af 89       	ldd	r26, Y+23	; 0x17
    5f64:	b8 8d       	ldd	r27, Y+24	; 0x18
    5f66:	00 97       	sbiw	r24, 0x00	; 0
    5f68:	a1 05       	cpc	r26, r1
    5f6a:	b1 05       	cpc	r27, r1
    5f6c:	81 f6       	brne	.-96     	; 0x5f0e <main+0x91a>
					Bluetooth_vSendString((u8*)"Led is on\r\n");
    5f6e:	8c e1       	ldi	r24, 0x1C	; 28
    5f70:	92 e0       	ldi	r25, 0x02	; 2
    5f72:	0e 94 e1 2a 	call	0x55c2	; 0x55c2 <Bluetooth_vSendString>
					Bluetooth_vClearBuffer();
    5f76:	0e 94 f1 2a 	call	0x55e2	; 0x55e2 <Bluetooth_vClearBuffer>
    5f7a:	8d c0       	rjmp	.+282    	; 0x6096 <main+0xaa2>
					break;
				case '4':
					DIO_enuWritePin(DIO_PIN_NUM_1, DIO_LOW);
    5f7c:	81 e0       	ldi	r24, 0x01	; 1
    5f7e:	60 e0       	ldi	r22, 0x00	; 0
    5f80:	0e 94 45 20 	call	0x408a	; 0x408a <DIO_enuWritePin>
					Delay_ms(500);
    5f84:	8e e3       	ldi	r24, 0x3E	; 62
    5f86:	90 e0       	ldi	r25, 0x00	; 0
    5f88:	a0 e0       	ldi	r26, 0x00	; 0
    5f8a:	b0 e0       	ldi	r27, 0x00	; 0
    5f8c:	8d 87       	std	Y+13, r24	; 0x0d
    5f8e:	9e 87       	std	Y+14, r25	; 0x0e
    5f90:	af 87       	std	Y+15, r26	; 0x0f
    5f92:	b8 8b       	std	Y+16, r27	; 0x10
    5f94:	28 c0       	rjmp	.+80     	; 0x5fe6 <main+0x9f2>
    5f96:	80 ed       	ldi	r24, 0xD0	; 208
    5f98:	97 e0       	ldi	r25, 0x07	; 7
    5f9a:	a0 e0       	ldi	r26, 0x00	; 0
    5f9c:	b0 e0       	ldi	r27, 0x00	; 0
    5f9e:	89 87       	std	Y+9, r24	; 0x09
    5fa0:	9a 87       	std	Y+10, r25	; 0x0a
    5fa2:	ab 87       	std	Y+11, r26	; 0x0b
    5fa4:	bc 87       	std	Y+12, r27	; 0x0c
    5fa6:	0c c0       	rjmp	.+24     	; 0x5fc0 <main+0x9cc>
    5fa8:	00 00       	nop
    5faa:	89 85       	ldd	r24, Y+9	; 0x09
    5fac:	9a 85       	ldd	r25, Y+10	; 0x0a
    5fae:	ab 85       	ldd	r26, Y+11	; 0x0b
    5fb0:	bc 85       	ldd	r27, Y+12	; 0x0c
    5fb2:	01 97       	sbiw	r24, 0x01	; 1
    5fb4:	a1 09       	sbc	r26, r1
    5fb6:	b1 09       	sbc	r27, r1
    5fb8:	89 87       	std	Y+9, r24	; 0x09
    5fba:	9a 87       	std	Y+10, r25	; 0x0a
    5fbc:	ab 87       	std	Y+11, r26	; 0x0b
    5fbe:	bc 87       	std	Y+12, r27	; 0x0c
    5fc0:	89 85       	ldd	r24, Y+9	; 0x09
    5fc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    5fc4:	ab 85       	ldd	r26, Y+11	; 0x0b
    5fc6:	bc 85       	ldd	r27, Y+12	; 0x0c
    5fc8:	00 97       	sbiw	r24, 0x00	; 0
    5fca:	a1 05       	cpc	r26, r1
    5fcc:	b1 05       	cpc	r27, r1
    5fce:	61 f7       	brne	.-40     	; 0x5fa8 <main+0x9b4>
    5fd0:	8d 85       	ldd	r24, Y+13	; 0x0d
    5fd2:	9e 85       	ldd	r25, Y+14	; 0x0e
    5fd4:	af 85       	ldd	r26, Y+15	; 0x0f
    5fd6:	b8 89       	ldd	r27, Y+16	; 0x10
    5fd8:	01 97       	sbiw	r24, 0x01	; 1
    5fda:	a1 09       	sbc	r26, r1
    5fdc:	b1 09       	sbc	r27, r1
    5fde:	8d 87       	std	Y+13, r24	; 0x0d
    5fe0:	9e 87       	std	Y+14, r25	; 0x0e
    5fe2:	af 87       	std	Y+15, r26	; 0x0f
    5fe4:	b8 8b       	std	Y+16, r27	; 0x10
    5fe6:	8d 85       	ldd	r24, Y+13	; 0x0d
    5fe8:	9e 85       	ldd	r25, Y+14	; 0x0e
    5fea:	af 85       	ldd	r26, Y+15	; 0x0f
    5fec:	b8 89       	ldd	r27, Y+16	; 0x10
    5fee:	00 97       	sbiw	r24, 0x00	; 0
    5ff0:	a1 05       	cpc	r26, r1
    5ff2:	b1 05       	cpc	r27, r1
    5ff4:	81 f6       	brne	.-96     	; 0x5f96 <main+0x9a2>
					Bluetooth_vSendString((u8*)"Led is off\r\n");
    5ff6:	88 e2       	ldi	r24, 0x28	; 40
    5ff8:	92 e0       	ldi	r25, 0x02	; 2
    5ffa:	0e 94 e1 2a 	call	0x55c2	; 0x55c2 <Bluetooth_vSendString>
					Bluetooth_vClearBuffer();
    5ffe:	0e 94 f1 2a 	call	0x55e2	; 0x55e2 <Bluetooth_vClearBuffer>
    6002:	49 c0       	rjmp	.+146    	; 0x6096 <main+0xaa2>
					break;
				case '5':
					Bluetooth_vSendString((u8*)"Good Bye\r\n");
    6004:	85 e3       	ldi	r24, 0x35	; 53
    6006:	92 e0       	ldi	r25, 0x02	; 2
    6008:	0e 94 e1 2a 	call	0x55c2	; 0x55c2 <Bluetooth_vSendString>
					Bluetooth_vClearBuffer();
    600c:	0e 94 f1 2a 	call	0x55e2	; 0x55e2 <Bluetooth_vClearBuffer>
					exit(0);
    6010:	80 e0       	ldi	r24, 0x00	; 0
    6012:	90 e0       	ldi	r25, 0x00	; 0
    6014:	0e 94 fb 30 	call	0x61f6	; 0x61f6 <_exit>
				default:
					Bluetooth_vSendString((u8*)"Enter a right choice\r\n");
    6018:	80 e4       	ldi	r24, 0x40	; 64
    601a:	92 e0       	ldi	r25, 0x02	; 2
    601c:	0e 94 e1 2a 	call	0x55c2	; 0x55c2 <Bluetooth_vSendString>
					Delay_ms(500);
    6020:	8e e3       	ldi	r24, 0x3E	; 62
    6022:	90 e0       	ldi	r25, 0x00	; 0
    6024:	a0 e0       	ldi	r26, 0x00	; 0
    6026:	b0 e0       	ldi	r27, 0x00	; 0
    6028:	8d 83       	std	Y+5, r24	; 0x05
    602a:	9e 83       	std	Y+6, r25	; 0x06
    602c:	af 83       	std	Y+7, r26	; 0x07
    602e:	b8 87       	std	Y+8, r27	; 0x08
    6030:	28 c0       	rjmp	.+80     	; 0x6082 <main+0xa8e>
    6032:	80 ed       	ldi	r24, 0xD0	; 208
    6034:	97 e0       	ldi	r25, 0x07	; 7
    6036:	a0 e0       	ldi	r26, 0x00	; 0
    6038:	b0 e0       	ldi	r27, 0x00	; 0
    603a:	89 83       	std	Y+1, r24	; 0x01
    603c:	9a 83       	std	Y+2, r25	; 0x02
    603e:	ab 83       	std	Y+3, r26	; 0x03
    6040:	bc 83       	std	Y+4, r27	; 0x04
    6042:	0c c0       	rjmp	.+24     	; 0x605c <main+0xa68>
    6044:	00 00       	nop
    6046:	89 81       	ldd	r24, Y+1	; 0x01
    6048:	9a 81       	ldd	r25, Y+2	; 0x02
    604a:	ab 81       	ldd	r26, Y+3	; 0x03
    604c:	bc 81       	ldd	r27, Y+4	; 0x04
    604e:	01 97       	sbiw	r24, 0x01	; 1
    6050:	a1 09       	sbc	r26, r1
    6052:	b1 09       	sbc	r27, r1
    6054:	89 83       	std	Y+1, r24	; 0x01
    6056:	9a 83       	std	Y+2, r25	; 0x02
    6058:	ab 83       	std	Y+3, r26	; 0x03
    605a:	bc 83       	std	Y+4, r27	; 0x04
    605c:	89 81       	ldd	r24, Y+1	; 0x01
    605e:	9a 81       	ldd	r25, Y+2	; 0x02
    6060:	ab 81       	ldd	r26, Y+3	; 0x03
    6062:	bc 81       	ldd	r27, Y+4	; 0x04
    6064:	00 97       	sbiw	r24, 0x00	; 0
    6066:	a1 05       	cpc	r26, r1
    6068:	b1 05       	cpc	r27, r1
    606a:	61 f7       	brne	.-40     	; 0x6044 <main+0xa50>
    606c:	8d 81       	ldd	r24, Y+5	; 0x05
    606e:	9e 81       	ldd	r25, Y+6	; 0x06
    6070:	af 81       	ldd	r26, Y+7	; 0x07
    6072:	b8 85       	ldd	r27, Y+8	; 0x08
    6074:	01 97       	sbiw	r24, 0x01	; 1
    6076:	a1 09       	sbc	r26, r1
    6078:	b1 09       	sbc	r27, r1
    607a:	8d 83       	std	Y+5, r24	; 0x05
    607c:	9e 83       	std	Y+6, r25	; 0x06
    607e:	af 83       	std	Y+7, r26	; 0x07
    6080:	b8 87       	std	Y+8, r27	; 0x08
    6082:	8d 81       	ldd	r24, Y+5	; 0x05
    6084:	9e 81       	ldd	r25, Y+6	; 0x06
    6086:	af 81       	ldd	r26, Y+7	; 0x07
    6088:	b8 85       	ldd	r27, Y+8	; 0x08
    608a:	00 97       	sbiw	r24, 0x00	; 0
    608c:	a1 05       	cpc	r26, r1
    608e:	b1 05       	cpc	r27, r1
    6090:	81 f6       	brne	.-96     	; 0x6032 <main+0xa3e>
					Bluetooth_vClearBuffer();
    6092:	0e 94 f1 2a 	call	0x55e2	; 0x55e2 <Bluetooth_vClearBuffer>
				break;
			}
		}


		while(user_found == 1){
    6096:	fe 01       	movw	r30, r28
    6098:	ec 5a       	subi	r30, 0xAC	; 172
    609a:	ff 4f       	sbci	r31, 0xFF	; 255
    609c:	80 81       	ld	r24, Z
    609e:	81 30       	cpi	r24, 0x01	; 1
    60a0:	09 f4       	brne	.+2      	; 0x60a4 <main+0xab0>
    60a2:	34 ce       	rjmp	.-920    	; 0x5d0c <main+0x718>
    60a4:	fe ca       	rjmp	.-2564   	; 0x56a2 <main+0xae>

000060a6 <__udivmodqi4>:
    60a6:	99 1b       	sub	r25, r25
    60a8:	79 e0       	ldi	r23, 0x09	; 9
    60aa:	04 c0       	rjmp	.+8      	; 0x60b4 <__udivmodqi4_ep>

000060ac <__udivmodqi4_loop>:
    60ac:	99 1f       	adc	r25, r25
    60ae:	96 17       	cp	r25, r22
    60b0:	08 f0       	brcs	.+2      	; 0x60b4 <__udivmodqi4_ep>
    60b2:	96 1b       	sub	r25, r22

000060b4 <__udivmodqi4_ep>:
    60b4:	88 1f       	adc	r24, r24
    60b6:	7a 95       	dec	r23
    60b8:	c9 f7       	brne	.-14     	; 0x60ac <__udivmodqi4_loop>
    60ba:	80 95       	com	r24
    60bc:	08 95       	ret

000060be <__udivmodsi4>:
    60be:	a1 e2       	ldi	r26, 0x21	; 33
    60c0:	1a 2e       	mov	r1, r26
    60c2:	aa 1b       	sub	r26, r26
    60c4:	bb 1b       	sub	r27, r27
    60c6:	fd 01       	movw	r30, r26
    60c8:	0d c0       	rjmp	.+26     	; 0x60e4 <__udivmodsi4_ep>

000060ca <__udivmodsi4_loop>:
    60ca:	aa 1f       	adc	r26, r26
    60cc:	bb 1f       	adc	r27, r27
    60ce:	ee 1f       	adc	r30, r30
    60d0:	ff 1f       	adc	r31, r31
    60d2:	a2 17       	cp	r26, r18
    60d4:	b3 07       	cpc	r27, r19
    60d6:	e4 07       	cpc	r30, r20
    60d8:	f5 07       	cpc	r31, r21
    60da:	20 f0       	brcs	.+8      	; 0x60e4 <__udivmodsi4_ep>
    60dc:	a2 1b       	sub	r26, r18
    60de:	b3 0b       	sbc	r27, r19
    60e0:	e4 0b       	sbc	r30, r20
    60e2:	f5 0b       	sbc	r31, r21

000060e4 <__udivmodsi4_ep>:
    60e4:	66 1f       	adc	r22, r22
    60e6:	77 1f       	adc	r23, r23
    60e8:	88 1f       	adc	r24, r24
    60ea:	99 1f       	adc	r25, r25
    60ec:	1a 94       	dec	r1
    60ee:	69 f7       	brne	.-38     	; 0x60ca <__udivmodsi4_loop>
    60f0:	60 95       	com	r22
    60f2:	70 95       	com	r23
    60f4:	80 95       	com	r24
    60f6:	90 95       	com	r25
    60f8:	9b 01       	movw	r18, r22
    60fa:	ac 01       	movw	r20, r24
    60fc:	bd 01       	movw	r22, r26
    60fe:	cf 01       	movw	r24, r30
    6100:	08 95       	ret

00006102 <__divmodsi4>:
    6102:	97 fb       	bst	r25, 7
    6104:	09 2e       	mov	r0, r25
    6106:	05 26       	eor	r0, r21
    6108:	0e d0       	rcall	.+28     	; 0x6126 <__divmodsi4_neg1>
    610a:	57 fd       	sbrc	r21, 7
    610c:	04 d0       	rcall	.+8      	; 0x6116 <__divmodsi4_neg2>
    610e:	d7 df       	rcall	.-82     	; 0x60be <__udivmodsi4>
    6110:	0a d0       	rcall	.+20     	; 0x6126 <__divmodsi4_neg1>
    6112:	00 1c       	adc	r0, r0
    6114:	38 f4       	brcc	.+14     	; 0x6124 <__divmodsi4_exit>

00006116 <__divmodsi4_neg2>:
    6116:	50 95       	com	r21
    6118:	40 95       	com	r20
    611a:	30 95       	com	r19
    611c:	21 95       	neg	r18
    611e:	3f 4f       	sbci	r19, 0xFF	; 255
    6120:	4f 4f       	sbci	r20, 0xFF	; 255
    6122:	5f 4f       	sbci	r21, 0xFF	; 255

00006124 <__divmodsi4_exit>:
    6124:	08 95       	ret

00006126 <__divmodsi4_neg1>:
    6126:	f6 f7       	brtc	.-4      	; 0x6124 <__divmodsi4_exit>
    6128:	90 95       	com	r25
    612a:	80 95       	com	r24
    612c:	70 95       	com	r23
    612e:	61 95       	neg	r22
    6130:	7f 4f       	sbci	r23, 0xFF	; 255
    6132:	8f 4f       	sbci	r24, 0xFF	; 255
    6134:	9f 4f       	sbci	r25, 0xFF	; 255
    6136:	08 95       	ret

00006138 <__mulsi3>:
    6138:	62 9f       	mul	r22, r18
    613a:	d0 01       	movw	r26, r0
    613c:	73 9f       	mul	r23, r19
    613e:	f0 01       	movw	r30, r0
    6140:	82 9f       	mul	r24, r18
    6142:	e0 0d       	add	r30, r0
    6144:	f1 1d       	adc	r31, r1
    6146:	64 9f       	mul	r22, r20
    6148:	e0 0d       	add	r30, r0
    614a:	f1 1d       	adc	r31, r1
    614c:	92 9f       	mul	r25, r18
    614e:	f0 0d       	add	r31, r0
    6150:	83 9f       	mul	r24, r19
    6152:	f0 0d       	add	r31, r0
    6154:	74 9f       	mul	r23, r20
    6156:	f0 0d       	add	r31, r0
    6158:	65 9f       	mul	r22, r21
    615a:	f0 0d       	add	r31, r0
    615c:	99 27       	eor	r25, r25
    615e:	72 9f       	mul	r23, r18
    6160:	b0 0d       	add	r27, r0
    6162:	e1 1d       	adc	r30, r1
    6164:	f9 1f       	adc	r31, r25
    6166:	63 9f       	mul	r22, r19
    6168:	b0 0d       	add	r27, r0
    616a:	e1 1d       	adc	r30, r1
    616c:	f9 1f       	adc	r31, r25
    616e:	bd 01       	movw	r22, r26
    6170:	cf 01       	movw	r24, r30
    6172:	11 24       	eor	r1, r1
    6174:	08 95       	ret

00006176 <__prologue_saves__>:
    6176:	2f 92       	push	r2
    6178:	3f 92       	push	r3
    617a:	4f 92       	push	r4
    617c:	5f 92       	push	r5
    617e:	6f 92       	push	r6
    6180:	7f 92       	push	r7
    6182:	8f 92       	push	r8
    6184:	9f 92       	push	r9
    6186:	af 92       	push	r10
    6188:	bf 92       	push	r11
    618a:	cf 92       	push	r12
    618c:	df 92       	push	r13
    618e:	ef 92       	push	r14
    6190:	ff 92       	push	r15
    6192:	0f 93       	push	r16
    6194:	1f 93       	push	r17
    6196:	cf 93       	push	r28
    6198:	df 93       	push	r29
    619a:	cd b7       	in	r28, 0x3d	; 61
    619c:	de b7       	in	r29, 0x3e	; 62
    619e:	ca 1b       	sub	r28, r26
    61a0:	db 0b       	sbc	r29, r27
    61a2:	0f b6       	in	r0, 0x3f	; 63
    61a4:	f8 94       	cli
    61a6:	de bf       	out	0x3e, r29	; 62
    61a8:	0f be       	out	0x3f, r0	; 63
    61aa:	cd bf       	out	0x3d, r28	; 61
    61ac:	09 94       	ijmp

000061ae <__epilogue_restores__>:
    61ae:	2a 88       	ldd	r2, Y+18	; 0x12
    61b0:	39 88       	ldd	r3, Y+17	; 0x11
    61b2:	48 88       	ldd	r4, Y+16	; 0x10
    61b4:	5f 84       	ldd	r5, Y+15	; 0x0f
    61b6:	6e 84       	ldd	r6, Y+14	; 0x0e
    61b8:	7d 84       	ldd	r7, Y+13	; 0x0d
    61ba:	8c 84       	ldd	r8, Y+12	; 0x0c
    61bc:	9b 84       	ldd	r9, Y+11	; 0x0b
    61be:	aa 84       	ldd	r10, Y+10	; 0x0a
    61c0:	b9 84       	ldd	r11, Y+9	; 0x09
    61c2:	c8 84       	ldd	r12, Y+8	; 0x08
    61c4:	df 80       	ldd	r13, Y+7	; 0x07
    61c6:	ee 80       	ldd	r14, Y+6	; 0x06
    61c8:	fd 80       	ldd	r15, Y+5	; 0x05
    61ca:	0c 81       	ldd	r16, Y+4	; 0x04
    61cc:	1b 81       	ldd	r17, Y+3	; 0x03
    61ce:	aa 81       	ldd	r26, Y+2	; 0x02
    61d0:	b9 81       	ldd	r27, Y+1	; 0x01
    61d2:	ce 0f       	add	r28, r30
    61d4:	d1 1d       	adc	r29, r1
    61d6:	0f b6       	in	r0, 0x3f	; 63
    61d8:	f8 94       	cli
    61da:	de bf       	out	0x3e, r29	; 62
    61dc:	0f be       	out	0x3f, r0	; 63
    61de:	cd bf       	out	0x3d, r28	; 61
    61e0:	ed 01       	movw	r28, r26
    61e2:	08 95       	ret

000061e4 <strcmp>:
    61e4:	fb 01       	movw	r30, r22
    61e6:	dc 01       	movw	r26, r24
    61e8:	8d 91       	ld	r24, X+
    61ea:	01 90       	ld	r0, Z+
    61ec:	80 19       	sub	r24, r0
    61ee:	01 10       	cpse	r0, r1
    61f0:	d9 f3       	breq	.-10     	; 0x61e8 <strcmp+0x4>
    61f2:	99 0b       	sbc	r25, r25
    61f4:	08 95       	ret

000061f6 <_exit>:
    61f6:	f8 94       	cli

000061f8 <__stop_program>:
    61f8:	ff cf       	rjmp	.-2      	; 0x61f8 <__stop_program>
