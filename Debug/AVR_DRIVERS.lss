
AVR_DRIVERS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006592  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000005ba  00800060  00006592  00006626  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  0080061a  0080061a  00006be0  2**0
                  ALLOC
  3 .stab         00006a38  00000000  00000000  00006be0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000060a3  00000000  00000000  0000d618  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000060  00000000  00000000  000136bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000080  00000000  00000000  0001371b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000109d  00000000  00000000  0001379b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000469  00000000  00000000  00014838  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000055b  00000000  00000000  00014ca1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000060  00000000  00000000  000151fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000016a  00000000  00000000  0001525c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001a1e  00000000  00000000  000153c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000030  00000000  00000000  00016de4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 ae 1d 	jmp	0x3b5c	; 0x3b5c <__vector_1>
       8:	0c 94 db 1d 	jmp	0x3bb6	; 0x3bb6 <__vector_2>
       c:	0c 94 08 1e 	jmp	0x3c10	; 0x3c10 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 b3 14 	jmp	0x2966	; 0x2966 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 fe 21 	jmp	0x43fc	; 0x43fc <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	16 e0       	ldi	r17, 0x06	; 6
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e9       	ldi	r30, 0x92	; 146
      68:	f5 e6       	ldi	r31, 0x65	; 101
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 31       	cpi	r26, 0x1A	; 26
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	16 e0       	ldi	r17, 0x06	; 6
      78:	aa e1       	ldi	r26, 0x1A	; 26
      7a:	b6 e0       	ldi	r27, 0x06	; 6
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 32       	cpi	r26, 0x28	; 40
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 bd 2b 	call	0x577a	; 0x577a <main>
      8a:	0c 94 c7 32 	jmp	0x658e	; 0x658e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__ashldi3>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	df 93       	push	r29
      9a:	cf 93       	push	r28
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
      a0:	60 97       	sbiw	r28, 0x10	; 16
      a2:	0f b6       	in	r0, 0x3f	; 63
      a4:	f8 94       	cli
      a6:	de bf       	out	0x3e, r29	; 62
      a8:	0f be       	out	0x3f, r0	; 63
      aa:	cd bf       	out	0x3d, r28	; 61
      ac:	a8 2f       	mov	r26, r24
      ae:	00 23       	and	r16, r16
      b0:	09 f4       	brne	.+2      	; 0xb4 <__ashldi3+0x22>
      b2:	61 c0       	rjmp	.+194    	; 0x176 <__ashldi3+0xe4>
      b4:	7e 01       	movw	r14, r28
      b6:	08 94       	sec
      b8:	e1 1c       	adc	r14, r1
      ba:	f1 1c       	adc	r15, r1
      bc:	88 e0       	ldi	r24, 0x08	; 8
      be:	f7 01       	movw	r30, r14
      c0:	11 92       	st	Z+, r1
      c2:	8a 95       	dec	r24
      c4:	e9 f7       	brne	.-6      	; 0xc0 <__ashldi3+0x2e>
      c6:	29 83       	std	Y+1, r18	; 0x01
      c8:	3a 83       	std	Y+2, r19	; 0x02
      ca:	4b 83       	std	Y+3, r20	; 0x03
      cc:	5c 83       	std	Y+4, r21	; 0x04
      ce:	6d 83       	std	Y+5, r22	; 0x05
      d0:	7e 83       	std	Y+6, r23	; 0x06
      d2:	af 83       	std	Y+7, r26	; 0x07
      d4:	98 87       	std	Y+8, r25	; 0x08
      d6:	80 e2       	ldi	r24, 0x20	; 32
      d8:	80 1b       	sub	r24, r16
      da:	e8 2f       	mov	r30, r24
      dc:	ff 27       	eor	r31, r31
      de:	e7 fd       	sbrc	r30, 7
      e0:	f0 95       	com	r31
      e2:	49 81       	ldd	r20, Y+1	; 0x01
      e4:	5a 81       	ldd	r21, Y+2	; 0x02
      e6:	6b 81       	ldd	r22, Y+3	; 0x03
      e8:	7c 81       	ldd	r23, Y+4	; 0x04
      ea:	18 16       	cp	r1, r24
      ec:	84 f0       	brlt	.+32     	; 0x10e <__ashldi3+0x7c>
      ee:	19 86       	std	Y+9, r1	; 0x09
      f0:	1a 86       	std	Y+10, r1	; 0x0a
      f2:	1b 86       	std	Y+11, r1	; 0x0b
      f4:	1c 86       	std	Y+12, r1	; 0x0c
      f6:	88 27       	eor	r24, r24
      f8:	99 27       	eor	r25, r25
      fa:	8e 1b       	sub	r24, r30
      fc:	9f 0b       	sbc	r25, r31
      fe:	04 c0       	rjmp	.+8      	; 0x108 <__ashldi3+0x76>
     100:	44 0f       	add	r20, r20
     102:	55 1f       	adc	r21, r21
     104:	66 1f       	adc	r22, r22
     106:	77 1f       	adc	r23, r23
     108:	8a 95       	dec	r24
     10a:	d2 f7       	brpl	.-12     	; 0x100 <__ashldi3+0x6e>
     10c:	28 c0       	rjmp	.+80     	; 0x15e <__ashldi3+0xcc>
     10e:	20 2f       	mov	r18, r16
     110:	33 27       	eor	r19, r19
     112:	27 fd       	sbrc	r18, 7
     114:	30 95       	com	r19
     116:	db 01       	movw	r26, r22
     118:	ca 01       	movw	r24, r20
     11a:	02 2e       	mov	r0, r18
     11c:	04 c0       	rjmp	.+8      	; 0x126 <__ashldi3+0x94>
     11e:	88 0f       	add	r24, r24
     120:	99 1f       	adc	r25, r25
     122:	aa 1f       	adc	r26, r26
     124:	bb 1f       	adc	r27, r27
     126:	0a 94       	dec	r0
     128:	d2 f7       	brpl	.-12     	; 0x11e <__ashldi3+0x8c>
     12a:	89 87       	std	Y+9, r24	; 0x09
     12c:	9a 87       	std	Y+10, r25	; 0x0a
     12e:	ab 87       	std	Y+11, r26	; 0x0b
     130:	bc 87       	std	Y+12, r27	; 0x0c
     132:	04 c0       	rjmp	.+8      	; 0x13c <__ashldi3+0xaa>
     134:	76 95       	lsr	r23
     136:	67 95       	ror	r22
     138:	57 95       	ror	r21
     13a:	47 95       	ror	r20
     13c:	ea 95       	dec	r30
     13e:	d2 f7       	brpl	.-12     	; 0x134 <__ashldi3+0xa2>
     140:	8d 81       	ldd	r24, Y+5	; 0x05
     142:	9e 81       	ldd	r25, Y+6	; 0x06
     144:	af 81       	ldd	r26, Y+7	; 0x07
     146:	b8 85       	ldd	r27, Y+8	; 0x08
     148:	04 c0       	rjmp	.+8      	; 0x152 <__ashldi3+0xc0>
     14a:	88 0f       	add	r24, r24
     14c:	99 1f       	adc	r25, r25
     14e:	aa 1f       	adc	r26, r26
     150:	bb 1f       	adc	r27, r27
     152:	2a 95       	dec	r18
     154:	d2 f7       	brpl	.-12     	; 0x14a <__ashldi3+0xb8>
     156:	48 2b       	or	r20, r24
     158:	59 2b       	or	r21, r25
     15a:	6a 2b       	or	r22, r26
     15c:	7b 2b       	or	r23, r27
     15e:	4d 87       	std	Y+13, r20	; 0x0d
     160:	5e 87       	std	Y+14, r21	; 0x0e
     162:	6f 87       	std	Y+15, r22	; 0x0f
     164:	78 8b       	std	Y+16, r23	; 0x10
     166:	29 85       	ldd	r18, Y+9	; 0x09
     168:	3a 85       	ldd	r19, Y+10	; 0x0a
     16a:	4b 85       	ldd	r20, Y+11	; 0x0b
     16c:	5c 85       	ldd	r21, Y+12	; 0x0c
     16e:	6d 85       	ldd	r22, Y+13	; 0x0d
     170:	7e 85       	ldd	r23, Y+14	; 0x0e
     172:	af 85       	ldd	r26, Y+15	; 0x0f
     174:	98 89       	ldd	r25, Y+16	; 0x10
     176:	8a 2f       	mov	r24, r26
     178:	60 96       	adiw	r28, 0x10	; 16
     17a:	0f b6       	in	r0, 0x3f	; 63
     17c:	f8 94       	cli
     17e:	de bf       	out	0x3e, r29	; 62
     180:	0f be       	out	0x3f, r0	; 63
     182:	cd bf       	out	0x3d, r28	; 61
     184:	cf 91       	pop	r28
     186:	df 91       	pop	r29
     188:	0f 91       	pop	r16
     18a:	ff 90       	pop	r15
     18c:	ef 90       	pop	r14
     18e:	08 95       	ret

00000190 <__udivdi3>:
     190:	ae e5       	ldi	r26, 0x5E	; 94
     192:	b0 e0       	ldi	r27, 0x00	; 0
     194:	ee ec       	ldi	r30, 0xCE	; 206
     196:	f0 e0       	ldi	r31, 0x00	; 0
     198:	0c 94 87 32 	jmp	0x650e	; 0x650e <__prologue_saves__>
     19c:	a8 e0       	ldi	r26, 0x08	; 8
     19e:	4e 01       	movw	r8, r28
     1a0:	08 94       	sec
     1a2:	81 1c       	adc	r8, r1
     1a4:	91 1c       	adc	r9, r1
     1a6:	f4 01       	movw	r30, r8
     1a8:	6a 2e       	mov	r6, r26
     1aa:	11 92       	st	Z+, r1
     1ac:	6a 94       	dec	r6
     1ae:	e9 f7       	brne	.-6      	; 0x1aa <__udivdi3+0x1a>
     1b0:	29 83       	std	Y+1, r18	; 0x01
     1b2:	3a 83       	std	Y+2, r19	; 0x02
     1b4:	4b 83       	std	Y+3, r20	; 0x03
     1b6:	5c 83       	std	Y+4, r21	; 0x04
     1b8:	6d 83       	std	Y+5, r22	; 0x05
     1ba:	7e 83       	std	Y+6, r23	; 0x06
     1bc:	8f 83       	std	Y+7, r24	; 0x07
     1be:	98 87       	std	Y+8, r25	; 0x08
     1c0:	ce 01       	movw	r24, r28
     1c2:	09 96       	adiw	r24, 0x09	; 9
     1c4:	fc 01       	movw	r30, r24
     1c6:	11 92       	st	Z+, r1
     1c8:	aa 95       	dec	r26
     1ca:	e9 f7       	brne	.-6      	; 0x1c6 <__udivdi3+0x36>
     1cc:	a9 86       	std	Y+9, r10	; 0x09
     1ce:	ba 86       	std	Y+10, r11	; 0x0a
     1d0:	cb 86       	std	Y+11, r12	; 0x0b
     1d2:	dc 86       	std	Y+12, r13	; 0x0c
     1d4:	ed 86       	std	Y+13, r14	; 0x0d
     1d6:	fe 86       	std	Y+14, r15	; 0x0e
     1d8:	0f 87       	std	Y+15, r16	; 0x0f
     1da:	18 8b       	std	Y+16, r17	; 0x10
     1dc:	29 84       	ldd	r2, Y+9	; 0x09
     1de:	3a 84       	ldd	r3, Y+10	; 0x0a
     1e0:	4b 84       	ldd	r4, Y+11	; 0x0b
     1e2:	5c 84       	ldd	r5, Y+12	; 0x0c
     1e4:	ed 84       	ldd	r14, Y+13	; 0x0d
     1e6:	fe 84       	ldd	r15, Y+14	; 0x0e
     1e8:	0f 85       	ldd	r16, Y+15	; 0x0f
     1ea:	18 89       	ldd	r17, Y+16	; 0x10
     1ec:	69 80       	ldd	r6, Y+1	; 0x01
     1ee:	7a 80       	ldd	r7, Y+2	; 0x02
     1f0:	8b 80       	ldd	r8, Y+3	; 0x03
     1f2:	9c 80       	ldd	r9, Y+4	; 0x04
     1f4:	6d a6       	std	Y+45, r6	; 0x2d
     1f6:	7e a6       	std	Y+46, r7	; 0x2e
     1f8:	8f a6       	std	Y+47, r8	; 0x2f
     1fa:	98 aa       	std	Y+48, r9	; 0x30
     1fc:	6d 80       	ldd	r6, Y+5	; 0x05
     1fe:	7e 80       	ldd	r7, Y+6	; 0x06
     200:	8f 80       	ldd	r8, Y+7	; 0x07
     202:	98 84       	ldd	r9, Y+8	; 0x08
     204:	e1 14       	cp	r14, r1
     206:	f1 04       	cpc	r15, r1
     208:	01 05       	cpc	r16, r1
     20a:	11 05       	cpc	r17, r1
     20c:	09 f0       	breq	.+2      	; 0x210 <__udivdi3+0x80>
     20e:	b3 c3       	rjmp	.+1894   	; 0x976 <__stack+0x117>
     210:	62 14       	cp	r6, r2
     212:	73 04       	cpc	r7, r3
     214:	84 04       	cpc	r8, r4
     216:	95 04       	cpc	r9, r5
     218:	08 f0       	brcs	.+2      	; 0x21c <__udivdi3+0x8c>
     21a:	3d c1       	rjmp	.+634    	; 0x496 <__udivdi3+0x306>
     21c:	00 e0       	ldi	r16, 0x00	; 0
     21e:	20 16       	cp	r2, r16
     220:	00 e0       	ldi	r16, 0x00	; 0
     222:	30 06       	cpc	r3, r16
     224:	01 e0       	ldi	r16, 0x01	; 1
     226:	40 06       	cpc	r4, r16
     228:	00 e0       	ldi	r16, 0x00	; 0
     22a:	50 06       	cpc	r5, r16
     22c:	88 f4       	brcc	.+34     	; 0x250 <__udivdi3+0xc0>
     22e:	1f ef       	ldi	r17, 0xFF	; 255
     230:	21 16       	cp	r2, r17
     232:	31 04       	cpc	r3, r1
     234:	41 04       	cpc	r4, r1
     236:	51 04       	cpc	r5, r1
     238:	39 f0       	breq	.+14     	; 0x248 <__udivdi3+0xb8>
     23a:	30 f0       	brcs	.+12     	; 0x248 <__udivdi3+0xb8>
     23c:	48 e0       	ldi	r20, 0x08	; 8
     23e:	e4 2e       	mov	r14, r20
     240:	f1 2c       	mov	r15, r1
     242:	01 2d       	mov	r16, r1
     244:	11 2d       	mov	r17, r1
     246:	18 c0       	rjmp	.+48     	; 0x278 <__udivdi3+0xe8>
     248:	ee 24       	eor	r14, r14
     24a:	ff 24       	eor	r15, r15
     24c:	87 01       	movw	r16, r14
     24e:	14 c0       	rjmp	.+40     	; 0x278 <__udivdi3+0xe8>
     250:	20 e0       	ldi	r18, 0x00	; 0
     252:	22 16       	cp	r2, r18
     254:	20 e0       	ldi	r18, 0x00	; 0
     256:	32 06       	cpc	r3, r18
     258:	20 e0       	ldi	r18, 0x00	; 0
     25a:	42 06       	cpc	r4, r18
     25c:	21 e0       	ldi	r18, 0x01	; 1
     25e:	52 06       	cpc	r5, r18
     260:	30 f0       	brcs	.+12     	; 0x26e <__udivdi3+0xde>
     262:	38 e1       	ldi	r19, 0x18	; 24
     264:	e3 2e       	mov	r14, r19
     266:	f1 2c       	mov	r15, r1
     268:	01 2d       	mov	r16, r1
     26a:	11 2d       	mov	r17, r1
     26c:	05 c0       	rjmp	.+10     	; 0x278 <__udivdi3+0xe8>
     26e:	20 e1       	ldi	r18, 0x10	; 16
     270:	e2 2e       	mov	r14, r18
     272:	f1 2c       	mov	r15, r1
     274:	01 2d       	mov	r16, r1
     276:	11 2d       	mov	r17, r1
     278:	d2 01       	movw	r26, r4
     27a:	c1 01       	movw	r24, r2
     27c:	0e 2c       	mov	r0, r14
     27e:	04 c0       	rjmp	.+8      	; 0x288 <__udivdi3+0xf8>
     280:	b6 95       	lsr	r27
     282:	a7 95       	ror	r26
     284:	97 95       	ror	r25
     286:	87 95       	ror	r24
     288:	0a 94       	dec	r0
     28a:	d2 f7       	brpl	.-12     	; 0x280 <__udivdi3+0xf0>
     28c:	8d 5a       	subi	r24, 0xAD	; 173
     28e:	9c 4f       	sbci	r25, 0xFC	; 252
     290:	dc 01       	movw	r26, r24
     292:	2c 91       	ld	r18, X
     294:	80 e2       	ldi	r24, 0x20	; 32
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	a0 e0       	ldi	r26, 0x00	; 0
     29a:	b0 e0       	ldi	r27, 0x00	; 0
     29c:	8e 19       	sub	r24, r14
     29e:	9f 09       	sbc	r25, r15
     2a0:	a0 0b       	sbc	r26, r16
     2a2:	b1 0b       	sbc	r27, r17
     2a4:	7c 01       	movw	r14, r24
     2a6:	8d 01       	movw	r16, r26
     2a8:	e2 1a       	sub	r14, r18
     2aa:	f1 08       	sbc	r15, r1
     2ac:	01 09       	sbc	r16, r1
     2ae:	11 09       	sbc	r17, r1
     2b0:	e1 14       	cp	r14, r1
     2b2:	f1 04       	cpc	r15, r1
     2b4:	01 05       	cpc	r16, r1
     2b6:	11 05       	cpc	r17, r1
     2b8:	a1 f1       	breq	.+104    	; 0x322 <__udivdi3+0x192>
     2ba:	0e 2c       	mov	r0, r14
     2bc:	04 c0       	rjmp	.+8      	; 0x2c6 <__udivdi3+0x136>
     2be:	22 0c       	add	r2, r2
     2c0:	33 1c       	adc	r3, r3
     2c2:	44 1c       	adc	r4, r4
     2c4:	55 1c       	adc	r5, r5
     2c6:	0a 94       	dec	r0
     2c8:	d2 f7       	brpl	.-12     	; 0x2be <__udivdi3+0x12e>
     2ca:	a4 01       	movw	r20, r8
     2cc:	93 01       	movw	r18, r6
     2ce:	0e 2c       	mov	r0, r14
     2d0:	04 c0       	rjmp	.+8      	; 0x2da <__udivdi3+0x14a>
     2d2:	22 0f       	add	r18, r18
     2d4:	33 1f       	adc	r19, r19
     2d6:	44 1f       	adc	r20, r20
     2d8:	55 1f       	adc	r21, r21
     2da:	0a 94       	dec	r0
     2dc:	d2 f7       	brpl	.-12     	; 0x2d2 <__udivdi3+0x142>
     2de:	80 e2       	ldi	r24, 0x20	; 32
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	8e 19       	sub	r24, r14
     2e4:	9f 09       	sbc	r25, r15
     2e6:	6d a4       	ldd	r6, Y+45	; 0x2d
     2e8:	7e a4       	ldd	r7, Y+46	; 0x2e
     2ea:	8f a4       	ldd	r8, Y+47	; 0x2f
     2ec:	98 a8       	ldd	r9, Y+48	; 0x30
     2ee:	04 c0       	rjmp	.+8      	; 0x2f8 <__udivdi3+0x168>
     2f0:	96 94       	lsr	r9
     2f2:	87 94       	ror	r8
     2f4:	77 94       	ror	r7
     2f6:	67 94       	ror	r6
     2f8:	8a 95       	dec	r24
     2fa:	d2 f7       	brpl	.-12     	; 0x2f0 <__udivdi3+0x160>
     2fc:	62 2a       	or	r6, r18
     2fe:	73 2a       	or	r7, r19
     300:	84 2a       	or	r8, r20
     302:	95 2a       	or	r9, r21
     304:	ad a4       	ldd	r10, Y+45	; 0x2d
     306:	be a4       	ldd	r11, Y+46	; 0x2e
     308:	cf a4       	ldd	r12, Y+47	; 0x2f
     30a:	d8 a8       	ldd	r13, Y+48	; 0x30
     30c:	04 c0       	rjmp	.+8      	; 0x316 <__udivdi3+0x186>
     30e:	aa 0c       	add	r10, r10
     310:	bb 1c       	adc	r11, r11
     312:	cc 1c       	adc	r12, r12
     314:	dd 1c       	adc	r13, r13
     316:	ea 94       	dec	r14
     318:	d2 f7       	brpl	.-12     	; 0x30e <__udivdi3+0x17e>
     31a:	ad a6       	std	Y+45, r10	; 0x2d
     31c:	be a6       	std	Y+46, r11	; 0x2e
     31e:	cf a6       	std	Y+47, r12	; 0x2f
     320:	d8 aa       	std	Y+48, r13	; 0x30
     322:	62 01       	movw	r12, r4
     324:	ee 24       	eor	r14, r14
     326:	ff 24       	eor	r15, r15
     328:	cd aa       	std	Y+53, r12	; 0x35
     32a:	de aa       	std	Y+54, r13	; 0x36
     32c:	ef aa       	std	Y+55, r14	; 0x37
     32e:	f8 ae       	std	Y+56, r15	; 0x38
     330:	92 01       	movw	r18, r4
     332:	81 01       	movw	r16, r2
     334:	20 70       	andi	r18, 0x00	; 0
     336:	30 70       	andi	r19, 0x00	; 0
     338:	09 af       	std	Y+57, r16	; 0x39
     33a:	1a af       	std	Y+58, r17	; 0x3a
     33c:	2b af       	std	Y+59, r18	; 0x3b
     33e:	3c af       	std	Y+60, r19	; 0x3c
     340:	c4 01       	movw	r24, r8
     342:	b3 01       	movw	r22, r6
     344:	a7 01       	movw	r20, r14
     346:	96 01       	movw	r18, r12
     348:	0e 94 2b 32 	call	0x6456	; 0x6456 <__udivmodsi4>
     34c:	7b 01       	movw	r14, r22
     34e:	8c 01       	movw	r16, r24
     350:	c4 01       	movw	r24, r8
     352:	b3 01       	movw	r22, r6
     354:	2d a9       	ldd	r18, Y+53	; 0x35
     356:	3e a9       	ldd	r19, Y+54	; 0x36
     358:	4f a9       	ldd	r20, Y+55	; 0x37
     35a:	58 ad       	ldd	r21, Y+56	; 0x38
     35c:	0e 94 2b 32 	call	0x6456	; 0x6456 <__udivmodsi4>
     360:	c9 01       	movw	r24, r18
     362:	da 01       	movw	r26, r20
     364:	3c 01       	movw	r6, r24
     366:	4d 01       	movw	r8, r26
     368:	c4 01       	movw	r24, r8
     36a:	b3 01       	movw	r22, r6
     36c:	29 ad       	ldd	r18, Y+57	; 0x39
     36e:	3a ad       	ldd	r19, Y+58	; 0x3a
     370:	4b ad       	ldd	r20, Y+59	; 0x3b
     372:	5c ad       	ldd	r21, Y+60	; 0x3c
     374:	0e 94 68 32 	call	0x64d0	; 0x64d0 <__mulsi3>
     378:	9b 01       	movw	r18, r22
     37a:	ac 01       	movw	r20, r24
     37c:	87 01       	movw	r16, r14
     37e:	ff 24       	eor	r15, r15
     380:	ee 24       	eor	r14, r14
     382:	ad a4       	ldd	r10, Y+45	; 0x2d
     384:	be a4       	ldd	r11, Y+46	; 0x2e
     386:	cf a4       	ldd	r12, Y+47	; 0x2f
     388:	d8 a8       	ldd	r13, Y+48	; 0x30
     38a:	c6 01       	movw	r24, r12
     38c:	aa 27       	eor	r26, r26
     38e:	bb 27       	eor	r27, r27
     390:	57 01       	movw	r10, r14
     392:	68 01       	movw	r12, r16
     394:	a8 2a       	or	r10, r24
     396:	b9 2a       	or	r11, r25
     398:	ca 2a       	or	r12, r26
     39a:	db 2a       	or	r13, r27
     39c:	a2 16       	cp	r10, r18
     39e:	b3 06       	cpc	r11, r19
     3a0:	c4 06       	cpc	r12, r20
     3a2:	d5 06       	cpc	r13, r21
     3a4:	e0 f4       	brcc	.+56     	; 0x3de <__udivdi3+0x24e>
     3a6:	08 94       	sec
     3a8:	61 08       	sbc	r6, r1
     3aa:	71 08       	sbc	r7, r1
     3ac:	81 08       	sbc	r8, r1
     3ae:	91 08       	sbc	r9, r1
     3b0:	a2 0c       	add	r10, r2
     3b2:	b3 1c       	adc	r11, r3
     3b4:	c4 1c       	adc	r12, r4
     3b6:	d5 1c       	adc	r13, r5
     3b8:	a2 14       	cp	r10, r2
     3ba:	b3 04       	cpc	r11, r3
     3bc:	c4 04       	cpc	r12, r4
     3be:	d5 04       	cpc	r13, r5
     3c0:	70 f0       	brcs	.+28     	; 0x3de <__udivdi3+0x24e>
     3c2:	a2 16       	cp	r10, r18
     3c4:	b3 06       	cpc	r11, r19
     3c6:	c4 06       	cpc	r12, r20
     3c8:	d5 06       	cpc	r13, r21
     3ca:	48 f4       	brcc	.+18     	; 0x3de <__udivdi3+0x24e>
     3cc:	08 94       	sec
     3ce:	61 08       	sbc	r6, r1
     3d0:	71 08       	sbc	r7, r1
     3d2:	81 08       	sbc	r8, r1
     3d4:	91 08       	sbc	r9, r1
     3d6:	a2 0c       	add	r10, r2
     3d8:	b3 1c       	adc	r11, r3
     3da:	c4 1c       	adc	r12, r4
     3dc:	d5 1c       	adc	r13, r5
     3de:	a2 1a       	sub	r10, r18
     3e0:	b3 0a       	sbc	r11, r19
     3e2:	c4 0a       	sbc	r12, r20
     3e4:	d5 0a       	sbc	r13, r21
     3e6:	c6 01       	movw	r24, r12
     3e8:	b5 01       	movw	r22, r10
     3ea:	2d a9       	ldd	r18, Y+53	; 0x35
     3ec:	3e a9       	ldd	r19, Y+54	; 0x36
     3ee:	4f a9       	ldd	r20, Y+55	; 0x37
     3f0:	58 ad       	ldd	r21, Y+56	; 0x38
     3f2:	0e 94 2b 32 	call	0x6456	; 0x6456 <__udivmodsi4>
     3f6:	7b 01       	movw	r14, r22
     3f8:	8c 01       	movw	r16, r24
     3fa:	c6 01       	movw	r24, r12
     3fc:	b5 01       	movw	r22, r10
     3fe:	2d a9       	ldd	r18, Y+53	; 0x35
     400:	3e a9       	ldd	r19, Y+54	; 0x36
     402:	4f a9       	ldd	r20, Y+55	; 0x37
     404:	58 ad       	ldd	r21, Y+56	; 0x38
     406:	0e 94 2b 32 	call	0x6456	; 0x6456 <__udivmodsi4>
     40a:	c9 01       	movw	r24, r18
     40c:	da 01       	movw	r26, r20
     40e:	5c 01       	movw	r10, r24
     410:	6d 01       	movw	r12, r26
     412:	c6 01       	movw	r24, r12
     414:	b5 01       	movw	r22, r10
     416:	29 ad       	ldd	r18, Y+57	; 0x39
     418:	3a ad       	ldd	r19, Y+58	; 0x3a
     41a:	4b ad       	ldd	r20, Y+59	; 0x3b
     41c:	5c ad       	ldd	r21, Y+60	; 0x3c
     41e:	0e 94 68 32 	call	0x64d0	; 0x64d0 <__mulsi3>
     422:	9b 01       	movw	r18, r22
     424:	ac 01       	movw	r20, r24
     426:	87 01       	movw	r16, r14
     428:	ff 24       	eor	r15, r15
     42a:	ee 24       	eor	r14, r14
     42c:	8d a5       	ldd	r24, Y+45	; 0x2d
     42e:	9e a5       	ldd	r25, Y+46	; 0x2e
     430:	af a5       	ldd	r26, Y+47	; 0x2f
     432:	b8 a9       	ldd	r27, Y+48	; 0x30
     434:	a0 70       	andi	r26, 0x00	; 0
     436:	b0 70       	andi	r27, 0x00	; 0
     438:	e8 2a       	or	r14, r24
     43a:	f9 2a       	or	r15, r25
     43c:	0a 2b       	or	r16, r26
     43e:	1b 2b       	or	r17, r27
     440:	e2 16       	cp	r14, r18
     442:	f3 06       	cpc	r15, r19
     444:	04 07       	cpc	r16, r20
     446:	15 07       	cpc	r17, r21
     448:	c0 f4       	brcc	.+48     	; 0x47a <__udivdi3+0x2ea>
     44a:	08 94       	sec
     44c:	a1 08       	sbc	r10, r1
     44e:	b1 08       	sbc	r11, r1
     450:	c1 08       	sbc	r12, r1
     452:	d1 08       	sbc	r13, r1
     454:	e2 0c       	add	r14, r2
     456:	f3 1c       	adc	r15, r3
     458:	04 1d       	adc	r16, r4
     45a:	15 1d       	adc	r17, r5
     45c:	e2 14       	cp	r14, r2
     45e:	f3 04       	cpc	r15, r3
     460:	04 05       	cpc	r16, r4
     462:	15 05       	cpc	r17, r5
     464:	50 f0       	brcs	.+20     	; 0x47a <__udivdi3+0x2ea>
     466:	e2 16       	cp	r14, r18
     468:	f3 06       	cpc	r15, r19
     46a:	04 07       	cpc	r16, r20
     46c:	15 07       	cpc	r17, r21
     46e:	28 f4       	brcc	.+10     	; 0x47a <__udivdi3+0x2ea>
     470:	08 94       	sec
     472:	a1 08       	sbc	r10, r1
     474:	b1 08       	sbc	r11, r1
     476:	c1 08       	sbc	r12, r1
     478:	d1 08       	sbc	r13, r1
     47a:	d3 01       	movw	r26, r6
     47c:	99 27       	eor	r25, r25
     47e:	88 27       	eor	r24, r24
     480:	86 01       	movw	r16, r12
     482:	75 01       	movw	r14, r10
     484:	e8 2a       	or	r14, r24
     486:	f9 2a       	or	r15, r25
     488:	0a 2b       	or	r16, r26
     48a:	1b 2b       	or	r17, r27
     48c:	e9 aa       	std	Y+49, r14	; 0x31
     48e:	fa aa       	std	Y+50, r15	; 0x32
     490:	0b ab       	std	Y+51, r16	; 0x33
     492:	1c ab       	std	Y+52, r17	; 0x34
     494:	cf c4       	rjmp	.+2462   	; 0xe34 <__stack+0x5d5>
     496:	21 14       	cp	r2, r1
     498:	31 04       	cpc	r3, r1
     49a:	41 04       	cpc	r4, r1
     49c:	51 04       	cpc	r5, r1
     49e:	71 f4       	brne	.+28     	; 0x4bc <__udivdi3+0x32c>
     4a0:	61 e0       	ldi	r22, 0x01	; 1
     4a2:	70 e0       	ldi	r23, 0x00	; 0
     4a4:	80 e0       	ldi	r24, 0x00	; 0
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	20 e0       	ldi	r18, 0x00	; 0
     4aa:	30 e0       	ldi	r19, 0x00	; 0
     4ac:	40 e0       	ldi	r20, 0x00	; 0
     4ae:	50 e0       	ldi	r21, 0x00	; 0
     4b0:	0e 94 2b 32 	call	0x6456	; 0x6456 <__udivmodsi4>
     4b4:	c9 01       	movw	r24, r18
     4b6:	da 01       	movw	r26, r20
     4b8:	1c 01       	movw	r2, r24
     4ba:	2d 01       	movw	r4, r26
     4bc:	00 e0       	ldi	r16, 0x00	; 0
     4be:	20 16       	cp	r2, r16
     4c0:	00 e0       	ldi	r16, 0x00	; 0
     4c2:	30 06       	cpc	r3, r16
     4c4:	01 e0       	ldi	r16, 0x01	; 1
     4c6:	40 06       	cpc	r4, r16
     4c8:	00 e0       	ldi	r16, 0x00	; 0
     4ca:	50 06       	cpc	r5, r16
     4cc:	88 f4       	brcc	.+34     	; 0x4f0 <__udivdi3+0x360>
     4ce:	1f ef       	ldi	r17, 0xFF	; 255
     4d0:	21 16       	cp	r2, r17
     4d2:	31 04       	cpc	r3, r1
     4d4:	41 04       	cpc	r4, r1
     4d6:	51 04       	cpc	r5, r1
     4d8:	31 f0       	breq	.+12     	; 0x4e6 <__udivdi3+0x356>
     4da:	28 f0       	brcs	.+10     	; 0x4e6 <__udivdi3+0x356>
     4dc:	48 e0       	ldi	r20, 0x08	; 8
     4de:	50 e0       	ldi	r21, 0x00	; 0
     4e0:	60 e0       	ldi	r22, 0x00	; 0
     4e2:	70 e0       	ldi	r23, 0x00	; 0
     4e4:	17 c0       	rjmp	.+46     	; 0x514 <__udivdi3+0x384>
     4e6:	40 e0       	ldi	r20, 0x00	; 0
     4e8:	50 e0       	ldi	r21, 0x00	; 0
     4ea:	60 e0       	ldi	r22, 0x00	; 0
     4ec:	70 e0       	ldi	r23, 0x00	; 0
     4ee:	12 c0       	rjmp	.+36     	; 0x514 <__udivdi3+0x384>
     4f0:	20 e0       	ldi	r18, 0x00	; 0
     4f2:	22 16       	cp	r2, r18
     4f4:	20 e0       	ldi	r18, 0x00	; 0
     4f6:	32 06       	cpc	r3, r18
     4f8:	20 e0       	ldi	r18, 0x00	; 0
     4fa:	42 06       	cpc	r4, r18
     4fc:	21 e0       	ldi	r18, 0x01	; 1
     4fe:	52 06       	cpc	r5, r18
     500:	28 f0       	brcs	.+10     	; 0x50c <__udivdi3+0x37c>
     502:	48 e1       	ldi	r20, 0x18	; 24
     504:	50 e0       	ldi	r21, 0x00	; 0
     506:	60 e0       	ldi	r22, 0x00	; 0
     508:	70 e0       	ldi	r23, 0x00	; 0
     50a:	04 c0       	rjmp	.+8      	; 0x514 <__udivdi3+0x384>
     50c:	40 e1       	ldi	r20, 0x10	; 16
     50e:	50 e0       	ldi	r21, 0x00	; 0
     510:	60 e0       	ldi	r22, 0x00	; 0
     512:	70 e0       	ldi	r23, 0x00	; 0
     514:	d2 01       	movw	r26, r4
     516:	c1 01       	movw	r24, r2
     518:	04 2e       	mov	r0, r20
     51a:	04 c0       	rjmp	.+8      	; 0x524 <__udivdi3+0x394>
     51c:	b6 95       	lsr	r27
     51e:	a7 95       	ror	r26
     520:	97 95       	ror	r25
     522:	87 95       	ror	r24
     524:	0a 94       	dec	r0
     526:	d2 f7       	brpl	.-12     	; 0x51c <__udivdi3+0x38c>
     528:	8d 5a       	subi	r24, 0xAD	; 173
     52a:	9c 4f       	sbci	r25, 0xFC	; 252
     52c:	dc 01       	movw	r26, r24
     52e:	2c 91       	ld	r18, X
     530:	e0 e2       	ldi	r30, 0x20	; 32
     532:	ee 2e       	mov	r14, r30
     534:	f1 2c       	mov	r15, r1
     536:	01 2d       	mov	r16, r1
     538:	11 2d       	mov	r17, r1
     53a:	d8 01       	movw	r26, r16
     53c:	c7 01       	movw	r24, r14
     53e:	84 1b       	sub	r24, r20
     540:	95 0b       	sbc	r25, r21
     542:	a6 0b       	sbc	r26, r22
     544:	b7 0b       	sbc	r27, r23
     546:	82 1b       	sub	r24, r18
     548:	91 09       	sbc	r25, r1
     54a:	a1 09       	sbc	r26, r1
     54c:	b1 09       	sbc	r27, r1
     54e:	00 97       	sbiw	r24, 0x00	; 0
     550:	a1 05       	cpc	r26, r1
     552:	b1 05       	cpc	r27, r1
     554:	61 f4       	brne	.+24     	; 0x56e <__udivdi3+0x3de>
     556:	64 01       	movw	r12, r8
     558:	53 01       	movw	r10, r6
     55a:	a2 18       	sub	r10, r2
     55c:	b3 08       	sbc	r11, r3
     55e:	c4 08       	sbc	r12, r4
     560:	d5 08       	sbc	r13, r5
     562:	31 e0       	ldi	r19, 0x01	; 1
     564:	63 2e       	mov	r6, r19
     566:	71 2c       	mov	r7, r1
     568:	81 2c       	mov	r8, r1
     56a:	91 2c       	mov	r9, r1
     56c:	1e c1       	rjmp	.+572    	; 0x7aa <__udivdi3+0x61a>
     56e:	6f 96       	adiw	r28, 0x1f	; 31
     570:	8f af       	std	Y+63, r24	; 0x3f
     572:	6f 97       	sbiw	r28, 0x1f	; 31
     574:	08 2e       	mov	r0, r24
     576:	04 c0       	rjmp	.+8      	; 0x580 <__udivdi3+0x3f0>
     578:	22 0c       	add	r2, r2
     57a:	33 1c       	adc	r3, r3
     57c:	44 1c       	adc	r4, r4
     57e:	55 1c       	adc	r5, r5
     580:	0a 94       	dec	r0
     582:	d2 f7       	brpl	.-12     	; 0x578 <__udivdi3+0x3e8>
     584:	ee 2d       	mov	r30, r14
     586:	e8 1b       	sub	r30, r24
     588:	64 01       	movw	r12, r8
     58a:	53 01       	movw	r10, r6
     58c:	0e 2e       	mov	r0, r30
     58e:	04 c0       	rjmp	.+8      	; 0x598 <__udivdi3+0x408>
     590:	d6 94       	lsr	r13
     592:	c7 94       	ror	r12
     594:	b7 94       	ror	r11
     596:	a7 94       	ror	r10
     598:	0a 94       	dec	r0
     59a:	d2 f7       	brpl	.-12     	; 0x590 <__udivdi3+0x400>
     59c:	a4 01       	movw	r20, r8
     59e:	93 01       	movw	r18, r6
     5a0:	6f 96       	adiw	r28, 0x1f	; 31
     5a2:	0f ac       	ldd	r0, Y+63	; 0x3f
     5a4:	6f 97       	sbiw	r28, 0x1f	; 31
     5a6:	04 c0       	rjmp	.+8      	; 0x5b0 <__udivdi3+0x420>
     5a8:	22 0f       	add	r18, r18
     5aa:	33 1f       	adc	r19, r19
     5ac:	44 1f       	adc	r20, r20
     5ae:	55 1f       	adc	r21, r21
     5b0:	0a 94       	dec	r0
     5b2:	d2 f7       	brpl	.-12     	; 0x5a8 <__udivdi3+0x418>
     5b4:	6d a4       	ldd	r6, Y+45	; 0x2d
     5b6:	7e a4       	ldd	r7, Y+46	; 0x2e
     5b8:	8f a4       	ldd	r8, Y+47	; 0x2f
     5ba:	98 a8       	ldd	r9, Y+48	; 0x30
     5bc:	0e 2e       	mov	r0, r30
     5be:	04 c0       	rjmp	.+8      	; 0x5c8 <__udivdi3+0x438>
     5c0:	96 94       	lsr	r9
     5c2:	87 94       	ror	r8
     5c4:	77 94       	ror	r7
     5c6:	67 94       	ror	r6
     5c8:	0a 94       	dec	r0
     5ca:	d2 f7       	brpl	.-12     	; 0x5c0 <__udivdi3+0x430>
     5cc:	84 01       	movw	r16, r8
     5ce:	73 01       	movw	r14, r6
     5d0:	e2 2a       	or	r14, r18
     5d2:	f3 2a       	or	r15, r19
     5d4:	04 2b       	or	r16, r20
     5d6:	15 2b       	or	r17, r21
     5d8:	e9 a6       	std	Y+41, r14	; 0x29
     5da:	fa a6       	std	Y+42, r15	; 0x2a
     5dc:	0b a7       	std	Y+43, r16	; 0x2b
     5de:	1c a7       	std	Y+44, r17	; 0x2c
     5e0:	32 01       	movw	r6, r4
     5e2:	88 24       	eor	r8, r8
     5e4:	99 24       	eor	r9, r9
     5e6:	92 01       	movw	r18, r4
     5e8:	81 01       	movw	r16, r2
     5ea:	20 70       	andi	r18, 0x00	; 0
     5ec:	30 70       	andi	r19, 0x00	; 0
     5ee:	21 96       	adiw	r28, 0x01	; 1
     5f0:	0c af       	std	Y+60, r16	; 0x3c
     5f2:	1d af       	std	Y+61, r17	; 0x3d
     5f4:	2e af       	std	Y+62, r18	; 0x3e
     5f6:	3f af       	std	Y+63, r19	; 0x3f
     5f8:	21 97       	sbiw	r28, 0x01	; 1
     5fa:	c6 01       	movw	r24, r12
     5fc:	b5 01       	movw	r22, r10
     5fe:	a4 01       	movw	r20, r8
     600:	93 01       	movw	r18, r6
     602:	0e 94 2b 32 	call	0x6456	; 0x6456 <__udivmodsi4>
     606:	7b 01       	movw	r14, r22
     608:	8c 01       	movw	r16, r24
     60a:	c6 01       	movw	r24, r12
     60c:	b5 01       	movw	r22, r10
     60e:	a4 01       	movw	r20, r8
     610:	93 01       	movw	r18, r6
     612:	0e 94 2b 32 	call	0x6456	; 0x6456 <__udivmodsi4>
     616:	c9 01       	movw	r24, r18
     618:	da 01       	movw	r26, r20
     61a:	25 96       	adiw	r28, 0x05	; 5
     61c:	8c af       	std	Y+60, r24	; 0x3c
     61e:	9d af       	std	Y+61, r25	; 0x3d
     620:	ae af       	std	Y+62, r26	; 0x3e
     622:	bf af       	std	Y+63, r27	; 0x3f
     624:	25 97       	sbiw	r28, 0x05	; 5
     626:	bc 01       	movw	r22, r24
     628:	cd 01       	movw	r24, r26
     62a:	21 96       	adiw	r28, 0x01	; 1
     62c:	2c ad       	ldd	r18, Y+60	; 0x3c
     62e:	3d ad       	ldd	r19, Y+61	; 0x3d
     630:	4e ad       	ldd	r20, Y+62	; 0x3e
     632:	5f ad       	ldd	r21, Y+63	; 0x3f
     634:	21 97       	sbiw	r28, 0x01	; 1
     636:	0e 94 68 32 	call	0x64d0	; 0x64d0 <__mulsi3>
     63a:	9b 01       	movw	r18, r22
     63c:	ac 01       	movw	r20, r24
     63e:	87 01       	movw	r16, r14
     640:	ff 24       	eor	r15, r15
     642:	ee 24       	eor	r14, r14
     644:	a9 a4       	ldd	r10, Y+41	; 0x29
     646:	ba a4       	ldd	r11, Y+42	; 0x2a
     648:	cb a4       	ldd	r12, Y+43	; 0x2b
     64a:	dc a4       	ldd	r13, Y+44	; 0x2c
     64c:	c6 01       	movw	r24, r12
     64e:	aa 27       	eor	r26, r26
     650:	bb 27       	eor	r27, r27
     652:	5c 01       	movw	r10, r24
     654:	6d 01       	movw	r12, r26
     656:	ae 28       	or	r10, r14
     658:	bf 28       	or	r11, r15
     65a:	c0 2a       	or	r12, r16
     65c:	d1 2a       	or	r13, r17
     65e:	a2 16       	cp	r10, r18
     660:	b3 06       	cpc	r11, r19
     662:	c4 06       	cpc	r12, r20
     664:	d5 06       	cpc	r13, r21
     666:	60 f5       	brcc	.+88     	; 0x6c0 <__udivdi3+0x530>
     668:	25 96       	adiw	r28, 0x05	; 5
     66a:	6c ad       	ldd	r22, Y+60	; 0x3c
     66c:	7d ad       	ldd	r23, Y+61	; 0x3d
     66e:	8e ad       	ldd	r24, Y+62	; 0x3e
     670:	9f ad       	ldd	r25, Y+63	; 0x3f
     672:	25 97       	sbiw	r28, 0x05	; 5
     674:	61 50       	subi	r22, 0x01	; 1
     676:	70 40       	sbci	r23, 0x00	; 0
     678:	80 40       	sbci	r24, 0x00	; 0
     67a:	90 40       	sbci	r25, 0x00	; 0
     67c:	25 96       	adiw	r28, 0x05	; 5
     67e:	6c af       	std	Y+60, r22	; 0x3c
     680:	7d af       	std	Y+61, r23	; 0x3d
     682:	8e af       	std	Y+62, r24	; 0x3e
     684:	9f af       	std	Y+63, r25	; 0x3f
     686:	25 97       	sbiw	r28, 0x05	; 5
     688:	a2 0c       	add	r10, r2
     68a:	b3 1c       	adc	r11, r3
     68c:	c4 1c       	adc	r12, r4
     68e:	d5 1c       	adc	r13, r5
     690:	a2 14       	cp	r10, r2
     692:	b3 04       	cpc	r11, r3
     694:	c4 04       	cpc	r12, r4
     696:	d5 04       	cpc	r13, r5
     698:	98 f0       	brcs	.+38     	; 0x6c0 <__udivdi3+0x530>
     69a:	a2 16       	cp	r10, r18
     69c:	b3 06       	cpc	r11, r19
     69e:	c4 06       	cpc	r12, r20
     6a0:	d5 06       	cpc	r13, r21
     6a2:	70 f4       	brcc	.+28     	; 0x6c0 <__udivdi3+0x530>
     6a4:	61 50       	subi	r22, 0x01	; 1
     6a6:	70 40       	sbci	r23, 0x00	; 0
     6a8:	80 40       	sbci	r24, 0x00	; 0
     6aa:	90 40       	sbci	r25, 0x00	; 0
     6ac:	25 96       	adiw	r28, 0x05	; 5
     6ae:	6c af       	std	Y+60, r22	; 0x3c
     6b0:	7d af       	std	Y+61, r23	; 0x3d
     6b2:	8e af       	std	Y+62, r24	; 0x3e
     6b4:	9f af       	std	Y+63, r25	; 0x3f
     6b6:	25 97       	sbiw	r28, 0x05	; 5
     6b8:	a2 0c       	add	r10, r2
     6ba:	b3 1c       	adc	r11, r3
     6bc:	c4 1c       	adc	r12, r4
     6be:	d5 1c       	adc	r13, r5
     6c0:	a2 1a       	sub	r10, r18
     6c2:	b3 0a       	sbc	r11, r19
     6c4:	c4 0a       	sbc	r12, r20
     6c6:	d5 0a       	sbc	r13, r21
     6c8:	c6 01       	movw	r24, r12
     6ca:	b5 01       	movw	r22, r10
     6cc:	a4 01       	movw	r20, r8
     6ce:	93 01       	movw	r18, r6
     6d0:	0e 94 2b 32 	call	0x6456	; 0x6456 <__udivmodsi4>
     6d4:	7b 01       	movw	r14, r22
     6d6:	8c 01       	movw	r16, r24
     6d8:	c6 01       	movw	r24, r12
     6da:	b5 01       	movw	r22, r10
     6dc:	a4 01       	movw	r20, r8
     6de:	93 01       	movw	r18, r6
     6e0:	0e 94 2b 32 	call	0x6456	; 0x6456 <__udivmodsi4>
     6e4:	c9 01       	movw	r24, r18
     6e6:	da 01       	movw	r26, r20
     6e8:	3c 01       	movw	r6, r24
     6ea:	4d 01       	movw	r8, r26
     6ec:	c4 01       	movw	r24, r8
     6ee:	b3 01       	movw	r22, r6
     6f0:	21 96       	adiw	r28, 0x01	; 1
     6f2:	2c ad       	ldd	r18, Y+60	; 0x3c
     6f4:	3d ad       	ldd	r19, Y+61	; 0x3d
     6f6:	4e ad       	ldd	r20, Y+62	; 0x3e
     6f8:	5f ad       	ldd	r21, Y+63	; 0x3f
     6fa:	21 97       	sbiw	r28, 0x01	; 1
     6fc:	0e 94 68 32 	call	0x64d0	; 0x64d0 <__mulsi3>
     700:	9b 01       	movw	r18, r22
     702:	ac 01       	movw	r20, r24
     704:	87 01       	movw	r16, r14
     706:	ff 24       	eor	r15, r15
     708:	ee 24       	eor	r14, r14
     70a:	89 a5       	ldd	r24, Y+41	; 0x29
     70c:	9a a5       	ldd	r25, Y+42	; 0x2a
     70e:	ab a5       	ldd	r26, Y+43	; 0x2b
     710:	bc a5       	ldd	r27, Y+44	; 0x2c
     712:	a0 70       	andi	r26, 0x00	; 0
     714:	b0 70       	andi	r27, 0x00	; 0
     716:	57 01       	movw	r10, r14
     718:	68 01       	movw	r12, r16
     71a:	a8 2a       	or	r10, r24
     71c:	b9 2a       	or	r11, r25
     71e:	ca 2a       	or	r12, r26
     720:	db 2a       	or	r13, r27
     722:	a2 16       	cp	r10, r18
     724:	b3 06       	cpc	r11, r19
     726:	c4 06       	cpc	r12, r20
     728:	d5 06       	cpc	r13, r21
     72a:	e0 f4       	brcc	.+56     	; 0x764 <__udivdi3+0x5d4>
     72c:	08 94       	sec
     72e:	61 08       	sbc	r6, r1
     730:	71 08       	sbc	r7, r1
     732:	81 08       	sbc	r8, r1
     734:	91 08       	sbc	r9, r1
     736:	a2 0c       	add	r10, r2
     738:	b3 1c       	adc	r11, r3
     73a:	c4 1c       	adc	r12, r4
     73c:	d5 1c       	adc	r13, r5
     73e:	a2 14       	cp	r10, r2
     740:	b3 04       	cpc	r11, r3
     742:	c4 04       	cpc	r12, r4
     744:	d5 04       	cpc	r13, r5
     746:	70 f0       	brcs	.+28     	; 0x764 <__udivdi3+0x5d4>
     748:	a2 16       	cp	r10, r18
     74a:	b3 06       	cpc	r11, r19
     74c:	c4 06       	cpc	r12, r20
     74e:	d5 06       	cpc	r13, r21
     750:	48 f4       	brcc	.+18     	; 0x764 <__udivdi3+0x5d4>
     752:	08 94       	sec
     754:	61 08       	sbc	r6, r1
     756:	71 08       	sbc	r7, r1
     758:	81 08       	sbc	r8, r1
     75a:	91 08       	sbc	r9, r1
     75c:	a2 0c       	add	r10, r2
     75e:	b3 1c       	adc	r11, r3
     760:	c4 1c       	adc	r12, r4
     762:	d5 1c       	adc	r13, r5
     764:	8d a5       	ldd	r24, Y+45	; 0x2d
     766:	9e a5       	ldd	r25, Y+46	; 0x2e
     768:	af a5       	ldd	r26, Y+47	; 0x2f
     76a:	b8 a9       	ldd	r27, Y+48	; 0x30
     76c:	6f 96       	adiw	r28, 0x1f	; 31
     76e:	0f ac       	ldd	r0, Y+63	; 0x3f
     770:	6f 97       	sbiw	r28, 0x1f	; 31
     772:	04 c0       	rjmp	.+8      	; 0x77c <__udivdi3+0x5ec>
     774:	88 0f       	add	r24, r24
     776:	99 1f       	adc	r25, r25
     778:	aa 1f       	adc	r26, r26
     77a:	bb 1f       	adc	r27, r27
     77c:	0a 94       	dec	r0
     77e:	d2 f7       	brpl	.-12     	; 0x774 <__udivdi3+0x5e4>
     780:	8d a7       	std	Y+45, r24	; 0x2d
     782:	9e a7       	std	Y+46, r25	; 0x2e
     784:	af a7       	std	Y+47, r26	; 0x2f
     786:	b8 ab       	std	Y+48, r27	; 0x30
     788:	a2 1a       	sub	r10, r18
     78a:	b3 0a       	sbc	r11, r19
     78c:	c4 0a       	sbc	r12, r20
     78e:	d5 0a       	sbc	r13, r21
     790:	25 96       	adiw	r28, 0x05	; 5
     792:	ec ac       	ldd	r14, Y+60	; 0x3c
     794:	fd ac       	ldd	r15, Y+61	; 0x3d
     796:	0e ad       	ldd	r16, Y+62	; 0x3e
     798:	1f ad       	ldd	r17, Y+63	; 0x3f
     79a:	25 97       	sbiw	r28, 0x05	; 5
     79c:	d7 01       	movw	r26, r14
     79e:	99 27       	eor	r25, r25
     7a0:	88 27       	eor	r24, r24
     7a2:	68 2a       	or	r6, r24
     7a4:	79 2a       	or	r7, r25
     7a6:	8a 2a       	or	r8, r26
     7a8:	9b 2a       	or	r9, r27
     7aa:	82 01       	movw	r16, r4
     7ac:	22 27       	eor	r18, r18
     7ae:	33 27       	eor	r19, r19
     7b0:	29 96       	adiw	r28, 0x09	; 9
     7b2:	0c af       	std	Y+60, r16	; 0x3c
     7b4:	1d af       	std	Y+61, r17	; 0x3d
     7b6:	2e af       	std	Y+62, r18	; 0x3e
     7b8:	3f af       	std	Y+63, r19	; 0x3f
     7ba:	29 97       	sbiw	r28, 0x09	; 9
     7bc:	a2 01       	movw	r20, r4
     7be:	91 01       	movw	r18, r2
     7c0:	40 70       	andi	r20, 0x00	; 0
     7c2:	50 70       	andi	r21, 0x00	; 0
     7c4:	2d 96       	adiw	r28, 0x0d	; 13
     7c6:	2c af       	std	Y+60, r18	; 0x3c
     7c8:	3d af       	std	Y+61, r19	; 0x3d
     7ca:	4e af       	std	Y+62, r20	; 0x3e
     7cc:	5f af       	std	Y+63, r21	; 0x3f
     7ce:	2d 97       	sbiw	r28, 0x0d	; 13
     7d0:	c6 01       	movw	r24, r12
     7d2:	b5 01       	movw	r22, r10
     7d4:	29 96       	adiw	r28, 0x09	; 9
     7d6:	2c ad       	ldd	r18, Y+60	; 0x3c
     7d8:	3d ad       	ldd	r19, Y+61	; 0x3d
     7da:	4e ad       	ldd	r20, Y+62	; 0x3e
     7dc:	5f ad       	ldd	r21, Y+63	; 0x3f
     7de:	29 97       	sbiw	r28, 0x09	; 9
     7e0:	0e 94 2b 32 	call	0x6456	; 0x6456 <__udivmodsi4>
     7e4:	7b 01       	movw	r14, r22
     7e6:	8c 01       	movw	r16, r24
     7e8:	c6 01       	movw	r24, r12
     7ea:	b5 01       	movw	r22, r10
     7ec:	29 96       	adiw	r28, 0x09	; 9
     7ee:	2c ad       	ldd	r18, Y+60	; 0x3c
     7f0:	3d ad       	ldd	r19, Y+61	; 0x3d
     7f2:	4e ad       	ldd	r20, Y+62	; 0x3e
     7f4:	5f ad       	ldd	r21, Y+63	; 0x3f
     7f6:	29 97       	sbiw	r28, 0x09	; 9
     7f8:	0e 94 2b 32 	call	0x6456	; 0x6456 <__udivmodsi4>
     7fc:	c9 01       	movw	r24, r18
     7fe:	da 01       	movw	r26, r20
     800:	61 96       	adiw	r28, 0x11	; 17
     802:	8c af       	std	Y+60, r24	; 0x3c
     804:	9d af       	std	Y+61, r25	; 0x3d
     806:	ae af       	std	Y+62, r26	; 0x3e
     808:	bf af       	std	Y+63, r27	; 0x3f
     80a:	61 97       	sbiw	r28, 0x11	; 17
     80c:	bc 01       	movw	r22, r24
     80e:	cd 01       	movw	r24, r26
     810:	2d 96       	adiw	r28, 0x0d	; 13
     812:	2c ad       	ldd	r18, Y+60	; 0x3c
     814:	3d ad       	ldd	r19, Y+61	; 0x3d
     816:	4e ad       	ldd	r20, Y+62	; 0x3e
     818:	5f ad       	ldd	r21, Y+63	; 0x3f
     81a:	2d 97       	sbiw	r28, 0x0d	; 13
     81c:	0e 94 68 32 	call	0x64d0	; 0x64d0 <__mulsi3>
     820:	9b 01       	movw	r18, r22
     822:	ac 01       	movw	r20, r24
     824:	87 01       	movw	r16, r14
     826:	ff 24       	eor	r15, r15
     828:	ee 24       	eor	r14, r14
     82a:	ad a4       	ldd	r10, Y+45	; 0x2d
     82c:	be a4       	ldd	r11, Y+46	; 0x2e
     82e:	cf a4       	ldd	r12, Y+47	; 0x2f
     830:	d8 a8       	ldd	r13, Y+48	; 0x30
     832:	c6 01       	movw	r24, r12
     834:	aa 27       	eor	r26, r26
     836:	bb 27       	eor	r27, r27
     838:	57 01       	movw	r10, r14
     83a:	68 01       	movw	r12, r16
     83c:	a8 2a       	or	r10, r24
     83e:	b9 2a       	or	r11, r25
     840:	ca 2a       	or	r12, r26
     842:	db 2a       	or	r13, r27
     844:	a2 16       	cp	r10, r18
     846:	b3 06       	cpc	r11, r19
     848:	c4 06       	cpc	r12, r20
     84a:	d5 06       	cpc	r13, r21
     84c:	60 f5       	brcc	.+88     	; 0x8a6 <__stack+0x47>
     84e:	61 96       	adiw	r28, 0x11	; 17
     850:	6c ad       	ldd	r22, Y+60	; 0x3c
     852:	7d ad       	ldd	r23, Y+61	; 0x3d
     854:	8e ad       	ldd	r24, Y+62	; 0x3e
     856:	9f ad       	ldd	r25, Y+63	; 0x3f
     858:	61 97       	sbiw	r28, 0x11	; 17
     85a:	61 50       	subi	r22, 0x01	; 1
     85c:	70 40       	sbci	r23, 0x00	; 0
     85e:	80 40       	sbci	r24, 0x00	; 0
     860:	90 40       	sbci	r25, 0x00	; 0
     862:	61 96       	adiw	r28, 0x11	; 17
     864:	6c af       	std	Y+60, r22	; 0x3c
     866:	7d af       	std	Y+61, r23	; 0x3d
     868:	8e af       	std	Y+62, r24	; 0x3e
     86a:	9f af       	std	Y+63, r25	; 0x3f
     86c:	61 97       	sbiw	r28, 0x11	; 17
     86e:	a2 0c       	add	r10, r2
     870:	b3 1c       	adc	r11, r3
     872:	c4 1c       	adc	r12, r4
     874:	d5 1c       	adc	r13, r5
     876:	a2 14       	cp	r10, r2
     878:	b3 04       	cpc	r11, r3
     87a:	c4 04       	cpc	r12, r4
     87c:	d5 04       	cpc	r13, r5
     87e:	98 f0       	brcs	.+38     	; 0x8a6 <__stack+0x47>
     880:	a2 16       	cp	r10, r18
     882:	b3 06       	cpc	r11, r19
     884:	c4 06       	cpc	r12, r20
     886:	d5 06       	cpc	r13, r21
     888:	70 f4       	brcc	.+28     	; 0x8a6 <__stack+0x47>
     88a:	61 50       	subi	r22, 0x01	; 1
     88c:	70 40       	sbci	r23, 0x00	; 0
     88e:	80 40       	sbci	r24, 0x00	; 0
     890:	90 40       	sbci	r25, 0x00	; 0
     892:	61 96       	adiw	r28, 0x11	; 17
     894:	6c af       	std	Y+60, r22	; 0x3c
     896:	7d af       	std	Y+61, r23	; 0x3d
     898:	8e af       	std	Y+62, r24	; 0x3e
     89a:	9f af       	std	Y+63, r25	; 0x3f
     89c:	61 97       	sbiw	r28, 0x11	; 17
     89e:	a2 0c       	add	r10, r2
     8a0:	b3 1c       	adc	r11, r3
     8a2:	c4 1c       	adc	r12, r4
     8a4:	d5 1c       	adc	r13, r5
     8a6:	a2 1a       	sub	r10, r18
     8a8:	b3 0a       	sbc	r11, r19
     8aa:	c4 0a       	sbc	r12, r20
     8ac:	d5 0a       	sbc	r13, r21
     8ae:	c6 01       	movw	r24, r12
     8b0:	b5 01       	movw	r22, r10
     8b2:	29 96       	adiw	r28, 0x09	; 9
     8b4:	2c ad       	ldd	r18, Y+60	; 0x3c
     8b6:	3d ad       	ldd	r19, Y+61	; 0x3d
     8b8:	4e ad       	ldd	r20, Y+62	; 0x3e
     8ba:	5f ad       	ldd	r21, Y+63	; 0x3f
     8bc:	29 97       	sbiw	r28, 0x09	; 9
     8be:	0e 94 2b 32 	call	0x6456	; 0x6456 <__udivmodsi4>
     8c2:	7b 01       	movw	r14, r22
     8c4:	8c 01       	movw	r16, r24
     8c6:	c6 01       	movw	r24, r12
     8c8:	b5 01       	movw	r22, r10
     8ca:	29 96       	adiw	r28, 0x09	; 9
     8cc:	2c ad       	ldd	r18, Y+60	; 0x3c
     8ce:	3d ad       	ldd	r19, Y+61	; 0x3d
     8d0:	4e ad       	ldd	r20, Y+62	; 0x3e
     8d2:	5f ad       	ldd	r21, Y+63	; 0x3f
     8d4:	29 97       	sbiw	r28, 0x09	; 9
     8d6:	0e 94 2b 32 	call	0x6456	; 0x6456 <__udivmodsi4>
     8da:	c9 01       	movw	r24, r18
     8dc:	da 01       	movw	r26, r20
     8de:	5c 01       	movw	r10, r24
     8e0:	6d 01       	movw	r12, r26
     8e2:	c6 01       	movw	r24, r12
     8e4:	b5 01       	movw	r22, r10
     8e6:	2d 96       	adiw	r28, 0x0d	; 13
     8e8:	2c ad       	ldd	r18, Y+60	; 0x3c
     8ea:	3d ad       	ldd	r19, Y+61	; 0x3d
     8ec:	4e ad       	ldd	r20, Y+62	; 0x3e
     8ee:	5f ad       	ldd	r21, Y+63	; 0x3f
     8f0:	2d 97       	sbiw	r28, 0x0d	; 13
     8f2:	0e 94 68 32 	call	0x64d0	; 0x64d0 <__mulsi3>
     8f6:	9b 01       	movw	r18, r22
     8f8:	ac 01       	movw	r20, r24
     8fa:	87 01       	movw	r16, r14
     8fc:	ff 24       	eor	r15, r15
     8fe:	ee 24       	eor	r14, r14
     900:	8d a5       	ldd	r24, Y+45	; 0x2d
     902:	9e a5       	ldd	r25, Y+46	; 0x2e
     904:	af a5       	ldd	r26, Y+47	; 0x2f
     906:	b8 a9       	ldd	r27, Y+48	; 0x30
     908:	a0 70       	andi	r26, 0x00	; 0
     90a:	b0 70       	andi	r27, 0x00	; 0
     90c:	e8 2a       	or	r14, r24
     90e:	f9 2a       	or	r15, r25
     910:	0a 2b       	or	r16, r26
     912:	1b 2b       	or	r17, r27
     914:	e2 16       	cp	r14, r18
     916:	f3 06       	cpc	r15, r19
     918:	04 07       	cpc	r16, r20
     91a:	15 07       	cpc	r17, r21
     91c:	c0 f4       	brcc	.+48     	; 0x94e <__stack+0xef>
     91e:	08 94       	sec
     920:	a1 08       	sbc	r10, r1
     922:	b1 08       	sbc	r11, r1
     924:	c1 08       	sbc	r12, r1
     926:	d1 08       	sbc	r13, r1
     928:	e2 0c       	add	r14, r2
     92a:	f3 1c       	adc	r15, r3
     92c:	04 1d       	adc	r16, r4
     92e:	15 1d       	adc	r17, r5
     930:	e2 14       	cp	r14, r2
     932:	f3 04       	cpc	r15, r3
     934:	04 05       	cpc	r16, r4
     936:	15 05       	cpc	r17, r5
     938:	50 f0       	brcs	.+20     	; 0x94e <__stack+0xef>
     93a:	e2 16       	cp	r14, r18
     93c:	f3 06       	cpc	r15, r19
     93e:	04 07       	cpc	r16, r20
     940:	15 07       	cpc	r17, r21
     942:	28 f4       	brcc	.+10     	; 0x94e <__stack+0xef>
     944:	08 94       	sec
     946:	a1 08       	sbc	r10, r1
     948:	b1 08       	sbc	r11, r1
     94a:	c1 08       	sbc	r12, r1
     94c:	d1 08       	sbc	r13, r1
     94e:	61 96       	adiw	r28, 0x11	; 17
     950:	ec ac       	ldd	r14, Y+60	; 0x3c
     952:	fd ac       	ldd	r15, Y+61	; 0x3d
     954:	0e ad       	ldd	r16, Y+62	; 0x3e
     956:	1f ad       	ldd	r17, Y+63	; 0x3f
     958:	61 97       	sbiw	r28, 0x11	; 17
     95a:	d7 01       	movw	r26, r14
     95c:	99 27       	eor	r25, r25
     95e:	88 27       	eor	r24, r24
     960:	96 01       	movw	r18, r12
     962:	85 01       	movw	r16, r10
     964:	08 2b       	or	r16, r24
     966:	19 2b       	or	r17, r25
     968:	2a 2b       	or	r18, r26
     96a:	3b 2b       	or	r19, r27
     96c:	09 ab       	std	Y+49, r16	; 0x31
     96e:	1a ab       	std	Y+50, r17	; 0x32
     970:	2b ab       	std	Y+51, r18	; 0x33
     972:	3c ab       	std	Y+52, r19	; 0x34
     974:	62 c2       	rjmp	.+1220   	; 0xe3a <__stack+0x5db>
     976:	6e 14       	cp	r6, r14
     978:	7f 04       	cpc	r7, r15
     97a:	80 06       	cpc	r8, r16
     97c:	91 06       	cpc	r9, r17
     97e:	08 f4       	brcc	.+2      	; 0x982 <__stack+0x123>
     980:	51 c2       	rjmp	.+1186   	; 0xe24 <__stack+0x5c5>
     982:	20 e0       	ldi	r18, 0x00	; 0
     984:	e2 16       	cp	r14, r18
     986:	20 e0       	ldi	r18, 0x00	; 0
     988:	f2 06       	cpc	r15, r18
     98a:	21 e0       	ldi	r18, 0x01	; 1
     98c:	02 07       	cpc	r16, r18
     98e:	20 e0       	ldi	r18, 0x00	; 0
     990:	12 07       	cpc	r17, r18
     992:	88 f4       	brcc	.+34     	; 0x9b6 <__stack+0x157>
     994:	3f ef       	ldi	r19, 0xFF	; 255
     996:	e3 16       	cp	r14, r19
     998:	f1 04       	cpc	r15, r1
     99a:	01 05       	cpc	r16, r1
     99c:	11 05       	cpc	r17, r1
     99e:	31 f0       	breq	.+12     	; 0x9ac <__stack+0x14d>
     9a0:	28 f0       	brcs	.+10     	; 0x9ac <__stack+0x14d>
     9a2:	48 e0       	ldi	r20, 0x08	; 8
     9a4:	50 e0       	ldi	r21, 0x00	; 0
     9a6:	60 e0       	ldi	r22, 0x00	; 0
     9a8:	70 e0       	ldi	r23, 0x00	; 0
     9aa:	17 c0       	rjmp	.+46     	; 0x9da <__stack+0x17b>
     9ac:	40 e0       	ldi	r20, 0x00	; 0
     9ae:	50 e0       	ldi	r21, 0x00	; 0
     9b0:	60 e0       	ldi	r22, 0x00	; 0
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	12 c0       	rjmp	.+36     	; 0x9da <__stack+0x17b>
     9b6:	40 e0       	ldi	r20, 0x00	; 0
     9b8:	e4 16       	cp	r14, r20
     9ba:	40 e0       	ldi	r20, 0x00	; 0
     9bc:	f4 06       	cpc	r15, r20
     9be:	40 e0       	ldi	r20, 0x00	; 0
     9c0:	04 07       	cpc	r16, r20
     9c2:	41 e0       	ldi	r20, 0x01	; 1
     9c4:	14 07       	cpc	r17, r20
     9c6:	28 f0       	brcs	.+10     	; 0x9d2 <__stack+0x173>
     9c8:	48 e1       	ldi	r20, 0x18	; 24
     9ca:	50 e0       	ldi	r21, 0x00	; 0
     9cc:	60 e0       	ldi	r22, 0x00	; 0
     9ce:	70 e0       	ldi	r23, 0x00	; 0
     9d0:	04 c0       	rjmp	.+8      	; 0x9da <__stack+0x17b>
     9d2:	40 e1       	ldi	r20, 0x10	; 16
     9d4:	50 e0       	ldi	r21, 0x00	; 0
     9d6:	60 e0       	ldi	r22, 0x00	; 0
     9d8:	70 e0       	ldi	r23, 0x00	; 0
     9da:	d8 01       	movw	r26, r16
     9dc:	c7 01       	movw	r24, r14
     9de:	04 2e       	mov	r0, r20
     9e0:	04 c0       	rjmp	.+8      	; 0x9ea <__stack+0x18b>
     9e2:	b6 95       	lsr	r27
     9e4:	a7 95       	ror	r26
     9e6:	97 95       	ror	r25
     9e8:	87 95       	ror	r24
     9ea:	0a 94       	dec	r0
     9ec:	d2 f7       	brpl	.-12     	; 0x9e2 <__stack+0x183>
     9ee:	8d 5a       	subi	r24, 0xAD	; 173
     9f0:	9c 4f       	sbci	r25, 0xFC	; 252
     9f2:	dc 01       	movw	r26, r24
     9f4:	2c 91       	ld	r18, X
     9f6:	30 e2       	ldi	r19, 0x20	; 32
     9f8:	a3 2e       	mov	r10, r19
     9fa:	b1 2c       	mov	r11, r1
     9fc:	c1 2c       	mov	r12, r1
     9fe:	d1 2c       	mov	r13, r1
     a00:	d6 01       	movw	r26, r12
     a02:	c5 01       	movw	r24, r10
     a04:	84 1b       	sub	r24, r20
     a06:	95 0b       	sbc	r25, r21
     a08:	a6 0b       	sbc	r26, r22
     a0a:	b7 0b       	sbc	r27, r23
     a0c:	82 1b       	sub	r24, r18
     a0e:	91 09       	sbc	r25, r1
     a10:	a1 09       	sbc	r26, r1
     a12:	b1 09       	sbc	r27, r1
     a14:	00 97       	sbiw	r24, 0x00	; 0
     a16:	a1 05       	cpc	r26, r1
     a18:	b1 05       	cpc	r27, r1
     a1a:	89 f4       	brne	.+34     	; 0xa3e <__stack+0x1df>
     a1c:	e6 14       	cp	r14, r6
     a1e:	f7 04       	cpc	r15, r7
     a20:	08 05       	cpc	r16, r8
     a22:	19 05       	cpc	r17, r9
     a24:	08 f4       	brcc	.+2      	; 0xa28 <__stack+0x1c9>
     a26:	f2 c1       	rjmp	.+996    	; 0xe0c <__stack+0x5ad>
     a28:	6d a4       	ldd	r6, Y+45	; 0x2d
     a2a:	7e a4       	ldd	r7, Y+46	; 0x2e
     a2c:	8f a4       	ldd	r8, Y+47	; 0x2f
     a2e:	98 a8       	ldd	r9, Y+48	; 0x30
     a30:	62 14       	cp	r6, r2
     a32:	73 04       	cpc	r7, r3
     a34:	84 04       	cpc	r8, r4
     a36:	95 04       	cpc	r9, r5
     a38:	08 f0       	brcs	.+2      	; 0xa3c <__stack+0x1dd>
     a3a:	e8 c1       	rjmp	.+976    	; 0xe0c <__stack+0x5ad>
     a3c:	f3 c1       	rjmp	.+998    	; 0xe24 <__stack+0x5c5>
     a3e:	6e 96       	adiw	r28, 0x1e	; 30
     a40:	8f af       	std	Y+63, r24	; 0x3f
     a42:	6e 97       	sbiw	r28, 0x1e	; 30
     a44:	08 2e       	mov	r0, r24
     a46:	04 c0       	rjmp	.+8      	; 0xa50 <__stack+0x1f1>
     a48:	ee 0c       	add	r14, r14
     a4a:	ff 1c       	adc	r15, r15
     a4c:	00 1f       	adc	r16, r16
     a4e:	11 1f       	adc	r17, r17
     a50:	0a 94       	dec	r0
     a52:	d2 f7       	brpl	.-12     	; 0xa48 <__stack+0x1e9>
     a54:	6a 2d       	mov	r22, r10
     a56:	68 1b       	sub	r22, r24
     a58:	d2 01       	movw	r26, r4
     a5a:	c1 01       	movw	r24, r2
     a5c:	06 2e       	mov	r0, r22
     a5e:	04 c0       	rjmp	.+8      	; 0xa68 <__stack+0x209>
     a60:	b6 95       	lsr	r27
     a62:	a7 95       	ror	r26
     a64:	97 95       	ror	r25
     a66:	87 95       	ror	r24
     a68:	0a 94       	dec	r0
     a6a:	d2 f7       	brpl	.-12     	; 0xa60 <__stack+0x201>
     a6c:	5c 01       	movw	r10, r24
     a6e:	6d 01       	movw	r12, r26
     a70:	ae 28       	or	r10, r14
     a72:	bf 28       	or	r11, r15
     a74:	c0 2a       	or	r12, r16
     a76:	d1 2a       	or	r13, r17
     a78:	ad a2       	std	Y+37, r10	; 0x25
     a7a:	be a2       	std	Y+38, r11	; 0x26
     a7c:	cf a2       	std	Y+39, r12	; 0x27
     a7e:	d8 a6       	std	Y+40, r13	; 0x28
     a80:	72 01       	movw	r14, r4
     a82:	61 01       	movw	r12, r2
     a84:	6e 96       	adiw	r28, 0x1e	; 30
     a86:	0f ac       	ldd	r0, Y+63	; 0x3f
     a88:	6e 97       	sbiw	r28, 0x1e	; 30
     a8a:	04 c0       	rjmp	.+8      	; 0xa94 <__stack+0x235>
     a8c:	cc 0c       	add	r12, r12
     a8e:	dd 1c       	adc	r13, r13
     a90:	ee 1c       	adc	r14, r14
     a92:	ff 1c       	adc	r15, r15
     a94:	0a 94       	dec	r0
     a96:	d2 f7       	brpl	.-12     	; 0xa8c <__stack+0x22d>
     a98:	c9 a2       	std	Y+33, r12	; 0x21
     a9a:	da a2       	std	Y+34, r13	; 0x22
     a9c:	eb a2       	std	Y+35, r14	; 0x23
     a9e:	fc a2       	std	Y+36, r15	; 0x24
     aa0:	64 01       	movw	r12, r8
     aa2:	53 01       	movw	r10, r6
     aa4:	06 2e       	mov	r0, r22
     aa6:	04 c0       	rjmp	.+8      	; 0xab0 <__stack+0x251>
     aa8:	d6 94       	lsr	r13
     aaa:	c7 94       	ror	r12
     aac:	b7 94       	ror	r11
     aae:	a7 94       	ror	r10
     ab0:	0a 94       	dec	r0
     ab2:	d2 f7       	brpl	.-12     	; 0xaa8 <__stack+0x249>
     ab4:	d4 01       	movw	r26, r8
     ab6:	c3 01       	movw	r24, r6
     ab8:	6e 96       	adiw	r28, 0x1e	; 30
     aba:	0f ac       	ldd	r0, Y+63	; 0x3f
     abc:	6e 97       	sbiw	r28, 0x1e	; 30
     abe:	04 c0       	rjmp	.+8      	; 0xac8 <__stack+0x269>
     ac0:	88 0f       	add	r24, r24
     ac2:	99 1f       	adc	r25, r25
     ac4:	aa 1f       	adc	r26, r26
     ac6:	bb 1f       	adc	r27, r27
     ac8:	0a 94       	dec	r0
     aca:	d2 f7       	brpl	.-12     	; 0xac0 <__stack+0x261>
     acc:	ed a4       	ldd	r14, Y+45	; 0x2d
     ace:	fe a4       	ldd	r15, Y+46	; 0x2e
     ad0:	0f a5       	ldd	r16, Y+47	; 0x2f
     ad2:	18 a9       	ldd	r17, Y+48	; 0x30
     ad4:	04 c0       	rjmp	.+8      	; 0xade <__stack+0x27f>
     ad6:	16 95       	lsr	r17
     ad8:	07 95       	ror	r16
     ada:	f7 94       	ror	r15
     adc:	e7 94       	ror	r14
     ade:	6a 95       	dec	r22
     ae0:	d2 f7       	brpl	.-12     	; 0xad6 <__stack+0x277>
     ae2:	37 01       	movw	r6, r14
     ae4:	48 01       	movw	r8, r16
     ae6:	68 2a       	or	r6, r24
     ae8:	79 2a       	or	r7, r25
     aea:	8a 2a       	or	r8, r26
     aec:	9b 2a       	or	r9, r27
     aee:	6d 8e       	std	Y+29, r6	; 0x1d
     af0:	7e 8e       	std	Y+30, r7	; 0x1e
     af2:	8f 8e       	std	Y+31, r8	; 0x1f
     af4:	98 a2       	std	Y+32, r9	; 0x20
     af6:	ed a0       	ldd	r14, Y+37	; 0x25
     af8:	fe a0       	ldd	r15, Y+38	; 0x26
     afa:	0f a1       	ldd	r16, Y+39	; 0x27
     afc:	18 a5       	ldd	r17, Y+40	; 0x28
     afe:	38 01       	movw	r6, r16
     b00:	88 24       	eor	r8, r8
     b02:	99 24       	eor	r9, r9
     b04:	98 01       	movw	r18, r16
     b06:	87 01       	movw	r16, r14
     b08:	20 70       	andi	r18, 0x00	; 0
     b0a:	30 70       	andi	r19, 0x00	; 0
     b0c:	65 96       	adiw	r28, 0x15	; 21
     b0e:	0c af       	std	Y+60, r16	; 0x3c
     b10:	1d af       	std	Y+61, r17	; 0x3d
     b12:	2e af       	std	Y+62, r18	; 0x3e
     b14:	3f af       	std	Y+63, r19	; 0x3f
     b16:	65 97       	sbiw	r28, 0x15	; 21
     b18:	c6 01       	movw	r24, r12
     b1a:	b5 01       	movw	r22, r10
     b1c:	a4 01       	movw	r20, r8
     b1e:	93 01       	movw	r18, r6
     b20:	0e 94 2b 32 	call	0x6456	; 0x6456 <__udivmodsi4>
     b24:	7b 01       	movw	r14, r22
     b26:	8c 01       	movw	r16, r24
     b28:	c6 01       	movw	r24, r12
     b2a:	b5 01       	movw	r22, r10
     b2c:	a4 01       	movw	r20, r8
     b2e:	93 01       	movw	r18, r6
     b30:	0e 94 2b 32 	call	0x6456	; 0x6456 <__udivmodsi4>
     b34:	c9 01       	movw	r24, r18
     b36:	da 01       	movw	r26, r20
     b38:	1c 01       	movw	r2, r24
     b3a:	2d 01       	movw	r4, r26
     b3c:	c2 01       	movw	r24, r4
     b3e:	b1 01       	movw	r22, r2
     b40:	65 96       	adiw	r28, 0x15	; 21
     b42:	2c ad       	ldd	r18, Y+60	; 0x3c
     b44:	3d ad       	ldd	r19, Y+61	; 0x3d
     b46:	4e ad       	ldd	r20, Y+62	; 0x3e
     b48:	5f ad       	ldd	r21, Y+63	; 0x3f
     b4a:	65 97       	sbiw	r28, 0x15	; 21
     b4c:	0e 94 68 32 	call	0x64d0	; 0x64d0 <__mulsi3>
     b50:	9b 01       	movw	r18, r22
     b52:	ac 01       	movw	r20, r24
     b54:	87 01       	movw	r16, r14
     b56:	ff 24       	eor	r15, r15
     b58:	ee 24       	eor	r14, r14
     b5a:	ad 8c       	ldd	r10, Y+29	; 0x1d
     b5c:	be 8c       	ldd	r11, Y+30	; 0x1e
     b5e:	cf 8c       	ldd	r12, Y+31	; 0x1f
     b60:	d8 a0       	ldd	r13, Y+32	; 0x20
     b62:	c6 01       	movw	r24, r12
     b64:	aa 27       	eor	r26, r26
     b66:	bb 27       	eor	r27, r27
     b68:	57 01       	movw	r10, r14
     b6a:	68 01       	movw	r12, r16
     b6c:	a8 2a       	or	r10, r24
     b6e:	b9 2a       	or	r11, r25
     b70:	ca 2a       	or	r12, r26
     b72:	db 2a       	or	r13, r27
     b74:	a2 16       	cp	r10, r18
     b76:	b3 06       	cpc	r11, r19
     b78:	c4 06       	cpc	r12, r20
     b7a:	d5 06       	cpc	r13, r21
     b7c:	00 f5       	brcc	.+64     	; 0xbbe <__stack+0x35f>
     b7e:	08 94       	sec
     b80:	21 08       	sbc	r2, r1
     b82:	31 08       	sbc	r3, r1
     b84:	41 08       	sbc	r4, r1
     b86:	51 08       	sbc	r5, r1
     b88:	ed a0       	ldd	r14, Y+37	; 0x25
     b8a:	fe a0       	ldd	r15, Y+38	; 0x26
     b8c:	0f a1       	ldd	r16, Y+39	; 0x27
     b8e:	18 a5       	ldd	r17, Y+40	; 0x28
     b90:	ae 0c       	add	r10, r14
     b92:	bf 1c       	adc	r11, r15
     b94:	c0 1e       	adc	r12, r16
     b96:	d1 1e       	adc	r13, r17
     b98:	ae 14       	cp	r10, r14
     b9a:	bf 04       	cpc	r11, r15
     b9c:	c0 06       	cpc	r12, r16
     b9e:	d1 06       	cpc	r13, r17
     ba0:	70 f0       	brcs	.+28     	; 0xbbe <__stack+0x35f>
     ba2:	a2 16       	cp	r10, r18
     ba4:	b3 06       	cpc	r11, r19
     ba6:	c4 06       	cpc	r12, r20
     ba8:	d5 06       	cpc	r13, r21
     baa:	48 f4       	brcc	.+18     	; 0xbbe <__stack+0x35f>
     bac:	08 94       	sec
     bae:	21 08       	sbc	r2, r1
     bb0:	31 08       	sbc	r3, r1
     bb2:	41 08       	sbc	r4, r1
     bb4:	51 08       	sbc	r5, r1
     bb6:	ae 0c       	add	r10, r14
     bb8:	bf 1c       	adc	r11, r15
     bba:	c0 1e       	adc	r12, r16
     bbc:	d1 1e       	adc	r13, r17
     bbe:	a2 1a       	sub	r10, r18
     bc0:	b3 0a       	sbc	r11, r19
     bc2:	c4 0a       	sbc	r12, r20
     bc4:	d5 0a       	sbc	r13, r21
     bc6:	c6 01       	movw	r24, r12
     bc8:	b5 01       	movw	r22, r10
     bca:	a4 01       	movw	r20, r8
     bcc:	93 01       	movw	r18, r6
     bce:	0e 94 2b 32 	call	0x6456	; 0x6456 <__udivmodsi4>
     bd2:	7b 01       	movw	r14, r22
     bd4:	8c 01       	movw	r16, r24
     bd6:	c6 01       	movw	r24, r12
     bd8:	b5 01       	movw	r22, r10
     bda:	a4 01       	movw	r20, r8
     bdc:	93 01       	movw	r18, r6
     bde:	0e 94 2b 32 	call	0x6456	; 0x6456 <__udivmodsi4>
     be2:	c9 01       	movw	r24, r18
     be4:	da 01       	movw	r26, r20
     be6:	3c 01       	movw	r6, r24
     be8:	4d 01       	movw	r8, r26
     bea:	c4 01       	movw	r24, r8
     bec:	b3 01       	movw	r22, r6
     bee:	65 96       	adiw	r28, 0x15	; 21
     bf0:	2c ad       	ldd	r18, Y+60	; 0x3c
     bf2:	3d ad       	ldd	r19, Y+61	; 0x3d
     bf4:	4e ad       	ldd	r20, Y+62	; 0x3e
     bf6:	5f ad       	ldd	r21, Y+63	; 0x3f
     bf8:	65 97       	sbiw	r28, 0x15	; 21
     bfa:	0e 94 68 32 	call	0x64d0	; 0x64d0 <__mulsi3>
     bfe:	9b 01       	movw	r18, r22
     c00:	ac 01       	movw	r20, r24
     c02:	87 01       	movw	r16, r14
     c04:	ff 24       	eor	r15, r15
     c06:	ee 24       	eor	r14, r14
     c08:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c0a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c0c:	af 8d       	ldd	r26, Y+31	; 0x1f
     c0e:	b8 a1       	ldd	r27, Y+32	; 0x20
     c10:	a0 70       	andi	r26, 0x00	; 0
     c12:	b0 70       	andi	r27, 0x00	; 0
     c14:	57 01       	movw	r10, r14
     c16:	68 01       	movw	r12, r16
     c18:	a8 2a       	or	r10, r24
     c1a:	b9 2a       	or	r11, r25
     c1c:	ca 2a       	or	r12, r26
     c1e:	db 2a       	or	r13, r27
     c20:	a2 16       	cp	r10, r18
     c22:	b3 06       	cpc	r11, r19
     c24:	c4 06       	cpc	r12, r20
     c26:	d5 06       	cpc	r13, r21
     c28:	00 f5       	brcc	.+64     	; 0xc6a <__stack+0x40b>
     c2a:	08 94       	sec
     c2c:	61 08       	sbc	r6, r1
     c2e:	71 08       	sbc	r7, r1
     c30:	81 08       	sbc	r8, r1
     c32:	91 08       	sbc	r9, r1
     c34:	6d a1       	ldd	r22, Y+37	; 0x25
     c36:	7e a1       	ldd	r23, Y+38	; 0x26
     c38:	8f a1       	ldd	r24, Y+39	; 0x27
     c3a:	98 a5       	ldd	r25, Y+40	; 0x28
     c3c:	a6 0e       	add	r10, r22
     c3e:	b7 1e       	adc	r11, r23
     c40:	c8 1e       	adc	r12, r24
     c42:	d9 1e       	adc	r13, r25
     c44:	a6 16       	cp	r10, r22
     c46:	b7 06       	cpc	r11, r23
     c48:	c8 06       	cpc	r12, r24
     c4a:	d9 06       	cpc	r13, r25
     c4c:	70 f0       	brcs	.+28     	; 0xc6a <__stack+0x40b>
     c4e:	a2 16       	cp	r10, r18
     c50:	b3 06       	cpc	r11, r19
     c52:	c4 06       	cpc	r12, r20
     c54:	d5 06       	cpc	r13, r21
     c56:	48 f4       	brcc	.+18     	; 0xc6a <__stack+0x40b>
     c58:	08 94       	sec
     c5a:	61 08       	sbc	r6, r1
     c5c:	71 08       	sbc	r7, r1
     c5e:	81 08       	sbc	r8, r1
     c60:	91 08       	sbc	r9, r1
     c62:	a6 0e       	add	r10, r22
     c64:	b7 1e       	adc	r11, r23
     c66:	c8 1e       	adc	r12, r24
     c68:	d9 1e       	adc	r13, r25
     c6a:	d6 01       	movw	r26, r12
     c6c:	c5 01       	movw	r24, r10
     c6e:	82 1b       	sub	r24, r18
     c70:	93 0b       	sbc	r25, r19
     c72:	a4 0b       	sbc	r26, r20
     c74:	b5 0b       	sbc	r27, r21
     c76:	89 8f       	std	Y+25, r24	; 0x19
     c78:	9a 8f       	std	Y+26, r25	; 0x1a
     c7a:	ab 8f       	std	Y+27, r26	; 0x1b
     c7c:	bc 8f       	std	Y+28, r27	; 0x1c
     c7e:	d1 01       	movw	r26, r2
     c80:	99 27       	eor	r25, r25
     c82:	88 27       	eor	r24, r24
     c84:	64 01       	movw	r12, r8
     c86:	53 01       	movw	r10, r6
     c88:	a8 2a       	or	r10, r24
     c8a:	b9 2a       	or	r11, r25
     c8c:	ca 2a       	or	r12, r26
     c8e:	db 2a       	or	r13, r27
     c90:	a9 aa       	std	Y+49, r10	; 0x31
     c92:	ba aa       	std	Y+50, r11	; 0x32
     c94:	cb aa       	std	Y+51, r12	; 0x33
     c96:	dc aa       	std	Y+52, r13	; 0x34
     c98:	86 01       	movw	r16, r12
     c9a:	75 01       	movw	r14, r10
     c9c:	2f ef       	ldi	r18, 0xFF	; 255
     c9e:	3f ef       	ldi	r19, 0xFF	; 255
     ca0:	40 e0       	ldi	r20, 0x00	; 0
     ca2:	50 e0       	ldi	r21, 0x00	; 0
     ca4:	e2 22       	and	r14, r18
     ca6:	f3 22       	and	r15, r19
     ca8:	04 23       	and	r16, r20
     caa:	15 23       	and	r17, r21
     cac:	a6 01       	movw	r20, r12
     cae:	66 27       	eor	r22, r22
     cb0:	77 27       	eor	r23, r23
     cb2:	6d 96       	adiw	r28, 0x1d	; 29
     cb4:	4c af       	std	Y+60, r20	; 0x3c
     cb6:	5d af       	std	Y+61, r21	; 0x3d
     cb8:	6e af       	std	Y+62, r22	; 0x3e
     cba:	7f af       	std	Y+63, r23	; 0x3f
     cbc:	6d 97       	sbiw	r28, 0x1d	; 29
     cbe:	a9 a0       	ldd	r10, Y+33	; 0x21
     cc0:	ba a0       	ldd	r11, Y+34	; 0x22
     cc2:	cb a0       	ldd	r12, Y+35	; 0x23
     cc4:	dc a0       	ldd	r13, Y+36	; 0x24
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	a6 22       	and	r10, r22
     cd0:	b7 22       	and	r11, r23
     cd2:	c8 22       	and	r12, r24
     cd4:	d9 22       	and	r13, r25
     cd6:	89 a1       	ldd	r24, Y+33	; 0x21
     cd8:	9a a1       	ldd	r25, Y+34	; 0x22
     cda:	ab a1       	ldd	r26, Y+35	; 0x23
     cdc:	bc a1       	ldd	r27, Y+36	; 0x24
     cde:	1d 01       	movw	r2, r26
     ce0:	44 24       	eor	r4, r4
     ce2:	55 24       	eor	r5, r5
     ce4:	c8 01       	movw	r24, r16
     ce6:	b7 01       	movw	r22, r14
     ce8:	a6 01       	movw	r20, r12
     cea:	95 01       	movw	r18, r10
     cec:	0e 94 68 32 	call	0x64d0	; 0x64d0 <__mulsi3>
     cf0:	69 96       	adiw	r28, 0x19	; 25
     cf2:	6c af       	std	Y+60, r22	; 0x3c
     cf4:	7d af       	std	Y+61, r23	; 0x3d
     cf6:	8e af       	std	Y+62, r24	; 0x3e
     cf8:	9f af       	std	Y+63, r25	; 0x3f
     cfa:	69 97       	sbiw	r28, 0x19	; 25
     cfc:	c8 01       	movw	r24, r16
     cfe:	b7 01       	movw	r22, r14
     d00:	a2 01       	movw	r20, r4
     d02:	91 01       	movw	r18, r2
     d04:	0e 94 68 32 	call	0x64d0	; 0x64d0 <__mulsi3>
     d08:	3b 01       	movw	r6, r22
     d0a:	4c 01       	movw	r8, r24
     d0c:	6d 96       	adiw	r28, 0x1d	; 29
     d0e:	6c ad       	ldd	r22, Y+60	; 0x3c
     d10:	7d ad       	ldd	r23, Y+61	; 0x3d
     d12:	8e ad       	ldd	r24, Y+62	; 0x3e
     d14:	9f ad       	ldd	r25, Y+63	; 0x3f
     d16:	6d 97       	sbiw	r28, 0x1d	; 29
     d18:	a6 01       	movw	r20, r12
     d1a:	95 01       	movw	r18, r10
     d1c:	0e 94 68 32 	call	0x64d0	; 0x64d0 <__mulsi3>
     d20:	7b 01       	movw	r14, r22
     d22:	8c 01       	movw	r16, r24
     d24:	6d 96       	adiw	r28, 0x1d	; 29
     d26:	6c ad       	ldd	r22, Y+60	; 0x3c
     d28:	7d ad       	ldd	r23, Y+61	; 0x3d
     d2a:	8e ad       	ldd	r24, Y+62	; 0x3e
     d2c:	9f ad       	ldd	r25, Y+63	; 0x3f
     d2e:	6d 97       	sbiw	r28, 0x1d	; 29
     d30:	a2 01       	movw	r20, r4
     d32:	91 01       	movw	r18, r2
     d34:	0e 94 68 32 	call	0x64d0	; 0x64d0 <__mulsi3>
     d38:	5b 01       	movw	r10, r22
     d3a:	6c 01       	movw	r12, r24
     d3c:	a8 01       	movw	r20, r16
     d3e:	97 01       	movw	r18, r14
     d40:	26 0d       	add	r18, r6
     d42:	37 1d       	adc	r19, r7
     d44:	48 1d       	adc	r20, r8
     d46:	59 1d       	adc	r21, r9
     d48:	69 96       	adiw	r28, 0x19	; 25
     d4a:	6c ac       	ldd	r6, Y+60	; 0x3c
     d4c:	7d ac       	ldd	r7, Y+61	; 0x3d
     d4e:	8e ac       	ldd	r8, Y+62	; 0x3e
     d50:	9f ac       	ldd	r9, Y+63	; 0x3f
     d52:	69 97       	sbiw	r28, 0x19	; 25
     d54:	c4 01       	movw	r24, r8
     d56:	aa 27       	eor	r26, r26
     d58:	bb 27       	eor	r27, r27
     d5a:	28 0f       	add	r18, r24
     d5c:	39 1f       	adc	r19, r25
     d5e:	4a 1f       	adc	r20, r26
     d60:	5b 1f       	adc	r21, r27
     d62:	2e 15       	cp	r18, r14
     d64:	3f 05       	cpc	r19, r15
     d66:	40 07       	cpc	r20, r16
     d68:	51 07       	cpc	r21, r17
     d6a:	48 f4       	brcc	.+18     	; 0xd7e <__stack+0x51f>
     d6c:	e1 2c       	mov	r14, r1
     d6e:	f1 2c       	mov	r15, r1
     d70:	61 e0       	ldi	r22, 0x01	; 1
     d72:	06 2f       	mov	r16, r22
     d74:	11 2d       	mov	r17, r1
     d76:	ae 0c       	add	r10, r14
     d78:	bf 1c       	adc	r11, r15
     d7a:	c0 1e       	adc	r12, r16
     d7c:	d1 1e       	adc	r13, r17
     d7e:	ca 01       	movw	r24, r20
     d80:	aa 27       	eor	r26, r26
     d82:	bb 27       	eor	r27, r27
     d84:	bc 01       	movw	r22, r24
     d86:	cd 01       	movw	r24, r26
     d88:	6a 0d       	add	r22, r10
     d8a:	7b 1d       	adc	r23, r11
     d8c:	8c 1d       	adc	r24, r12
     d8e:	9d 1d       	adc	r25, r13
     d90:	69 8c       	ldd	r6, Y+25	; 0x19
     d92:	7a 8c       	ldd	r7, Y+26	; 0x1a
     d94:	8b 8c       	ldd	r8, Y+27	; 0x1b
     d96:	9c 8c       	ldd	r9, Y+28	; 0x1c
     d98:	66 16       	cp	r6, r22
     d9a:	77 06       	cpc	r7, r23
     d9c:	88 06       	cpc	r8, r24
     d9e:	99 06       	cpc	r9, r25
     da0:	40 f1       	brcs	.+80     	; 0xdf2 <__stack+0x593>
     da2:	66 15       	cp	r22, r6
     da4:	77 05       	cpc	r23, r7
     da6:	88 05       	cpc	r24, r8
     da8:	99 05       	cpc	r25, r9
     daa:	09 f0       	breq	.+2      	; 0xdae <__stack+0x54f>
     dac:	43 c0       	rjmp	.+134    	; 0xe34 <__stack+0x5d5>
     dae:	d9 01       	movw	r26, r18
     db0:	99 27       	eor	r25, r25
     db2:	88 27       	eor	r24, r24
     db4:	69 96       	adiw	r28, 0x19	; 25
     db6:	2c ad       	ldd	r18, Y+60	; 0x3c
     db8:	3d ad       	ldd	r19, Y+61	; 0x3d
     dba:	4e ad       	ldd	r20, Y+62	; 0x3e
     dbc:	5f ad       	ldd	r21, Y+63	; 0x3f
     dbe:	69 97       	sbiw	r28, 0x19	; 25
     dc0:	40 70       	andi	r20, 0x00	; 0
     dc2:	50 70       	andi	r21, 0x00	; 0
     dc4:	82 0f       	add	r24, r18
     dc6:	93 1f       	adc	r25, r19
     dc8:	a4 1f       	adc	r26, r20
     dca:	b5 1f       	adc	r27, r21
     dcc:	2d a5       	ldd	r18, Y+45	; 0x2d
     dce:	3e a5       	ldd	r19, Y+46	; 0x2e
     dd0:	4f a5       	ldd	r20, Y+47	; 0x2f
     dd2:	58 a9       	ldd	r21, Y+48	; 0x30
     dd4:	6e 96       	adiw	r28, 0x1e	; 30
     dd6:	0f ac       	ldd	r0, Y+63	; 0x3f
     dd8:	6e 97       	sbiw	r28, 0x1e	; 30
     dda:	04 c0       	rjmp	.+8      	; 0xde4 <__stack+0x585>
     ddc:	22 0f       	add	r18, r18
     dde:	33 1f       	adc	r19, r19
     de0:	44 1f       	adc	r20, r20
     de2:	55 1f       	adc	r21, r21
     de4:	0a 94       	dec	r0
     de6:	d2 f7       	brpl	.-12     	; 0xddc <__stack+0x57d>
     de8:	28 17       	cp	r18, r24
     dea:	39 07       	cpc	r19, r25
     dec:	4a 07       	cpc	r20, r26
     dee:	5b 07       	cpc	r21, r27
     df0:	08 f5       	brcc	.+66     	; 0xe34 <__stack+0x5d5>
     df2:	09 a9       	ldd	r16, Y+49	; 0x31
     df4:	1a a9       	ldd	r17, Y+50	; 0x32
     df6:	2b a9       	ldd	r18, Y+51	; 0x33
     df8:	3c a9       	ldd	r19, Y+52	; 0x34
     dfa:	01 50       	subi	r16, 0x01	; 1
     dfc:	10 40       	sbci	r17, 0x00	; 0
     dfe:	20 40       	sbci	r18, 0x00	; 0
     e00:	30 40       	sbci	r19, 0x00	; 0
     e02:	09 ab       	std	Y+49, r16	; 0x31
     e04:	1a ab       	std	Y+50, r17	; 0x32
     e06:	2b ab       	std	Y+51, r18	; 0x33
     e08:	3c ab       	std	Y+52, r19	; 0x34
     e0a:	14 c0       	rjmp	.+40     	; 0xe34 <__stack+0x5d5>
     e0c:	66 24       	eor	r6, r6
     e0e:	77 24       	eor	r7, r7
     e10:	43 01       	movw	r8, r6
     e12:	21 e0       	ldi	r18, 0x01	; 1
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	40 e0       	ldi	r20, 0x00	; 0
     e18:	50 e0       	ldi	r21, 0x00	; 0
     e1a:	29 ab       	std	Y+49, r18	; 0x31
     e1c:	3a ab       	std	Y+50, r19	; 0x32
     e1e:	4b ab       	std	Y+51, r20	; 0x33
     e20:	5c ab       	std	Y+52, r21	; 0x34
     e22:	0b c0       	rjmp	.+22     	; 0xe3a <__stack+0x5db>
     e24:	66 24       	eor	r6, r6
     e26:	77 24       	eor	r7, r7
     e28:	43 01       	movw	r8, r6
     e2a:	19 aa       	std	Y+49, r1	; 0x31
     e2c:	1a aa       	std	Y+50, r1	; 0x32
     e2e:	1b aa       	std	Y+51, r1	; 0x33
     e30:	1c aa       	std	Y+52, r1	; 0x34
     e32:	03 c0       	rjmp	.+6      	; 0xe3a <__stack+0x5db>
     e34:	66 24       	eor	r6, r6
     e36:	77 24       	eor	r7, r7
     e38:	43 01       	movw	r8, r6
     e3a:	fe 01       	movw	r30, r28
     e3c:	71 96       	adiw	r30, 0x11	; 17
     e3e:	88 e0       	ldi	r24, 0x08	; 8
     e40:	df 01       	movw	r26, r30
     e42:	1d 92       	st	X+, r1
     e44:	8a 95       	dec	r24
     e46:	e9 f7       	brne	.-6      	; 0xe42 <__stack+0x5e3>
     e48:	a9 a8       	ldd	r10, Y+49	; 0x31
     e4a:	ba a8       	ldd	r11, Y+50	; 0x32
     e4c:	cb a8       	ldd	r12, Y+51	; 0x33
     e4e:	dc a8       	ldd	r13, Y+52	; 0x34
     e50:	a9 8a       	std	Y+17, r10	; 0x11
     e52:	ba 8a       	std	Y+18, r11	; 0x12
     e54:	cb 8a       	std	Y+19, r12	; 0x13
     e56:	dc 8a       	std	Y+20, r13	; 0x14
     e58:	6d 8a       	std	Y+21, r6	; 0x15
     e5a:	7e 8a       	std	Y+22, r7	; 0x16
     e5c:	8f 8a       	std	Y+23, r8	; 0x17
     e5e:	98 8e       	std	Y+24, r9	; 0x18
     e60:	29 a9       	ldd	r18, Y+49	; 0x31
     e62:	3a 89       	ldd	r19, Y+18	; 0x12
     e64:	4b 89       	ldd	r20, Y+19	; 0x13
     e66:	5c 89       	ldd	r21, Y+20	; 0x14
     e68:	66 2d       	mov	r22, r6
     e6a:	7e 89       	ldd	r23, Y+22	; 0x16
     e6c:	8f 89       	ldd	r24, Y+23	; 0x17
     e6e:	98 8d       	ldd	r25, Y+24	; 0x18
     e70:	c2 5a       	subi	r28, 0xA2	; 162
     e72:	df 4f       	sbci	r29, 0xFF	; 255
     e74:	e2 e1       	ldi	r30, 0x12	; 18
     e76:	0c 94 a3 32 	jmp	0x6546	; 0x6546 <__epilogue_restores__>

00000e7a <__umoddi3>:
     e7a:	ab e5       	ldi	r26, 0x5B	; 91
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	e3 e4       	ldi	r30, 0x43	; 67
     e80:	f7 e0       	ldi	r31, 0x07	; 7
     e82:	0c 94 87 32 	jmp	0x650e	; 0x650e <__prologue_saves__>
     e86:	a8 e0       	ldi	r26, 0x08	; 8
     e88:	4e 01       	movw	r8, r28
     e8a:	08 94       	sec
     e8c:	81 1c       	adc	r8, r1
     e8e:	91 1c       	adc	r9, r1
     e90:	f4 01       	movw	r30, r8
     e92:	6a 2e       	mov	r6, r26
     e94:	11 92       	st	Z+, r1
     e96:	6a 94       	dec	r6
     e98:	e9 f7       	brne	.-6      	; 0xe94 <__umoddi3+0x1a>
     e9a:	29 83       	std	Y+1, r18	; 0x01
     e9c:	3a 83       	std	Y+2, r19	; 0x02
     e9e:	4b 83       	std	Y+3, r20	; 0x03
     ea0:	5c 83       	std	Y+4, r21	; 0x04
     ea2:	6d 83       	std	Y+5, r22	; 0x05
     ea4:	7e 83       	std	Y+6, r23	; 0x06
     ea6:	8f 83       	std	Y+7, r24	; 0x07
     ea8:	98 87       	std	Y+8, r25	; 0x08
     eaa:	ce 01       	movw	r24, r28
     eac:	09 96       	adiw	r24, 0x09	; 9
     eae:	fc 01       	movw	r30, r24
     eb0:	11 92       	st	Z+, r1
     eb2:	aa 95       	dec	r26
     eb4:	e9 f7       	brne	.-6      	; 0xeb0 <__umoddi3+0x36>
     eb6:	a9 86       	std	Y+9, r10	; 0x09
     eb8:	ba 86       	std	Y+10, r11	; 0x0a
     eba:	cb 86       	std	Y+11, r12	; 0x0b
     ebc:	dc 86       	std	Y+12, r13	; 0x0c
     ebe:	ed 86       	std	Y+13, r14	; 0x0d
     ec0:	fe 86       	std	Y+14, r15	; 0x0e
     ec2:	0f 87       	std	Y+15, r16	; 0x0f
     ec4:	18 8b       	std	Y+16, r17	; 0x10
     ec6:	29 84       	ldd	r2, Y+9	; 0x09
     ec8:	3a 84       	ldd	r3, Y+10	; 0x0a
     eca:	4b 84       	ldd	r4, Y+11	; 0x0b
     ecc:	5c 84       	ldd	r5, Y+12	; 0x0c
     ece:	ad 84       	ldd	r10, Y+13	; 0x0d
     ed0:	be 84       	ldd	r11, Y+14	; 0x0e
     ed2:	cf 84       	ldd	r12, Y+15	; 0x0f
     ed4:	d8 88       	ldd	r13, Y+16	; 0x10
     ed6:	29 81       	ldd	r18, Y+1	; 0x01
     ed8:	3a 81       	ldd	r19, Y+2	; 0x02
     eda:	4b 81       	ldd	r20, Y+3	; 0x03
     edc:	5c 81       	ldd	r21, Y+4	; 0x04
     ede:	69 96       	adiw	r28, 0x19	; 25
     ee0:	2f af       	std	Y+63, r18	; 0x3f
     ee2:	69 97       	sbiw	r28, 0x19	; 25
     ee4:	6a 96       	adiw	r28, 0x1a	; 26
     ee6:	3f af       	std	Y+63, r19	; 0x3f
     ee8:	6a 97       	sbiw	r28, 0x1a	; 26
     eea:	6b 96       	adiw	r28, 0x1b	; 27
     eec:	4f af       	std	Y+63, r20	; 0x3f
     eee:	6b 97       	sbiw	r28, 0x1b	; 27
     ef0:	6c 96       	adiw	r28, 0x1c	; 28
     ef2:	5f af       	std	Y+63, r21	; 0x3f
     ef4:	6c 97       	sbiw	r28, 0x1c	; 28
     ef6:	6c 96       	adiw	r28, 0x1c	; 28
     ef8:	6c ac       	ldd	r6, Y+60	; 0x3c
     efa:	7d ac       	ldd	r7, Y+61	; 0x3d
     efc:	8e ac       	ldd	r8, Y+62	; 0x3e
     efe:	9f ac       	ldd	r9, Y+63	; 0x3f
     f00:	6c 97       	sbiw	r28, 0x1c	; 28
     f02:	69 aa       	std	Y+49, r6	; 0x31
     f04:	7a aa       	std	Y+50, r7	; 0x32
     f06:	8b aa       	std	Y+51, r8	; 0x33
     f08:	9c aa       	std	Y+52, r9	; 0x34
     f0a:	6d 81       	ldd	r22, Y+5	; 0x05
     f0c:	7e 81       	ldd	r23, Y+6	; 0x06
     f0e:	8f 81       	ldd	r24, Y+7	; 0x07
     f10:	98 85       	ldd	r25, Y+8	; 0x08
     f12:	3b 01       	movw	r6, r22
     f14:	4c 01       	movw	r8, r24
     f16:	6d aa       	std	Y+53, r6	; 0x35
     f18:	7e aa       	std	Y+54, r7	; 0x36
     f1a:	8f aa       	std	Y+55, r8	; 0x37
     f1c:	98 ae       	std	Y+56, r9	; 0x38
     f1e:	a1 14       	cp	r10, r1
     f20:	b1 04       	cpc	r11, r1
     f22:	c1 04       	cpc	r12, r1
     f24:	d1 04       	cpc	r13, r1
     f26:	09 f0       	breq	.+2      	; 0xf2a <__umoddi3+0xb0>
     f28:	04 c3       	rjmp	.+1544   	; 0x1532 <__umoddi3+0x6b8>
     f2a:	62 14       	cp	r6, r2
     f2c:	73 04       	cpc	r7, r3
     f2e:	84 04       	cpc	r8, r4
     f30:	95 04       	cpc	r9, r5
     f32:	08 f0       	brcs	.+2      	; 0xf36 <__umoddi3+0xbc>
     f34:	00 c1       	rjmp	.+512    	; 0x1136 <__umoddi3+0x2bc>
     f36:	00 e0       	ldi	r16, 0x00	; 0
     f38:	20 16       	cp	r2, r16
     f3a:	00 e0       	ldi	r16, 0x00	; 0
     f3c:	30 06       	cpc	r3, r16
     f3e:	01 e0       	ldi	r16, 0x01	; 1
     f40:	40 06       	cpc	r4, r16
     f42:	00 e0       	ldi	r16, 0x00	; 0
     f44:	50 06       	cpc	r5, r16
     f46:	88 f4       	brcc	.+34     	; 0xf6a <__umoddi3+0xf0>
     f48:	1f ef       	ldi	r17, 0xFF	; 255
     f4a:	21 16       	cp	r2, r17
     f4c:	31 04       	cpc	r3, r1
     f4e:	41 04       	cpc	r4, r1
     f50:	51 04       	cpc	r5, r1
     f52:	39 f0       	breq	.+14     	; 0xf62 <__umoddi3+0xe8>
     f54:	30 f0       	brcs	.+12     	; 0xf62 <__umoddi3+0xe8>
     f56:	88 e0       	ldi	r24, 0x08	; 8
     f58:	e8 2e       	mov	r14, r24
     f5a:	f1 2c       	mov	r15, r1
     f5c:	01 2d       	mov	r16, r1
     f5e:	11 2d       	mov	r17, r1
     f60:	18 c0       	rjmp	.+48     	; 0xf92 <__umoddi3+0x118>
     f62:	ee 24       	eor	r14, r14
     f64:	ff 24       	eor	r15, r15
     f66:	87 01       	movw	r16, r14
     f68:	14 c0       	rjmp	.+40     	; 0xf92 <__umoddi3+0x118>
     f6a:	40 e0       	ldi	r20, 0x00	; 0
     f6c:	24 16       	cp	r2, r20
     f6e:	40 e0       	ldi	r20, 0x00	; 0
     f70:	34 06       	cpc	r3, r20
     f72:	40 e0       	ldi	r20, 0x00	; 0
     f74:	44 06       	cpc	r4, r20
     f76:	41 e0       	ldi	r20, 0x01	; 1
     f78:	54 06       	cpc	r5, r20
     f7a:	30 f0       	brcs	.+12     	; 0xf88 <__umoddi3+0x10e>
     f7c:	b8 e1       	ldi	r27, 0x18	; 24
     f7e:	eb 2e       	mov	r14, r27
     f80:	f1 2c       	mov	r15, r1
     f82:	01 2d       	mov	r16, r1
     f84:	11 2d       	mov	r17, r1
     f86:	05 c0       	rjmp	.+10     	; 0xf92 <__umoddi3+0x118>
     f88:	a0 e1       	ldi	r26, 0x10	; 16
     f8a:	ea 2e       	mov	r14, r26
     f8c:	f1 2c       	mov	r15, r1
     f8e:	01 2d       	mov	r16, r1
     f90:	11 2d       	mov	r17, r1
     f92:	d2 01       	movw	r26, r4
     f94:	c1 01       	movw	r24, r2
     f96:	0e 2c       	mov	r0, r14
     f98:	04 c0       	rjmp	.+8      	; 0xfa2 <__umoddi3+0x128>
     f9a:	b6 95       	lsr	r27
     f9c:	a7 95       	ror	r26
     f9e:	97 95       	ror	r25
     fa0:	87 95       	ror	r24
     fa2:	0a 94       	dec	r0
     fa4:	d2 f7       	brpl	.-12     	; 0xf9a <__umoddi3+0x120>
     fa6:	8d 5a       	subi	r24, 0xAD	; 173
     fa8:	9c 4f       	sbci	r25, 0xFC	; 252
     faa:	dc 01       	movw	r26, r24
     fac:	2c 91       	ld	r18, X
     fae:	80 e2       	ldi	r24, 0x20	; 32
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	a0 e0       	ldi	r26, 0x00	; 0
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	8e 19       	sub	r24, r14
     fb8:	9f 09       	sbc	r25, r15
     fba:	a0 0b       	sbc	r26, r16
     fbc:	b1 0b       	sbc	r27, r17
     fbe:	5c 01       	movw	r10, r24
     fc0:	6d 01       	movw	r12, r26
     fc2:	a2 1a       	sub	r10, r18
     fc4:	b1 08       	sbc	r11, r1
     fc6:	c1 08       	sbc	r12, r1
     fc8:	d1 08       	sbc	r13, r1
     fca:	a9 ae       	std	Y+57, r10	; 0x39
     fcc:	ba ae       	std	Y+58, r11	; 0x3a
     fce:	cb ae       	std	Y+59, r12	; 0x3b
     fd0:	dc ae       	std	Y+60, r13	; 0x3c
     fd2:	a1 14       	cp	r10, r1
     fd4:	b1 04       	cpc	r11, r1
     fd6:	c1 04       	cpc	r12, r1
     fd8:	d1 04       	cpc	r13, r1
     fda:	09 f4       	brne	.+2      	; 0xfde <__umoddi3+0x164>
     fdc:	3f c0       	rjmp	.+126    	; 0x105c <__umoddi3+0x1e2>
     fde:	69 ad       	ldd	r22, Y+57	; 0x39
     fe0:	06 2e       	mov	r0, r22
     fe2:	04 c0       	rjmp	.+8      	; 0xfec <__umoddi3+0x172>
     fe4:	22 0c       	add	r2, r2
     fe6:	33 1c       	adc	r3, r3
     fe8:	44 1c       	adc	r4, r4
     fea:	55 1c       	adc	r5, r5
     fec:	0a 94       	dec	r0
     fee:	d2 f7       	brpl	.-12     	; 0xfe4 <__umoddi3+0x16a>
     ff0:	a4 01       	movw	r20, r8
     ff2:	93 01       	movw	r18, r6
     ff4:	06 2e       	mov	r0, r22
     ff6:	04 c0       	rjmp	.+8      	; 0x1000 <__umoddi3+0x186>
     ff8:	22 0f       	add	r18, r18
     ffa:	33 1f       	adc	r19, r19
     ffc:	44 1f       	adc	r20, r20
     ffe:	55 1f       	adc	r21, r21
    1000:	0a 94       	dec	r0
    1002:	d2 f7       	brpl	.-12     	; 0xff8 <__umoddi3+0x17e>
    1004:	80 e2       	ldi	r24, 0x20	; 32
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	8a 19       	sub	r24, r10
    100a:	9b 09       	sbc	r25, r11
    100c:	6c 96       	adiw	r28, 0x1c	; 28
    100e:	cc ac       	ldd	r12, Y+60	; 0x3c
    1010:	dd ac       	ldd	r13, Y+61	; 0x3d
    1012:	ee ac       	ldd	r14, Y+62	; 0x3e
    1014:	ff ac       	ldd	r15, Y+63	; 0x3f
    1016:	6c 97       	sbiw	r28, 0x1c	; 28
    1018:	04 c0       	rjmp	.+8      	; 0x1022 <__umoddi3+0x1a8>
    101a:	f6 94       	lsr	r15
    101c:	e7 94       	ror	r14
    101e:	d7 94       	ror	r13
    1020:	c7 94       	ror	r12
    1022:	8a 95       	dec	r24
    1024:	d2 f7       	brpl	.-12     	; 0x101a <__umoddi3+0x1a0>
    1026:	87 01       	movw	r16, r14
    1028:	76 01       	movw	r14, r12
    102a:	e2 2a       	or	r14, r18
    102c:	f3 2a       	or	r15, r19
    102e:	04 2b       	or	r16, r20
    1030:	15 2b       	or	r17, r21
    1032:	ed aa       	std	Y+53, r14	; 0x35
    1034:	fe aa       	std	Y+54, r15	; 0x36
    1036:	0f ab       	std	Y+55, r16	; 0x37
    1038:	18 af       	std	Y+56, r17	; 0x38
    103a:	6c 96       	adiw	r28, 0x1c	; 28
    103c:	8c ad       	ldd	r24, Y+60	; 0x3c
    103e:	9d ad       	ldd	r25, Y+61	; 0x3d
    1040:	ae ad       	ldd	r26, Y+62	; 0x3e
    1042:	bf ad       	ldd	r27, Y+63	; 0x3f
    1044:	6c 97       	sbiw	r28, 0x1c	; 28
    1046:	04 c0       	rjmp	.+8      	; 0x1050 <__umoddi3+0x1d6>
    1048:	88 0f       	add	r24, r24
    104a:	99 1f       	adc	r25, r25
    104c:	aa 1f       	adc	r26, r26
    104e:	bb 1f       	adc	r27, r27
    1050:	6a 95       	dec	r22
    1052:	d2 f7       	brpl	.-12     	; 0x1048 <__umoddi3+0x1ce>
    1054:	89 ab       	std	Y+49, r24	; 0x31
    1056:	9a ab       	std	Y+50, r25	; 0x32
    1058:	ab ab       	std	Y+51, r26	; 0x33
    105a:	bc ab       	std	Y+52, r27	; 0x34
    105c:	32 01       	movw	r6, r4
    105e:	88 24       	eor	r8, r8
    1060:	99 24       	eor	r9, r9
    1062:	b2 01       	movw	r22, r4
    1064:	a1 01       	movw	r20, r2
    1066:	60 70       	andi	r22, 0x00	; 0
    1068:	70 70       	andi	r23, 0x00	; 0
    106a:	21 96       	adiw	r28, 0x01	; 1
    106c:	4c af       	std	Y+60, r20	; 0x3c
    106e:	5d af       	std	Y+61, r21	; 0x3d
    1070:	6e af       	std	Y+62, r22	; 0x3e
    1072:	7f af       	std	Y+63, r23	; 0x3f
    1074:	21 97       	sbiw	r28, 0x01	; 1
    1076:	6d a9       	ldd	r22, Y+53	; 0x35
    1078:	7e a9       	ldd	r23, Y+54	; 0x36
    107a:	8f a9       	ldd	r24, Y+55	; 0x37
    107c:	98 ad       	ldd	r25, Y+56	; 0x38
    107e:	a4 01       	movw	r20, r8
    1080:	93 01       	movw	r18, r6
    1082:	0e 94 2b 32 	call	0x6456	; 0x6456 <__udivmodsi4>
    1086:	7b 01       	movw	r14, r22
    1088:	8c 01       	movw	r16, r24
    108a:	6d a9       	ldd	r22, Y+53	; 0x35
    108c:	7e a9       	ldd	r23, Y+54	; 0x36
    108e:	8f a9       	ldd	r24, Y+55	; 0x37
    1090:	98 ad       	ldd	r25, Y+56	; 0x38
    1092:	a4 01       	movw	r20, r8
    1094:	93 01       	movw	r18, r6
    1096:	0e 94 2b 32 	call	0x6456	; 0x6456 <__udivmodsi4>
    109a:	ca 01       	movw	r24, r20
    109c:	b9 01       	movw	r22, r18
    109e:	21 96       	adiw	r28, 0x01	; 1
    10a0:	2c ad       	ldd	r18, Y+60	; 0x3c
    10a2:	3d ad       	ldd	r19, Y+61	; 0x3d
    10a4:	4e ad       	ldd	r20, Y+62	; 0x3e
    10a6:	5f ad       	ldd	r21, Y+63	; 0x3f
    10a8:	21 97       	sbiw	r28, 0x01	; 1
    10aa:	0e 94 68 32 	call	0x64d0	; 0x64d0 <__mulsi3>
    10ae:	9b 01       	movw	r18, r22
    10b0:	ac 01       	movw	r20, r24
    10b2:	87 01       	movw	r16, r14
    10b4:	ff 24       	eor	r15, r15
    10b6:	ee 24       	eor	r14, r14
    10b8:	a9 a8       	ldd	r10, Y+49	; 0x31
    10ba:	ba a8       	ldd	r11, Y+50	; 0x32
    10bc:	cb a8       	ldd	r12, Y+51	; 0x33
    10be:	dc a8       	ldd	r13, Y+52	; 0x34
    10c0:	c6 01       	movw	r24, r12
    10c2:	aa 27       	eor	r26, r26
    10c4:	bb 27       	eor	r27, r27
    10c6:	57 01       	movw	r10, r14
    10c8:	68 01       	movw	r12, r16
    10ca:	a8 2a       	or	r10, r24
    10cc:	b9 2a       	or	r11, r25
    10ce:	ca 2a       	or	r12, r26
    10d0:	db 2a       	or	r13, r27
    10d2:	a2 16       	cp	r10, r18
    10d4:	b3 06       	cpc	r11, r19
    10d6:	c4 06       	cpc	r12, r20
    10d8:	d5 06       	cpc	r13, r21
    10da:	90 f4       	brcc	.+36     	; 0x1100 <__umoddi3+0x286>
    10dc:	a2 0c       	add	r10, r2
    10de:	b3 1c       	adc	r11, r3
    10e0:	c4 1c       	adc	r12, r4
    10e2:	d5 1c       	adc	r13, r5
    10e4:	a2 14       	cp	r10, r2
    10e6:	b3 04       	cpc	r11, r3
    10e8:	c4 04       	cpc	r12, r4
    10ea:	d5 04       	cpc	r13, r5
    10ec:	48 f0       	brcs	.+18     	; 0x1100 <__umoddi3+0x286>
    10ee:	a2 16       	cp	r10, r18
    10f0:	b3 06       	cpc	r11, r19
    10f2:	c4 06       	cpc	r12, r20
    10f4:	d5 06       	cpc	r13, r21
    10f6:	20 f4       	brcc	.+8      	; 0x1100 <__umoddi3+0x286>
    10f8:	a2 0c       	add	r10, r2
    10fa:	b3 1c       	adc	r11, r3
    10fc:	c4 1c       	adc	r12, r4
    10fe:	d5 1c       	adc	r13, r5
    1100:	a2 1a       	sub	r10, r18
    1102:	b3 0a       	sbc	r11, r19
    1104:	c4 0a       	sbc	r12, r20
    1106:	d5 0a       	sbc	r13, r21
    1108:	c6 01       	movw	r24, r12
    110a:	b5 01       	movw	r22, r10
    110c:	a4 01       	movw	r20, r8
    110e:	93 01       	movw	r18, r6
    1110:	0e 94 2b 32 	call	0x6456	; 0x6456 <__udivmodsi4>
    1114:	7b 01       	movw	r14, r22
    1116:	8c 01       	movw	r16, r24
    1118:	c6 01       	movw	r24, r12
    111a:	b5 01       	movw	r22, r10
    111c:	a4 01       	movw	r20, r8
    111e:	93 01       	movw	r18, r6
    1120:	0e 94 2b 32 	call	0x6456	; 0x6456 <__udivmodsi4>
    1124:	ca 01       	movw	r24, r20
    1126:	b9 01       	movw	r22, r18
    1128:	21 96       	adiw	r28, 0x01	; 1
    112a:	2c ad       	ldd	r18, Y+60	; 0x3c
    112c:	3d ad       	ldd	r19, Y+61	; 0x3d
    112e:	4e ad       	ldd	r20, Y+62	; 0x3e
    1130:	5f ad       	ldd	r21, Y+63	; 0x3f
    1132:	21 97       	sbiw	r28, 0x01	; 1
    1134:	ba c1       	rjmp	.+884    	; 0x14aa <__umoddi3+0x630>
    1136:	21 14       	cp	r2, r1
    1138:	31 04       	cpc	r3, r1
    113a:	41 04       	cpc	r4, r1
    113c:	51 04       	cpc	r5, r1
    113e:	71 f4       	brne	.+28     	; 0x115c <__umoddi3+0x2e2>
    1140:	61 e0       	ldi	r22, 0x01	; 1
    1142:	70 e0       	ldi	r23, 0x00	; 0
    1144:	80 e0       	ldi	r24, 0x00	; 0
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	20 e0       	ldi	r18, 0x00	; 0
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	40 e0       	ldi	r20, 0x00	; 0
    114e:	50 e0       	ldi	r21, 0x00	; 0
    1150:	0e 94 2b 32 	call	0x6456	; 0x6456 <__udivmodsi4>
    1154:	c9 01       	movw	r24, r18
    1156:	da 01       	movw	r26, r20
    1158:	1c 01       	movw	r2, r24
    115a:	2d 01       	movw	r4, r26
    115c:	00 e0       	ldi	r16, 0x00	; 0
    115e:	20 16       	cp	r2, r16
    1160:	00 e0       	ldi	r16, 0x00	; 0
    1162:	30 06       	cpc	r3, r16
    1164:	01 e0       	ldi	r16, 0x01	; 1
    1166:	40 06       	cpc	r4, r16
    1168:	00 e0       	ldi	r16, 0x00	; 0
    116a:	50 06       	cpc	r5, r16
    116c:	88 f4       	brcc	.+34     	; 0x1190 <__umoddi3+0x316>
    116e:	1f ef       	ldi	r17, 0xFF	; 255
    1170:	21 16       	cp	r2, r17
    1172:	31 04       	cpc	r3, r1
    1174:	41 04       	cpc	r4, r1
    1176:	51 04       	cpc	r5, r1
    1178:	39 f0       	breq	.+14     	; 0x1188 <__umoddi3+0x30e>
    117a:	30 f0       	brcs	.+12     	; 0x1188 <__umoddi3+0x30e>
    117c:	68 e0       	ldi	r22, 0x08	; 8
    117e:	e6 2e       	mov	r14, r22
    1180:	f1 2c       	mov	r15, r1
    1182:	01 2d       	mov	r16, r1
    1184:	11 2d       	mov	r17, r1
    1186:	18 c0       	rjmp	.+48     	; 0x11b8 <__umoddi3+0x33e>
    1188:	ee 24       	eor	r14, r14
    118a:	ff 24       	eor	r15, r15
    118c:	87 01       	movw	r16, r14
    118e:	14 c0       	rjmp	.+40     	; 0x11b8 <__umoddi3+0x33e>
    1190:	40 e0       	ldi	r20, 0x00	; 0
    1192:	24 16       	cp	r2, r20
    1194:	40 e0       	ldi	r20, 0x00	; 0
    1196:	34 06       	cpc	r3, r20
    1198:	40 e0       	ldi	r20, 0x00	; 0
    119a:	44 06       	cpc	r4, r20
    119c:	41 e0       	ldi	r20, 0x01	; 1
    119e:	54 06       	cpc	r5, r20
    11a0:	30 f0       	brcs	.+12     	; 0x11ae <__umoddi3+0x334>
    11a2:	58 e1       	ldi	r21, 0x18	; 24
    11a4:	e5 2e       	mov	r14, r21
    11a6:	f1 2c       	mov	r15, r1
    11a8:	01 2d       	mov	r16, r1
    11aa:	11 2d       	mov	r17, r1
    11ac:	05 c0       	rjmp	.+10     	; 0x11b8 <__umoddi3+0x33e>
    11ae:	40 e1       	ldi	r20, 0x10	; 16
    11b0:	e4 2e       	mov	r14, r20
    11b2:	f1 2c       	mov	r15, r1
    11b4:	01 2d       	mov	r16, r1
    11b6:	11 2d       	mov	r17, r1
    11b8:	d2 01       	movw	r26, r4
    11ba:	c1 01       	movw	r24, r2
    11bc:	0e 2c       	mov	r0, r14
    11be:	04 c0       	rjmp	.+8      	; 0x11c8 <__umoddi3+0x34e>
    11c0:	b6 95       	lsr	r27
    11c2:	a7 95       	ror	r26
    11c4:	97 95       	ror	r25
    11c6:	87 95       	ror	r24
    11c8:	0a 94       	dec	r0
    11ca:	d2 f7       	brpl	.-12     	; 0x11c0 <__umoddi3+0x346>
    11cc:	8d 5a       	subi	r24, 0xAD	; 173
    11ce:	9c 4f       	sbci	r25, 0xFC	; 252
    11d0:	dc 01       	movw	r26, r24
    11d2:	2c 91       	ld	r18, X
    11d4:	30 e2       	ldi	r19, 0x20	; 32
    11d6:	a3 2e       	mov	r10, r19
    11d8:	b1 2c       	mov	r11, r1
    11da:	c1 2c       	mov	r12, r1
    11dc:	d1 2c       	mov	r13, r1
    11de:	d6 01       	movw	r26, r12
    11e0:	c5 01       	movw	r24, r10
    11e2:	8e 19       	sub	r24, r14
    11e4:	9f 09       	sbc	r25, r15
    11e6:	a0 0b       	sbc	r26, r16
    11e8:	b1 0b       	sbc	r27, r17
    11ea:	7c 01       	movw	r14, r24
    11ec:	8d 01       	movw	r16, r26
    11ee:	e2 1a       	sub	r14, r18
    11f0:	f1 08       	sbc	r15, r1
    11f2:	01 09       	sbc	r16, r1
    11f4:	11 09       	sbc	r17, r1
    11f6:	e9 ae       	std	Y+57, r14	; 0x39
    11f8:	fa ae       	std	Y+58, r15	; 0x3a
    11fa:	0b af       	std	Y+59, r16	; 0x3b
    11fc:	1c af       	std	Y+60, r17	; 0x3c
    11fe:	e1 14       	cp	r14, r1
    1200:	f1 04       	cpc	r15, r1
    1202:	01 05       	cpc	r16, r1
    1204:	11 05       	cpc	r17, r1
    1206:	39 f4       	brne	.+14     	; 0x1216 <__umoddi3+0x39c>
    1208:	64 01       	movw	r12, r8
    120a:	53 01       	movw	r10, r6
    120c:	a2 18       	sub	r10, r2
    120e:	b3 08       	sbc	r11, r3
    1210:	c4 08       	sbc	r12, r4
    1212:	d5 08       	sbc	r13, r5
    1214:	e2 c0       	rjmp	.+452    	; 0x13da <__umoddi3+0x560>
    1216:	f9 ac       	ldd	r15, Y+57	; 0x39
    1218:	68 96       	adiw	r28, 0x18	; 24
    121a:	ff ae       	std	Y+63, r15	; 0x3f
    121c:	68 97       	sbiw	r28, 0x18	; 24
    121e:	0f 2c       	mov	r0, r15
    1220:	04 c0       	rjmp	.+8      	; 0x122a <__umoddi3+0x3b0>
    1222:	22 0c       	add	r2, r2
    1224:	33 1c       	adc	r3, r3
    1226:	44 1c       	adc	r4, r4
    1228:	55 1c       	adc	r5, r5
    122a:	0a 94       	dec	r0
    122c:	d2 f7       	brpl	.-12     	; 0x1222 <__umoddi3+0x3a8>
    122e:	8a 2d       	mov	r24, r10
    1230:	8f 19       	sub	r24, r15
    1232:	64 01       	movw	r12, r8
    1234:	53 01       	movw	r10, r6
    1236:	08 2e       	mov	r0, r24
    1238:	04 c0       	rjmp	.+8      	; 0x1242 <__umoddi3+0x3c8>
    123a:	d6 94       	lsr	r13
    123c:	c7 94       	ror	r12
    123e:	b7 94       	ror	r11
    1240:	a7 94       	ror	r10
    1242:	0a 94       	dec	r0
    1244:	d2 f7       	brpl	.-12     	; 0x123a <__umoddi3+0x3c0>
    1246:	a4 01       	movw	r20, r8
    1248:	93 01       	movw	r18, r6
    124a:	04 c0       	rjmp	.+8      	; 0x1254 <__umoddi3+0x3da>
    124c:	22 0f       	add	r18, r18
    124e:	33 1f       	adc	r19, r19
    1250:	44 1f       	adc	r20, r20
    1252:	55 1f       	adc	r21, r21
    1254:	fa 94       	dec	r15
    1256:	d2 f7       	brpl	.-12     	; 0x124c <__umoddi3+0x3d2>
    1258:	6c 96       	adiw	r28, 0x1c	; 28
    125a:	6c ac       	ldd	r6, Y+60	; 0x3c
    125c:	7d ac       	ldd	r7, Y+61	; 0x3d
    125e:	8e ac       	ldd	r8, Y+62	; 0x3e
    1260:	9f ac       	ldd	r9, Y+63	; 0x3f
    1262:	6c 97       	sbiw	r28, 0x1c	; 28
    1264:	04 c0       	rjmp	.+8      	; 0x126e <__umoddi3+0x3f4>
    1266:	96 94       	lsr	r9
    1268:	87 94       	ror	r8
    126a:	77 94       	ror	r7
    126c:	67 94       	ror	r6
    126e:	8a 95       	dec	r24
    1270:	d2 f7       	brpl	.-12     	; 0x1266 <__umoddi3+0x3ec>
    1272:	84 01       	movw	r16, r8
    1274:	73 01       	movw	r14, r6
    1276:	e2 2a       	or	r14, r18
    1278:	f3 2a       	or	r15, r19
    127a:	04 2b       	or	r16, r20
    127c:	15 2b       	or	r17, r21
    127e:	ed a6       	std	Y+45, r14	; 0x2d
    1280:	fe a6       	std	Y+46, r15	; 0x2e
    1282:	0f a7       	std	Y+47, r16	; 0x2f
    1284:	18 ab       	std	Y+48, r17	; 0x30
    1286:	32 01       	movw	r6, r4
    1288:	88 24       	eor	r8, r8
    128a:	99 24       	eor	r9, r9
    128c:	b2 01       	movw	r22, r4
    128e:	a1 01       	movw	r20, r2
    1290:	60 70       	andi	r22, 0x00	; 0
    1292:	70 70       	andi	r23, 0x00	; 0
    1294:	25 96       	adiw	r28, 0x05	; 5
    1296:	4c af       	std	Y+60, r20	; 0x3c
    1298:	5d af       	std	Y+61, r21	; 0x3d
    129a:	6e af       	std	Y+62, r22	; 0x3e
    129c:	7f af       	std	Y+63, r23	; 0x3f
    129e:	25 97       	sbiw	r28, 0x05	; 5
    12a0:	c6 01       	movw	r24, r12
    12a2:	b5 01       	movw	r22, r10
    12a4:	a4 01       	movw	r20, r8
    12a6:	93 01       	movw	r18, r6
    12a8:	0e 94 2b 32 	call	0x6456	; 0x6456 <__udivmodsi4>
    12ac:	7b 01       	movw	r14, r22
    12ae:	8c 01       	movw	r16, r24
    12b0:	c6 01       	movw	r24, r12
    12b2:	b5 01       	movw	r22, r10
    12b4:	a4 01       	movw	r20, r8
    12b6:	93 01       	movw	r18, r6
    12b8:	0e 94 2b 32 	call	0x6456	; 0x6456 <__udivmodsi4>
    12bc:	ca 01       	movw	r24, r20
    12be:	b9 01       	movw	r22, r18
    12c0:	25 96       	adiw	r28, 0x05	; 5
    12c2:	2c ad       	ldd	r18, Y+60	; 0x3c
    12c4:	3d ad       	ldd	r19, Y+61	; 0x3d
    12c6:	4e ad       	ldd	r20, Y+62	; 0x3e
    12c8:	5f ad       	ldd	r21, Y+63	; 0x3f
    12ca:	25 97       	sbiw	r28, 0x05	; 5
    12cc:	0e 94 68 32 	call	0x64d0	; 0x64d0 <__mulsi3>
    12d0:	9b 01       	movw	r18, r22
    12d2:	ac 01       	movw	r20, r24
    12d4:	87 01       	movw	r16, r14
    12d6:	ff 24       	eor	r15, r15
    12d8:	ee 24       	eor	r14, r14
    12da:	ad a4       	ldd	r10, Y+45	; 0x2d
    12dc:	be a4       	ldd	r11, Y+46	; 0x2e
    12de:	cf a4       	ldd	r12, Y+47	; 0x2f
    12e0:	d8 a8       	ldd	r13, Y+48	; 0x30
    12e2:	c6 01       	movw	r24, r12
    12e4:	aa 27       	eor	r26, r26
    12e6:	bb 27       	eor	r27, r27
    12e8:	5c 01       	movw	r10, r24
    12ea:	6d 01       	movw	r12, r26
    12ec:	ae 28       	or	r10, r14
    12ee:	bf 28       	or	r11, r15
    12f0:	c0 2a       	or	r12, r16
    12f2:	d1 2a       	or	r13, r17
    12f4:	a2 16       	cp	r10, r18
    12f6:	b3 06       	cpc	r11, r19
    12f8:	c4 06       	cpc	r12, r20
    12fa:	d5 06       	cpc	r13, r21
    12fc:	90 f4       	brcc	.+36     	; 0x1322 <__umoddi3+0x4a8>
    12fe:	a2 0c       	add	r10, r2
    1300:	b3 1c       	adc	r11, r3
    1302:	c4 1c       	adc	r12, r4
    1304:	d5 1c       	adc	r13, r5
    1306:	a2 14       	cp	r10, r2
    1308:	b3 04       	cpc	r11, r3
    130a:	c4 04       	cpc	r12, r4
    130c:	d5 04       	cpc	r13, r5
    130e:	48 f0       	brcs	.+18     	; 0x1322 <__umoddi3+0x4a8>
    1310:	a2 16       	cp	r10, r18
    1312:	b3 06       	cpc	r11, r19
    1314:	c4 06       	cpc	r12, r20
    1316:	d5 06       	cpc	r13, r21
    1318:	20 f4       	brcc	.+8      	; 0x1322 <__umoddi3+0x4a8>
    131a:	a2 0c       	add	r10, r2
    131c:	b3 1c       	adc	r11, r3
    131e:	c4 1c       	adc	r12, r4
    1320:	d5 1c       	adc	r13, r5
    1322:	a2 1a       	sub	r10, r18
    1324:	b3 0a       	sbc	r11, r19
    1326:	c4 0a       	sbc	r12, r20
    1328:	d5 0a       	sbc	r13, r21
    132a:	c6 01       	movw	r24, r12
    132c:	b5 01       	movw	r22, r10
    132e:	a4 01       	movw	r20, r8
    1330:	93 01       	movw	r18, r6
    1332:	0e 94 2b 32 	call	0x6456	; 0x6456 <__udivmodsi4>
    1336:	7b 01       	movw	r14, r22
    1338:	8c 01       	movw	r16, r24
    133a:	c6 01       	movw	r24, r12
    133c:	b5 01       	movw	r22, r10
    133e:	a4 01       	movw	r20, r8
    1340:	93 01       	movw	r18, r6
    1342:	0e 94 2b 32 	call	0x6456	; 0x6456 <__udivmodsi4>
    1346:	ca 01       	movw	r24, r20
    1348:	b9 01       	movw	r22, r18
    134a:	25 96       	adiw	r28, 0x05	; 5
    134c:	2c ad       	ldd	r18, Y+60	; 0x3c
    134e:	3d ad       	ldd	r19, Y+61	; 0x3d
    1350:	4e ad       	ldd	r20, Y+62	; 0x3e
    1352:	5f ad       	ldd	r21, Y+63	; 0x3f
    1354:	25 97       	sbiw	r28, 0x05	; 5
    1356:	0e 94 68 32 	call	0x64d0	; 0x64d0 <__mulsi3>
    135a:	9b 01       	movw	r18, r22
    135c:	ac 01       	movw	r20, r24
    135e:	87 01       	movw	r16, r14
    1360:	ff 24       	eor	r15, r15
    1362:	ee 24       	eor	r14, r14
    1364:	8d a5       	ldd	r24, Y+45	; 0x2d
    1366:	9e a5       	ldd	r25, Y+46	; 0x2e
    1368:	af a5       	ldd	r26, Y+47	; 0x2f
    136a:	b8 a9       	ldd	r27, Y+48	; 0x30
    136c:	a0 70       	andi	r26, 0x00	; 0
    136e:	b0 70       	andi	r27, 0x00	; 0
    1370:	57 01       	movw	r10, r14
    1372:	68 01       	movw	r12, r16
    1374:	a8 2a       	or	r10, r24
    1376:	b9 2a       	or	r11, r25
    1378:	ca 2a       	or	r12, r26
    137a:	db 2a       	or	r13, r27
    137c:	a2 16       	cp	r10, r18
    137e:	b3 06       	cpc	r11, r19
    1380:	c4 06       	cpc	r12, r20
    1382:	d5 06       	cpc	r13, r21
    1384:	90 f4       	brcc	.+36     	; 0x13aa <__umoddi3+0x530>
    1386:	a2 0c       	add	r10, r2
    1388:	b3 1c       	adc	r11, r3
    138a:	c4 1c       	adc	r12, r4
    138c:	d5 1c       	adc	r13, r5
    138e:	a2 14       	cp	r10, r2
    1390:	b3 04       	cpc	r11, r3
    1392:	c4 04       	cpc	r12, r4
    1394:	d5 04       	cpc	r13, r5
    1396:	48 f0       	brcs	.+18     	; 0x13aa <__umoddi3+0x530>
    1398:	a2 16       	cp	r10, r18
    139a:	b3 06       	cpc	r11, r19
    139c:	c4 06       	cpc	r12, r20
    139e:	d5 06       	cpc	r13, r21
    13a0:	20 f4       	brcc	.+8      	; 0x13aa <__umoddi3+0x530>
    13a2:	a2 0c       	add	r10, r2
    13a4:	b3 1c       	adc	r11, r3
    13a6:	c4 1c       	adc	r12, r4
    13a8:	d5 1c       	adc	r13, r5
    13aa:	6c 96       	adiw	r28, 0x1c	; 28
    13ac:	ec ac       	ldd	r14, Y+60	; 0x3c
    13ae:	fd ac       	ldd	r15, Y+61	; 0x3d
    13b0:	0e ad       	ldd	r16, Y+62	; 0x3e
    13b2:	1f ad       	ldd	r17, Y+63	; 0x3f
    13b4:	6c 97       	sbiw	r28, 0x1c	; 28
    13b6:	68 96       	adiw	r28, 0x18	; 24
    13b8:	0f ac       	ldd	r0, Y+63	; 0x3f
    13ba:	68 97       	sbiw	r28, 0x18	; 24
    13bc:	04 c0       	rjmp	.+8      	; 0x13c6 <__umoddi3+0x54c>
    13be:	ee 0c       	add	r14, r14
    13c0:	ff 1c       	adc	r15, r15
    13c2:	00 1f       	adc	r16, r16
    13c4:	11 1f       	adc	r17, r17
    13c6:	0a 94       	dec	r0
    13c8:	d2 f7       	brpl	.-12     	; 0x13be <__umoddi3+0x544>
    13ca:	e9 aa       	std	Y+49, r14	; 0x31
    13cc:	fa aa       	std	Y+50, r15	; 0x32
    13ce:	0b ab       	std	Y+51, r16	; 0x33
    13d0:	1c ab       	std	Y+52, r17	; 0x34
    13d2:	a2 1a       	sub	r10, r18
    13d4:	b3 0a       	sbc	r11, r19
    13d6:	c4 0a       	sbc	r12, r20
    13d8:	d5 0a       	sbc	r13, r21
    13da:	32 01       	movw	r6, r4
    13dc:	88 24       	eor	r8, r8
    13de:	99 24       	eor	r9, r9
    13e0:	b2 01       	movw	r22, r4
    13e2:	a1 01       	movw	r20, r2
    13e4:	60 70       	andi	r22, 0x00	; 0
    13e6:	70 70       	andi	r23, 0x00	; 0
    13e8:	29 96       	adiw	r28, 0x09	; 9
    13ea:	4c af       	std	Y+60, r20	; 0x3c
    13ec:	5d af       	std	Y+61, r21	; 0x3d
    13ee:	6e af       	std	Y+62, r22	; 0x3e
    13f0:	7f af       	std	Y+63, r23	; 0x3f
    13f2:	29 97       	sbiw	r28, 0x09	; 9
    13f4:	c6 01       	movw	r24, r12
    13f6:	b5 01       	movw	r22, r10
    13f8:	a4 01       	movw	r20, r8
    13fa:	93 01       	movw	r18, r6
    13fc:	0e 94 2b 32 	call	0x6456	; 0x6456 <__udivmodsi4>
    1400:	7b 01       	movw	r14, r22
    1402:	8c 01       	movw	r16, r24
    1404:	c6 01       	movw	r24, r12
    1406:	b5 01       	movw	r22, r10
    1408:	a4 01       	movw	r20, r8
    140a:	93 01       	movw	r18, r6
    140c:	0e 94 2b 32 	call	0x6456	; 0x6456 <__udivmodsi4>
    1410:	ca 01       	movw	r24, r20
    1412:	b9 01       	movw	r22, r18
    1414:	29 96       	adiw	r28, 0x09	; 9
    1416:	2c ad       	ldd	r18, Y+60	; 0x3c
    1418:	3d ad       	ldd	r19, Y+61	; 0x3d
    141a:	4e ad       	ldd	r20, Y+62	; 0x3e
    141c:	5f ad       	ldd	r21, Y+63	; 0x3f
    141e:	29 97       	sbiw	r28, 0x09	; 9
    1420:	0e 94 68 32 	call	0x64d0	; 0x64d0 <__mulsi3>
    1424:	9b 01       	movw	r18, r22
    1426:	ac 01       	movw	r20, r24
    1428:	87 01       	movw	r16, r14
    142a:	ff 24       	eor	r15, r15
    142c:	ee 24       	eor	r14, r14
    142e:	a9 a8       	ldd	r10, Y+49	; 0x31
    1430:	ba a8       	ldd	r11, Y+50	; 0x32
    1432:	cb a8       	ldd	r12, Y+51	; 0x33
    1434:	dc a8       	ldd	r13, Y+52	; 0x34
    1436:	c6 01       	movw	r24, r12
    1438:	aa 27       	eor	r26, r26
    143a:	bb 27       	eor	r27, r27
    143c:	57 01       	movw	r10, r14
    143e:	68 01       	movw	r12, r16
    1440:	a8 2a       	or	r10, r24
    1442:	b9 2a       	or	r11, r25
    1444:	ca 2a       	or	r12, r26
    1446:	db 2a       	or	r13, r27
    1448:	a2 16       	cp	r10, r18
    144a:	b3 06       	cpc	r11, r19
    144c:	c4 06       	cpc	r12, r20
    144e:	d5 06       	cpc	r13, r21
    1450:	90 f4       	brcc	.+36     	; 0x1476 <__umoddi3+0x5fc>
    1452:	a2 0c       	add	r10, r2
    1454:	b3 1c       	adc	r11, r3
    1456:	c4 1c       	adc	r12, r4
    1458:	d5 1c       	adc	r13, r5
    145a:	a2 14       	cp	r10, r2
    145c:	b3 04       	cpc	r11, r3
    145e:	c4 04       	cpc	r12, r4
    1460:	d5 04       	cpc	r13, r5
    1462:	48 f0       	brcs	.+18     	; 0x1476 <__umoddi3+0x5fc>
    1464:	a2 16       	cp	r10, r18
    1466:	b3 06       	cpc	r11, r19
    1468:	c4 06       	cpc	r12, r20
    146a:	d5 06       	cpc	r13, r21
    146c:	20 f4       	brcc	.+8      	; 0x1476 <__umoddi3+0x5fc>
    146e:	a2 0c       	add	r10, r2
    1470:	b3 1c       	adc	r11, r3
    1472:	c4 1c       	adc	r12, r4
    1474:	d5 1c       	adc	r13, r5
    1476:	a2 1a       	sub	r10, r18
    1478:	b3 0a       	sbc	r11, r19
    147a:	c4 0a       	sbc	r12, r20
    147c:	d5 0a       	sbc	r13, r21
    147e:	c6 01       	movw	r24, r12
    1480:	b5 01       	movw	r22, r10
    1482:	a4 01       	movw	r20, r8
    1484:	93 01       	movw	r18, r6
    1486:	0e 94 2b 32 	call	0x6456	; 0x6456 <__udivmodsi4>
    148a:	7b 01       	movw	r14, r22
    148c:	8c 01       	movw	r16, r24
    148e:	c6 01       	movw	r24, r12
    1490:	b5 01       	movw	r22, r10
    1492:	a4 01       	movw	r20, r8
    1494:	93 01       	movw	r18, r6
    1496:	0e 94 2b 32 	call	0x6456	; 0x6456 <__udivmodsi4>
    149a:	ca 01       	movw	r24, r20
    149c:	b9 01       	movw	r22, r18
    149e:	29 96       	adiw	r28, 0x09	; 9
    14a0:	2c ad       	ldd	r18, Y+60	; 0x3c
    14a2:	3d ad       	ldd	r19, Y+61	; 0x3d
    14a4:	4e ad       	ldd	r20, Y+62	; 0x3e
    14a6:	5f ad       	ldd	r21, Y+63	; 0x3f
    14a8:	29 97       	sbiw	r28, 0x09	; 9
    14aa:	0e 94 68 32 	call	0x64d0	; 0x64d0 <__mulsi3>
    14ae:	9b 01       	movw	r18, r22
    14b0:	ac 01       	movw	r20, r24
    14b2:	87 01       	movw	r16, r14
    14b4:	ff 24       	eor	r15, r15
    14b6:	ee 24       	eor	r14, r14
    14b8:	89 a9       	ldd	r24, Y+49	; 0x31
    14ba:	9a a9       	ldd	r25, Y+50	; 0x32
    14bc:	ab a9       	ldd	r26, Y+51	; 0x33
    14be:	bc a9       	ldd	r27, Y+52	; 0x34
    14c0:	a0 70       	andi	r26, 0x00	; 0
    14c2:	b0 70       	andi	r27, 0x00	; 0
    14c4:	e8 2a       	or	r14, r24
    14c6:	f9 2a       	or	r15, r25
    14c8:	0a 2b       	or	r16, r26
    14ca:	1b 2b       	or	r17, r27
    14cc:	e2 16       	cp	r14, r18
    14ce:	f3 06       	cpc	r15, r19
    14d0:	04 07       	cpc	r16, r20
    14d2:	15 07       	cpc	r17, r21
    14d4:	90 f4       	brcc	.+36     	; 0x14fa <__umoddi3+0x680>
    14d6:	e2 0c       	add	r14, r2
    14d8:	f3 1c       	adc	r15, r3
    14da:	04 1d       	adc	r16, r4
    14dc:	15 1d       	adc	r17, r5
    14de:	e2 14       	cp	r14, r2
    14e0:	f3 04       	cpc	r15, r3
    14e2:	04 05       	cpc	r16, r4
    14e4:	15 05       	cpc	r17, r5
    14e6:	48 f0       	brcs	.+18     	; 0x14fa <__umoddi3+0x680>
    14e8:	e2 16       	cp	r14, r18
    14ea:	f3 06       	cpc	r15, r19
    14ec:	04 07       	cpc	r16, r20
    14ee:	15 07       	cpc	r17, r21
    14f0:	20 f4       	brcc	.+8      	; 0x14fa <__umoddi3+0x680>
    14f2:	e2 0c       	add	r14, r2
    14f4:	f3 1c       	adc	r15, r3
    14f6:	04 1d       	adc	r16, r4
    14f8:	15 1d       	adc	r17, r5
    14fa:	e2 1a       	sub	r14, r18
    14fc:	f3 0a       	sbc	r15, r19
    14fe:	04 0b       	sbc	r16, r20
    1500:	15 0b       	sbc	r17, r21
    1502:	d8 01       	movw	r26, r16
    1504:	c7 01       	movw	r24, r14
    1506:	09 ac       	ldd	r0, Y+57	; 0x39
    1508:	04 c0       	rjmp	.+8      	; 0x1512 <__umoddi3+0x698>
    150a:	b6 95       	lsr	r27
    150c:	a7 95       	ror	r26
    150e:	97 95       	ror	r25
    1510:	87 95       	ror	r24
    1512:	0a 94       	dec	r0
    1514:	d2 f7       	brpl	.-12     	; 0x150a <__umoddi3+0x690>
    1516:	89 8b       	std	Y+17, r24	; 0x11
    1518:	9a 8b       	std	Y+18, r25	; 0x12
    151a:	ab 8b       	std	Y+19, r26	; 0x13
    151c:	bc 8b       	std	Y+20, r27	; 0x14
    151e:	1d 8a       	std	Y+21, r1	; 0x15
    1520:	1e 8a       	std	Y+22, r1	; 0x16
    1522:	1f 8a       	std	Y+23, r1	; 0x17
    1524:	18 8e       	std	Y+24, r1	; 0x18
    1526:	28 2f       	mov	r18, r24
    1528:	3a 89       	ldd	r19, Y+18	; 0x12
    152a:	4b 89       	ldd	r20, Y+19	; 0x13
    152c:	5c 89       	ldd	r21, Y+20	; 0x14
    152e:	6d 89       	ldd	r22, Y+21	; 0x15
    1530:	0c c3       	rjmp	.+1560   	; 0x1b4a <__umoddi3+0xcd0>
    1532:	6a 14       	cp	r6, r10
    1534:	7b 04       	cpc	r7, r11
    1536:	8c 04       	cpc	r8, r12
    1538:	9d 04       	cpc	r9, r13
    153a:	08 f4       	brcc	.+2      	; 0x153e <__umoddi3+0x6c4>
    153c:	09 c3       	rjmp	.+1554   	; 0x1b50 <__umoddi3+0xcd6>
    153e:	00 e0       	ldi	r16, 0x00	; 0
    1540:	a0 16       	cp	r10, r16
    1542:	00 e0       	ldi	r16, 0x00	; 0
    1544:	b0 06       	cpc	r11, r16
    1546:	01 e0       	ldi	r16, 0x01	; 1
    1548:	c0 06       	cpc	r12, r16
    154a:	00 e0       	ldi	r16, 0x00	; 0
    154c:	d0 06       	cpc	r13, r16
    154e:	88 f4       	brcc	.+34     	; 0x1572 <__umoddi3+0x6f8>
    1550:	1f ef       	ldi	r17, 0xFF	; 255
    1552:	a1 16       	cp	r10, r17
    1554:	b1 04       	cpc	r11, r1
    1556:	c1 04       	cpc	r12, r1
    1558:	d1 04       	cpc	r13, r1
    155a:	39 f0       	breq	.+14     	; 0x156a <__umoddi3+0x6f0>
    155c:	30 f0       	brcs	.+12     	; 0x156a <__umoddi3+0x6f0>
    155e:	28 e0       	ldi	r18, 0x08	; 8
    1560:	e2 2e       	mov	r14, r18
    1562:	f1 2c       	mov	r15, r1
    1564:	01 2d       	mov	r16, r1
    1566:	11 2d       	mov	r17, r1
    1568:	18 c0       	rjmp	.+48     	; 0x159a <__umoddi3+0x720>
    156a:	ee 24       	eor	r14, r14
    156c:	ff 24       	eor	r15, r15
    156e:	87 01       	movw	r16, r14
    1570:	14 c0       	rjmp	.+40     	; 0x159a <__umoddi3+0x720>
    1572:	40 e0       	ldi	r20, 0x00	; 0
    1574:	a4 16       	cp	r10, r20
    1576:	40 e0       	ldi	r20, 0x00	; 0
    1578:	b4 06       	cpc	r11, r20
    157a:	40 e0       	ldi	r20, 0x00	; 0
    157c:	c4 06       	cpc	r12, r20
    157e:	41 e0       	ldi	r20, 0x01	; 1
    1580:	d4 06       	cpc	r13, r20
    1582:	30 f0       	brcs	.+12     	; 0x1590 <__umoddi3+0x716>
    1584:	98 e1       	ldi	r25, 0x18	; 24
    1586:	e9 2e       	mov	r14, r25
    1588:	f1 2c       	mov	r15, r1
    158a:	01 2d       	mov	r16, r1
    158c:	11 2d       	mov	r17, r1
    158e:	05 c0       	rjmp	.+10     	; 0x159a <__umoddi3+0x720>
    1590:	80 e1       	ldi	r24, 0x10	; 16
    1592:	e8 2e       	mov	r14, r24
    1594:	f1 2c       	mov	r15, r1
    1596:	01 2d       	mov	r16, r1
    1598:	11 2d       	mov	r17, r1
    159a:	d6 01       	movw	r26, r12
    159c:	c5 01       	movw	r24, r10
    159e:	0e 2c       	mov	r0, r14
    15a0:	04 c0       	rjmp	.+8      	; 0x15aa <__umoddi3+0x730>
    15a2:	b6 95       	lsr	r27
    15a4:	a7 95       	ror	r26
    15a6:	97 95       	ror	r25
    15a8:	87 95       	ror	r24
    15aa:	0a 94       	dec	r0
    15ac:	d2 f7       	brpl	.-12     	; 0x15a2 <__umoddi3+0x728>
    15ae:	8d 5a       	subi	r24, 0xAD	; 173
    15b0:	9c 4f       	sbci	r25, 0xFC	; 252
    15b2:	dc 01       	movw	r26, r24
    15b4:	2c 91       	ld	r18, X
    15b6:	80 e2       	ldi	r24, 0x20	; 32
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	a0 e0       	ldi	r26, 0x00	; 0
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	8e 19       	sub	r24, r14
    15c0:	9f 09       	sbc	r25, r15
    15c2:	a0 0b       	sbc	r26, r16
    15c4:	b1 0b       	sbc	r27, r17
    15c6:	82 1b       	sub	r24, r18
    15c8:	91 09       	sbc	r25, r1
    15ca:	a1 09       	sbc	r26, r1
    15cc:	b1 09       	sbc	r27, r1
    15ce:	00 97       	sbiw	r24, 0x00	; 0
    15d0:	a1 05       	cpc	r26, r1
    15d2:	b1 05       	cpc	r27, r1
    15d4:	09 f0       	breq	.+2      	; 0x15d8 <__umoddi3+0x75e>
    15d6:	4f c0       	rjmp	.+158    	; 0x1676 <__umoddi3+0x7fc>
    15d8:	a6 14       	cp	r10, r6
    15da:	b7 04       	cpc	r11, r7
    15dc:	c8 04       	cpc	r12, r8
    15de:	d9 04       	cpc	r13, r9
    15e0:	58 f0       	brcs	.+22     	; 0x15f8 <__umoddi3+0x77e>
    15e2:	6c 96       	adiw	r28, 0x1c	; 28
    15e4:	ec ac       	ldd	r14, Y+60	; 0x3c
    15e6:	fd ac       	ldd	r15, Y+61	; 0x3d
    15e8:	0e ad       	ldd	r16, Y+62	; 0x3e
    15ea:	1f ad       	ldd	r17, Y+63	; 0x3f
    15ec:	6c 97       	sbiw	r28, 0x1c	; 28
    15ee:	e2 14       	cp	r14, r2
    15f0:	f3 04       	cpc	r15, r3
    15f2:	04 05       	cpc	r16, r4
    15f4:	15 05       	cpc	r17, r5
    15f6:	68 f1       	brcs	.+90     	; 0x1652 <__umoddi3+0x7d8>
    15f8:	6c 96       	adiw	r28, 0x1c	; 28
    15fa:	ec ac       	ldd	r14, Y+60	; 0x3c
    15fc:	fd ac       	ldd	r15, Y+61	; 0x3d
    15fe:	0e ad       	ldd	r16, Y+62	; 0x3e
    1600:	1f ad       	ldd	r17, Y+63	; 0x3f
    1602:	6c 97       	sbiw	r28, 0x1c	; 28
    1604:	e2 18       	sub	r14, r2
    1606:	f3 08       	sbc	r15, r3
    1608:	04 09       	sbc	r16, r4
    160a:	15 09       	sbc	r17, r5
    160c:	a4 01       	movw	r20, r8
    160e:	93 01       	movw	r18, r6
    1610:	2a 19       	sub	r18, r10
    1612:	3b 09       	sbc	r19, r11
    1614:	4c 09       	sbc	r20, r12
    1616:	5d 09       	sbc	r21, r13
    1618:	aa 24       	eor	r10, r10
    161a:	bb 24       	eor	r11, r11
    161c:	65 01       	movw	r12, r10
    161e:	6c 96       	adiw	r28, 0x1c	; 28
    1620:	6c ad       	ldd	r22, Y+60	; 0x3c
    1622:	7d ad       	ldd	r23, Y+61	; 0x3d
    1624:	8e ad       	ldd	r24, Y+62	; 0x3e
    1626:	9f ad       	ldd	r25, Y+63	; 0x3f
    1628:	6c 97       	sbiw	r28, 0x1c	; 28
    162a:	6e 15       	cp	r22, r14
    162c:	7f 05       	cpc	r23, r15
    162e:	80 07       	cpc	r24, r16
    1630:	91 07       	cpc	r25, r17
    1632:	28 f4       	brcc	.+10     	; 0x163e <__umoddi3+0x7c4>
    1634:	b1 e0       	ldi	r27, 0x01	; 1
    1636:	ab 2e       	mov	r10, r27
    1638:	b1 2c       	mov	r11, r1
    163a:	c1 2c       	mov	r12, r1
    163c:	d1 2c       	mov	r13, r1
    163e:	da 01       	movw	r26, r20
    1640:	c9 01       	movw	r24, r18
    1642:	8a 19       	sub	r24, r10
    1644:	9b 09       	sbc	r25, r11
    1646:	ac 09       	sbc	r26, r12
    1648:	bd 09       	sbc	r27, r13
    164a:	8d ab       	std	Y+53, r24	; 0x35
    164c:	9e ab       	std	Y+54, r25	; 0x36
    164e:	af ab       	std	Y+55, r26	; 0x37
    1650:	b8 af       	std	Y+56, r27	; 0x38
    1652:	e9 8a       	std	Y+17, r14	; 0x11
    1654:	fa 8a       	std	Y+18, r15	; 0x12
    1656:	0b 8b       	std	Y+19, r16	; 0x13
    1658:	1c 8b       	std	Y+20, r17	; 0x14
    165a:	6d a8       	ldd	r6, Y+53	; 0x35
    165c:	7e a8       	ldd	r7, Y+54	; 0x36
    165e:	8f a8       	ldd	r8, Y+55	; 0x37
    1660:	98 ac       	ldd	r9, Y+56	; 0x38
    1662:	6d 8a       	std	Y+21, r6	; 0x15
    1664:	7e 8a       	std	Y+22, r7	; 0x16
    1666:	8f 8a       	std	Y+23, r8	; 0x17
    1668:	98 8e       	std	Y+24, r9	; 0x18
    166a:	2e 2d       	mov	r18, r14
    166c:	3a 89       	ldd	r19, Y+18	; 0x12
    166e:	4b 89       	ldd	r20, Y+19	; 0x13
    1670:	5c 89       	ldd	r21, Y+20	; 0x14
    1672:	6d a9       	ldd	r22, Y+53	; 0x35
    1674:	6a c2       	rjmp	.+1236   	; 0x1b4a <__umoddi3+0xcd0>
    1676:	67 96       	adiw	r28, 0x17	; 23
    1678:	8f af       	std	Y+63, r24	; 0x3f
    167a:	67 97       	sbiw	r28, 0x17	; 23
    167c:	a6 01       	movw	r20, r12
    167e:	95 01       	movw	r18, r10
    1680:	08 2e       	mov	r0, r24
    1682:	04 c0       	rjmp	.+8      	; 0x168c <__umoddi3+0x812>
    1684:	22 0f       	add	r18, r18
    1686:	33 1f       	adc	r19, r19
    1688:	44 1f       	adc	r20, r20
    168a:	55 1f       	adc	r21, r21
    168c:	0a 94       	dec	r0
    168e:	d2 f7       	brpl	.-12     	; 0x1684 <__umoddi3+0x80a>
    1690:	a0 e2       	ldi	r26, 0x20	; 32
    1692:	aa 2e       	mov	r10, r26
    1694:	a8 1a       	sub	r10, r24
    1696:	66 96       	adiw	r28, 0x16	; 22
    1698:	af ae       	std	Y+63, r10	; 0x3f
    169a:	66 97       	sbiw	r28, 0x16	; 22
    169c:	d2 01       	movw	r26, r4
    169e:	c1 01       	movw	r24, r2
    16a0:	04 c0       	rjmp	.+8      	; 0x16aa <__umoddi3+0x830>
    16a2:	b6 95       	lsr	r27
    16a4:	a7 95       	ror	r26
    16a6:	97 95       	ror	r25
    16a8:	87 95       	ror	r24
    16aa:	aa 94       	dec	r10
    16ac:	d2 f7       	brpl	.-12     	; 0x16a2 <__umoddi3+0x828>
    16ae:	6c 01       	movw	r12, r24
    16b0:	7d 01       	movw	r14, r26
    16b2:	c2 2a       	or	r12, r18
    16b4:	d3 2a       	or	r13, r19
    16b6:	e4 2a       	or	r14, r20
    16b8:	f5 2a       	or	r15, r21
    16ba:	c9 a6       	std	Y+41, r12	; 0x29
    16bc:	da a6       	std	Y+42, r13	; 0x2a
    16be:	eb a6       	std	Y+43, r14	; 0x2b
    16c0:	fc a6       	std	Y+44, r15	; 0x2c
    16c2:	82 01       	movw	r16, r4
    16c4:	71 01       	movw	r14, r2
    16c6:	67 96       	adiw	r28, 0x17	; 23
    16c8:	0f ac       	ldd	r0, Y+63	; 0x3f
    16ca:	67 97       	sbiw	r28, 0x17	; 23
    16cc:	04 c0       	rjmp	.+8      	; 0x16d6 <__umoddi3+0x85c>
    16ce:	ee 0c       	add	r14, r14
    16d0:	ff 1c       	adc	r15, r15
    16d2:	00 1f       	adc	r16, r16
    16d4:	11 1f       	adc	r17, r17
    16d6:	0a 94       	dec	r0
    16d8:	d2 f7       	brpl	.-12     	; 0x16ce <__umoddi3+0x854>
    16da:	ed a2       	std	Y+37, r14	; 0x25
    16dc:	fe a2       	std	Y+38, r15	; 0x26
    16de:	0f a3       	std	Y+39, r16	; 0x27
    16e0:	18 a7       	std	Y+40, r17	; 0x28
    16e2:	64 01       	movw	r12, r8
    16e4:	53 01       	movw	r10, r6
    16e6:	66 96       	adiw	r28, 0x16	; 22
    16e8:	0f ac       	ldd	r0, Y+63	; 0x3f
    16ea:	66 97       	sbiw	r28, 0x16	; 22
    16ec:	04 c0       	rjmp	.+8      	; 0x16f6 <__umoddi3+0x87c>
    16ee:	d6 94       	lsr	r13
    16f0:	c7 94       	ror	r12
    16f2:	b7 94       	ror	r11
    16f4:	a7 94       	ror	r10
    16f6:	0a 94       	dec	r0
    16f8:	d2 f7       	brpl	.-12     	; 0x16ee <__umoddi3+0x874>
    16fa:	a4 01       	movw	r20, r8
    16fc:	93 01       	movw	r18, r6
    16fe:	67 96       	adiw	r28, 0x17	; 23
    1700:	0f ac       	ldd	r0, Y+63	; 0x3f
    1702:	67 97       	sbiw	r28, 0x17	; 23
    1704:	04 c0       	rjmp	.+8      	; 0x170e <__umoddi3+0x894>
    1706:	22 0f       	add	r18, r18
    1708:	33 1f       	adc	r19, r19
    170a:	44 1f       	adc	r20, r20
    170c:	55 1f       	adc	r21, r21
    170e:	0a 94       	dec	r0
    1710:	d2 f7       	brpl	.-12     	; 0x1706 <__umoddi3+0x88c>
    1712:	6c 96       	adiw	r28, 0x1c	; 28
    1714:	8c ad       	ldd	r24, Y+60	; 0x3c
    1716:	9d ad       	ldd	r25, Y+61	; 0x3d
    1718:	ae ad       	ldd	r26, Y+62	; 0x3e
    171a:	bf ad       	ldd	r27, Y+63	; 0x3f
    171c:	6c 97       	sbiw	r28, 0x1c	; 28
    171e:	66 96       	adiw	r28, 0x16	; 22
    1720:	0f ac       	ldd	r0, Y+63	; 0x3f
    1722:	66 97       	sbiw	r28, 0x16	; 22
    1724:	04 c0       	rjmp	.+8      	; 0x172e <__umoddi3+0x8b4>
    1726:	b6 95       	lsr	r27
    1728:	a7 95       	ror	r26
    172a:	97 95       	ror	r25
    172c:	87 95       	ror	r24
    172e:	0a 94       	dec	r0
    1730:	d2 f7       	brpl	.-12     	; 0x1726 <__umoddi3+0x8ac>
    1732:	3c 01       	movw	r6, r24
    1734:	4d 01       	movw	r8, r26
    1736:	62 2a       	or	r6, r18
    1738:	73 2a       	or	r7, r19
    173a:	84 2a       	or	r8, r20
    173c:	95 2a       	or	r9, r21
    173e:	69 a2       	std	Y+33, r6	; 0x21
    1740:	7a a2       	std	Y+34, r7	; 0x22
    1742:	8b a2       	std	Y+35, r8	; 0x23
    1744:	9c a2       	std	Y+36, r9	; 0x24
    1746:	6c 96       	adiw	r28, 0x1c	; 28
    1748:	ec ac       	ldd	r14, Y+60	; 0x3c
    174a:	fd ac       	ldd	r15, Y+61	; 0x3d
    174c:	0e ad       	ldd	r16, Y+62	; 0x3e
    174e:	1f ad       	ldd	r17, Y+63	; 0x3f
    1750:	6c 97       	sbiw	r28, 0x1c	; 28
    1752:	67 96       	adiw	r28, 0x17	; 23
    1754:	0f ac       	ldd	r0, Y+63	; 0x3f
    1756:	67 97       	sbiw	r28, 0x17	; 23
    1758:	04 c0       	rjmp	.+8      	; 0x1762 <__umoddi3+0x8e8>
    175a:	ee 0c       	add	r14, r14
    175c:	ff 1c       	adc	r15, r15
    175e:	00 1f       	adc	r16, r16
    1760:	11 1f       	adc	r17, r17
    1762:	0a 94       	dec	r0
    1764:	d2 f7       	brpl	.-12     	; 0x175a <__umoddi3+0x8e0>
    1766:	ed 8e       	std	Y+29, r14	; 0x1d
    1768:	fe 8e       	std	Y+30, r15	; 0x1e
    176a:	0f 8f       	std	Y+31, r16	; 0x1f
    176c:	18 a3       	std	Y+32, r17	; 0x20
    176e:	49 a5       	ldd	r20, Y+41	; 0x29
    1770:	5a a5       	ldd	r21, Y+42	; 0x2a
    1772:	6b a5       	ldd	r22, Y+43	; 0x2b
    1774:	7c a5       	ldd	r23, Y+44	; 0x2c
    1776:	3b 01       	movw	r6, r22
    1778:	88 24       	eor	r8, r8
    177a:	99 24       	eor	r9, r9
    177c:	60 70       	andi	r22, 0x00	; 0
    177e:	70 70       	andi	r23, 0x00	; 0
    1780:	2d 96       	adiw	r28, 0x0d	; 13
    1782:	4c af       	std	Y+60, r20	; 0x3c
    1784:	5d af       	std	Y+61, r21	; 0x3d
    1786:	6e af       	std	Y+62, r22	; 0x3e
    1788:	7f af       	std	Y+63, r23	; 0x3f
    178a:	2d 97       	sbiw	r28, 0x0d	; 13
    178c:	c6 01       	movw	r24, r12
    178e:	b5 01       	movw	r22, r10
    1790:	a4 01       	movw	r20, r8
    1792:	93 01       	movw	r18, r6
    1794:	0e 94 2b 32 	call	0x6456	; 0x6456 <__udivmodsi4>
    1798:	7b 01       	movw	r14, r22
    179a:	8c 01       	movw	r16, r24
    179c:	c6 01       	movw	r24, r12
    179e:	b5 01       	movw	r22, r10
    17a0:	a4 01       	movw	r20, r8
    17a2:	93 01       	movw	r18, r6
    17a4:	0e 94 2b 32 	call	0x6456	; 0x6456 <__udivmodsi4>
    17a8:	c9 01       	movw	r24, r18
    17aa:	da 01       	movw	r26, r20
    17ac:	1c 01       	movw	r2, r24
    17ae:	2d 01       	movw	r4, r26
    17b0:	c2 01       	movw	r24, r4
    17b2:	b1 01       	movw	r22, r2
    17b4:	2d 96       	adiw	r28, 0x0d	; 13
    17b6:	2c ad       	ldd	r18, Y+60	; 0x3c
    17b8:	3d ad       	ldd	r19, Y+61	; 0x3d
    17ba:	4e ad       	ldd	r20, Y+62	; 0x3e
    17bc:	5f ad       	ldd	r21, Y+63	; 0x3f
    17be:	2d 97       	sbiw	r28, 0x0d	; 13
    17c0:	0e 94 68 32 	call	0x64d0	; 0x64d0 <__mulsi3>
    17c4:	9b 01       	movw	r18, r22
    17c6:	ac 01       	movw	r20, r24
    17c8:	87 01       	movw	r16, r14
    17ca:	ff 24       	eor	r15, r15
    17cc:	ee 24       	eor	r14, r14
    17ce:	a9 a0       	ldd	r10, Y+33	; 0x21
    17d0:	ba a0       	ldd	r11, Y+34	; 0x22
    17d2:	cb a0       	ldd	r12, Y+35	; 0x23
    17d4:	dc a0       	ldd	r13, Y+36	; 0x24
    17d6:	c6 01       	movw	r24, r12
    17d8:	aa 27       	eor	r26, r26
    17da:	bb 27       	eor	r27, r27
    17dc:	57 01       	movw	r10, r14
    17de:	68 01       	movw	r12, r16
    17e0:	a8 2a       	or	r10, r24
    17e2:	b9 2a       	or	r11, r25
    17e4:	ca 2a       	or	r12, r26
    17e6:	db 2a       	or	r13, r27
    17e8:	a2 16       	cp	r10, r18
    17ea:	b3 06       	cpc	r11, r19
    17ec:	c4 06       	cpc	r12, r20
    17ee:	d5 06       	cpc	r13, r21
    17f0:	00 f5       	brcc	.+64     	; 0x1832 <__umoddi3+0x9b8>
    17f2:	08 94       	sec
    17f4:	21 08       	sbc	r2, r1
    17f6:	31 08       	sbc	r3, r1
    17f8:	41 08       	sbc	r4, r1
    17fa:	51 08       	sbc	r5, r1
    17fc:	e9 a4       	ldd	r14, Y+41	; 0x29
    17fe:	fa a4       	ldd	r15, Y+42	; 0x2a
    1800:	0b a5       	ldd	r16, Y+43	; 0x2b
    1802:	1c a5       	ldd	r17, Y+44	; 0x2c
    1804:	ae 0c       	add	r10, r14
    1806:	bf 1c       	adc	r11, r15
    1808:	c0 1e       	adc	r12, r16
    180a:	d1 1e       	adc	r13, r17
    180c:	ae 14       	cp	r10, r14
    180e:	bf 04       	cpc	r11, r15
    1810:	c0 06       	cpc	r12, r16
    1812:	d1 06       	cpc	r13, r17
    1814:	70 f0       	brcs	.+28     	; 0x1832 <__umoddi3+0x9b8>
    1816:	a2 16       	cp	r10, r18
    1818:	b3 06       	cpc	r11, r19
    181a:	c4 06       	cpc	r12, r20
    181c:	d5 06       	cpc	r13, r21
    181e:	48 f4       	brcc	.+18     	; 0x1832 <__umoddi3+0x9b8>
    1820:	08 94       	sec
    1822:	21 08       	sbc	r2, r1
    1824:	31 08       	sbc	r3, r1
    1826:	41 08       	sbc	r4, r1
    1828:	51 08       	sbc	r5, r1
    182a:	ae 0c       	add	r10, r14
    182c:	bf 1c       	adc	r11, r15
    182e:	c0 1e       	adc	r12, r16
    1830:	d1 1e       	adc	r13, r17
    1832:	a2 1a       	sub	r10, r18
    1834:	b3 0a       	sbc	r11, r19
    1836:	c4 0a       	sbc	r12, r20
    1838:	d5 0a       	sbc	r13, r21
    183a:	c6 01       	movw	r24, r12
    183c:	b5 01       	movw	r22, r10
    183e:	a4 01       	movw	r20, r8
    1840:	93 01       	movw	r18, r6
    1842:	0e 94 2b 32 	call	0x6456	; 0x6456 <__udivmodsi4>
    1846:	7b 01       	movw	r14, r22
    1848:	8c 01       	movw	r16, r24
    184a:	c6 01       	movw	r24, r12
    184c:	b5 01       	movw	r22, r10
    184e:	a4 01       	movw	r20, r8
    1850:	93 01       	movw	r18, r6
    1852:	0e 94 2b 32 	call	0x6456	; 0x6456 <__udivmodsi4>
    1856:	c9 01       	movw	r24, r18
    1858:	da 01       	movw	r26, r20
    185a:	3c 01       	movw	r6, r24
    185c:	4d 01       	movw	r8, r26
    185e:	c4 01       	movw	r24, r8
    1860:	b3 01       	movw	r22, r6
    1862:	2d 96       	adiw	r28, 0x0d	; 13
    1864:	2c ad       	ldd	r18, Y+60	; 0x3c
    1866:	3d ad       	ldd	r19, Y+61	; 0x3d
    1868:	4e ad       	ldd	r20, Y+62	; 0x3e
    186a:	5f ad       	ldd	r21, Y+63	; 0x3f
    186c:	2d 97       	sbiw	r28, 0x0d	; 13
    186e:	0e 94 68 32 	call	0x64d0	; 0x64d0 <__mulsi3>
    1872:	9b 01       	movw	r18, r22
    1874:	ac 01       	movw	r20, r24
    1876:	87 01       	movw	r16, r14
    1878:	ff 24       	eor	r15, r15
    187a:	ee 24       	eor	r14, r14
    187c:	89 a1       	ldd	r24, Y+33	; 0x21
    187e:	9a a1       	ldd	r25, Y+34	; 0x22
    1880:	ab a1       	ldd	r26, Y+35	; 0x23
    1882:	bc a1       	ldd	r27, Y+36	; 0x24
    1884:	a0 70       	andi	r26, 0x00	; 0
    1886:	b0 70       	andi	r27, 0x00	; 0
    1888:	57 01       	movw	r10, r14
    188a:	68 01       	movw	r12, r16
    188c:	a8 2a       	or	r10, r24
    188e:	b9 2a       	or	r11, r25
    1890:	ca 2a       	or	r12, r26
    1892:	db 2a       	or	r13, r27
    1894:	a2 16       	cp	r10, r18
    1896:	b3 06       	cpc	r11, r19
    1898:	c4 06       	cpc	r12, r20
    189a:	d5 06       	cpc	r13, r21
    189c:	00 f5       	brcc	.+64     	; 0x18de <__umoddi3+0xa64>
    189e:	08 94       	sec
    18a0:	61 08       	sbc	r6, r1
    18a2:	71 08       	sbc	r7, r1
    18a4:	81 08       	sbc	r8, r1
    18a6:	91 08       	sbc	r9, r1
    18a8:	69 a5       	ldd	r22, Y+41	; 0x29
    18aa:	7a a5       	ldd	r23, Y+42	; 0x2a
    18ac:	8b a5       	ldd	r24, Y+43	; 0x2b
    18ae:	9c a5       	ldd	r25, Y+44	; 0x2c
    18b0:	a6 0e       	add	r10, r22
    18b2:	b7 1e       	adc	r11, r23
    18b4:	c8 1e       	adc	r12, r24
    18b6:	d9 1e       	adc	r13, r25
    18b8:	a6 16       	cp	r10, r22
    18ba:	b7 06       	cpc	r11, r23
    18bc:	c8 06       	cpc	r12, r24
    18be:	d9 06       	cpc	r13, r25
    18c0:	70 f0       	brcs	.+28     	; 0x18de <__umoddi3+0xa64>
    18c2:	a2 16       	cp	r10, r18
    18c4:	b3 06       	cpc	r11, r19
    18c6:	c4 06       	cpc	r12, r20
    18c8:	d5 06       	cpc	r13, r21
    18ca:	48 f4       	brcc	.+18     	; 0x18de <__umoddi3+0xa64>
    18cc:	08 94       	sec
    18ce:	61 08       	sbc	r6, r1
    18d0:	71 08       	sbc	r7, r1
    18d2:	81 08       	sbc	r8, r1
    18d4:	91 08       	sbc	r9, r1
    18d6:	a6 0e       	add	r10, r22
    18d8:	b7 1e       	adc	r11, r23
    18da:	c8 1e       	adc	r12, r24
    18dc:	d9 1e       	adc	r13, r25
    18de:	d6 01       	movw	r26, r12
    18e0:	c5 01       	movw	r24, r10
    18e2:	82 1b       	sub	r24, r18
    18e4:	93 0b       	sbc	r25, r19
    18e6:	a4 0b       	sbc	r26, r20
    18e8:	b5 0b       	sbc	r27, r21
    18ea:	89 8f       	std	Y+25, r24	; 0x19
    18ec:	9a 8f       	std	Y+26, r25	; 0x1a
    18ee:	ab 8f       	std	Y+27, r26	; 0x1b
    18f0:	bc 8f       	std	Y+28, r27	; 0x1c
    18f2:	d1 01       	movw	r26, r2
    18f4:	99 27       	eor	r25, r25
    18f6:	88 27       	eor	r24, r24
    18f8:	84 01       	movw	r16, r8
    18fa:	73 01       	movw	r14, r6
    18fc:	e8 2a       	or	r14, r24
    18fe:	f9 2a       	or	r15, r25
    1900:	0a 2b       	or	r16, r26
    1902:	1b 2b       	or	r17, r27
    1904:	4f ef       	ldi	r20, 0xFF	; 255
    1906:	a4 2e       	mov	r10, r20
    1908:	4f ef       	ldi	r20, 0xFF	; 255
    190a:	b4 2e       	mov	r11, r20
    190c:	c1 2c       	mov	r12, r1
    190e:	d1 2c       	mov	r13, r1
    1910:	ae 20       	and	r10, r14
    1912:	bf 20       	and	r11, r15
    1914:	c0 22       	and	r12, r16
    1916:	d1 22       	and	r13, r17
    1918:	78 01       	movw	r14, r16
    191a:	00 27       	eor	r16, r16
    191c:	11 27       	eor	r17, r17
    191e:	6d a0       	ldd	r6, Y+37	; 0x25
    1920:	7e a0       	ldd	r7, Y+38	; 0x26
    1922:	8f a0       	ldd	r8, Y+39	; 0x27
    1924:	98 a4       	ldd	r9, Y+40	; 0x28
    1926:	4f ef       	ldi	r20, 0xFF	; 255
    1928:	5f ef       	ldi	r21, 0xFF	; 255
    192a:	60 e0       	ldi	r22, 0x00	; 0
    192c:	70 e0       	ldi	r23, 0x00	; 0
    192e:	64 22       	and	r6, r20
    1930:	75 22       	and	r7, r21
    1932:	86 22       	and	r8, r22
    1934:	97 22       	and	r9, r23
    1936:	8d a1       	ldd	r24, Y+37	; 0x25
    1938:	9e a1       	ldd	r25, Y+38	; 0x26
    193a:	af a1       	ldd	r26, Y+39	; 0x27
    193c:	b8 a5       	ldd	r27, Y+40	; 0x28
    193e:	bd 01       	movw	r22, r26
    1940:	88 27       	eor	r24, r24
    1942:	99 27       	eor	r25, r25
    1944:	65 96       	adiw	r28, 0x15	; 21
    1946:	6c af       	std	Y+60, r22	; 0x3c
    1948:	7d af       	std	Y+61, r23	; 0x3d
    194a:	8e af       	std	Y+62, r24	; 0x3e
    194c:	9f af       	std	Y+63, r25	; 0x3f
    194e:	65 97       	sbiw	r28, 0x15	; 21
    1950:	c6 01       	movw	r24, r12
    1952:	b5 01       	movw	r22, r10
    1954:	a4 01       	movw	r20, r8
    1956:	93 01       	movw	r18, r6
    1958:	0e 94 68 32 	call	0x64d0	; 0x64d0 <__mulsi3>
    195c:	61 96       	adiw	r28, 0x11	; 17
    195e:	6c af       	std	Y+60, r22	; 0x3c
    1960:	7d af       	std	Y+61, r23	; 0x3d
    1962:	8e af       	std	Y+62, r24	; 0x3e
    1964:	9f af       	std	Y+63, r25	; 0x3f
    1966:	61 97       	sbiw	r28, 0x11	; 17
    1968:	c6 01       	movw	r24, r12
    196a:	b5 01       	movw	r22, r10
    196c:	65 96       	adiw	r28, 0x15	; 21
    196e:	2c ad       	ldd	r18, Y+60	; 0x3c
    1970:	3d ad       	ldd	r19, Y+61	; 0x3d
    1972:	4e ad       	ldd	r20, Y+62	; 0x3e
    1974:	5f ad       	ldd	r21, Y+63	; 0x3f
    1976:	65 97       	sbiw	r28, 0x15	; 21
    1978:	0e 94 68 32 	call	0x64d0	; 0x64d0 <__mulsi3>
    197c:	1b 01       	movw	r2, r22
    197e:	2c 01       	movw	r4, r24
    1980:	c8 01       	movw	r24, r16
    1982:	b7 01       	movw	r22, r14
    1984:	a4 01       	movw	r20, r8
    1986:	93 01       	movw	r18, r6
    1988:	0e 94 68 32 	call	0x64d0	; 0x64d0 <__mulsi3>
    198c:	5b 01       	movw	r10, r22
    198e:	6c 01       	movw	r12, r24
    1990:	c8 01       	movw	r24, r16
    1992:	b7 01       	movw	r22, r14
    1994:	65 96       	adiw	r28, 0x15	; 21
    1996:	2c ad       	ldd	r18, Y+60	; 0x3c
    1998:	3d ad       	ldd	r19, Y+61	; 0x3d
    199a:	4e ad       	ldd	r20, Y+62	; 0x3e
    199c:	5f ad       	ldd	r21, Y+63	; 0x3f
    199e:	65 97       	sbiw	r28, 0x15	; 21
    19a0:	0e 94 68 32 	call	0x64d0	; 0x64d0 <__mulsi3>
    19a4:	7b 01       	movw	r14, r22
    19a6:	8c 01       	movw	r16, r24
    19a8:	a6 01       	movw	r20, r12
    19aa:	95 01       	movw	r18, r10
    19ac:	22 0d       	add	r18, r2
    19ae:	33 1d       	adc	r19, r3
    19b0:	44 1d       	adc	r20, r4
    19b2:	55 1d       	adc	r21, r5
    19b4:	61 96       	adiw	r28, 0x11	; 17
    19b6:	6c ac       	ldd	r6, Y+60	; 0x3c
    19b8:	7d ac       	ldd	r7, Y+61	; 0x3d
    19ba:	8e ac       	ldd	r8, Y+62	; 0x3e
    19bc:	9f ac       	ldd	r9, Y+63	; 0x3f
    19be:	61 97       	sbiw	r28, 0x11	; 17
    19c0:	c4 01       	movw	r24, r8
    19c2:	aa 27       	eor	r26, r26
    19c4:	bb 27       	eor	r27, r27
    19c6:	28 0f       	add	r18, r24
    19c8:	39 1f       	adc	r19, r25
    19ca:	4a 1f       	adc	r20, r26
    19cc:	5b 1f       	adc	r21, r27
    19ce:	2a 15       	cp	r18, r10
    19d0:	3b 05       	cpc	r19, r11
    19d2:	4c 05       	cpc	r20, r12
    19d4:	5d 05       	cpc	r21, r13
    19d6:	48 f4       	brcc	.+18     	; 0x19ea <__umoddi3+0xb70>
    19d8:	81 2c       	mov	r8, r1
    19da:	91 2c       	mov	r9, r1
    19dc:	e1 e0       	ldi	r30, 0x01	; 1
    19de:	ae 2e       	mov	r10, r30
    19e0:	b1 2c       	mov	r11, r1
    19e2:	e8 0c       	add	r14, r8
    19e4:	f9 1c       	adc	r15, r9
    19e6:	0a 1d       	adc	r16, r10
    19e8:	1b 1d       	adc	r17, r11
    19ea:	ca 01       	movw	r24, r20
    19ec:	aa 27       	eor	r26, r26
    19ee:	bb 27       	eor	r27, r27
    19f0:	57 01       	movw	r10, r14
    19f2:	68 01       	movw	r12, r16
    19f4:	a8 0e       	add	r10, r24
    19f6:	b9 1e       	adc	r11, r25
    19f8:	ca 1e       	adc	r12, r26
    19fa:	db 1e       	adc	r13, r27
    19fc:	a9 01       	movw	r20, r18
    19fe:	33 27       	eor	r19, r19
    1a00:	22 27       	eor	r18, r18
    1a02:	61 96       	adiw	r28, 0x11	; 17
    1a04:	8c ad       	ldd	r24, Y+60	; 0x3c
    1a06:	9d ad       	ldd	r25, Y+61	; 0x3d
    1a08:	ae ad       	ldd	r26, Y+62	; 0x3e
    1a0a:	bf ad       	ldd	r27, Y+63	; 0x3f
    1a0c:	61 97       	sbiw	r28, 0x11	; 17
    1a0e:	a0 70       	andi	r26, 0x00	; 0
    1a10:	b0 70       	andi	r27, 0x00	; 0
    1a12:	28 0f       	add	r18, r24
    1a14:	39 1f       	adc	r19, r25
    1a16:	4a 1f       	adc	r20, r26
    1a18:	5b 1f       	adc	r21, r27
    1a1a:	e9 8c       	ldd	r14, Y+25	; 0x19
    1a1c:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1a1e:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1a20:	1c 8d       	ldd	r17, Y+28	; 0x1c
    1a22:	ea 14       	cp	r14, r10
    1a24:	fb 04       	cpc	r15, r11
    1a26:	0c 05       	cpc	r16, r12
    1a28:	1d 05       	cpc	r17, r13
    1a2a:	70 f0       	brcs	.+28     	; 0x1a48 <__umoddi3+0xbce>
    1a2c:	ae 14       	cp	r10, r14
    1a2e:	bf 04       	cpc	r11, r15
    1a30:	c0 06       	cpc	r12, r16
    1a32:	d1 06       	cpc	r13, r17
    1a34:	69 f5       	brne	.+90     	; 0x1a90 <__umoddi3+0xc16>
    1a36:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1a38:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1a3a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a3c:	98 a1       	ldd	r25, Y+32	; 0x20
    1a3e:	62 17       	cp	r22, r18
    1a40:	73 07       	cpc	r23, r19
    1a42:	84 07       	cpc	r24, r20
    1a44:	95 07       	cpc	r25, r21
    1a46:	20 f5       	brcc	.+72     	; 0x1a90 <__umoddi3+0xc16>
    1a48:	da 01       	movw	r26, r20
    1a4a:	c9 01       	movw	r24, r18
    1a4c:	6d a0       	ldd	r6, Y+37	; 0x25
    1a4e:	7e a0       	ldd	r7, Y+38	; 0x26
    1a50:	8f a0       	ldd	r8, Y+39	; 0x27
    1a52:	98 a4       	ldd	r9, Y+40	; 0x28
    1a54:	86 19       	sub	r24, r6
    1a56:	97 09       	sbc	r25, r7
    1a58:	a8 09       	sbc	r26, r8
    1a5a:	b9 09       	sbc	r27, r9
    1a5c:	e9 a4       	ldd	r14, Y+41	; 0x29
    1a5e:	fa a4       	ldd	r15, Y+42	; 0x2a
    1a60:	0b a5       	ldd	r16, Y+43	; 0x2b
    1a62:	1c a5       	ldd	r17, Y+44	; 0x2c
    1a64:	ae 18       	sub	r10, r14
    1a66:	bf 08       	sbc	r11, r15
    1a68:	c0 0a       	sbc	r12, r16
    1a6a:	d1 0a       	sbc	r13, r17
    1a6c:	ee 24       	eor	r14, r14
    1a6e:	ff 24       	eor	r15, r15
    1a70:	87 01       	movw	r16, r14
    1a72:	28 17       	cp	r18, r24
    1a74:	39 07       	cpc	r19, r25
    1a76:	4a 07       	cpc	r20, r26
    1a78:	5b 07       	cpc	r21, r27
    1a7a:	28 f4       	brcc	.+10     	; 0x1a86 <__umoddi3+0xc0c>
    1a7c:	21 e0       	ldi	r18, 0x01	; 1
    1a7e:	e2 2e       	mov	r14, r18
    1a80:	f1 2c       	mov	r15, r1
    1a82:	01 2d       	mov	r16, r1
    1a84:	11 2d       	mov	r17, r1
    1a86:	ae 18       	sub	r10, r14
    1a88:	bf 08       	sbc	r11, r15
    1a8a:	c0 0a       	sbc	r12, r16
    1a8c:	d1 0a       	sbc	r13, r17
    1a8e:	02 c0       	rjmp	.+4      	; 0x1a94 <__umoddi3+0xc1a>
    1a90:	da 01       	movw	r26, r20
    1a92:	c9 01       	movw	r24, r18
    1a94:	6d 8c       	ldd	r6, Y+29	; 0x1d
    1a96:	7e 8c       	ldd	r7, Y+30	; 0x1e
    1a98:	8f 8c       	ldd	r8, Y+31	; 0x1f
    1a9a:	98 a0       	ldd	r9, Y+32	; 0x20
    1a9c:	68 1a       	sub	r6, r24
    1a9e:	79 0a       	sbc	r7, r25
    1aa0:	8a 0a       	sbc	r8, r26
    1aa2:	9b 0a       	sbc	r9, r27
    1aa4:	49 8d       	ldd	r20, Y+25	; 0x19
    1aa6:	5a 8d       	ldd	r21, Y+26	; 0x1a
    1aa8:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1aaa:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1aac:	4a 19       	sub	r20, r10
    1aae:	5b 09       	sbc	r21, r11
    1ab0:	6c 09       	sbc	r22, r12
    1ab2:	7d 09       	sbc	r23, r13
    1ab4:	5a 01       	movw	r10, r20
    1ab6:	6b 01       	movw	r12, r22
    1ab8:	22 24       	eor	r2, r2
    1aba:	33 24       	eor	r3, r3
    1abc:	21 01       	movw	r4, r2
    1abe:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1ac0:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1ac2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ac4:	98 a1       	ldd	r25, Y+32	; 0x20
    1ac6:	66 15       	cp	r22, r6
    1ac8:	77 05       	cpc	r23, r7
    1aca:	88 05       	cpc	r24, r8
    1acc:	99 05       	cpc	r25, r9
    1ace:	28 f4       	brcc	.+10     	; 0x1ada <__umoddi3+0xc60>
    1ad0:	81 e0       	ldi	r24, 0x01	; 1
    1ad2:	28 2e       	mov	r2, r24
    1ad4:	31 2c       	mov	r3, r1
    1ad6:	41 2c       	mov	r4, r1
    1ad8:	51 2c       	mov	r5, r1
    1ada:	86 01       	movw	r16, r12
    1adc:	75 01       	movw	r14, r10
    1ade:	e2 18       	sub	r14, r2
    1ae0:	f3 08       	sbc	r15, r3
    1ae2:	04 09       	sbc	r16, r4
    1ae4:	15 09       	sbc	r17, r5
    1ae6:	a8 01       	movw	r20, r16
    1ae8:	97 01       	movw	r18, r14
    1aea:	66 96       	adiw	r28, 0x16	; 22
    1aec:	0f ac       	ldd	r0, Y+63	; 0x3f
    1aee:	66 97       	sbiw	r28, 0x16	; 22
    1af0:	04 c0       	rjmp	.+8      	; 0x1afa <__umoddi3+0xc80>
    1af2:	22 0f       	add	r18, r18
    1af4:	33 1f       	adc	r19, r19
    1af6:	44 1f       	adc	r20, r20
    1af8:	55 1f       	adc	r21, r21
    1afa:	0a 94       	dec	r0
    1afc:	d2 f7       	brpl	.-12     	; 0x1af2 <__umoddi3+0xc78>
    1afe:	d4 01       	movw	r26, r8
    1b00:	c3 01       	movw	r24, r6
    1b02:	67 96       	adiw	r28, 0x17	; 23
    1b04:	0f ac       	ldd	r0, Y+63	; 0x3f
    1b06:	67 97       	sbiw	r28, 0x17	; 23
    1b08:	04 c0       	rjmp	.+8      	; 0x1b12 <__umoddi3+0xc98>
    1b0a:	b6 95       	lsr	r27
    1b0c:	a7 95       	ror	r26
    1b0e:	97 95       	ror	r25
    1b10:	87 95       	ror	r24
    1b12:	0a 94       	dec	r0
    1b14:	d2 f7       	brpl	.-12     	; 0x1b0a <__umoddi3+0xc90>
    1b16:	28 2b       	or	r18, r24
    1b18:	39 2b       	or	r19, r25
    1b1a:	4a 2b       	or	r20, r26
    1b1c:	5b 2b       	or	r21, r27
    1b1e:	29 8b       	std	Y+17, r18	; 0x11
    1b20:	3a 8b       	std	Y+18, r19	; 0x12
    1b22:	4b 8b       	std	Y+19, r20	; 0x13
    1b24:	5c 8b       	std	Y+20, r21	; 0x14
    1b26:	67 96       	adiw	r28, 0x17	; 23
    1b28:	0f ac       	ldd	r0, Y+63	; 0x3f
    1b2a:	67 97       	sbiw	r28, 0x17	; 23
    1b2c:	04 c0       	rjmp	.+8      	; 0x1b36 <__umoddi3+0xcbc>
    1b2e:	16 95       	lsr	r17
    1b30:	07 95       	ror	r16
    1b32:	f7 94       	ror	r15
    1b34:	e7 94       	ror	r14
    1b36:	0a 94       	dec	r0
    1b38:	d2 f7       	brpl	.-12     	; 0x1b2e <__umoddi3+0xcb4>
    1b3a:	ed 8a       	std	Y+21, r14	; 0x15
    1b3c:	fe 8a       	std	Y+22, r15	; 0x16
    1b3e:	0f 8b       	std	Y+23, r16	; 0x17
    1b40:	18 8f       	std	Y+24, r17	; 0x18
    1b42:	3a 89       	ldd	r19, Y+18	; 0x12
    1b44:	4b 89       	ldd	r20, Y+19	; 0x13
    1b46:	5c 89       	ldd	r21, Y+20	; 0x14
    1b48:	6e 2d       	mov	r22, r14
    1b4a:	7e 89       	ldd	r23, Y+22	; 0x16
    1b4c:	8f 89       	ldd	r24, Y+23	; 0x17
    1b4e:	98 8d       	ldd	r25, Y+24	; 0x18
    1b50:	c5 5a       	subi	r28, 0xA5	; 165
    1b52:	df 4f       	sbci	r29, 0xFF	; 255
    1b54:	e2 e1       	ldi	r30, 0x12	; 18
    1b56:	0c 94 a3 32 	jmp	0x6546	; 0x6546 <__epilogue_restores__>

00001b5a <UART_vInit>:



#include "../UART/UART_prog.h"

void UART_vInit(const UART_tcfgInitialize *LOCAL_tcfgUART){
    1b5a:	df 93       	push	r29
    1b5c:	cf 93       	push	r28
    1b5e:	00 d0       	rcall	.+0      	; 0x1b60 <UART_vInit+0x6>
    1b60:	cd b7       	in	r28, 0x3d	; 61
    1b62:	de b7       	in	r29, 0x3e	; 62
    1b64:	9a 83       	std	Y+2, r25	; 0x02
    1b66:	89 83       	std	Y+1, r24	; 0x01


	if(LOCAL_tcfgUART->GLOBAL_tcfgCharSize == CHAR_5_BITS){
    1b68:	e9 81       	ldd	r30, Y+1	; 0x01
    1b6a:	fa 81       	ldd	r31, Y+2	; 0x02
    1b6c:	80 81       	ld	r24, Z
    1b6e:	88 23       	and	r24, r24
    1b70:	b1 f4       	brne	.+44     	; 0x1b9e <UART_vInit+0x44>
		CLR_BIT(UCSRC_REG, UCSZ0_BIT);
    1b72:	a0 e4       	ldi	r26, 0x40	; 64
    1b74:	b0 e0       	ldi	r27, 0x00	; 0
    1b76:	e0 e4       	ldi	r30, 0x40	; 64
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	80 81       	ld	r24, Z
    1b7c:	8d 7f       	andi	r24, 0xFD	; 253
    1b7e:	8c 93       	st	X, r24
		CLR_BIT(UCSRC_REG, UCSZ1_BIT);
    1b80:	a0 e4       	ldi	r26, 0x40	; 64
    1b82:	b0 e0       	ldi	r27, 0x00	; 0
    1b84:	e0 e4       	ldi	r30, 0x40	; 64
    1b86:	f0 e0       	ldi	r31, 0x00	; 0
    1b88:	80 81       	ld	r24, Z
    1b8a:	8b 7f       	andi	r24, 0xFB	; 251
    1b8c:	8c 93       	st	X, r24
		CLR_BIT(UCSRB_REG, UCSZ2_BIT);
    1b8e:	aa e2       	ldi	r26, 0x2A	; 42
    1b90:	b0 e0       	ldi	r27, 0x00	; 0
    1b92:	ea e2       	ldi	r30, 0x2A	; 42
    1b94:	f0 e0       	ldi	r31, 0x00	; 0
    1b96:	80 81       	ld	r24, Z
    1b98:	8b 7f       	andi	r24, 0xFB	; 251
    1b9a:	8c 93       	st	X, r24
    1b9c:	6b c0       	rjmp	.+214    	; 0x1c74 <UART_vInit+0x11a>
	}
	else if((LOCAL_tcfgUART->GLOBAL_tcfgCharSize == CHAR_6_BITS)){
    1b9e:	e9 81       	ldd	r30, Y+1	; 0x01
    1ba0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ba2:	80 81       	ld	r24, Z
    1ba4:	81 30       	cpi	r24, 0x01	; 1
    1ba6:	b1 f4       	brne	.+44     	; 0x1bd4 <UART_vInit+0x7a>
		SET_BIT(UCSRC_REG, UCSZ0_BIT);
    1ba8:	a0 e4       	ldi	r26, 0x40	; 64
    1baa:	b0 e0       	ldi	r27, 0x00	; 0
    1bac:	e0 e4       	ldi	r30, 0x40	; 64
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	80 81       	ld	r24, Z
    1bb2:	82 60       	ori	r24, 0x02	; 2
    1bb4:	8c 93       	st	X, r24
		CLR_BIT(UCSRC_REG, UCSZ1_BIT);
    1bb6:	a0 e4       	ldi	r26, 0x40	; 64
    1bb8:	b0 e0       	ldi	r27, 0x00	; 0
    1bba:	e0 e4       	ldi	r30, 0x40	; 64
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	80 81       	ld	r24, Z
    1bc0:	8b 7f       	andi	r24, 0xFB	; 251
    1bc2:	8c 93       	st	X, r24
		CLR_BIT(UCSRB_REG, UCSZ2_BIT);
    1bc4:	aa e2       	ldi	r26, 0x2A	; 42
    1bc6:	b0 e0       	ldi	r27, 0x00	; 0
    1bc8:	ea e2       	ldi	r30, 0x2A	; 42
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	80 81       	ld	r24, Z
    1bce:	8b 7f       	andi	r24, 0xFB	; 251
    1bd0:	8c 93       	st	X, r24
    1bd2:	50 c0       	rjmp	.+160    	; 0x1c74 <UART_vInit+0x11a>

	}
	else if((LOCAL_tcfgUART->GLOBAL_tcfgCharSize == CHAR_7_BITS)){
    1bd4:	e9 81       	ldd	r30, Y+1	; 0x01
    1bd6:	fa 81       	ldd	r31, Y+2	; 0x02
    1bd8:	80 81       	ld	r24, Z
    1bda:	82 30       	cpi	r24, 0x02	; 2
    1bdc:	b1 f4       	brne	.+44     	; 0x1c0a <UART_vInit+0xb0>
		CLR_BIT(UCSRC_REG, UCSZ0_BIT);
    1bde:	a0 e4       	ldi	r26, 0x40	; 64
    1be0:	b0 e0       	ldi	r27, 0x00	; 0
    1be2:	e0 e4       	ldi	r30, 0x40	; 64
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	80 81       	ld	r24, Z
    1be8:	8d 7f       	andi	r24, 0xFD	; 253
    1bea:	8c 93       	st	X, r24
		SET_BIT(UCSRC_REG, UCSZ1_BIT);
    1bec:	a0 e4       	ldi	r26, 0x40	; 64
    1bee:	b0 e0       	ldi	r27, 0x00	; 0
    1bf0:	e0 e4       	ldi	r30, 0x40	; 64
    1bf2:	f0 e0       	ldi	r31, 0x00	; 0
    1bf4:	80 81       	ld	r24, Z
    1bf6:	84 60       	ori	r24, 0x04	; 4
    1bf8:	8c 93       	st	X, r24
		CLR_BIT(UCSRB_REG, UCSZ2_BIT);
    1bfa:	aa e2       	ldi	r26, 0x2A	; 42
    1bfc:	b0 e0       	ldi	r27, 0x00	; 0
    1bfe:	ea e2       	ldi	r30, 0x2A	; 42
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	80 81       	ld	r24, Z
    1c04:	8b 7f       	andi	r24, 0xFB	; 251
    1c06:	8c 93       	st	X, r24
    1c08:	35 c0       	rjmp	.+106    	; 0x1c74 <UART_vInit+0x11a>

	}
	else if((LOCAL_tcfgUART->GLOBAL_tcfgCharSize == CHAR_8_BITS)){
    1c0a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c0c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c0e:	80 81       	ld	r24, Z
    1c10:	83 30       	cpi	r24, 0x03	; 3
    1c12:	b1 f4       	brne	.+44     	; 0x1c40 <UART_vInit+0xe6>
		SET_BIT(UCSRC_REG, UCSZ0_BIT);
    1c14:	a0 e4       	ldi	r26, 0x40	; 64
    1c16:	b0 e0       	ldi	r27, 0x00	; 0
    1c18:	e0 e4       	ldi	r30, 0x40	; 64
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	80 81       	ld	r24, Z
    1c1e:	82 60       	ori	r24, 0x02	; 2
    1c20:	8c 93       	st	X, r24
		SET_BIT(UCSRC_REG, UCSZ1_BIT);
    1c22:	a0 e4       	ldi	r26, 0x40	; 64
    1c24:	b0 e0       	ldi	r27, 0x00	; 0
    1c26:	e0 e4       	ldi	r30, 0x40	; 64
    1c28:	f0 e0       	ldi	r31, 0x00	; 0
    1c2a:	80 81       	ld	r24, Z
    1c2c:	84 60       	ori	r24, 0x04	; 4
    1c2e:	8c 93       	st	X, r24
		CLR_BIT(UCSRB_REG, UCSZ2_BIT);
    1c30:	aa e2       	ldi	r26, 0x2A	; 42
    1c32:	b0 e0       	ldi	r27, 0x00	; 0
    1c34:	ea e2       	ldi	r30, 0x2A	; 42
    1c36:	f0 e0       	ldi	r31, 0x00	; 0
    1c38:	80 81       	ld	r24, Z
    1c3a:	8b 7f       	andi	r24, 0xFB	; 251
    1c3c:	8c 93       	st	X, r24
    1c3e:	1a c0       	rjmp	.+52     	; 0x1c74 <UART_vInit+0x11a>
	}
	else if((LOCAL_tcfgUART->GLOBAL_tcfgCharSize == CHAR_9_BITS)){
    1c40:	e9 81       	ldd	r30, Y+1	; 0x01
    1c42:	fa 81       	ldd	r31, Y+2	; 0x02
    1c44:	80 81       	ld	r24, Z
    1c46:	84 30       	cpi	r24, 0x04	; 4
    1c48:	a9 f4       	brne	.+42     	; 0x1c74 <UART_vInit+0x11a>
		SET_BIT(UCSRC_REG, UCSZ0_BIT);
    1c4a:	a0 e4       	ldi	r26, 0x40	; 64
    1c4c:	b0 e0       	ldi	r27, 0x00	; 0
    1c4e:	e0 e4       	ldi	r30, 0x40	; 64
    1c50:	f0 e0       	ldi	r31, 0x00	; 0
    1c52:	80 81       	ld	r24, Z
    1c54:	82 60       	ori	r24, 0x02	; 2
    1c56:	8c 93       	st	X, r24
		SET_BIT(UCSRC_REG, UCSZ1_BIT);
    1c58:	a0 e4       	ldi	r26, 0x40	; 64
    1c5a:	b0 e0       	ldi	r27, 0x00	; 0
    1c5c:	e0 e4       	ldi	r30, 0x40	; 64
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	80 81       	ld	r24, Z
    1c62:	84 60       	ori	r24, 0x04	; 4
    1c64:	8c 93       	st	X, r24
		SET_BIT(UCSRB_REG, UCSZ2_BIT);
    1c66:	aa e2       	ldi	r26, 0x2A	; 42
    1c68:	b0 e0       	ldi	r27, 0x00	; 0
    1c6a:	ea e2       	ldi	r30, 0x2A	; 42
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	80 81       	ld	r24, Z
    1c70:	84 60       	ori	r24, 0x04	; 4
    1c72:	8c 93       	st	X, r24
	}
	else { /* Do Nothing */ }

	if(LOCAL_tcfgUART->GLOBAL_tcfgParityState == PARITY_DISABLED){
    1c74:	e9 81       	ldd	r30, Y+1	; 0x01
    1c76:	fa 81       	ldd	r31, Y+2	; 0x02
    1c78:	81 81       	ldd	r24, Z+1	; 0x01
    1c7a:	88 23       	and	r24, r24
    1c7c:	79 f4       	brne	.+30     	; 0x1c9c <UART_vInit+0x142>
		CLR_BIT(UCSRC_REG, UPM0_BIT);
    1c7e:	a0 e4       	ldi	r26, 0x40	; 64
    1c80:	b0 e0       	ldi	r27, 0x00	; 0
    1c82:	e0 e4       	ldi	r30, 0x40	; 64
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	80 81       	ld	r24, Z
    1c88:	8f 7e       	andi	r24, 0xEF	; 239
    1c8a:	8c 93       	st	X, r24
		CLR_BIT(UCSRC_REG, UPM1_BIT);
    1c8c:	a0 e4       	ldi	r26, 0x40	; 64
    1c8e:	b0 e0       	ldi	r27, 0x00	; 0
    1c90:	e0 e4       	ldi	r30, 0x40	; 64
    1c92:	f0 e0       	ldi	r31, 0x00	; 0
    1c94:	80 81       	ld	r24, Z
    1c96:	8f 7d       	andi	r24, 0xDF	; 223
    1c98:	8c 93       	st	X, r24
    1c9a:	27 c0       	rjmp	.+78     	; 0x1cea <UART_vInit+0x190>
	}
	else if(LOCAL_tcfgUART->GLOBAL_tcfgParityState == PARITY_EVEN){
    1c9c:	e9 81       	ldd	r30, Y+1	; 0x01
    1c9e:	fa 81       	ldd	r31, Y+2	; 0x02
    1ca0:	81 81       	ldd	r24, Z+1	; 0x01
    1ca2:	81 30       	cpi	r24, 0x01	; 1
    1ca4:	79 f4       	brne	.+30     	; 0x1cc4 <UART_vInit+0x16a>
		CLR_BIT(UCSRC_REG, UPM0_BIT);
    1ca6:	a0 e4       	ldi	r26, 0x40	; 64
    1ca8:	b0 e0       	ldi	r27, 0x00	; 0
    1caa:	e0 e4       	ldi	r30, 0x40	; 64
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	80 81       	ld	r24, Z
    1cb0:	8f 7e       	andi	r24, 0xEF	; 239
    1cb2:	8c 93       	st	X, r24
		SET_BIT(UCSRC_REG, UPM1_BIT);
    1cb4:	a0 e4       	ldi	r26, 0x40	; 64
    1cb6:	b0 e0       	ldi	r27, 0x00	; 0
    1cb8:	e0 e4       	ldi	r30, 0x40	; 64
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	80 81       	ld	r24, Z
    1cbe:	80 62       	ori	r24, 0x20	; 32
    1cc0:	8c 93       	st	X, r24
    1cc2:	13 c0       	rjmp	.+38     	; 0x1cea <UART_vInit+0x190>
	}
	else if(LOCAL_tcfgUART->GLOBAL_tcfgParityState == PARITY_ODD){
    1cc4:	e9 81       	ldd	r30, Y+1	; 0x01
    1cc6:	fa 81       	ldd	r31, Y+2	; 0x02
    1cc8:	81 81       	ldd	r24, Z+1	; 0x01
    1cca:	82 30       	cpi	r24, 0x02	; 2
    1ccc:	71 f4       	brne	.+28     	; 0x1cea <UART_vInit+0x190>
		SET_BIT(UCSRC_REG, UPM0_BIT);
    1cce:	a0 e4       	ldi	r26, 0x40	; 64
    1cd0:	b0 e0       	ldi	r27, 0x00	; 0
    1cd2:	e0 e4       	ldi	r30, 0x40	; 64
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	80 81       	ld	r24, Z
    1cd8:	80 61       	ori	r24, 0x10	; 16
    1cda:	8c 93       	st	X, r24
		SET_BIT(UCSRC_REG, UPM1_BIT);
    1cdc:	a0 e4       	ldi	r26, 0x40	; 64
    1cde:	b0 e0       	ldi	r27, 0x00	; 0
    1ce0:	e0 e4       	ldi	r30, 0x40	; 64
    1ce2:	f0 e0       	ldi	r31, 0x00	; 0
    1ce4:	80 81       	ld	r24, Z
    1ce6:	80 62       	ori	r24, 0x20	; 32
    1ce8:	8c 93       	st	X, r24
	}
	else { /* Do Nothing */ }

	if(LOCAL_tcfgUART->GLOBAL_tcfgStopBits == STOP_BITS_1){
    1cea:	e9 81       	ldd	r30, Y+1	; 0x01
    1cec:	fa 81       	ldd	r31, Y+2	; 0x02
    1cee:	82 81       	ldd	r24, Z+2	; 0x02
    1cf0:	88 23       	and	r24, r24
    1cf2:	41 f4       	brne	.+16     	; 0x1d04 <UART_vInit+0x1aa>
		CLR_BIT(UCSRC_REG, USBS_BIT);
    1cf4:	a0 e4       	ldi	r26, 0x40	; 64
    1cf6:	b0 e0       	ldi	r27, 0x00	; 0
    1cf8:	e0 e4       	ldi	r30, 0x40	; 64
    1cfa:	f0 e0       	ldi	r31, 0x00	; 0
    1cfc:	80 81       	ld	r24, Z
    1cfe:	87 7f       	andi	r24, 0xF7	; 247
    1d00:	8c 93       	st	X, r24
    1d02:	0c c0       	rjmp	.+24     	; 0x1d1c <UART_vInit+0x1c2>
	}
	else if(LOCAL_tcfgUART->GLOBAL_tcfgStopBits == STOP_BITS_2){
    1d04:	e9 81       	ldd	r30, Y+1	; 0x01
    1d06:	fa 81       	ldd	r31, Y+2	; 0x02
    1d08:	82 81       	ldd	r24, Z+2	; 0x02
    1d0a:	81 30       	cpi	r24, 0x01	; 1
    1d0c:	39 f4       	brne	.+14     	; 0x1d1c <UART_vInit+0x1c2>
		SET_BIT(UCSRC_REG, USBS_BIT);
    1d0e:	a0 e4       	ldi	r26, 0x40	; 64
    1d10:	b0 e0       	ldi	r27, 0x00	; 0
    1d12:	e0 e4       	ldi	r30, 0x40	; 64
    1d14:	f0 e0       	ldi	r31, 0x00	; 0
    1d16:	80 81       	ld	r24, Z
    1d18:	88 60       	ori	r24, 0x08	; 8
    1d1a:	8c 93       	st	X, r24
	}
	else { /* Do Nothing */ }

	if(LOCAL_tcfgUART->GLOBAL_tcfgUartInterrupt == UART_INTERRUPT_DISABLED){
    1d1c:	e9 81       	ldd	r30, Y+1	; 0x01
    1d1e:	fa 81       	ldd	r31, Y+2	; 0x02
    1d20:	83 81       	ldd	r24, Z+3	; 0x03
    1d22:	88 23       	and	r24, r24
    1d24:	b1 f4       	brne	.+44     	; 0x1d52 <UART_vInit+0x1f8>
		CLR_BIT(UCSRB_REG, RXCIE_BIT);
    1d26:	aa e2       	ldi	r26, 0x2A	; 42
    1d28:	b0 e0       	ldi	r27, 0x00	; 0
    1d2a:	ea e2       	ldi	r30, 0x2A	; 42
    1d2c:	f0 e0       	ldi	r31, 0x00	; 0
    1d2e:	80 81       	ld	r24, Z
    1d30:	8f 77       	andi	r24, 0x7F	; 127
    1d32:	8c 93       	st	X, r24
		CLR_BIT(UCSRB_REG, UDRIE_BIT);
    1d34:	aa e2       	ldi	r26, 0x2A	; 42
    1d36:	b0 e0       	ldi	r27, 0x00	; 0
    1d38:	ea e2       	ldi	r30, 0x2A	; 42
    1d3a:	f0 e0       	ldi	r31, 0x00	; 0
    1d3c:	80 81       	ld	r24, Z
    1d3e:	8f 7d       	andi	r24, 0xDF	; 223
    1d40:	8c 93       	st	X, r24
		CLR_BIT(UCSRB_REG, TXCIE_BIT);
    1d42:	aa e2       	ldi	r26, 0x2A	; 42
    1d44:	b0 e0       	ldi	r27, 0x00	; 0
    1d46:	ea e2       	ldi	r30, 0x2A	; 42
    1d48:	f0 e0       	ldi	r31, 0x00	; 0
    1d4a:	80 81       	ld	r24, Z
    1d4c:	8f 7b       	andi	r24, 0xBF	; 191
    1d4e:	8c 93       	st	X, r24
    1d50:	1a c0       	rjmp	.+52     	; 0x1d86 <UART_vInit+0x22c>
	}
	else if(LOCAL_tcfgUART->GLOBAL_tcfgUartInterrupt == UART_INTERRUPT_ENABLED){
    1d52:	e9 81       	ldd	r30, Y+1	; 0x01
    1d54:	fa 81       	ldd	r31, Y+2	; 0x02
    1d56:	83 81       	ldd	r24, Z+3	; 0x03
    1d58:	81 30       	cpi	r24, 0x01	; 1
    1d5a:	a9 f4       	brne	.+42     	; 0x1d86 <UART_vInit+0x22c>
		SET_BIT(UCSRB_REG, RXCIE_BIT);
    1d5c:	aa e2       	ldi	r26, 0x2A	; 42
    1d5e:	b0 e0       	ldi	r27, 0x00	; 0
    1d60:	ea e2       	ldi	r30, 0x2A	; 42
    1d62:	f0 e0       	ldi	r31, 0x00	; 0
    1d64:	80 81       	ld	r24, Z
    1d66:	80 68       	ori	r24, 0x80	; 128
    1d68:	8c 93       	st	X, r24
		SET_BIT(UCSRB_REG, UDRIE_BIT);
    1d6a:	aa e2       	ldi	r26, 0x2A	; 42
    1d6c:	b0 e0       	ldi	r27, 0x00	; 0
    1d6e:	ea e2       	ldi	r30, 0x2A	; 42
    1d70:	f0 e0       	ldi	r31, 0x00	; 0
    1d72:	80 81       	ld	r24, Z
    1d74:	80 62       	ori	r24, 0x20	; 32
    1d76:	8c 93       	st	X, r24
		SET_BIT(UCSRB_REG, TXCIE_BIT);
    1d78:	aa e2       	ldi	r26, 0x2A	; 42
    1d7a:	b0 e0       	ldi	r27, 0x00	; 0
    1d7c:	ea e2       	ldi	r30, 0x2A	; 42
    1d7e:	f0 e0       	ldi	r31, 0x00	; 0
    1d80:	80 81       	ld	r24, Z
    1d82:	80 64       	ori	r24, 0x40	; 64
    1d84:	8c 93       	st	X, r24
	}
	else { /* Do Nothing */ }

	if(LOCAL_tcfgUART->GLOBAL_tcfgUartClkMode == UART_ASYNCHRONOUS){
    1d86:	e9 81       	ldd	r30, Y+1	; 0x01
    1d88:	fa 81       	ldd	r31, Y+2	; 0x02
    1d8a:	87 81       	ldd	r24, Z+7	; 0x07
    1d8c:	81 30       	cpi	r24, 0x01	; 1
    1d8e:	41 f4       	brne	.+16     	; 0x1da0 <UART_vInit+0x246>
		CLR_BIT(UCSRC_REG, UMSEL_BIT);
    1d90:	a0 e4       	ldi	r26, 0x40	; 64
    1d92:	b0 e0       	ldi	r27, 0x00	; 0
    1d94:	e0 e4       	ldi	r30, 0x40	; 64
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	80 81       	ld	r24, Z
    1d9a:	8f 7b       	andi	r24, 0xBF	; 191
    1d9c:	8c 93       	st	X, r24
    1d9e:	0c c0       	rjmp	.+24     	; 0x1db8 <UART_vInit+0x25e>
	}
	else if(LOCAL_tcfgUART->GLOBAL_tcfgUartClkMode == UART_SYNCHRONOUS){
    1da0:	e9 81       	ldd	r30, Y+1	; 0x01
    1da2:	fa 81       	ldd	r31, Y+2	; 0x02
    1da4:	87 81       	ldd	r24, Z+7	; 0x07
    1da6:	88 23       	and	r24, r24
    1da8:	39 f4       	brne	.+14     	; 0x1db8 <UART_vInit+0x25e>
		SET_BIT(UCSRC_REG, UMSEL_BIT);
    1daa:	a0 e4       	ldi	r26, 0x40	; 64
    1dac:	b0 e0       	ldi	r27, 0x00	; 0
    1dae:	e0 e4       	ldi	r30, 0x40	; 64
    1db0:	f0 e0       	ldi	r31, 0x00	; 0
    1db2:	80 81       	ld	r24, Z
    1db4:	80 64       	ori	r24, 0x40	; 64
    1db6:	8c 93       	st	X, r24
	}
	else { /* Do Nothing */ }

	if(LOCAL_tcfgUART->GLOBAL_tcfgUartCommMode == UART_2X_SPEED){
    1db8:	e9 81       	ldd	r30, Y+1	; 0x01
    1dba:	fa 81       	ldd	r31, Y+2	; 0x02
    1dbc:	80 85       	ldd	r24, Z+8	; 0x08
    1dbe:	81 30       	cpi	r24, 0x01	; 1
    1dc0:	c1 f4       	brne	.+48     	; 0x1df2 <UART_vInit+0x298>
		SET_BIT(UCSRA_REG, U2X_BIT);
    1dc2:	ab e2       	ldi	r26, 0x2B	; 43
    1dc4:	b0 e0       	ldi	r27, 0x00	; 0
    1dc6:	eb e2       	ldi	r30, 0x2B	; 43
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	80 81       	ld	r24, Z
    1dcc:	82 60       	ori	r24, 0x02	; 2
    1dce:	8c 93       	st	X, r24
		UBRRL_REG = LOCAL_tcfgUART->GLOBAL_tcfgUartBaudRate2X;
    1dd0:	a9 e2       	ldi	r26, 0x29	; 41
    1dd2:	b0 e0       	ldi	r27, 0x00	; 0
    1dd4:	e9 81       	ldd	r30, Y+1	; 0x01
    1dd6:	fa 81       	ldd	r31, Y+2	; 0x02
    1dd8:	84 81       	ldd	r24, Z+4	; 0x04
    1dda:	95 81       	ldd	r25, Z+5	; 0x05
    1ddc:	8c 93       	st	X, r24
		UBRRH_REG = ((LOCAL_tcfgUART->GLOBAL_tcfgUartBaudRate2X)>>8);
    1dde:	a0 e4       	ldi	r26, 0x40	; 64
    1de0:	b0 e0       	ldi	r27, 0x00	; 0
    1de2:	e9 81       	ldd	r30, Y+1	; 0x01
    1de4:	fa 81       	ldd	r31, Y+2	; 0x02
    1de6:	84 81       	ldd	r24, Z+4	; 0x04
    1de8:	95 81       	ldd	r25, Z+5	; 0x05
    1dea:	89 2f       	mov	r24, r25
    1dec:	99 27       	eor	r25, r25
    1dee:	8c 93       	st	X, r24
    1df0:	1d c0       	rjmp	.+58     	; 0x1e2c <UART_vInit+0x2d2>
	}
	else if(LOCAL_tcfgUART->GLOBAL_tcfgUartCommMode == UART_1X_SPEED){
    1df2:	e9 81       	ldd	r30, Y+1	; 0x01
    1df4:	fa 81       	ldd	r31, Y+2	; 0x02
    1df6:	80 85       	ldd	r24, Z+8	; 0x08
    1df8:	88 23       	and	r24, r24
    1dfa:	c1 f4       	brne	.+48     	; 0x1e2c <UART_vInit+0x2d2>
		CLR_BIT(UCSRA_REG, U2X_BIT);
    1dfc:	ab e2       	ldi	r26, 0x2B	; 43
    1dfe:	b0 e0       	ldi	r27, 0x00	; 0
    1e00:	eb e2       	ldi	r30, 0x2B	; 43
    1e02:	f0 e0       	ldi	r31, 0x00	; 0
    1e04:	80 81       	ld	r24, Z
    1e06:	8d 7f       	andi	r24, 0xFD	; 253
    1e08:	8c 93       	st	X, r24
		UBRRL_REG = LOCAL_tcfgUART->GLOBAL_tcfgUartBaudRate1X;
    1e0a:	a9 e2       	ldi	r26, 0x29	; 41
    1e0c:	b0 e0       	ldi	r27, 0x00	; 0
    1e0e:	e9 81       	ldd	r30, Y+1	; 0x01
    1e10:	fa 81       	ldd	r31, Y+2	; 0x02
    1e12:	86 81       	ldd	r24, Z+6	; 0x06
    1e14:	8c 93       	st	X, r24
		UBRRH_REG = ((LOCAL_tcfgUART->GLOBAL_tcfgUartBaudRate1X)>>8);
    1e16:	a0 e4       	ldi	r26, 0x40	; 64
    1e18:	b0 e0       	ldi	r27, 0x00	; 0
    1e1a:	e9 81       	ldd	r30, Y+1	; 0x01
    1e1c:	fa 81       	ldd	r31, Y+2	; 0x02
    1e1e:	86 81       	ldd	r24, Z+6	; 0x06
    1e20:	88 2f       	mov	r24, r24
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	89 2f       	mov	r24, r25
    1e26:	99 0f       	add	r25, r25
    1e28:	99 0b       	sbc	r25, r25
    1e2a:	8c 93       	st	X, r24
	}
	else { /* Do Nothing */ }
}
    1e2c:	0f 90       	pop	r0
    1e2e:	0f 90       	pop	r0
    1e30:	cf 91       	pop	r28
    1e32:	df 91       	pop	r29
    1e34:	08 95       	ret

00001e36 <UART_vEnable>:

void UART_vEnable(const UART_tcfgInitialize *LOCAL_tcfgUART){
    1e36:	df 93       	push	r29
    1e38:	cf 93       	push	r28
    1e3a:	00 d0       	rcall	.+0      	; 0x1e3c <UART_vEnable+0x6>
    1e3c:	cd b7       	in	r28, 0x3d	; 61
    1e3e:	de b7       	in	r29, 0x3e	; 62
    1e40:	9a 83       	std	Y+2, r25	; 0x02
    1e42:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(UCSRB_REG, RXEN_BIT);
    1e44:	aa e2       	ldi	r26, 0x2A	; 42
    1e46:	b0 e0       	ldi	r27, 0x00	; 0
    1e48:	ea e2       	ldi	r30, 0x2A	; 42
    1e4a:	f0 e0       	ldi	r31, 0x00	; 0
    1e4c:	80 81       	ld	r24, Z
    1e4e:	80 61       	ori	r24, 0x10	; 16
    1e50:	8c 93       	st	X, r24
	SET_BIT(UCSRB_REG, TXEN_BIT);
    1e52:	aa e2       	ldi	r26, 0x2A	; 42
    1e54:	b0 e0       	ldi	r27, 0x00	; 0
    1e56:	ea e2       	ldi	r30, 0x2A	; 42
    1e58:	f0 e0       	ldi	r31, 0x00	; 0
    1e5a:	80 81       	ld	r24, Z
    1e5c:	88 60       	ori	r24, 0x08	; 8
    1e5e:	8c 93       	st	X, r24
}
    1e60:	0f 90       	pop	r0
    1e62:	0f 90       	pop	r0
    1e64:	cf 91       	pop	r28
    1e66:	df 91       	pop	r29
    1e68:	08 95       	ret

00001e6a <UART_vDisable>:

void UART_vDisable(const UART_tcfgInitialize *LOCAL_tcfgUART){
    1e6a:	df 93       	push	r29
    1e6c:	cf 93       	push	r28
    1e6e:	00 d0       	rcall	.+0      	; 0x1e70 <UART_vDisable+0x6>
    1e70:	cd b7       	in	r28, 0x3d	; 61
    1e72:	de b7       	in	r29, 0x3e	; 62
    1e74:	9a 83       	std	Y+2, r25	; 0x02
    1e76:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRB_REG, RXEN_BIT);
    1e78:	aa e2       	ldi	r26, 0x2A	; 42
    1e7a:	b0 e0       	ldi	r27, 0x00	; 0
    1e7c:	ea e2       	ldi	r30, 0x2A	; 42
    1e7e:	f0 e0       	ldi	r31, 0x00	; 0
    1e80:	80 81       	ld	r24, Z
    1e82:	8f 7e       	andi	r24, 0xEF	; 239
    1e84:	8c 93       	st	X, r24
	CLR_BIT(UCSRB_REG, TXEN_BIT);
    1e86:	aa e2       	ldi	r26, 0x2A	; 42
    1e88:	b0 e0       	ldi	r27, 0x00	; 0
    1e8a:	ea e2       	ldi	r30, 0x2A	; 42
    1e8c:	f0 e0       	ldi	r31, 0x00	; 0
    1e8e:	80 81       	ld	r24, Z
    1e90:	87 7f       	andi	r24, 0xF7	; 247
    1e92:	8c 93       	st	X, r24
}
    1e94:	0f 90       	pop	r0
    1e96:	0f 90       	pop	r0
    1e98:	cf 91       	pop	r28
    1e9a:	df 91       	pop	r29
    1e9c:	08 95       	ret

00001e9e <UART_vSendData>:

void UART_vSendData(u8 LOCAL_u8Data){
    1e9e:	df 93       	push	r29
    1ea0:	cf 93       	push	r28
    1ea2:	0f 92       	push	r0
    1ea4:	cd b7       	in	r28, 0x3d	; 61
    1ea6:	de b7       	in	r29, 0x3e	; 62
    1ea8:	89 83       	std	Y+1, r24	; 0x01
	while( GET_BIT(UCSRA_REG, UDRE_BIT) != 1 );
    1eaa:	eb e2       	ldi	r30, 0x2B	; 43
    1eac:	f0 e0       	ldi	r31, 0x00	; 0
    1eae:	80 81       	ld	r24, Z
    1eb0:	82 95       	swap	r24
    1eb2:	86 95       	lsr	r24
    1eb4:	87 70       	andi	r24, 0x07	; 7
    1eb6:	88 2f       	mov	r24, r24
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	81 70       	andi	r24, 0x01	; 1
    1ebc:	90 70       	andi	r25, 0x00	; 0
    1ebe:	00 97       	sbiw	r24, 0x00	; 0
    1ec0:	a1 f3       	breq	.-24     	; 0x1eaa <UART_vSendData+0xc>
	UDR_REG = LOCAL_u8Data;
    1ec2:	ec e2       	ldi	r30, 0x2C	; 44
    1ec4:	f0 e0       	ldi	r31, 0x00	; 0
    1ec6:	89 81       	ldd	r24, Y+1	; 0x01
    1ec8:	80 83       	st	Z, r24
}
    1eca:	0f 90       	pop	r0
    1ecc:	cf 91       	pop	r28
    1ece:	df 91       	pop	r29
    1ed0:	08 95       	ret

00001ed2 <UART_u8ReceiveData>:

u8 UART_u8ReceiveData(void){
    1ed2:	df 93       	push	r29
    1ed4:	cf 93       	push	r28
    1ed6:	0f 92       	push	r0
    1ed8:	cd b7       	in	r28, 0x3d	; 61
    1eda:	de b7       	in	r29, 0x3e	; 62
	u8 local_u8Data;
	while( GET_BIT(UCSRA_REG, RXC_BIT) != 1 );
    1edc:	eb e2       	ldi	r30, 0x2B	; 43
    1ede:	f0 e0       	ldi	r31, 0x00	; 0
    1ee0:	80 81       	ld	r24, Z
    1ee2:	88 1f       	adc	r24, r24
    1ee4:	88 27       	eor	r24, r24
    1ee6:	88 1f       	adc	r24, r24
    1ee8:	81 30       	cpi	r24, 0x01	; 1
    1eea:	c1 f7       	brne	.-16     	; 0x1edc <UART_u8ReceiveData+0xa>
	local_u8Data = UDR_REG;
    1eec:	ec e2       	ldi	r30, 0x2C	; 44
    1eee:	f0 e0       	ldi	r31, 0x00	; 0
    1ef0:	80 81       	ld	r24, Z
    1ef2:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRA_REG, RXC_BIT);
    1ef4:	ab e2       	ldi	r26, 0x2B	; 43
    1ef6:	b0 e0       	ldi	r27, 0x00	; 0
    1ef8:	eb e2       	ldi	r30, 0x2B	; 43
    1efa:	f0 e0       	ldi	r31, 0x00	; 0
    1efc:	80 81       	ld	r24, Z
    1efe:	8f 77       	andi	r24, 0x7F	; 127
    1f00:	8c 93       	st	X, r24
	return local_u8Data;
    1f02:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f04:	0f 90       	pop	r0
    1f06:	cf 91       	pop	r28
    1f08:	df 91       	pop	r29
    1f0a:	08 95       	ret

00001f0c <UART_vSendString>:

void UART_vSendString(u8 *Copy_u8Str){
    1f0c:	df 93       	push	r29
    1f0e:	cf 93       	push	r28
    1f10:	00 d0       	rcall	.+0      	; 0x1f12 <UART_vSendString+0x6>
    1f12:	cd b7       	in	r28, 0x3d	; 61
    1f14:	de b7       	in	r29, 0x3e	; 62
    1f16:	9a 83       	std	Y+2, r25	; 0x02
    1f18:	89 83       	std	Y+1, r24	; 0x01
    1f1a:	0b c0       	rjmp	.+22     	; 0x1f32 <UART_vSendString+0x26>
	while(*Copy_u8Str){
		UART_vSendData(*(Copy_u8Str++));
    1f1c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f1e:	fa 81       	ldd	r31, Y+2	; 0x02
    1f20:	20 81       	ld	r18, Z
    1f22:	89 81       	ldd	r24, Y+1	; 0x01
    1f24:	9a 81       	ldd	r25, Y+2	; 0x02
    1f26:	01 96       	adiw	r24, 0x01	; 1
    1f28:	9a 83       	std	Y+2, r25	; 0x02
    1f2a:	89 83       	std	Y+1, r24	; 0x01
    1f2c:	82 2f       	mov	r24, r18
    1f2e:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <UART_vSendData>
	CLR_BIT(UCSRA_REG, RXC_BIT);
	return local_u8Data;
}

void UART_vSendString(u8 *Copy_u8Str){
	while(*Copy_u8Str){
    1f32:	e9 81       	ldd	r30, Y+1	; 0x01
    1f34:	fa 81       	ldd	r31, Y+2	; 0x02
    1f36:	80 81       	ld	r24, Z
    1f38:	88 23       	and	r24, r24
    1f3a:	81 f7       	brne	.-32     	; 0x1f1c <UART_vSendString+0x10>
		UART_vSendData(*(Copy_u8Str++));
	}
}
    1f3c:	0f 90       	pop	r0
    1f3e:	0f 90       	pop	r0
    1f40:	cf 91       	pop	r28
    1f42:	df 91       	pop	r29
    1f44:	08 95       	ret

00001f46 <UART_vClearBuffer>:

void UART_vClearBuffer(){
    1f46:	df 93       	push	r29
    1f48:	cf 93       	push	r28
    1f4a:	0f 92       	push	r0
    1f4c:	cd b7       	in	r28, 0x3d	; 61
    1f4e:	de b7       	in	r29, 0x3e	; 62
	u8 temp;
	temp = UDR_REG;
    1f50:	ec e2       	ldi	r30, 0x2C	; 44
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	80 81       	ld	r24, Z
    1f56:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRA_REG, RXC_BIT);
    1f58:	ab e2       	ldi	r26, 0x2B	; 43
    1f5a:	b0 e0       	ldi	r27, 0x00	; 0
    1f5c:	eb e2       	ldi	r30, 0x2B	; 43
    1f5e:	f0 e0       	ldi	r31, 0x00	; 0
    1f60:	80 81       	ld	r24, Z
    1f62:	8f 77       	andi	r24, 0x7F	; 127
    1f64:	8c 93       	st	X, r24
}
    1f66:	0f 90       	pop	r0
    1f68:	cf 91       	pop	r28
    1f6a:	df 91       	pop	r29
    1f6c:	08 95       	ret

00001f6e <TMR_vInit>:
#include "../../LIBS/delay.h"
#include "../DIO/DIO.h"
extern TMR_cfg_t TIMER2;
u8 timer2_flag = 0;

void TMR_vInit(const TMR_cfg_t *TMR){
    1f6e:	df 93       	push	r29
    1f70:	cf 93       	push	r28
    1f72:	00 d0       	rcall	.+0      	; 0x1f74 <TMR_vInit+0x6>
    1f74:	00 d0       	rcall	.+0      	; 0x1f76 <TMR_vInit+0x8>
    1f76:	cd b7       	in	r28, 0x3d	; 61
    1f78:	de b7       	in	r29, 0x3e	; 62
    1f7a:	9a 83       	std	Y+2, r25	; 0x02
    1f7c:	89 83       	std	Y+1, r24	; 0x01
	if(TMR != NULL){
    1f7e:	89 81       	ldd	r24, Y+1	; 0x01
    1f80:	9a 81       	ldd	r25, Y+2	; 0x02
    1f82:	00 97       	sbiw	r24, 0x00	; 0
    1f84:	09 f4       	brne	.+2      	; 0x1f88 <TMR_vInit+0x1a>
    1f86:	88 c2       	rjmp	.+1296   	; 0x2498 <TMR_vInit+0x52a>
		switch(TMR->TMR_TimerChannel){
    1f88:	e9 81       	ldd	r30, Y+1	; 0x01
    1f8a:	fa 81       	ldd	r31, Y+2	; 0x02
    1f8c:	80 81       	ld	r24, Z
    1f8e:	28 2f       	mov	r18, r24
    1f90:	30 e0       	ldi	r19, 0x00	; 0
    1f92:	3c 83       	std	Y+4, r19	; 0x04
    1f94:	2b 83       	std	Y+3, r18	; 0x03
    1f96:	8b 81       	ldd	r24, Y+3	; 0x03
    1f98:	9c 81       	ldd	r25, Y+4	; 0x04
    1f9a:	83 30       	cpi	r24, 0x03	; 3
    1f9c:	91 05       	cpc	r25, r1
    1f9e:	09 f4       	brne	.+2      	; 0x1fa2 <TMR_vInit+0x34>
    1fa0:	27 c1       	rjmp	.+590    	; 0x21f0 <TMR_vInit+0x282>
    1fa2:	2b 81       	ldd	r18, Y+3	; 0x03
    1fa4:	3c 81       	ldd	r19, Y+4	; 0x04
    1fa6:	24 30       	cpi	r18, 0x04	; 4
    1fa8:	31 05       	cpc	r19, r1
    1faa:	8c f4       	brge	.+34     	; 0x1fce <TMR_vInit+0x60>
    1fac:	8b 81       	ldd	r24, Y+3	; 0x03
    1fae:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb0:	81 30       	cpi	r24, 0x01	; 1
    1fb2:	91 05       	cpc	r25, r1
    1fb4:	09 f4       	brne	.+2      	; 0x1fb8 <TMR_vInit+0x4a>
    1fb6:	70 c0       	rjmp	.+224    	; 0x2098 <TMR_vInit+0x12a>
    1fb8:	2b 81       	ldd	r18, Y+3	; 0x03
    1fba:	3c 81       	ldd	r19, Y+4	; 0x04
    1fbc:	22 30       	cpi	r18, 0x02	; 2
    1fbe:	31 05       	cpc	r19, r1
    1fc0:	0c f0       	brlt	.+2      	; 0x1fc4 <TMR_vInit+0x56>
    1fc2:	bd c0       	rjmp	.+378    	; 0x213e <TMR_vInit+0x1d0>
    1fc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fc8:	00 97       	sbiw	r24, 0x00	; 0
    1fca:	a1 f0       	breq	.+40     	; 0x1ff4 <TMR_vInit+0x86>
    1fcc:	65 c2       	rjmp	.+1226   	; 0x2498 <TMR_vInit+0x52a>
    1fce:	2b 81       	ldd	r18, Y+3	; 0x03
    1fd0:	3c 81       	ldd	r19, Y+4	; 0x04
    1fd2:	25 30       	cpi	r18, 0x05	; 5
    1fd4:	31 05       	cpc	r19, r1
    1fd6:	09 f4       	brne	.+2      	; 0x1fda <TMR_vInit+0x6c>
    1fd8:	be c1       	rjmp	.+892    	; 0x2356 <TMR_vInit+0x3e8>
    1fda:	8b 81       	ldd	r24, Y+3	; 0x03
    1fdc:	9c 81       	ldd	r25, Y+4	; 0x04
    1fde:	85 30       	cpi	r24, 0x05	; 5
    1fe0:	91 05       	cpc	r25, r1
    1fe2:	0c f4       	brge	.+2      	; 0x1fe6 <TMR_vInit+0x78>
    1fe4:	5f c1       	rjmp	.+702    	; 0x22a4 <TMR_vInit+0x336>
    1fe6:	2b 81       	ldd	r18, Y+3	; 0x03
    1fe8:	3c 81       	ldd	r19, Y+4	; 0x04
    1fea:	26 30       	cpi	r18, 0x06	; 6
    1fec:	31 05       	cpc	r19, r1
    1fee:	09 f4       	brne	.+2      	; 0x1ff2 <TMR_vInit+0x84>
    1ff0:	04 c2       	rjmp	.+1032   	; 0x23fa <TMR_vInit+0x48c>
    1ff2:	52 c2       	rjmp	.+1188   	; 0x2498 <TMR_vInit+0x52a>
		case TIMER0_NORMAL:
			TCCR0_REG = (TCCR0_REG&0xB7);
    1ff4:	a3 e5       	ldi	r26, 0x53	; 83
    1ff6:	b0 e0       	ldi	r27, 0x00	; 0
    1ff8:	e3 e5       	ldi	r30, 0x53	; 83
    1ffa:	f0 e0       	ldi	r31, 0x00	; 0
    1ffc:	80 81       	ld	r24, Z
    1ffe:	87 7b       	andi	r24, 0xB7	; 183
    2000:	8c 93       	st	X, r24
			if(TMR->TMR_ToggleMode == TMR_InterruptMode){
    2002:	e9 81       	ldd	r30, Y+1	; 0x01
    2004:	fa 81       	ldd	r31, Y+2	; 0x02
    2006:	82 81       	ldd	r24, Z+2	; 0x02
    2008:	81 30       	cpi	r24, 0x01	; 1
    200a:	49 f4       	brne	.+18     	; 0x201e <TMR_vInit+0xb0>
				TIMSK_REG = (TIMSK_REG&0xFC) | 0x01;
    200c:	a9 e5       	ldi	r26, 0x59	; 89
    200e:	b0 e0       	ldi	r27, 0x00	; 0
    2010:	e9 e5       	ldi	r30, 0x59	; 89
    2012:	f0 e0       	ldi	r31, 0x00	; 0
    2014:	80 81       	ld	r24, Z
    2016:	8c 7f       	andi	r24, 0xFC	; 252
    2018:	81 60       	ori	r24, 0x01	; 1
    201a:	8c 93       	st	X, r24
    201c:	3d c2       	rjmp	.+1146   	; 0x2498 <TMR_vInit+0x52a>
			}
			else if(TMR->TMR_ToggleMode == TMR_OCMode){
    201e:	e9 81       	ldd	r30, Y+1	; 0x01
    2020:	fa 81       	ldd	r31, Y+2	; 0x02
    2022:	82 81       	ldd	r24, Z+2	; 0x02
    2024:	88 23       	and	r24, r24
    2026:	09 f0       	breq	.+2      	; 0x202a <TMR_vInit+0xbc>
    2028:	37 c2       	rjmp	.+1134   	; 0x2498 <TMR_vInit+0x52a>
				if(TMR->TMR_OCMode == OC_Disconnected){
    202a:	e9 81       	ldd	r30, Y+1	; 0x01
    202c:	fa 81       	ldd	r31, Y+2	; 0x02
    202e:	83 81       	ldd	r24, Z+3	; 0x03
    2030:	88 23       	and	r24, r24
    2032:	41 f4       	brne	.+16     	; 0x2044 <TMR_vInit+0xd6>
					TCCR0_REG = (TCCR0_REG & 0xCF);
    2034:	a3 e5       	ldi	r26, 0x53	; 83
    2036:	b0 e0       	ldi	r27, 0x00	; 0
    2038:	e3 e5       	ldi	r30, 0x53	; 83
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	80 81       	ld	r24, Z
    203e:	8f 7c       	andi	r24, 0xCF	; 207
    2040:	8c 93       	st	X, r24
    2042:	2a c2       	rjmp	.+1108   	; 0x2498 <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Toggle){
    2044:	e9 81       	ldd	r30, Y+1	; 0x01
    2046:	fa 81       	ldd	r31, Y+2	; 0x02
    2048:	83 81       	ldd	r24, Z+3	; 0x03
    204a:	81 30       	cpi	r24, 0x01	; 1
    204c:	49 f4       	brne	.+18     	; 0x2060 <TMR_vInit+0xf2>
					TCCR0_REG = (TCCR0_REG & 0xCF) | 0x10;
    204e:	a3 e5       	ldi	r26, 0x53	; 83
    2050:	b0 e0       	ldi	r27, 0x00	; 0
    2052:	e3 e5       	ldi	r30, 0x53	; 83
    2054:	f0 e0       	ldi	r31, 0x00	; 0
    2056:	80 81       	ld	r24, Z
    2058:	8f 7c       	andi	r24, 0xCF	; 207
    205a:	80 61       	ori	r24, 0x10	; 16
    205c:	8c 93       	st	X, r24
    205e:	1c c2       	rjmp	.+1080   	; 0x2498 <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Clear){
    2060:	e9 81       	ldd	r30, Y+1	; 0x01
    2062:	fa 81       	ldd	r31, Y+2	; 0x02
    2064:	83 81       	ldd	r24, Z+3	; 0x03
    2066:	82 30       	cpi	r24, 0x02	; 2
    2068:	49 f4       	brne	.+18     	; 0x207c <TMR_vInit+0x10e>
					TCCR0_REG = (TCCR0_REG & 0xCF) | 0x20;
    206a:	a3 e5       	ldi	r26, 0x53	; 83
    206c:	b0 e0       	ldi	r27, 0x00	; 0
    206e:	e3 e5       	ldi	r30, 0x53	; 83
    2070:	f0 e0       	ldi	r31, 0x00	; 0
    2072:	80 81       	ld	r24, Z
    2074:	8f 7c       	andi	r24, 0xCF	; 207
    2076:	80 62       	ori	r24, 0x20	; 32
    2078:	8c 93       	st	X, r24
    207a:	0e c2       	rjmp	.+1052   	; 0x2498 <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Set){
    207c:	e9 81       	ldd	r30, Y+1	; 0x01
    207e:	fa 81       	ldd	r31, Y+2	; 0x02
    2080:	83 81       	ldd	r24, Z+3	; 0x03
    2082:	83 30       	cpi	r24, 0x03	; 3
    2084:	09 f0       	breq	.+2      	; 0x2088 <TMR_vInit+0x11a>
    2086:	08 c2       	rjmp	.+1040   	; 0x2498 <TMR_vInit+0x52a>
					TCCR0_REG = (TCCR0_REG & 0xCF) | 0x30;
    2088:	a3 e5       	ldi	r26, 0x53	; 83
    208a:	b0 e0       	ldi	r27, 0x00	; 0
    208c:	e3 e5       	ldi	r30, 0x53	; 83
    208e:	f0 e0       	ldi	r31, 0x00	; 0
    2090:	80 81       	ld	r24, Z
    2092:	80 63       	ori	r24, 0x30	; 48
    2094:	8c 93       	st	X, r24
    2096:	00 c2       	rjmp	.+1024   	; 0x2498 <TMR_vInit+0x52a>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER0_CTC:
			TCCR0_REG = (TCCR0_REG&0xB7) | 0x8;
    2098:	a3 e5       	ldi	r26, 0x53	; 83
    209a:	b0 e0       	ldi	r27, 0x00	; 0
    209c:	e3 e5       	ldi	r30, 0x53	; 83
    209e:	f0 e0       	ldi	r31, 0x00	; 0
    20a0:	80 81       	ld	r24, Z
    20a2:	87 7b       	andi	r24, 0xB7	; 183
    20a4:	88 60       	ori	r24, 0x08	; 8
    20a6:	8c 93       	st	X, r24
			if(TMR->TMR_ToggleMode == TMR_InterruptMode){
    20a8:	e9 81       	ldd	r30, Y+1	; 0x01
    20aa:	fa 81       	ldd	r31, Y+2	; 0x02
    20ac:	82 81       	ldd	r24, Z+2	; 0x02
    20ae:	81 30       	cpi	r24, 0x01	; 1
    20b0:	49 f4       	brne	.+18     	; 0x20c4 <TMR_vInit+0x156>
				TIMSK_REG = (TIMSK_REG&0xFC) | 0x02;
    20b2:	a9 e5       	ldi	r26, 0x59	; 89
    20b4:	b0 e0       	ldi	r27, 0x00	; 0
    20b6:	e9 e5       	ldi	r30, 0x59	; 89
    20b8:	f0 e0       	ldi	r31, 0x00	; 0
    20ba:	80 81       	ld	r24, Z
    20bc:	8c 7f       	andi	r24, 0xFC	; 252
    20be:	82 60       	ori	r24, 0x02	; 2
    20c0:	8c 93       	st	X, r24
    20c2:	ea c1       	rjmp	.+980    	; 0x2498 <TMR_vInit+0x52a>
			}
			else if(TMR->TMR_ToggleMode == TMR_OCMode){
    20c4:	e9 81       	ldd	r30, Y+1	; 0x01
    20c6:	fa 81       	ldd	r31, Y+2	; 0x02
    20c8:	82 81       	ldd	r24, Z+2	; 0x02
    20ca:	88 23       	and	r24, r24
    20cc:	09 f0       	breq	.+2      	; 0x20d0 <TMR_vInit+0x162>
    20ce:	e4 c1       	rjmp	.+968    	; 0x2498 <TMR_vInit+0x52a>
				if(TMR->TMR_OCMode == OC_Disconnected){
    20d0:	e9 81       	ldd	r30, Y+1	; 0x01
    20d2:	fa 81       	ldd	r31, Y+2	; 0x02
    20d4:	83 81       	ldd	r24, Z+3	; 0x03
    20d6:	88 23       	and	r24, r24
    20d8:	41 f4       	brne	.+16     	; 0x20ea <TMR_vInit+0x17c>
					TCCR0_REG = (TCCR0_REG & 0xCF);
    20da:	a3 e5       	ldi	r26, 0x53	; 83
    20dc:	b0 e0       	ldi	r27, 0x00	; 0
    20de:	e3 e5       	ldi	r30, 0x53	; 83
    20e0:	f0 e0       	ldi	r31, 0x00	; 0
    20e2:	80 81       	ld	r24, Z
    20e4:	8f 7c       	andi	r24, 0xCF	; 207
    20e6:	8c 93       	st	X, r24
    20e8:	d7 c1       	rjmp	.+942    	; 0x2498 <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Toggle){
    20ea:	e9 81       	ldd	r30, Y+1	; 0x01
    20ec:	fa 81       	ldd	r31, Y+2	; 0x02
    20ee:	83 81       	ldd	r24, Z+3	; 0x03
    20f0:	81 30       	cpi	r24, 0x01	; 1
    20f2:	49 f4       	brne	.+18     	; 0x2106 <TMR_vInit+0x198>
					TCCR0_REG = (TCCR0_REG & 0xCF) | 0x10;
    20f4:	a3 e5       	ldi	r26, 0x53	; 83
    20f6:	b0 e0       	ldi	r27, 0x00	; 0
    20f8:	e3 e5       	ldi	r30, 0x53	; 83
    20fa:	f0 e0       	ldi	r31, 0x00	; 0
    20fc:	80 81       	ld	r24, Z
    20fe:	8f 7c       	andi	r24, 0xCF	; 207
    2100:	80 61       	ori	r24, 0x10	; 16
    2102:	8c 93       	st	X, r24
    2104:	c9 c1       	rjmp	.+914    	; 0x2498 <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Clear){
    2106:	e9 81       	ldd	r30, Y+1	; 0x01
    2108:	fa 81       	ldd	r31, Y+2	; 0x02
    210a:	83 81       	ldd	r24, Z+3	; 0x03
    210c:	82 30       	cpi	r24, 0x02	; 2
    210e:	49 f4       	brne	.+18     	; 0x2122 <TMR_vInit+0x1b4>
					TCCR0_REG = (TCCR0_REG & 0xCF) | 0x20;
    2110:	a3 e5       	ldi	r26, 0x53	; 83
    2112:	b0 e0       	ldi	r27, 0x00	; 0
    2114:	e3 e5       	ldi	r30, 0x53	; 83
    2116:	f0 e0       	ldi	r31, 0x00	; 0
    2118:	80 81       	ld	r24, Z
    211a:	8f 7c       	andi	r24, 0xCF	; 207
    211c:	80 62       	ori	r24, 0x20	; 32
    211e:	8c 93       	st	X, r24
    2120:	bb c1       	rjmp	.+886    	; 0x2498 <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Set){
    2122:	e9 81       	ldd	r30, Y+1	; 0x01
    2124:	fa 81       	ldd	r31, Y+2	; 0x02
    2126:	83 81       	ldd	r24, Z+3	; 0x03
    2128:	83 30       	cpi	r24, 0x03	; 3
    212a:	09 f0       	breq	.+2      	; 0x212e <TMR_vInit+0x1c0>
    212c:	b5 c1       	rjmp	.+874    	; 0x2498 <TMR_vInit+0x52a>
					TCCR0_REG = (TCCR0_REG & 0xCF) | 0x30;
    212e:	a3 e5       	ldi	r26, 0x53	; 83
    2130:	b0 e0       	ldi	r27, 0x00	; 0
    2132:	e3 e5       	ldi	r30, 0x53	; 83
    2134:	f0 e0       	ldi	r31, 0x00	; 0
    2136:	80 81       	ld	r24, Z
    2138:	80 63       	ori	r24, 0x30	; 48
    213a:	8c 93       	st	X, r24
    213c:	ad c1       	rjmp	.+858    	; 0x2498 <TMR_vInit+0x52a>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER1_NORMAL:
			TCCR1A_REG = (TCCR1A_REG & 0xFC);
    213e:	af e4       	ldi	r26, 0x4F	; 79
    2140:	b0 e0       	ldi	r27, 0x00	; 0
    2142:	ef e4       	ldi	r30, 0x4F	; 79
    2144:	f0 e0       	ldi	r31, 0x00	; 0
    2146:	80 81       	ld	r24, Z
    2148:	8c 7f       	andi	r24, 0xFC	; 252
    214a:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7);
    214c:	ae e4       	ldi	r26, 0x4E	; 78
    214e:	b0 e0       	ldi	r27, 0x00	; 0
    2150:	ee e4       	ldi	r30, 0x4E	; 78
    2152:	f0 e0       	ldi	r31, 0x00	; 0
    2154:	80 81       	ld	r24, Z
    2156:	87 7e       	andi	r24, 0xE7	; 231
    2158:	8c 93       	st	X, r24
			if(TMR->TMR_ToggleMode == TMR_InterruptMode){
    215a:	e9 81       	ldd	r30, Y+1	; 0x01
    215c:	fa 81       	ldd	r31, Y+2	; 0x02
    215e:	82 81       	ldd	r24, Z+2	; 0x02
    2160:	81 30       	cpi	r24, 0x01	; 1
    2162:	49 f4       	brne	.+18     	; 0x2176 <TMR_vInit+0x208>
				TIMSK_REG = (TIMSK_REG&0xC3) | 0x04;
    2164:	a9 e5       	ldi	r26, 0x59	; 89
    2166:	b0 e0       	ldi	r27, 0x00	; 0
    2168:	e9 e5       	ldi	r30, 0x59	; 89
    216a:	f0 e0       	ldi	r31, 0x00	; 0
    216c:	80 81       	ld	r24, Z
    216e:	83 7c       	andi	r24, 0xC3	; 195
    2170:	84 60       	ori	r24, 0x04	; 4
    2172:	8c 93       	st	X, r24
    2174:	91 c1       	rjmp	.+802    	; 0x2498 <TMR_vInit+0x52a>
			}
			else if(TMR->TMR_ToggleMode == TMR_OCMode){
    2176:	e9 81       	ldd	r30, Y+1	; 0x01
    2178:	fa 81       	ldd	r31, Y+2	; 0x02
    217a:	82 81       	ldd	r24, Z+2	; 0x02
    217c:	88 23       	and	r24, r24
    217e:	09 f0       	breq	.+2      	; 0x2182 <TMR_vInit+0x214>
    2180:	8b c1       	rjmp	.+790    	; 0x2498 <TMR_vInit+0x52a>
				if(TMR->TMR_OCMode == OC_Disconnected){
    2182:	e9 81       	ldd	r30, Y+1	; 0x01
    2184:	fa 81       	ldd	r31, Y+2	; 0x02
    2186:	83 81       	ldd	r24, Z+3	; 0x03
    2188:	88 23       	and	r24, r24
    218a:	41 f4       	brne	.+16     	; 0x219c <TMR_vInit+0x22e>
					TCCR1A_REG = (TCCR1A_REG & 0xCF);
    218c:	af e4       	ldi	r26, 0x4F	; 79
    218e:	b0 e0       	ldi	r27, 0x00	; 0
    2190:	ef e4       	ldi	r30, 0x4F	; 79
    2192:	f0 e0       	ldi	r31, 0x00	; 0
    2194:	80 81       	ld	r24, Z
    2196:	8f 7c       	andi	r24, 0xCF	; 207
    2198:	8c 93       	st	X, r24
    219a:	7e c1       	rjmp	.+764    	; 0x2498 <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Toggle){
    219c:	e9 81       	ldd	r30, Y+1	; 0x01
    219e:	fa 81       	ldd	r31, Y+2	; 0x02
    21a0:	83 81       	ldd	r24, Z+3	; 0x03
    21a2:	81 30       	cpi	r24, 0x01	; 1
    21a4:	49 f4       	brne	.+18     	; 0x21b8 <TMR_vInit+0x24a>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x10;
    21a6:	af e4       	ldi	r26, 0x4F	; 79
    21a8:	b0 e0       	ldi	r27, 0x00	; 0
    21aa:	ef e4       	ldi	r30, 0x4F	; 79
    21ac:	f0 e0       	ldi	r31, 0x00	; 0
    21ae:	80 81       	ld	r24, Z
    21b0:	8f 7c       	andi	r24, 0xCF	; 207
    21b2:	80 61       	ori	r24, 0x10	; 16
    21b4:	8c 93       	st	X, r24
    21b6:	70 c1       	rjmp	.+736    	; 0x2498 <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Clear){
    21b8:	e9 81       	ldd	r30, Y+1	; 0x01
    21ba:	fa 81       	ldd	r31, Y+2	; 0x02
    21bc:	83 81       	ldd	r24, Z+3	; 0x03
    21be:	82 30       	cpi	r24, 0x02	; 2
    21c0:	49 f4       	brne	.+18     	; 0x21d4 <TMR_vInit+0x266>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
    21c2:	af e4       	ldi	r26, 0x4F	; 79
    21c4:	b0 e0       	ldi	r27, 0x00	; 0
    21c6:	ef e4       	ldi	r30, 0x4F	; 79
    21c8:	f0 e0       	ldi	r31, 0x00	; 0
    21ca:	80 81       	ld	r24, Z
    21cc:	8f 7c       	andi	r24, 0xCF	; 207
    21ce:	80 62       	ori	r24, 0x20	; 32
    21d0:	8c 93       	st	X, r24
    21d2:	62 c1       	rjmp	.+708    	; 0x2498 <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Set){
    21d4:	e9 81       	ldd	r30, Y+1	; 0x01
    21d6:	fa 81       	ldd	r31, Y+2	; 0x02
    21d8:	83 81       	ldd	r24, Z+3	; 0x03
    21da:	83 30       	cpi	r24, 0x03	; 3
    21dc:	09 f0       	breq	.+2      	; 0x21e0 <TMR_vInit+0x272>
    21de:	5c c1       	rjmp	.+696    	; 0x2498 <TMR_vInit+0x52a>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
    21e0:	af e4       	ldi	r26, 0x4F	; 79
    21e2:	b0 e0       	ldi	r27, 0x00	; 0
    21e4:	ef e4       	ldi	r30, 0x4F	; 79
    21e6:	f0 e0       	ldi	r31, 0x00	; 0
    21e8:	80 81       	ld	r24, Z
    21ea:	80 63       	ori	r24, 0x30	; 48
    21ec:	8c 93       	st	X, r24
    21ee:	54 c1       	rjmp	.+680    	; 0x2498 <TMR_vInit+0x52a>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER1_CTC_OCR:
			TCCR1A_REG = (TCCR1A_REG & 0xFC);
    21f0:	af e4       	ldi	r26, 0x4F	; 79
    21f2:	b0 e0       	ldi	r27, 0x00	; 0
    21f4:	ef e4       	ldi	r30, 0x4F	; 79
    21f6:	f0 e0       	ldi	r31, 0x00	; 0
    21f8:	80 81       	ld	r24, Z
    21fa:	8c 7f       	andi	r24, 0xFC	; 252
    21fc:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7) | 0x08;
    21fe:	ae e4       	ldi	r26, 0x4E	; 78
    2200:	b0 e0       	ldi	r27, 0x00	; 0
    2202:	ee e4       	ldi	r30, 0x4E	; 78
    2204:	f0 e0       	ldi	r31, 0x00	; 0
    2206:	80 81       	ld	r24, Z
    2208:	87 7e       	andi	r24, 0xE7	; 231
    220a:	88 60       	ori	r24, 0x08	; 8
    220c:	8c 93       	st	X, r24
			if(TMR->TMR_ToggleMode == TMR_InterruptMode){
    220e:	e9 81       	ldd	r30, Y+1	; 0x01
    2210:	fa 81       	ldd	r31, Y+2	; 0x02
    2212:	82 81       	ldd	r24, Z+2	; 0x02
    2214:	81 30       	cpi	r24, 0x01	; 1
    2216:	49 f4       	brne	.+18     	; 0x222a <TMR_vInit+0x2bc>
				TIMSK_REG = (TIMSK_REG&0xC3) | 0x18;
    2218:	a9 e5       	ldi	r26, 0x59	; 89
    221a:	b0 e0       	ldi	r27, 0x00	; 0
    221c:	e9 e5       	ldi	r30, 0x59	; 89
    221e:	f0 e0       	ldi	r31, 0x00	; 0
    2220:	80 81       	ld	r24, Z
    2222:	83 7c       	andi	r24, 0xC3	; 195
    2224:	88 61       	ori	r24, 0x18	; 24
    2226:	8c 93       	st	X, r24
    2228:	37 c1       	rjmp	.+622    	; 0x2498 <TMR_vInit+0x52a>
			}
			else if(TMR->TMR_ToggleMode == TMR_OCMode){
    222a:	e9 81       	ldd	r30, Y+1	; 0x01
    222c:	fa 81       	ldd	r31, Y+2	; 0x02
    222e:	82 81       	ldd	r24, Z+2	; 0x02
    2230:	88 23       	and	r24, r24
    2232:	09 f0       	breq	.+2      	; 0x2236 <TMR_vInit+0x2c8>
    2234:	31 c1       	rjmp	.+610    	; 0x2498 <TMR_vInit+0x52a>
				if(TMR->TMR_OCMode == OC_Disconnected){
    2236:	e9 81       	ldd	r30, Y+1	; 0x01
    2238:	fa 81       	ldd	r31, Y+2	; 0x02
    223a:	83 81       	ldd	r24, Z+3	; 0x03
    223c:	88 23       	and	r24, r24
    223e:	41 f4       	brne	.+16     	; 0x2250 <TMR_vInit+0x2e2>
					TCCR1A_REG = (TCCR1A_REG & 0xCF);
    2240:	af e4       	ldi	r26, 0x4F	; 79
    2242:	b0 e0       	ldi	r27, 0x00	; 0
    2244:	ef e4       	ldi	r30, 0x4F	; 79
    2246:	f0 e0       	ldi	r31, 0x00	; 0
    2248:	80 81       	ld	r24, Z
    224a:	8f 7c       	andi	r24, 0xCF	; 207
    224c:	8c 93       	st	X, r24
    224e:	24 c1       	rjmp	.+584    	; 0x2498 <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Toggle){
    2250:	e9 81       	ldd	r30, Y+1	; 0x01
    2252:	fa 81       	ldd	r31, Y+2	; 0x02
    2254:	83 81       	ldd	r24, Z+3	; 0x03
    2256:	81 30       	cpi	r24, 0x01	; 1
    2258:	49 f4       	brne	.+18     	; 0x226c <TMR_vInit+0x2fe>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x10;
    225a:	af e4       	ldi	r26, 0x4F	; 79
    225c:	b0 e0       	ldi	r27, 0x00	; 0
    225e:	ef e4       	ldi	r30, 0x4F	; 79
    2260:	f0 e0       	ldi	r31, 0x00	; 0
    2262:	80 81       	ld	r24, Z
    2264:	8f 7c       	andi	r24, 0xCF	; 207
    2266:	80 61       	ori	r24, 0x10	; 16
    2268:	8c 93       	st	X, r24
    226a:	16 c1       	rjmp	.+556    	; 0x2498 <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Clear){
    226c:	e9 81       	ldd	r30, Y+1	; 0x01
    226e:	fa 81       	ldd	r31, Y+2	; 0x02
    2270:	83 81       	ldd	r24, Z+3	; 0x03
    2272:	82 30       	cpi	r24, 0x02	; 2
    2274:	49 f4       	brne	.+18     	; 0x2288 <TMR_vInit+0x31a>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
    2276:	af e4       	ldi	r26, 0x4F	; 79
    2278:	b0 e0       	ldi	r27, 0x00	; 0
    227a:	ef e4       	ldi	r30, 0x4F	; 79
    227c:	f0 e0       	ldi	r31, 0x00	; 0
    227e:	80 81       	ld	r24, Z
    2280:	8f 7c       	andi	r24, 0xCF	; 207
    2282:	80 62       	ori	r24, 0x20	; 32
    2284:	8c 93       	st	X, r24
    2286:	08 c1       	rjmp	.+528    	; 0x2498 <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Set){
    2288:	e9 81       	ldd	r30, Y+1	; 0x01
    228a:	fa 81       	ldd	r31, Y+2	; 0x02
    228c:	83 81       	ldd	r24, Z+3	; 0x03
    228e:	83 30       	cpi	r24, 0x03	; 3
    2290:	09 f0       	breq	.+2      	; 0x2294 <TMR_vInit+0x326>
    2292:	02 c1       	rjmp	.+516    	; 0x2498 <TMR_vInit+0x52a>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
    2294:	af e4       	ldi	r26, 0x4F	; 79
    2296:	b0 e0       	ldi	r27, 0x00	; 0
    2298:	ef e4       	ldi	r30, 0x4F	; 79
    229a:	f0 e0       	ldi	r31, 0x00	; 0
    229c:	80 81       	ld	r24, Z
    229e:	80 63       	ori	r24, 0x30	; 48
    22a0:	8c 93       	st	X, r24
    22a2:	fa c0       	rjmp	.+500    	; 0x2498 <TMR_vInit+0x52a>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER1_CTC_ICR:
			TCCR1A_REG = (TCCR1A_REG & 0xFC);
    22a4:	af e4       	ldi	r26, 0x4F	; 79
    22a6:	b0 e0       	ldi	r27, 0x00	; 0
    22a8:	ef e4       	ldi	r30, 0x4F	; 79
    22aa:	f0 e0       	ldi	r31, 0x00	; 0
    22ac:	80 81       	ld	r24, Z
    22ae:	8c 7f       	andi	r24, 0xFC	; 252
    22b0:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7) | 0x18;
    22b2:	ae e4       	ldi	r26, 0x4E	; 78
    22b4:	b0 e0       	ldi	r27, 0x00	; 0
    22b6:	ee e4       	ldi	r30, 0x4E	; 78
    22b8:	f0 e0       	ldi	r31, 0x00	; 0
    22ba:	80 81       	ld	r24, Z
    22bc:	88 61       	ori	r24, 0x18	; 24
    22be:	8c 93       	st	X, r24
			if(TMR->TMR_ToggleMode == TMR_InterruptMode){
    22c0:	e9 81       	ldd	r30, Y+1	; 0x01
    22c2:	fa 81       	ldd	r31, Y+2	; 0x02
    22c4:	82 81       	ldd	r24, Z+2	; 0x02
    22c6:	81 30       	cpi	r24, 0x01	; 1
    22c8:	49 f4       	brne	.+18     	; 0x22dc <TMR_vInit+0x36e>
				TIMSK_REG = (TIMSK_REG&0xC3) | 0x18;
    22ca:	a9 e5       	ldi	r26, 0x59	; 89
    22cc:	b0 e0       	ldi	r27, 0x00	; 0
    22ce:	e9 e5       	ldi	r30, 0x59	; 89
    22d0:	f0 e0       	ldi	r31, 0x00	; 0
    22d2:	80 81       	ld	r24, Z
    22d4:	83 7c       	andi	r24, 0xC3	; 195
    22d6:	88 61       	ori	r24, 0x18	; 24
    22d8:	8c 93       	st	X, r24
    22da:	de c0       	rjmp	.+444    	; 0x2498 <TMR_vInit+0x52a>
			}
			else if(TMR->TMR_ToggleMode == TMR_OCMode){
    22dc:	e9 81       	ldd	r30, Y+1	; 0x01
    22de:	fa 81       	ldd	r31, Y+2	; 0x02
    22e0:	82 81       	ldd	r24, Z+2	; 0x02
    22e2:	88 23       	and	r24, r24
    22e4:	09 f0       	breq	.+2      	; 0x22e8 <TMR_vInit+0x37a>
    22e6:	d8 c0       	rjmp	.+432    	; 0x2498 <TMR_vInit+0x52a>
				if(TMR->TMR_OCMode == OC_Disconnected){
    22e8:	e9 81       	ldd	r30, Y+1	; 0x01
    22ea:	fa 81       	ldd	r31, Y+2	; 0x02
    22ec:	83 81       	ldd	r24, Z+3	; 0x03
    22ee:	88 23       	and	r24, r24
    22f0:	41 f4       	brne	.+16     	; 0x2302 <TMR_vInit+0x394>
					TCCR1A_REG = (TCCR1A_REG & 0xCF);
    22f2:	af e4       	ldi	r26, 0x4F	; 79
    22f4:	b0 e0       	ldi	r27, 0x00	; 0
    22f6:	ef e4       	ldi	r30, 0x4F	; 79
    22f8:	f0 e0       	ldi	r31, 0x00	; 0
    22fa:	80 81       	ld	r24, Z
    22fc:	8f 7c       	andi	r24, 0xCF	; 207
    22fe:	8c 93       	st	X, r24
    2300:	cb c0       	rjmp	.+406    	; 0x2498 <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Toggle){
    2302:	e9 81       	ldd	r30, Y+1	; 0x01
    2304:	fa 81       	ldd	r31, Y+2	; 0x02
    2306:	83 81       	ldd	r24, Z+3	; 0x03
    2308:	81 30       	cpi	r24, 0x01	; 1
    230a:	49 f4       	brne	.+18     	; 0x231e <TMR_vInit+0x3b0>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x10;
    230c:	af e4       	ldi	r26, 0x4F	; 79
    230e:	b0 e0       	ldi	r27, 0x00	; 0
    2310:	ef e4       	ldi	r30, 0x4F	; 79
    2312:	f0 e0       	ldi	r31, 0x00	; 0
    2314:	80 81       	ld	r24, Z
    2316:	8f 7c       	andi	r24, 0xCF	; 207
    2318:	80 61       	ori	r24, 0x10	; 16
    231a:	8c 93       	st	X, r24
    231c:	bd c0       	rjmp	.+378    	; 0x2498 <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Clear){
    231e:	e9 81       	ldd	r30, Y+1	; 0x01
    2320:	fa 81       	ldd	r31, Y+2	; 0x02
    2322:	83 81       	ldd	r24, Z+3	; 0x03
    2324:	82 30       	cpi	r24, 0x02	; 2
    2326:	49 f4       	brne	.+18     	; 0x233a <TMR_vInit+0x3cc>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
    2328:	af e4       	ldi	r26, 0x4F	; 79
    232a:	b0 e0       	ldi	r27, 0x00	; 0
    232c:	ef e4       	ldi	r30, 0x4F	; 79
    232e:	f0 e0       	ldi	r31, 0x00	; 0
    2330:	80 81       	ld	r24, Z
    2332:	8f 7c       	andi	r24, 0xCF	; 207
    2334:	80 62       	ori	r24, 0x20	; 32
    2336:	8c 93       	st	X, r24
    2338:	af c0       	rjmp	.+350    	; 0x2498 <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Set){
    233a:	e9 81       	ldd	r30, Y+1	; 0x01
    233c:	fa 81       	ldd	r31, Y+2	; 0x02
    233e:	83 81       	ldd	r24, Z+3	; 0x03
    2340:	83 30       	cpi	r24, 0x03	; 3
    2342:	09 f0       	breq	.+2      	; 0x2346 <TMR_vInit+0x3d8>
    2344:	a9 c0       	rjmp	.+338    	; 0x2498 <TMR_vInit+0x52a>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
    2346:	af e4       	ldi	r26, 0x4F	; 79
    2348:	b0 e0       	ldi	r27, 0x00	; 0
    234a:	ef e4       	ldi	r30, 0x4F	; 79
    234c:	f0 e0       	ldi	r31, 0x00	; 0
    234e:	80 81       	ld	r24, Z
    2350:	80 63       	ori	r24, 0x30	; 48
    2352:	8c 93       	st	X, r24
    2354:	a1 c0       	rjmp	.+322    	; 0x2498 <TMR_vInit+0x52a>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER2_NORMAL:
			TCCR2_REG = (TCCR2_REG&0xB7);
    2356:	a5 e4       	ldi	r26, 0x45	; 69
    2358:	b0 e0       	ldi	r27, 0x00	; 0
    235a:	e5 e4       	ldi	r30, 0x45	; 69
    235c:	f0 e0       	ldi	r31, 0x00	; 0
    235e:	80 81       	ld	r24, Z
    2360:	87 7b       	andi	r24, 0xB7	; 183
    2362:	8c 93       	st	X, r24
			if(TMR->TMR_ToggleMode == TMR_InterruptMode){
    2364:	e9 81       	ldd	r30, Y+1	; 0x01
    2366:	fa 81       	ldd	r31, Y+2	; 0x02
    2368:	82 81       	ldd	r24, Z+2	; 0x02
    236a:	81 30       	cpi	r24, 0x01	; 1
    236c:	49 f4       	brne	.+18     	; 0x2380 <TMR_vInit+0x412>
				TIMSK_REG = (TIMSK_REG&0x3F) | 0x40;
    236e:	a9 e5       	ldi	r26, 0x59	; 89
    2370:	b0 e0       	ldi	r27, 0x00	; 0
    2372:	e9 e5       	ldi	r30, 0x59	; 89
    2374:	f0 e0       	ldi	r31, 0x00	; 0
    2376:	80 81       	ld	r24, Z
    2378:	8f 73       	andi	r24, 0x3F	; 63
    237a:	80 64       	ori	r24, 0x40	; 64
    237c:	8c 93       	st	X, r24
    237e:	8c c0       	rjmp	.+280    	; 0x2498 <TMR_vInit+0x52a>
			}
			else if(TMR->TMR_ToggleMode == TMR_OCMode){
    2380:	e9 81       	ldd	r30, Y+1	; 0x01
    2382:	fa 81       	ldd	r31, Y+2	; 0x02
    2384:	82 81       	ldd	r24, Z+2	; 0x02
    2386:	88 23       	and	r24, r24
    2388:	09 f0       	breq	.+2      	; 0x238c <TMR_vInit+0x41e>
    238a:	86 c0       	rjmp	.+268    	; 0x2498 <TMR_vInit+0x52a>
				if(TMR->TMR_OCMode == OC_Disconnected){
    238c:	e9 81       	ldd	r30, Y+1	; 0x01
    238e:	fa 81       	ldd	r31, Y+2	; 0x02
    2390:	83 81       	ldd	r24, Z+3	; 0x03
    2392:	88 23       	and	r24, r24
    2394:	41 f4       	brne	.+16     	; 0x23a6 <TMR_vInit+0x438>
					TCCR2_REG = (TCCR2_REG & 0xCF);
    2396:	a5 e4       	ldi	r26, 0x45	; 69
    2398:	b0 e0       	ldi	r27, 0x00	; 0
    239a:	e5 e4       	ldi	r30, 0x45	; 69
    239c:	f0 e0       	ldi	r31, 0x00	; 0
    239e:	80 81       	ld	r24, Z
    23a0:	8f 7c       	andi	r24, 0xCF	; 207
    23a2:	8c 93       	st	X, r24
    23a4:	79 c0       	rjmp	.+242    	; 0x2498 <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Toggle){
    23a6:	e9 81       	ldd	r30, Y+1	; 0x01
    23a8:	fa 81       	ldd	r31, Y+2	; 0x02
    23aa:	83 81       	ldd	r24, Z+3	; 0x03
    23ac:	81 30       	cpi	r24, 0x01	; 1
    23ae:	49 f4       	brne	.+18     	; 0x23c2 <TMR_vInit+0x454>
					TCCR2_REG = (TCCR2_REG & 0xCF) | 0x10;
    23b0:	a5 e4       	ldi	r26, 0x45	; 69
    23b2:	b0 e0       	ldi	r27, 0x00	; 0
    23b4:	e5 e4       	ldi	r30, 0x45	; 69
    23b6:	f0 e0       	ldi	r31, 0x00	; 0
    23b8:	80 81       	ld	r24, Z
    23ba:	8f 7c       	andi	r24, 0xCF	; 207
    23bc:	80 61       	ori	r24, 0x10	; 16
    23be:	8c 93       	st	X, r24
    23c0:	6b c0       	rjmp	.+214    	; 0x2498 <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Clear){
    23c2:	e9 81       	ldd	r30, Y+1	; 0x01
    23c4:	fa 81       	ldd	r31, Y+2	; 0x02
    23c6:	83 81       	ldd	r24, Z+3	; 0x03
    23c8:	82 30       	cpi	r24, 0x02	; 2
    23ca:	49 f4       	brne	.+18     	; 0x23de <TMR_vInit+0x470>
					TCCR2_REG = (TCCR2_REG & 0xCF) | 0x20;
    23cc:	a5 e4       	ldi	r26, 0x45	; 69
    23ce:	b0 e0       	ldi	r27, 0x00	; 0
    23d0:	e5 e4       	ldi	r30, 0x45	; 69
    23d2:	f0 e0       	ldi	r31, 0x00	; 0
    23d4:	80 81       	ld	r24, Z
    23d6:	8f 7c       	andi	r24, 0xCF	; 207
    23d8:	80 62       	ori	r24, 0x20	; 32
    23da:	8c 93       	st	X, r24
    23dc:	5d c0       	rjmp	.+186    	; 0x2498 <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Set){
    23de:	e9 81       	ldd	r30, Y+1	; 0x01
    23e0:	fa 81       	ldd	r31, Y+2	; 0x02
    23e2:	83 81       	ldd	r24, Z+3	; 0x03
    23e4:	83 30       	cpi	r24, 0x03	; 3
    23e6:	09 f0       	breq	.+2      	; 0x23ea <TMR_vInit+0x47c>
    23e8:	57 c0       	rjmp	.+174    	; 0x2498 <TMR_vInit+0x52a>
					TCCR2_REG = (TCCR2_REG & 0xCF) | 0x30;
    23ea:	a5 e4       	ldi	r26, 0x45	; 69
    23ec:	b0 e0       	ldi	r27, 0x00	; 0
    23ee:	e5 e4       	ldi	r30, 0x45	; 69
    23f0:	f0 e0       	ldi	r31, 0x00	; 0
    23f2:	80 81       	ld	r24, Z
    23f4:	80 63       	ori	r24, 0x30	; 48
    23f6:	8c 93       	st	X, r24
    23f8:	4f c0       	rjmp	.+158    	; 0x2498 <TMR_vInit+0x52a>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER2_CTC:
			TCCR2_REG = (TCCR2_REG&0xB7);
    23fa:	a5 e4       	ldi	r26, 0x45	; 69
    23fc:	b0 e0       	ldi	r27, 0x00	; 0
    23fe:	e5 e4       	ldi	r30, 0x45	; 69
    2400:	f0 e0       	ldi	r31, 0x00	; 0
    2402:	80 81       	ld	r24, Z
    2404:	87 7b       	andi	r24, 0xB7	; 183
    2406:	8c 93       	st	X, r24
			if(TMR->TMR_ToggleMode == TMR_InterruptMode){
    2408:	e9 81       	ldd	r30, Y+1	; 0x01
    240a:	fa 81       	ldd	r31, Y+2	; 0x02
    240c:	82 81       	ldd	r24, Z+2	; 0x02
    240e:	81 30       	cpi	r24, 0x01	; 1
    2410:	49 f4       	brne	.+18     	; 0x2424 <TMR_vInit+0x4b6>
				TIMSK_REG = (TIMSK_REG&0x3F) | 0x80;
    2412:	a9 e5       	ldi	r26, 0x59	; 89
    2414:	b0 e0       	ldi	r27, 0x00	; 0
    2416:	e9 e5       	ldi	r30, 0x59	; 89
    2418:	f0 e0       	ldi	r31, 0x00	; 0
    241a:	80 81       	ld	r24, Z
    241c:	8f 73       	andi	r24, 0x3F	; 63
    241e:	80 68       	ori	r24, 0x80	; 128
    2420:	8c 93       	st	X, r24
    2422:	3a c0       	rjmp	.+116    	; 0x2498 <TMR_vInit+0x52a>
			}
			else if(TMR->TMR_ToggleMode == TMR_OCMode){
    2424:	e9 81       	ldd	r30, Y+1	; 0x01
    2426:	fa 81       	ldd	r31, Y+2	; 0x02
    2428:	82 81       	ldd	r24, Z+2	; 0x02
    242a:	88 23       	and	r24, r24
    242c:	a9 f5       	brne	.+106    	; 0x2498 <TMR_vInit+0x52a>
				if(TMR->TMR_OCMode == OC_Disconnected){
    242e:	e9 81       	ldd	r30, Y+1	; 0x01
    2430:	fa 81       	ldd	r31, Y+2	; 0x02
    2432:	83 81       	ldd	r24, Z+3	; 0x03
    2434:	88 23       	and	r24, r24
    2436:	41 f4       	brne	.+16     	; 0x2448 <TMR_vInit+0x4da>
					TCCR2_REG = (TCCR2_REG & 0xCF);
    2438:	a5 e4       	ldi	r26, 0x45	; 69
    243a:	b0 e0       	ldi	r27, 0x00	; 0
    243c:	e5 e4       	ldi	r30, 0x45	; 69
    243e:	f0 e0       	ldi	r31, 0x00	; 0
    2440:	80 81       	ld	r24, Z
    2442:	8f 7c       	andi	r24, 0xCF	; 207
    2444:	8c 93       	st	X, r24
    2446:	28 c0       	rjmp	.+80     	; 0x2498 <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Toggle){
    2448:	e9 81       	ldd	r30, Y+1	; 0x01
    244a:	fa 81       	ldd	r31, Y+2	; 0x02
    244c:	83 81       	ldd	r24, Z+3	; 0x03
    244e:	81 30       	cpi	r24, 0x01	; 1
    2450:	49 f4       	brne	.+18     	; 0x2464 <TMR_vInit+0x4f6>
					TCCR2_REG = (TCCR2_REG & 0xCF) | 0x10;
    2452:	a5 e4       	ldi	r26, 0x45	; 69
    2454:	b0 e0       	ldi	r27, 0x00	; 0
    2456:	e5 e4       	ldi	r30, 0x45	; 69
    2458:	f0 e0       	ldi	r31, 0x00	; 0
    245a:	80 81       	ld	r24, Z
    245c:	8f 7c       	andi	r24, 0xCF	; 207
    245e:	80 61       	ori	r24, 0x10	; 16
    2460:	8c 93       	st	X, r24
    2462:	1a c0       	rjmp	.+52     	; 0x2498 <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Clear){
    2464:	e9 81       	ldd	r30, Y+1	; 0x01
    2466:	fa 81       	ldd	r31, Y+2	; 0x02
    2468:	83 81       	ldd	r24, Z+3	; 0x03
    246a:	82 30       	cpi	r24, 0x02	; 2
    246c:	49 f4       	brne	.+18     	; 0x2480 <TMR_vInit+0x512>
					TCCR2_REG = (TCCR2_REG & 0xCF) | 0x20;
    246e:	a5 e4       	ldi	r26, 0x45	; 69
    2470:	b0 e0       	ldi	r27, 0x00	; 0
    2472:	e5 e4       	ldi	r30, 0x45	; 69
    2474:	f0 e0       	ldi	r31, 0x00	; 0
    2476:	80 81       	ld	r24, Z
    2478:	8f 7c       	andi	r24, 0xCF	; 207
    247a:	80 62       	ori	r24, 0x20	; 32
    247c:	8c 93       	st	X, r24
    247e:	0c c0       	rjmp	.+24     	; 0x2498 <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Set){
    2480:	e9 81       	ldd	r30, Y+1	; 0x01
    2482:	fa 81       	ldd	r31, Y+2	; 0x02
    2484:	83 81       	ldd	r24, Z+3	; 0x03
    2486:	83 30       	cpi	r24, 0x03	; 3
    2488:	39 f4       	brne	.+14     	; 0x2498 <TMR_vInit+0x52a>
					TCCR2_REG = (TCCR2_REG & 0xCF) | 0x30;
    248a:	a5 e4       	ldi	r26, 0x45	; 69
    248c:	b0 e0       	ldi	r27, 0x00	; 0
    248e:	e5 e4       	ldi	r30, 0x45	; 69
    2490:	f0 e0       	ldi	r31, 0x00	; 0
    2492:	80 81       	ld	r24, Z
    2494:	80 63       	ori	r24, 0x30	; 48
    2496:	8c 93       	st	X, r24
			else{ /* Do Nothing */ }
			break;
		default: /* Do Nothing */ break;
		}
	}
}
    2498:	0f 90       	pop	r0
    249a:	0f 90       	pop	r0
    249c:	0f 90       	pop	r0
    249e:	0f 90       	pop	r0
    24a0:	cf 91       	pop	r28
    24a2:	df 91       	pop	r29
    24a4:	08 95       	ret

000024a6 <TMR_vStartTimer>:

void TMR_vStartTimer(const TMR_cfg_t *TMR){
    24a6:	df 93       	push	r29
    24a8:	cf 93       	push	r28
    24aa:	cd b7       	in	r28, 0x3d	; 61
    24ac:	de b7       	in	r29, 0x3e	; 62
    24ae:	2a 97       	sbiw	r28, 0x0a	; 10
    24b0:	0f b6       	in	r0, 0x3f	; 63
    24b2:	f8 94       	cli
    24b4:	de bf       	out	0x3e, r29	; 62
    24b6:	0f be       	out	0x3f, r0	; 63
    24b8:	cd bf       	out	0x3d, r28	; 61
    24ba:	9a 83       	std	Y+2, r25	; 0x02
    24bc:	89 83       	std	Y+1, r24	; 0x01
	if(TMR != NULL){
    24be:	89 81       	ldd	r24, Y+1	; 0x01
    24c0:	9a 81       	ldd	r25, Y+2	; 0x02
    24c2:	00 97       	sbiw	r24, 0x00	; 0
    24c4:	09 f4       	brne	.+2      	; 0x24c8 <TMR_vStartTimer+0x22>
    24c6:	98 c1       	rjmp	.+816    	; 0x27f8 <TMR_vStartTimer+0x352>
		switch(TMR->TMR_TimerChannel){
    24c8:	e9 81       	ldd	r30, Y+1	; 0x01
    24ca:	fa 81       	ldd	r31, Y+2	; 0x02
    24cc:	80 81       	ld	r24, Z
    24ce:	28 2f       	mov	r18, r24
    24d0:	30 e0       	ldi	r19, 0x00	; 0
    24d2:	3a 87       	std	Y+10, r19	; 0x0a
    24d4:	29 87       	std	Y+9, r18	; 0x09
    24d6:	89 85       	ldd	r24, Y+9	; 0x09
    24d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    24da:	85 30       	cpi	r24, 0x05	; 5
    24dc:	91 05       	cpc	r25, r1
    24de:	64 f4       	brge	.+24     	; 0x24f8 <TMR_vStartTimer+0x52>
    24e0:	29 85       	ldd	r18, Y+9	; 0x09
    24e2:	3a 85       	ldd	r19, Y+10	; 0x0a
    24e4:	22 30       	cpi	r18, 0x02	; 2
    24e6:	31 05       	cpc	r19, r1
    24e8:	0c f0       	brlt	.+2      	; 0x24ec <TMR_vStartTimer+0x46>
    24ea:	8b c0       	rjmp	.+278    	; 0x2602 <TMR_vStartTimer+0x15c>
    24ec:	89 85       	ldd	r24, Y+9	; 0x09
    24ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    24f0:	99 23       	and	r25, r25
    24f2:	0c f4       	brge	.+2      	; 0x24f6 <TMR_vStartTimer+0x50>
    24f4:	81 c1       	rjmp	.+770    	; 0x27f8 <TMR_vStartTimer+0x352>
    24f6:	07 c0       	rjmp	.+14     	; 0x2506 <TMR_vStartTimer+0x60>
    24f8:	29 85       	ldd	r18, Y+9	; 0x09
    24fa:	3a 85       	ldd	r19, Y+10	; 0x0a
    24fc:	27 30       	cpi	r18, 0x07	; 7
    24fe:	31 05       	cpc	r19, r1
    2500:	0c f0       	brlt	.+2      	; 0x2504 <TMR_vStartTimer+0x5e>
    2502:	7a c1       	rjmp	.+756    	; 0x27f8 <TMR_vStartTimer+0x352>
    2504:	fc c0       	rjmp	.+504    	; 0x26fe <TMR_vStartTimer+0x258>
		case TIMER0_NORMAL:
		case TIMER0_CTC:
			switch(TMR->TMR_Prescale){
    2506:	e9 81       	ldd	r30, Y+1	; 0x01
    2508:	fa 81       	ldd	r31, Y+2	; 0x02
    250a:	81 81       	ldd	r24, Z+1	; 0x01
    250c:	28 2f       	mov	r18, r24
    250e:	30 e0       	ldi	r19, 0x00	; 0
    2510:	38 87       	std	Y+8, r19	; 0x08
    2512:	2f 83       	std	Y+7, r18	; 0x07
    2514:	8f 81       	ldd	r24, Y+7	; 0x07
    2516:	98 85       	ldd	r25, Y+8	; 0x08
    2518:	83 30       	cpi	r24, 0x03	; 3
    251a:	91 05       	cpc	r25, r1
    251c:	09 f4       	brne	.+2      	; 0x2520 <TMR_vStartTimer+0x7a>
    251e:	45 c0       	rjmp	.+138    	; 0x25aa <TMR_vStartTimer+0x104>
    2520:	2f 81       	ldd	r18, Y+7	; 0x07
    2522:	38 85       	ldd	r19, Y+8	; 0x08
    2524:	24 30       	cpi	r18, 0x04	; 4
    2526:	31 05       	cpc	r19, r1
    2528:	7c f4       	brge	.+30     	; 0x2548 <TMR_vStartTimer+0xa2>
    252a:	8f 81       	ldd	r24, Y+7	; 0x07
    252c:	98 85       	ldd	r25, Y+8	; 0x08
    252e:	81 30       	cpi	r24, 0x01	; 1
    2530:	91 05       	cpc	r25, r1
    2532:	49 f1       	breq	.+82     	; 0x2586 <TMR_vStartTimer+0xe0>
    2534:	2f 81       	ldd	r18, Y+7	; 0x07
    2536:	38 85       	ldd	r19, Y+8	; 0x08
    2538:	22 30       	cpi	r18, 0x02	; 2
    253a:	31 05       	cpc	r19, r1
    253c:	6c f5       	brge	.+90     	; 0x2598 <TMR_vStartTimer+0xf2>
    253e:	8f 81       	ldd	r24, Y+7	; 0x07
    2540:	98 85       	ldd	r25, Y+8	; 0x08
    2542:	00 97       	sbiw	r24, 0x00	; 0
    2544:	c1 f0       	breq	.+48     	; 0x2576 <TMR_vStartTimer+0xd0>
    2546:	58 c1       	rjmp	.+688    	; 0x27f8 <TMR_vStartTimer+0x352>
    2548:	2f 81       	ldd	r18, Y+7	; 0x07
    254a:	38 85       	ldd	r19, Y+8	; 0x08
    254c:	25 30       	cpi	r18, 0x05	; 5
    254e:	31 05       	cpc	r19, r1
    2550:	09 f4       	brne	.+2      	; 0x2554 <TMR_vStartTimer+0xae>
    2552:	3d c0       	rjmp	.+122    	; 0x25ce <TMR_vStartTimer+0x128>
    2554:	8f 81       	ldd	r24, Y+7	; 0x07
    2556:	98 85       	ldd	r25, Y+8	; 0x08
    2558:	85 30       	cpi	r24, 0x05	; 5
    255a:	91 05       	cpc	r25, r1
    255c:	7c f1       	brlt	.+94     	; 0x25bc <TMR_vStartTimer+0x116>
    255e:	2f 81       	ldd	r18, Y+7	; 0x07
    2560:	38 85       	ldd	r19, Y+8	; 0x08
    2562:	26 30       	cpi	r18, 0x06	; 6
    2564:	31 05       	cpc	r19, r1
    2566:	e1 f1       	breq	.+120    	; 0x25e0 <TMR_vStartTimer+0x13a>
    2568:	8f 81       	ldd	r24, Y+7	; 0x07
    256a:	98 85       	ldd	r25, Y+8	; 0x08
    256c:	87 30       	cpi	r24, 0x07	; 7
    256e:	91 05       	cpc	r25, r1
    2570:	09 f4       	brne	.+2      	; 0x2574 <TMR_vStartTimer+0xce>
    2572:	3f c0       	rjmp	.+126    	; 0x25f2 <TMR_vStartTimer+0x14c>
    2574:	41 c1       	rjmp	.+642    	; 0x27f8 <TMR_vStartTimer+0x352>
			case TMR_PRE_NO_CLK:
				TCCR0_REG = (TCCR0_REG&0xF8);
    2576:	a3 e5       	ldi	r26, 0x53	; 83
    2578:	b0 e0       	ldi	r27, 0x00	; 0
    257a:	e3 e5       	ldi	r30, 0x53	; 83
    257c:	f0 e0       	ldi	r31, 0x00	; 0
    257e:	80 81       	ld	r24, Z
    2580:	88 7f       	andi	r24, 0xF8	; 248
    2582:	8c 93       	st	X, r24
    2584:	39 c1       	rjmp	.+626    	; 0x27f8 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_0:
				TCCR0_REG = (TCCR0_REG&0xF8) | 1;
    2586:	a3 e5       	ldi	r26, 0x53	; 83
    2588:	b0 e0       	ldi	r27, 0x00	; 0
    258a:	e3 e5       	ldi	r30, 0x53	; 83
    258c:	f0 e0       	ldi	r31, 0x00	; 0
    258e:	80 81       	ld	r24, Z
    2590:	88 7f       	andi	r24, 0xF8	; 248
    2592:	81 60       	ori	r24, 0x01	; 1
    2594:	8c 93       	st	X, r24
    2596:	30 c1       	rjmp	.+608    	; 0x27f8 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_8:
				TCCR0_REG = (TCCR0_REG&0xF8) | 2;
    2598:	a3 e5       	ldi	r26, 0x53	; 83
    259a:	b0 e0       	ldi	r27, 0x00	; 0
    259c:	e3 e5       	ldi	r30, 0x53	; 83
    259e:	f0 e0       	ldi	r31, 0x00	; 0
    25a0:	80 81       	ld	r24, Z
    25a2:	88 7f       	andi	r24, 0xF8	; 248
    25a4:	82 60       	ori	r24, 0x02	; 2
    25a6:	8c 93       	st	X, r24
    25a8:	27 c1       	rjmp	.+590    	; 0x27f8 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_64:
				TCCR0_REG = (TCCR0_REG&0xF8) | 3;
    25aa:	a3 e5       	ldi	r26, 0x53	; 83
    25ac:	b0 e0       	ldi	r27, 0x00	; 0
    25ae:	e3 e5       	ldi	r30, 0x53	; 83
    25b0:	f0 e0       	ldi	r31, 0x00	; 0
    25b2:	80 81       	ld	r24, Z
    25b4:	88 7f       	andi	r24, 0xF8	; 248
    25b6:	83 60       	ori	r24, 0x03	; 3
    25b8:	8c 93       	st	X, r24
    25ba:	1e c1       	rjmp	.+572    	; 0x27f8 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_256:
				TCCR0_REG = (TCCR0_REG&0xF8) | 4;
    25bc:	a3 e5       	ldi	r26, 0x53	; 83
    25be:	b0 e0       	ldi	r27, 0x00	; 0
    25c0:	e3 e5       	ldi	r30, 0x53	; 83
    25c2:	f0 e0       	ldi	r31, 0x00	; 0
    25c4:	80 81       	ld	r24, Z
    25c6:	88 7f       	andi	r24, 0xF8	; 248
    25c8:	84 60       	ori	r24, 0x04	; 4
    25ca:	8c 93       	st	X, r24
    25cc:	15 c1       	rjmp	.+554    	; 0x27f8 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_1024:
				TCCR0_REG = (TCCR0_REG&0xF8) | 5;
    25ce:	a3 e5       	ldi	r26, 0x53	; 83
    25d0:	b0 e0       	ldi	r27, 0x00	; 0
    25d2:	e3 e5       	ldi	r30, 0x53	; 83
    25d4:	f0 e0       	ldi	r31, 0x00	; 0
    25d6:	80 81       	ld	r24, Z
    25d8:	88 7f       	andi	r24, 0xF8	; 248
    25da:	85 60       	ori	r24, 0x05	; 5
    25dc:	8c 93       	st	X, r24
    25de:	0c c1       	rjmp	.+536    	; 0x27f8 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_EXT_FALLING:
				TCCR0_REG = (TCCR0_REG&0xF8) | 6;
    25e0:	a3 e5       	ldi	r26, 0x53	; 83
    25e2:	b0 e0       	ldi	r27, 0x00	; 0
    25e4:	e3 e5       	ldi	r30, 0x53	; 83
    25e6:	f0 e0       	ldi	r31, 0x00	; 0
    25e8:	80 81       	ld	r24, Z
    25ea:	88 7f       	andi	r24, 0xF8	; 248
    25ec:	86 60       	ori	r24, 0x06	; 6
    25ee:	8c 93       	st	X, r24
    25f0:	03 c1       	rjmp	.+518    	; 0x27f8 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_EXT_RISING:
				TCCR0_REG = (TCCR0_REG&0xF8) | 7;
    25f2:	a3 e5       	ldi	r26, 0x53	; 83
    25f4:	b0 e0       	ldi	r27, 0x00	; 0
    25f6:	e3 e5       	ldi	r30, 0x53	; 83
    25f8:	f0 e0       	ldi	r31, 0x00	; 0
    25fa:	80 81       	ld	r24, Z
    25fc:	87 60       	ori	r24, 0x07	; 7
    25fe:	8c 93       	st	X, r24
    2600:	fb c0       	rjmp	.+502    	; 0x27f8 <TMR_vStartTimer+0x352>
			}
			break;
		case TIMER1_NORMAL:
		case TIMER1_CTC_OCR:
		case TIMER1_CTC_ICR:
			switch(TMR->TMR_Prescale){
    2602:	e9 81       	ldd	r30, Y+1	; 0x01
    2604:	fa 81       	ldd	r31, Y+2	; 0x02
    2606:	81 81       	ldd	r24, Z+1	; 0x01
    2608:	28 2f       	mov	r18, r24
    260a:	30 e0       	ldi	r19, 0x00	; 0
    260c:	3e 83       	std	Y+6, r19	; 0x06
    260e:	2d 83       	std	Y+5, r18	; 0x05
    2610:	8d 81       	ldd	r24, Y+5	; 0x05
    2612:	9e 81       	ldd	r25, Y+6	; 0x06
    2614:	83 30       	cpi	r24, 0x03	; 3
    2616:	91 05       	cpc	r25, r1
    2618:	09 f4       	brne	.+2      	; 0x261c <TMR_vStartTimer+0x176>
    261a:	45 c0       	rjmp	.+138    	; 0x26a6 <TMR_vStartTimer+0x200>
    261c:	2d 81       	ldd	r18, Y+5	; 0x05
    261e:	3e 81       	ldd	r19, Y+6	; 0x06
    2620:	24 30       	cpi	r18, 0x04	; 4
    2622:	31 05       	cpc	r19, r1
    2624:	7c f4       	brge	.+30     	; 0x2644 <TMR_vStartTimer+0x19e>
    2626:	8d 81       	ldd	r24, Y+5	; 0x05
    2628:	9e 81       	ldd	r25, Y+6	; 0x06
    262a:	81 30       	cpi	r24, 0x01	; 1
    262c:	91 05       	cpc	r25, r1
    262e:	49 f1       	breq	.+82     	; 0x2682 <TMR_vStartTimer+0x1dc>
    2630:	2d 81       	ldd	r18, Y+5	; 0x05
    2632:	3e 81       	ldd	r19, Y+6	; 0x06
    2634:	22 30       	cpi	r18, 0x02	; 2
    2636:	31 05       	cpc	r19, r1
    2638:	6c f5       	brge	.+90     	; 0x2694 <TMR_vStartTimer+0x1ee>
    263a:	8d 81       	ldd	r24, Y+5	; 0x05
    263c:	9e 81       	ldd	r25, Y+6	; 0x06
    263e:	00 97       	sbiw	r24, 0x00	; 0
    2640:	c1 f0       	breq	.+48     	; 0x2672 <TMR_vStartTimer+0x1cc>
    2642:	da c0       	rjmp	.+436    	; 0x27f8 <TMR_vStartTimer+0x352>
    2644:	2d 81       	ldd	r18, Y+5	; 0x05
    2646:	3e 81       	ldd	r19, Y+6	; 0x06
    2648:	25 30       	cpi	r18, 0x05	; 5
    264a:	31 05       	cpc	r19, r1
    264c:	09 f4       	brne	.+2      	; 0x2650 <TMR_vStartTimer+0x1aa>
    264e:	3d c0       	rjmp	.+122    	; 0x26ca <TMR_vStartTimer+0x224>
    2650:	8d 81       	ldd	r24, Y+5	; 0x05
    2652:	9e 81       	ldd	r25, Y+6	; 0x06
    2654:	85 30       	cpi	r24, 0x05	; 5
    2656:	91 05       	cpc	r25, r1
    2658:	7c f1       	brlt	.+94     	; 0x26b8 <TMR_vStartTimer+0x212>
    265a:	2d 81       	ldd	r18, Y+5	; 0x05
    265c:	3e 81       	ldd	r19, Y+6	; 0x06
    265e:	26 30       	cpi	r18, 0x06	; 6
    2660:	31 05       	cpc	r19, r1
    2662:	e1 f1       	breq	.+120    	; 0x26dc <TMR_vStartTimer+0x236>
    2664:	8d 81       	ldd	r24, Y+5	; 0x05
    2666:	9e 81       	ldd	r25, Y+6	; 0x06
    2668:	87 30       	cpi	r24, 0x07	; 7
    266a:	91 05       	cpc	r25, r1
    266c:	09 f4       	brne	.+2      	; 0x2670 <TMR_vStartTimer+0x1ca>
    266e:	3f c0       	rjmp	.+126    	; 0x26ee <TMR_vStartTimer+0x248>
    2670:	c3 c0       	rjmp	.+390    	; 0x27f8 <TMR_vStartTimer+0x352>
			case TMR_PRE_NO_CLK:
				TCCR1B_REG = (TCCR1B_REG&0xF8);
    2672:	ae e4       	ldi	r26, 0x4E	; 78
    2674:	b0 e0       	ldi	r27, 0x00	; 0
    2676:	ee e4       	ldi	r30, 0x4E	; 78
    2678:	f0 e0       	ldi	r31, 0x00	; 0
    267a:	80 81       	ld	r24, Z
    267c:	88 7f       	andi	r24, 0xF8	; 248
    267e:	8c 93       	st	X, r24
    2680:	bb c0       	rjmp	.+374    	; 0x27f8 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_0:
				TCCR1B_REG = (TCCR1B_REG&0xF8) | 1;
    2682:	ae e4       	ldi	r26, 0x4E	; 78
    2684:	b0 e0       	ldi	r27, 0x00	; 0
    2686:	ee e4       	ldi	r30, 0x4E	; 78
    2688:	f0 e0       	ldi	r31, 0x00	; 0
    268a:	80 81       	ld	r24, Z
    268c:	88 7f       	andi	r24, 0xF8	; 248
    268e:	81 60       	ori	r24, 0x01	; 1
    2690:	8c 93       	st	X, r24
    2692:	b2 c0       	rjmp	.+356    	; 0x27f8 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_8:
				TCCR1B_REG = (TCCR1B_REG&0xF8) | 2;
    2694:	ae e4       	ldi	r26, 0x4E	; 78
    2696:	b0 e0       	ldi	r27, 0x00	; 0
    2698:	ee e4       	ldi	r30, 0x4E	; 78
    269a:	f0 e0       	ldi	r31, 0x00	; 0
    269c:	80 81       	ld	r24, Z
    269e:	88 7f       	andi	r24, 0xF8	; 248
    26a0:	82 60       	ori	r24, 0x02	; 2
    26a2:	8c 93       	st	X, r24
    26a4:	a9 c0       	rjmp	.+338    	; 0x27f8 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_64:
				TCCR1B_REG = (TCCR1B_REG&0xF8) | 3;
    26a6:	ae e4       	ldi	r26, 0x4E	; 78
    26a8:	b0 e0       	ldi	r27, 0x00	; 0
    26aa:	ee e4       	ldi	r30, 0x4E	; 78
    26ac:	f0 e0       	ldi	r31, 0x00	; 0
    26ae:	80 81       	ld	r24, Z
    26b0:	88 7f       	andi	r24, 0xF8	; 248
    26b2:	83 60       	ori	r24, 0x03	; 3
    26b4:	8c 93       	st	X, r24
    26b6:	a0 c0       	rjmp	.+320    	; 0x27f8 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_256:
				TCCR1B_REG = (TCCR1B_REG&0xF8) | 4;
    26b8:	ae e4       	ldi	r26, 0x4E	; 78
    26ba:	b0 e0       	ldi	r27, 0x00	; 0
    26bc:	ee e4       	ldi	r30, 0x4E	; 78
    26be:	f0 e0       	ldi	r31, 0x00	; 0
    26c0:	80 81       	ld	r24, Z
    26c2:	88 7f       	andi	r24, 0xF8	; 248
    26c4:	84 60       	ori	r24, 0x04	; 4
    26c6:	8c 93       	st	X, r24
    26c8:	97 c0       	rjmp	.+302    	; 0x27f8 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_1024:
				TCCR1B_REG = (TCCR1B_REG&0xF8) | 5;
    26ca:	ae e4       	ldi	r26, 0x4E	; 78
    26cc:	b0 e0       	ldi	r27, 0x00	; 0
    26ce:	ee e4       	ldi	r30, 0x4E	; 78
    26d0:	f0 e0       	ldi	r31, 0x00	; 0
    26d2:	80 81       	ld	r24, Z
    26d4:	88 7f       	andi	r24, 0xF8	; 248
    26d6:	85 60       	ori	r24, 0x05	; 5
    26d8:	8c 93       	st	X, r24
    26da:	8e c0       	rjmp	.+284    	; 0x27f8 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_EXT_FALLING:
				TCCR1B_REG = (TCCR1B_REG&0xF8) | 6;
    26dc:	ae e4       	ldi	r26, 0x4E	; 78
    26de:	b0 e0       	ldi	r27, 0x00	; 0
    26e0:	ee e4       	ldi	r30, 0x4E	; 78
    26e2:	f0 e0       	ldi	r31, 0x00	; 0
    26e4:	80 81       	ld	r24, Z
    26e6:	88 7f       	andi	r24, 0xF8	; 248
    26e8:	86 60       	ori	r24, 0x06	; 6
    26ea:	8c 93       	st	X, r24
    26ec:	85 c0       	rjmp	.+266    	; 0x27f8 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_EXT_RISING:
				TCCR1B_REG = (TCCR1B_REG&0xF8) | 7;
    26ee:	ae e4       	ldi	r26, 0x4E	; 78
    26f0:	b0 e0       	ldi	r27, 0x00	; 0
    26f2:	ee e4       	ldi	r30, 0x4E	; 78
    26f4:	f0 e0       	ldi	r31, 0x00	; 0
    26f6:	80 81       	ld	r24, Z
    26f8:	87 60       	ori	r24, 0x07	; 7
    26fa:	8c 93       	st	X, r24
    26fc:	7d c0       	rjmp	.+250    	; 0x27f8 <TMR_vStartTimer+0x352>
			default: /* Do Nothing */ break;
			}
			break;
		case TIMER2_NORMAL:
		case TIMER2_CTC:
			switch(TMR->TMR_Prescale){
    26fe:	e9 81       	ldd	r30, Y+1	; 0x01
    2700:	fa 81       	ldd	r31, Y+2	; 0x02
    2702:	81 81       	ldd	r24, Z+1	; 0x01
    2704:	28 2f       	mov	r18, r24
    2706:	30 e0       	ldi	r19, 0x00	; 0
    2708:	3c 83       	std	Y+4, r19	; 0x04
    270a:	2b 83       	std	Y+3, r18	; 0x03
    270c:	8b 81       	ldd	r24, Y+3	; 0x03
    270e:	9c 81       	ldd	r25, Y+4	; 0x04
    2710:	83 30       	cpi	r24, 0x03	; 3
    2712:	91 05       	cpc	r25, r1
    2714:	09 f4       	brne	.+2      	; 0x2718 <TMR_vStartTimer+0x272>
    2716:	4e c0       	rjmp	.+156    	; 0x27b4 <TMR_vStartTimer+0x30e>
    2718:	2b 81       	ldd	r18, Y+3	; 0x03
    271a:	3c 81       	ldd	r19, Y+4	; 0x04
    271c:	24 30       	cpi	r18, 0x04	; 4
    271e:	31 05       	cpc	r19, r1
    2720:	7c f4       	brge	.+30     	; 0x2740 <TMR_vStartTimer+0x29a>
    2722:	8b 81       	ldd	r24, Y+3	; 0x03
    2724:	9c 81       	ldd	r25, Y+4	; 0x04
    2726:	81 30       	cpi	r24, 0x01	; 1
    2728:	91 05       	cpc	r25, r1
    272a:	49 f1       	breq	.+82     	; 0x277e <TMR_vStartTimer+0x2d8>
    272c:	2b 81       	ldd	r18, Y+3	; 0x03
    272e:	3c 81       	ldd	r19, Y+4	; 0x04
    2730:	22 30       	cpi	r18, 0x02	; 2
    2732:	31 05       	cpc	r19, r1
    2734:	6c f5       	brge	.+90     	; 0x2790 <TMR_vStartTimer+0x2ea>
    2736:	8b 81       	ldd	r24, Y+3	; 0x03
    2738:	9c 81       	ldd	r25, Y+4	; 0x04
    273a:	00 97       	sbiw	r24, 0x00	; 0
    273c:	c1 f0       	breq	.+48     	; 0x276e <TMR_vStartTimer+0x2c8>
    273e:	5c c0       	rjmp	.+184    	; 0x27f8 <TMR_vStartTimer+0x352>
    2740:	2b 81       	ldd	r18, Y+3	; 0x03
    2742:	3c 81       	ldd	r19, Y+4	; 0x04
    2744:	25 30       	cpi	r18, 0x05	; 5
    2746:	31 05       	cpc	r19, r1
    2748:	09 f4       	brne	.+2      	; 0x274c <TMR_vStartTimer+0x2a6>
    274a:	4f c0       	rjmp	.+158    	; 0x27ea <TMR_vStartTimer+0x344>
    274c:	8b 81       	ldd	r24, Y+3	; 0x03
    274e:	9c 81       	ldd	r25, Y+4	; 0x04
    2750:	85 30       	cpi	r24, 0x05	; 5
    2752:	91 05       	cpc	r25, r1
    2754:	0c f4       	brge	.+2      	; 0x2758 <TMR_vStartTimer+0x2b2>
    2756:	40 c0       	rjmp	.+128    	; 0x27d8 <TMR_vStartTimer+0x332>
    2758:	2b 81       	ldd	r18, Y+3	; 0x03
    275a:	3c 81       	ldd	r19, Y+4	; 0x04
    275c:	28 30       	cpi	r18, 0x08	; 8
    275e:	31 05       	cpc	r19, r1
    2760:	01 f1       	breq	.+64     	; 0x27a2 <TMR_vStartTimer+0x2fc>
    2762:	8b 81       	ldd	r24, Y+3	; 0x03
    2764:	9c 81       	ldd	r25, Y+4	; 0x04
    2766:	89 30       	cpi	r24, 0x09	; 9
    2768:	91 05       	cpc	r25, r1
    276a:	69 f1       	breq	.+90     	; 0x27c6 <TMR_vStartTimer+0x320>
    276c:	45 c0       	rjmp	.+138    	; 0x27f8 <TMR_vStartTimer+0x352>
			case TMR_PRE_NO_CLK:
				TCCR2_REG = (TCCR2_REG&0xF8);
    276e:	a5 e4       	ldi	r26, 0x45	; 69
    2770:	b0 e0       	ldi	r27, 0x00	; 0
    2772:	e5 e4       	ldi	r30, 0x45	; 69
    2774:	f0 e0       	ldi	r31, 0x00	; 0
    2776:	80 81       	ld	r24, Z
    2778:	88 7f       	andi	r24, 0xF8	; 248
    277a:	8c 93       	st	X, r24
    277c:	3d c0       	rjmp	.+122    	; 0x27f8 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_0:
				TCCR2_REG = (TCCR2_REG&0xF8) | 1;
    277e:	a5 e4       	ldi	r26, 0x45	; 69
    2780:	b0 e0       	ldi	r27, 0x00	; 0
    2782:	e5 e4       	ldi	r30, 0x45	; 69
    2784:	f0 e0       	ldi	r31, 0x00	; 0
    2786:	80 81       	ld	r24, Z
    2788:	88 7f       	andi	r24, 0xF8	; 248
    278a:	81 60       	ori	r24, 0x01	; 1
    278c:	8c 93       	st	X, r24
    278e:	34 c0       	rjmp	.+104    	; 0x27f8 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_8:
				TCCR2_REG = (TCCR2_REG&0xF8) | 2;
    2790:	a5 e4       	ldi	r26, 0x45	; 69
    2792:	b0 e0       	ldi	r27, 0x00	; 0
    2794:	e5 e4       	ldi	r30, 0x45	; 69
    2796:	f0 e0       	ldi	r31, 0x00	; 0
    2798:	80 81       	ld	r24, Z
    279a:	88 7f       	andi	r24, 0xF8	; 248
    279c:	82 60       	ori	r24, 0x02	; 2
    279e:	8c 93       	st	X, r24
    27a0:	2b c0       	rjmp	.+86     	; 0x27f8 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_32:
				TCCR2_REG = (TCCR2_REG&0xF8) | 3;
    27a2:	a5 e4       	ldi	r26, 0x45	; 69
    27a4:	b0 e0       	ldi	r27, 0x00	; 0
    27a6:	e5 e4       	ldi	r30, 0x45	; 69
    27a8:	f0 e0       	ldi	r31, 0x00	; 0
    27aa:	80 81       	ld	r24, Z
    27ac:	88 7f       	andi	r24, 0xF8	; 248
    27ae:	83 60       	ori	r24, 0x03	; 3
    27b0:	8c 93       	st	X, r24
    27b2:	22 c0       	rjmp	.+68     	; 0x27f8 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_64:
				TCCR2_REG = (TCCR2_REG&0xF8) | 4;
    27b4:	a5 e4       	ldi	r26, 0x45	; 69
    27b6:	b0 e0       	ldi	r27, 0x00	; 0
    27b8:	e5 e4       	ldi	r30, 0x45	; 69
    27ba:	f0 e0       	ldi	r31, 0x00	; 0
    27bc:	80 81       	ld	r24, Z
    27be:	88 7f       	andi	r24, 0xF8	; 248
    27c0:	84 60       	ori	r24, 0x04	; 4
    27c2:	8c 93       	st	X, r24
    27c4:	19 c0       	rjmp	.+50     	; 0x27f8 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_128:
				TCCR2_REG = (TCCR2_REG&0xF8) | 5;
    27c6:	a5 e4       	ldi	r26, 0x45	; 69
    27c8:	b0 e0       	ldi	r27, 0x00	; 0
    27ca:	e5 e4       	ldi	r30, 0x45	; 69
    27cc:	f0 e0       	ldi	r31, 0x00	; 0
    27ce:	80 81       	ld	r24, Z
    27d0:	88 7f       	andi	r24, 0xF8	; 248
    27d2:	85 60       	ori	r24, 0x05	; 5
    27d4:	8c 93       	st	X, r24
    27d6:	10 c0       	rjmp	.+32     	; 0x27f8 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_256:
				TCCR2_REG = (TCCR2_REG&0xF8) | 6;
    27d8:	a5 e4       	ldi	r26, 0x45	; 69
    27da:	b0 e0       	ldi	r27, 0x00	; 0
    27dc:	e5 e4       	ldi	r30, 0x45	; 69
    27de:	f0 e0       	ldi	r31, 0x00	; 0
    27e0:	80 81       	ld	r24, Z
    27e2:	88 7f       	andi	r24, 0xF8	; 248
    27e4:	86 60       	ori	r24, 0x06	; 6
    27e6:	8c 93       	st	X, r24
    27e8:	07 c0       	rjmp	.+14     	; 0x27f8 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_1024:
				TCCR2_REG = (TCCR2_REG&0xF8) | 7;
    27ea:	a5 e4       	ldi	r26, 0x45	; 69
    27ec:	b0 e0       	ldi	r27, 0x00	; 0
    27ee:	e5 e4       	ldi	r30, 0x45	; 69
    27f0:	f0 e0       	ldi	r31, 0x00	; 0
    27f2:	80 81       	ld	r24, Z
    27f4:	87 60       	ori	r24, 0x07	; 7
    27f6:	8c 93       	st	X, r24
			}
			break;
		default: /* Do Nothing */ break;
		}
	}
}
    27f8:	2a 96       	adiw	r28, 0x0a	; 10
    27fa:	0f b6       	in	r0, 0x3f	; 63
    27fc:	f8 94       	cli
    27fe:	de bf       	out	0x3e, r29	; 62
    2800:	0f be       	out	0x3f, r0	; 63
    2802:	cd bf       	out	0x3d, r28	; 61
    2804:	cf 91       	pop	r28
    2806:	df 91       	pop	r29
    2808:	08 95       	ret

0000280a <TMR_vStop>:

void TMR_vStop(const TMR_cfg_t *TMR){
    280a:	df 93       	push	r29
    280c:	cf 93       	push	r28
    280e:	00 d0       	rcall	.+0      	; 0x2810 <TMR_vStop+0x6>
    2810:	00 d0       	rcall	.+0      	; 0x2812 <TMR_vStop+0x8>
    2812:	cd b7       	in	r28, 0x3d	; 61
    2814:	de b7       	in	r29, 0x3e	; 62
    2816:	9a 83       	std	Y+2, r25	; 0x02
    2818:	89 83       	std	Y+1, r24	; 0x01
	if(TMR != NULL){
    281a:	89 81       	ldd	r24, Y+1	; 0x01
    281c:	9a 81       	ldd	r25, Y+2	; 0x02
    281e:	00 97       	sbiw	r24, 0x00	; 0
    2820:	99 f1       	breq	.+102    	; 0x2888 <TMR_vStop+0x7e>
		switch(TMR->TMR_TimerChannel){
    2822:	e9 81       	ldd	r30, Y+1	; 0x01
    2824:	fa 81       	ldd	r31, Y+2	; 0x02
    2826:	80 81       	ld	r24, Z
    2828:	28 2f       	mov	r18, r24
    282a:	30 e0       	ldi	r19, 0x00	; 0
    282c:	3c 83       	std	Y+4, r19	; 0x04
    282e:	2b 83       	std	Y+3, r18	; 0x03
    2830:	8b 81       	ldd	r24, Y+3	; 0x03
    2832:	9c 81       	ldd	r25, Y+4	; 0x04
    2834:	85 30       	cpi	r24, 0x05	; 5
    2836:	91 05       	cpc	r25, r1
    2838:	54 f4       	brge	.+20     	; 0x284e <TMR_vStop+0x44>
    283a:	2b 81       	ldd	r18, Y+3	; 0x03
    283c:	3c 81       	ldd	r19, Y+4	; 0x04
    283e:	22 30       	cpi	r18, 0x02	; 2
    2840:	31 05       	cpc	r19, r1
    2842:	9c f4       	brge	.+38     	; 0x286a <TMR_vStop+0x60>
    2844:	8b 81       	ldd	r24, Y+3	; 0x03
    2846:	9c 81       	ldd	r25, Y+4	; 0x04
    2848:	99 23       	and	r25, r25
    284a:	f4 f0       	brlt	.+60     	; 0x2888 <TMR_vStop+0x7e>
    284c:	06 c0       	rjmp	.+12     	; 0x285a <TMR_vStop+0x50>
    284e:	2b 81       	ldd	r18, Y+3	; 0x03
    2850:	3c 81       	ldd	r19, Y+4	; 0x04
    2852:	27 30       	cpi	r18, 0x07	; 7
    2854:	31 05       	cpc	r19, r1
    2856:	c4 f4       	brge	.+48     	; 0x2888 <TMR_vStop+0x7e>
    2858:	10 c0       	rjmp	.+32     	; 0x287a <TMR_vStop+0x70>
		case TIMER0_NORMAL:
		case TIMER0_CTC:
			TCCR0_REG &= 0xF8;
    285a:	a3 e5       	ldi	r26, 0x53	; 83
    285c:	b0 e0       	ldi	r27, 0x00	; 0
    285e:	e3 e5       	ldi	r30, 0x53	; 83
    2860:	f0 e0       	ldi	r31, 0x00	; 0
    2862:	80 81       	ld	r24, Z
    2864:	88 7f       	andi	r24, 0xF8	; 248
    2866:	8c 93       	st	X, r24
    2868:	0f c0       	rjmp	.+30     	; 0x2888 <TMR_vStop+0x7e>
			break;
		case TIMER1_NORMAL:
		case TIMER1_CTC_OCR:
		case TIMER1_CTC_ICR:
			TCCR1B_REG &= 0xF8;
    286a:	ae e4       	ldi	r26, 0x4E	; 78
    286c:	b0 e0       	ldi	r27, 0x00	; 0
    286e:	ee e4       	ldi	r30, 0x4E	; 78
    2870:	f0 e0       	ldi	r31, 0x00	; 0
    2872:	80 81       	ld	r24, Z
    2874:	88 7f       	andi	r24, 0xF8	; 248
    2876:	8c 93       	st	X, r24
    2878:	07 c0       	rjmp	.+14     	; 0x2888 <TMR_vStop+0x7e>
			break;
		case TIMER2_NORMAL:
		case TIMER2_CTC:
			TCCR2_REG &= 0xF8;
    287a:	a5 e4       	ldi	r26, 0x45	; 69
    287c:	b0 e0       	ldi	r27, 0x00	; 0
    287e:	e5 e4       	ldi	r30, 0x45	; 69
    2880:	f0 e0       	ldi	r31, 0x00	; 0
    2882:	80 81       	ld	r24, Z
    2884:	88 7f       	andi	r24, 0xF8	; 248
    2886:	8c 93       	st	X, r24
			break;
		default: /* Do Nothing */ break;
		}
	}
}
    2888:	0f 90       	pop	r0
    288a:	0f 90       	pop	r0
    288c:	0f 90       	pop	r0
    288e:	0f 90       	pop	r0
    2890:	cf 91       	pop	r28
    2892:	df 91       	pop	r29
    2894:	08 95       	ret

00002896 <TMR_vSetICRValue>:

void TMR_vSetICRValue(const TMR_cfg_t *TMR, u16 Copy_u16ICRValue){
    2896:	df 93       	push	r29
    2898:	cf 93       	push	r28
    289a:	00 d0       	rcall	.+0      	; 0x289c <TMR_vSetICRValue+0x6>
    289c:	00 d0       	rcall	.+0      	; 0x289e <TMR_vSetICRValue+0x8>
    289e:	cd b7       	in	r28, 0x3d	; 61
    28a0:	de b7       	in	r29, 0x3e	; 62
    28a2:	9a 83       	std	Y+2, r25	; 0x02
    28a4:	89 83       	std	Y+1, r24	; 0x01
    28a6:	7c 83       	std	Y+4, r23	; 0x04
    28a8:	6b 83       	std	Y+3, r22	; 0x03
	if(TMR != NULL){
    28aa:	89 81       	ldd	r24, Y+1	; 0x01
    28ac:	9a 81       	ldd	r25, Y+2	; 0x02
    28ae:	00 97       	sbiw	r24, 0x00	; 0
    28b0:	79 f0       	breq	.+30     	; 0x28d0 <TMR_vSetICRValue+0x3a>
		switch(TMR->TMR_TimerChannel){
    28b2:	e9 81       	ldd	r30, Y+1	; 0x01
    28b4:	fa 81       	ldd	r31, Y+2	; 0x02
    28b6:	80 81       	ld	r24, Z
    28b8:	88 2f       	mov	r24, r24
    28ba:	90 e0       	ldi	r25, 0x00	; 0
    28bc:	02 97       	sbiw	r24, 0x02	; 2
    28be:	83 30       	cpi	r24, 0x03	; 3
    28c0:	91 05       	cpc	r25, r1
    28c2:	30 f4       	brcc	.+12     	; 0x28d0 <TMR_vSetICRValue+0x3a>

		case TIMER1_NORMAL:
		case TIMER1_CTC_OCR:
		case TIMER1_CTC_ICR:
			ICR1_REG = Copy_u16ICRValue;
    28c4:	e6 e4       	ldi	r30, 0x46	; 70
    28c6:	f0 e0       	ldi	r31, 0x00	; 0
    28c8:	8b 81       	ldd	r24, Y+3	; 0x03
    28ca:	9c 81       	ldd	r25, Y+4	; 0x04
    28cc:	91 83       	std	Z+1, r25	; 0x01
    28ce:	80 83       	st	Z, r24
			break;
		default: /* Do Nothing */ break;
		}
	}
}
    28d0:	0f 90       	pop	r0
    28d2:	0f 90       	pop	r0
    28d4:	0f 90       	pop	r0
    28d6:	0f 90       	pop	r0
    28d8:	cf 91       	pop	r28
    28da:	df 91       	pop	r29
    28dc:	08 95       	ret

000028de <TMR_vSetOCRValue>:

void TMR_vSetOCRValue(const TMR_cfg_t *TMR, u16 Copy_u16OCRValue){
    28de:	df 93       	push	r29
    28e0:	cf 93       	push	r28
    28e2:	00 d0       	rcall	.+0      	; 0x28e4 <TMR_vSetOCRValue+0x6>
    28e4:	00 d0       	rcall	.+0      	; 0x28e6 <TMR_vSetOCRValue+0x8>
    28e6:	00 d0       	rcall	.+0      	; 0x28e8 <TMR_vSetOCRValue+0xa>
    28e8:	cd b7       	in	r28, 0x3d	; 61
    28ea:	de b7       	in	r29, 0x3e	; 62
    28ec:	9a 83       	std	Y+2, r25	; 0x02
    28ee:	89 83       	std	Y+1, r24	; 0x01
    28f0:	7c 83       	std	Y+4, r23	; 0x04
    28f2:	6b 83       	std	Y+3, r22	; 0x03
	if(TMR != NULL){
    28f4:	89 81       	ldd	r24, Y+1	; 0x01
    28f6:	9a 81       	ldd	r25, Y+2	; 0x02
    28f8:	00 97       	sbiw	r24, 0x00	; 0
    28fa:	61 f1       	breq	.+88     	; 0x2954 <TMR_vSetOCRValue+0x76>
		switch(TMR->TMR_TimerChannel){
    28fc:	e9 81       	ldd	r30, Y+1	; 0x01
    28fe:	fa 81       	ldd	r31, Y+2	; 0x02
    2900:	80 81       	ld	r24, Z
    2902:	28 2f       	mov	r18, r24
    2904:	30 e0       	ldi	r19, 0x00	; 0
    2906:	3e 83       	std	Y+6, r19	; 0x06
    2908:	2d 83       	std	Y+5, r18	; 0x05
    290a:	8d 81       	ldd	r24, Y+5	; 0x05
    290c:	9e 81       	ldd	r25, Y+6	; 0x06
    290e:	85 30       	cpi	r24, 0x05	; 5
    2910:	91 05       	cpc	r25, r1
    2912:	54 f4       	brge	.+20     	; 0x2928 <TMR_vSetOCRValue+0x4a>
    2914:	2d 81       	ldd	r18, Y+5	; 0x05
    2916:	3e 81       	ldd	r19, Y+6	; 0x06
    2918:	22 30       	cpi	r18, 0x02	; 2
    291a:	31 05       	cpc	r19, r1
    291c:	84 f4       	brge	.+32     	; 0x293e <TMR_vSetOCRValue+0x60>
    291e:	8d 81       	ldd	r24, Y+5	; 0x05
    2920:	9e 81       	ldd	r25, Y+6	; 0x06
    2922:	99 23       	and	r25, r25
    2924:	bc f0       	brlt	.+46     	; 0x2954 <TMR_vSetOCRValue+0x76>
    2926:	06 c0       	rjmp	.+12     	; 0x2934 <TMR_vSetOCRValue+0x56>
    2928:	2d 81       	ldd	r18, Y+5	; 0x05
    292a:	3e 81       	ldd	r19, Y+6	; 0x06
    292c:	27 30       	cpi	r18, 0x07	; 7
    292e:	31 05       	cpc	r19, r1
    2930:	8c f4       	brge	.+34     	; 0x2954 <TMR_vSetOCRValue+0x76>
    2932:	0c c0       	rjmp	.+24     	; 0x294c <TMR_vSetOCRValue+0x6e>
		case TIMER0_NORMAL:
		case TIMER0_CTC:
			OCR0_REG = (u8)Copy_u16OCRValue;
    2934:	ec e5       	ldi	r30, 0x5C	; 92
    2936:	f0 e0       	ldi	r31, 0x00	; 0
    2938:	8b 81       	ldd	r24, Y+3	; 0x03
    293a:	80 83       	st	Z, r24
    293c:	0b c0       	rjmp	.+22     	; 0x2954 <TMR_vSetOCRValue+0x76>
			break;
		case TIMER1_NORMAL:
		case TIMER1_CTC_OCR:
		case TIMER1_CTC_ICR:
			OCR1A_REG = Copy_u16OCRValue;
    293e:	ea e4       	ldi	r30, 0x4A	; 74
    2940:	f0 e0       	ldi	r31, 0x00	; 0
    2942:	8b 81       	ldd	r24, Y+3	; 0x03
    2944:	9c 81       	ldd	r25, Y+4	; 0x04
    2946:	91 83       	std	Z+1, r25	; 0x01
    2948:	80 83       	st	Z, r24
    294a:	04 c0       	rjmp	.+8      	; 0x2954 <TMR_vSetOCRValue+0x76>
			break;
		case TIMER2_NORMAL:
		case TIMER2_CTC:
			OCR2_REG = (u8)Copy_u16OCRValue;
    294c:	e3 e4       	ldi	r30, 0x43	; 67
    294e:	f0 e0       	ldi	r31, 0x00	; 0
    2950:	8b 81       	ldd	r24, Y+3	; 0x03
    2952:	80 83       	st	Z, r24
			break;
		default: /* Do Nothing */ break;
		}
	}
}
    2954:	26 96       	adiw	r28, 0x06	; 6
    2956:	0f b6       	in	r0, 0x3f	; 63
    2958:	f8 94       	cli
    295a:	de bf       	out	0x3e, r29	; 62
    295c:	0f be       	out	0x3f, r0	; 63
    295e:	cd bf       	out	0x3d, r28	; 61
    2960:	cf 91       	pop	r28
    2962:	df 91       	pop	r29
    2964:	08 95       	ret

00002966 <__vector_5>:


void __vector_5(void) __attribute__((signal));
void __vector_5(void){
    2966:	1f 92       	push	r1
    2968:	0f 92       	push	r0
    296a:	0f b6       	in	r0, 0x3f	; 63
    296c:	0f 92       	push	r0
    296e:	11 24       	eor	r1, r1
    2970:	2f 93       	push	r18
    2972:	3f 93       	push	r19
    2974:	4f 93       	push	r20
    2976:	5f 93       	push	r21
    2978:	6f 93       	push	r22
    297a:	7f 93       	push	r23
    297c:	8f 93       	push	r24
    297e:	9f 93       	push	r25
    2980:	af 93       	push	r26
    2982:	bf 93       	push	r27
    2984:	ef 93       	push	r30
    2986:	ff 93       	push	r31
    2988:	df 93       	push	r29
    298a:	cf 93       	push	r28
    298c:	cd b7       	in	r28, 0x3d	; 61
    298e:	de b7       	in	r29, 0x3e	; 62
    2990:	2a 97       	sbiw	r28, 0x0a	; 10
    2992:	de bf       	out	0x3e, r29	; 62
    2994:	cd bf       	out	0x3d, r28	; 61
	static u8 timer2_inner_counter = 0;
	static u8 timer2_seconds = 10;
	u8 preload_value = 124;
    2996:	8c e7       	ldi	r24, 0x7C	; 124
    2998:	8a 87       	std	Y+10, r24	; 0x0a
	u8 overflow_max = 31;
    299a:	8f e1       	ldi	r24, 0x1F	; 31
    299c:	89 87       	std	Y+9, r24	; 0x09
	timer2_inner_counter++;
    299e:	80 91 1b 06 	lds	r24, 0x061B
    29a2:	8f 5f       	subi	r24, 0xFF	; 255
    29a4:	80 93 1b 06 	sts	0x061B, r24
	if(timer2_inner_counter == overflow_max){
    29a8:	90 91 1b 06 	lds	r25, 0x061B
    29ac:	89 85       	ldd	r24, Y+9	; 0x09
    29ae:	98 17       	cp	r25, r24
    29b0:	e1 f4       	brne	.+56     	; 0x29ea <__vector_5+0x84>
		UART_vSendData(timer2_seconds+47);
    29b2:	80 91 53 04 	lds	r24, 0x0453
    29b6:	81 5d       	subi	r24, 0xD1	; 209
    29b8:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <UART_vSendData>
		UART_vSendString((u8*)" seconds remaining!\r\n");
    29bc:	80 e6       	ldi	r24, 0x60	; 96
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <UART_vSendString>
		Sev_Display(0, timer2_seconds-1);
    29c4:	80 91 53 04 	lds	r24, 0x0453
    29c8:	98 2f       	mov	r25, r24
    29ca:	91 50       	subi	r25, 0x01	; 1
    29cc:	80 e0       	ldi	r24, 0x00	; 0
    29ce:	69 2f       	mov	r22, r25
    29d0:	0e 94 bc 22 	call	0x4578	; 0x4578 <Sev_Display>
		timer2_inner_counter = 0;
    29d4:	10 92 1b 06 	sts	0x061B, r1
		TCNT2_REG = preload_value;
    29d8:	e4 e4       	ldi	r30, 0x44	; 68
    29da:	f0 e0       	ldi	r31, 0x00	; 0
    29dc:	8a 85       	ldd	r24, Y+10	; 0x0a
    29de:	80 83       	st	Z, r24
		timer2_seconds--;
    29e0:	80 91 53 04 	lds	r24, 0x0453
    29e4:	81 50       	subi	r24, 0x01	; 1
    29e6:	80 93 53 04 	sts	0x0453, r24
	}
	if(timer2_seconds == 0){
    29ea:	80 91 53 04 	lds	r24, 0x0453
    29ee:	88 23       	and	r24, r24
    29f0:	09 f0       	breq	.+2      	; 0x29f4 <__vector_5+0x8e>
    29f2:	4e c0       	rjmp	.+156    	; 0x2a90 <__vector_5+0x12a>
		UART_vSendString((u8*)"\r\n\r\n");
    29f4:	86 e7       	ldi	r24, 0x76	; 118
    29f6:	90 e0       	ldi	r25, 0x00	; 0
    29f8:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <UART_vSendString>
		timer2_seconds = 10;
    29fc:	8a e0       	ldi	r24, 0x0A	; 10
    29fe:	80 93 53 04 	sts	0x0453, r24
		TMR_vStop(&TIMER2);
    2a02:	8c e0       	ldi	r24, 0x0C	; 12
    2a04:	96 e0       	ldi	r25, 0x06	; 6
    2a06:	0e 94 05 14 	call	0x280a	; 0x280a <TMR_vStop>
		timer2_flag = FLAG_ON;
    2a0a:	81 e0       	ldi	r24, 0x01	; 1
    2a0c:	80 93 1a 06 	sts	0x061A, r24
		Delay_ms(250);
    2a10:	8f e1       	ldi	r24, 0x1F	; 31
    2a12:	90 e0       	ldi	r25, 0x00	; 0
    2a14:	a0 e0       	ldi	r26, 0x00	; 0
    2a16:	b0 e0       	ldi	r27, 0x00	; 0
    2a18:	8d 83       	std	Y+5, r24	; 0x05
    2a1a:	9e 83       	std	Y+6, r25	; 0x06
    2a1c:	af 83       	std	Y+7, r26	; 0x07
    2a1e:	b8 87       	std	Y+8, r27	; 0x08
    2a20:	28 c0       	rjmp	.+80     	; 0x2a72 <__vector_5+0x10c>
    2a22:	80 ed       	ldi	r24, 0xD0	; 208
    2a24:	97 e0       	ldi	r25, 0x07	; 7
    2a26:	a0 e0       	ldi	r26, 0x00	; 0
    2a28:	b0 e0       	ldi	r27, 0x00	; 0
    2a2a:	89 83       	std	Y+1, r24	; 0x01
    2a2c:	9a 83       	std	Y+2, r25	; 0x02
    2a2e:	ab 83       	std	Y+3, r26	; 0x03
    2a30:	bc 83       	std	Y+4, r27	; 0x04
    2a32:	0c c0       	rjmp	.+24     	; 0x2a4c <__vector_5+0xe6>
    2a34:	00 00       	nop
    2a36:	89 81       	ldd	r24, Y+1	; 0x01
    2a38:	9a 81       	ldd	r25, Y+2	; 0x02
    2a3a:	ab 81       	ldd	r26, Y+3	; 0x03
    2a3c:	bc 81       	ldd	r27, Y+4	; 0x04
    2a3e:	01 97       	sbiw	r24, 0x01	; 1
    2a40:	a1 09       	sbc	r26, r1
    2a42:	b1 09       	sbc	r27, r1
    2a44:	89 83       	std	Y+1, r24	; 0x01
    2a46:	9a 83       	std	Y+2, r25	; 0x02
    2a48:	ab 83       	std	Y+3, r26	; 0x03
    2a4a:	bc 83       	std	Y+4, r27	; 0x04
    2a4c:	89 81       	ldd	r24, Y+1	; 0x01
    2a4e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a50:	ab 81       	ldd	r26, Y+3	; 0x03
    2a52:	bc 81       	ldd	r27, Y+4	; 0x04
    2a54:	00 97       	sbiw	r24, 0x00	; 0
    2a56:	a1 05       	cpc	r26, r1
    2a58:	b1 05       	cpc	r27, r1
    2a5a:	61 f7       	brne	.-40     	; 0x2a34 <__vector_5+0xce>
    2a5c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a5e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a60:	af 81       	ldd	r26, Y+7	; 0x07
    2a62:	b8 85       	ldd	r27, Y+8	; 0x08
    2a64:	01 97       	sbiw	r24, 0x01	; 1
    2a66:	a1 09       	sbc	r26, r1
    2a68:	b1 09       	sbc	r27, r1
    2a6a:	8d 83       	std	Y+5, r24	; 0x05
    2a6c:	9e 83       	std	Y+6, r25	; 0x06
    2a6e:	af 83       	std	Y+7, r26	; 0x07
    2a70:	b8 87       	std	Y+8, r27	; 0x08
    2a72:	8d 81       	ldd	r24, Y+5	; 0x05
    2a74:	9e 81       	ldd	r25, Y+6	; 0x06
    2a76:	af 81       	ldd	r26, Y+7	; 0x07
    2a78:	b8 85       	ldd	r27, Y+8	; 0x08
    2a7a:	00 97       	sbiw	r24, 0x00	; 0
    2a7c:	a1 05       	cpc	r26, r1
    2a7e:	b1 05       	cpc	r27, r1
    2a80:	81 f6       	brne	.-96     	; 0x2a22 <__vector_5+0xbc>
		Sev_PowerOff(0);
    2a82:	80 e0       	ldi	r24, 0x00	; 0
    2a84:	0e 94 c3 23 	call	0x4786	; 0x4786 <Sev_PowerOff>
		DIO_enuWritePin(DIO_PIN_NUM_0, DIO_LOW);
    2a88:	80 e0       	ldi	r24, 0x00	; 0
    2a8a:	60 e0       	ldi	r22, 0x00	; 0
    2a8c:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <DIO_enuWritePin>
	}
}
    2a90:	2a 96       	adiw	r28, 0x0a	; 10
    2a92:	de bf       	out	0x3e, r29	; 62
    2a94:	cd bf       	out	0x3d, r28	; 61
    2a96:	cf 91       	pop	r28
    2a98:	df 91       	pop	r29
    2a9a:	ff 91       	pop	r31
    2a9c:	ef 91       	pop	r30
    2a9e:	bf 91       	pop	r27
    2aa0:	af 91       	pop	r26
    2aa2:	9f 91       	pop	r25
    2aa4:	8f 91       	pop	r24
    2aa6:	7f 91       	pop	r23
    2aa8:	6f 91       	pop	r22
    2aaa:	5f 91       	pop	r21
    2aac:	4f 91       	pop	r20
    2aae:	3f 91       	pop	r19
    2ab0:	2f 91       	pop	r18
    2ab2:	0f 90       	pop	r0
    2ab4:	0f be       	out	0x3f, r0	; 63
    2ab6:	0f 90       	pop	r0
    2ab8:	1f 90       	pop	r1
    2aba:	18 95       	reti

00002abc <PWM_vInit>:
/* GitHub        : https://github.com/Piistachyoo             		     */
/*************************************************************************/

#include "PWM_prog.h"

void PWM_vInit(const PWM_cfg_t *PWM){
    2abc:	df 93       	push	r29
    2abe:	cf 93       	push	r28
    2ac0:	00 d0       	rcall	.+0      	; 0x2ac2 <PWM_vInit+0x6>
    2ac2:	00 d0       	rcall	.+0      	; 0x2ac4 <PWM_vInit+0x8>
    2ac4:	cd b7       	in	r28, 0x3d	; 61
    2ac6:	de b7       	in	r29, 0x3e	; 62
    2ac8:	9a 83       	std	Y+2, r25	; 0x02
    2aca:	89 83       	std	Y+1, r24	; 0x01
	if(PWM != NULL){
    2acc:	89 81       	ldd	r24, Y+1	; 0x01
    2ace:	9a 81       	ldd	r25, Y+2	; 0x02
    2ad0:	00 97       	sbiw	r24, 0x00	; 0
    2ad2:	09 f4       	brne	.+2      	; 0x2ad6 <PWM_vInit+0x1a>
    2ad4:	2d c4       	rjmp	.+2138   	; 0x3330 <PWM_vInit+0x874>
		/* Set PWM Mode */
		switch(PWM->PWM_TimerChannel){
    2ad6:	e9 81       	ldd	r30, Y+1	; 0x01
    2ad8:	fa 81       	ldd	r31, Y+2	; 0x02
    2ada:	80 81       	ld	r24, Z
    2adc:	28 2f       	mov	r18, r24
    2ade:	30 e0       	ldi	r19, 0x00	; 0
    2ae0:	3c 83       	std	Y+4, r19	; 0x04
    2ae2:	2b 83       	std	Y+3, r18	; 0x03
    2ae4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ae8:	87 30       	cpi	r24, 0x07	; 7
    2aea:	91 05       	cpc	r25, r1
    2aec:	09 f4       	brne	.+2      	; 0x2af0 <PWM_vInit+0x34>
    2aee:	04 c2       	rjmp	.+1032   	; 0x2ef8 <PWM_vInit+0x43c>
    2af0:	2b 81       	ldd	r18, Y+3	; 0x03
    2af2:	3c 81       	ldd	r19, Y+4	; 0x04
    2af4:	28 30       	cpi	r18, 0x08	; 8
    2af6:	31 05       	cpc	r19, r1
    2af8:	54 f5       	brge	.+84     	; 0x2b4e <PWM_vInit+0x92>
    2afa:	8b 81       	ldd	r24, Y+3	; 0x03
    2afc:	9c 81       	ldd	r25, Y+4	; 0x04
    2afe:	83 30       	cpi	r24, 0x03	; 3
    2b00:	91 05       	cpc	r25, r1
    2b02:	09 f4       	brne	.+2      	; 0x2b06 <PWM_vInit+0x4a>
    2b04:	00 c1       	rjmp	.+512    	; 0x2d06 <PWM_vInit+0x24a>
    2b06:	2b 81       	ldd	r18, Y+3	; 0x03
    2b08:	3c 81       	ldd	r19, Y+4	; 0x04
    2b0a:	24 30       	cpi	r18, 0x04	; 4
    2b0c:	31 05       	cpc	r19, r1
    2b0e:	94 f4       	brge	.+36     	; 0x2b34 <PWM_vInit+0x78>
    2b10:	8b 81       	ldd	r24, Y+3	; 0x03
    2b12:	9c 81       	ldd	r25, Y+4	; 0x04
    2b14:	81 30       	cpi	r24, 0x01	; 1
    2b16:	91 05       	cpc	r25, r1
    2b18:	09 f4       	brne	.+2      	; 0x2b1c <PWM_vInit+0x60>
    2b1a:	81 c0       	rjmp	.+258    	; 0x2c1e <PWM_vInit+0x162>
    2b1c:	2b 81       	ldd	r18, Y+3	; 0x03
    2b1e:	3c 81       	ldd	r19, Y+4	; 0x04
    2b20:	22 30       	cpi	r18, 0x02	; 2
    2b22:	31 05       	cpc	r19, r1
    2b24:	0c f0       	brlt	.+2      	; 0x2b28 <PWM_vInit+0x6c>
    2b26:	b1 c0       	rjmp	.+354    	; 0x2c8a <PWM_vInit+0x1ce>
    2b28:	8b 81       	ldd	r24, Y+3	; 0x03
    2b2a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b2c:	00 97       	sbiw	r24, 0x00	; 0
    2b2e:	09 f4       	brne	.+2      	; 0x2b32 <PWM_vInit+0x76>
    2b30:	3f c0       	rjmp	.+126    	; 0x2bb0 <PWM_vInit+0xf4>
    2b32:	fe c3       	rjmp	.+2044   	; 0x3330 <PWM_vInit+0x874>
    2b34:	2b 81       	ldd	r18, Y+3	; 0x03
    2b36:	3c 81       	ldd	r19, Y+4	; 0x04
    2b38:	25 30       	cpi	r18, 0x05	; 5
    2b3a:	31 05       	cpc	r19, r1
    2b3c:	09 f4       	brne	.+2      	; 0x2b40 <PWM_vInit+0x84>
    2b3e:	5e c1       	rjmp	.+700    	; 0x2dfc <PWM_vInit+0x340>
    2b40:	8b 81       	ldd	r24, Y+3	; 0x03
    2b42:	9c 81       	ldd	r25, Y+4	; 0x04
    2b44:	86 30       	cpi	r24, 0x06	; 6
    2b46:	91 05       	cpc	r25, r1
    2b48:	0c f0       	brlt	.+2      	; 0x2b4c <PWM_vInit+0x90>
    2b4a:	97 c1       	rjmp	.+814    	; 0x2e7a <PWM_vInit+0x3be>
    2b4c:	1a c1       	rjmp	.+564    	; 0x2d82 <PWM_vInit+0x2c6>
    2b4e:	2b 81       	ldd	r18, Y+3	; 0x03
    2b50:	3c 81       	ldd	r19, Y+4	; 0x04
    2b52:	2b 30       	cpi	r18, 0x0B	; 11
    2b54:	31 05       	cpc	r19, r1
    2b56:	09 f4       	brne	.+2      	; 0x2b5a <PWM_vInit+0x9e>
    2b58:	c9 c2       	rjmp	.+1426   	; 0x30ec <PWM_vInit+0x630>
    2b5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b5c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b5e:	8c 30       	cpi	r24, 0x0C	; 12
    2b60:	91 05       	cpc	r25, r1
    2b62:	6c f4       	brge	.+26     	; 0x2b7e <PWM_vInit+0xc2>
    2b64:	2b 81       	ldd	r18, Y+3	; 0x03
    2b66:	3c 81       	ldd	r19, Y+4	; 0x04
    2b68:	29 30       	cpi	r18, 0x09	; 9
    2b6a:	31 05       	cpc	r19, r1
    2b6c:	09 f4       	brne	.+2      	; 0x2b70 <PWM_vInit+0xb4>
    2b6e:	40 c2       	rjmp	.+1152   	; 0x2ff0 <PWM_vInit+0x534>
    2b70:	8b 81       	ldd	r24, Y+3	; 0x03
    2b72:	9c 81       	ldd	r25, Y+4	; 0x04
    2b74:	8a 30       	cpi	r24, 0x0A	; 10
    2b76:	91 05       	cpc	r25, r1
    2b78:	0c f0       	brlt	.+2      	; 0x2b7c <PWM_vInit+0xc0>
    2b7a:	79 c2       	rjmp	.+1266   	; 0x306e <PWM_vInit+0x5b2>
    2b7c:	fb c1       	rjmp	.+1014   	; 0x2f74 <PWM_vInit+0x4b8>
    2b7e:	2b 81       	ldd	r18, Y+3	; 0x03
    2b80:	3c 81       	ldd	r19, Y+4	; 0x04
    2b82:	2d 30       	cpi	r18, 0x0D	; 13
    2b84:	31 05       	cpc	r19, r1
    2b86:	09 f4       	brne	.+2      	; 0x2b8a <PWM_vInit+0xce>
    2b88:	2d c3       	rjmp	.+1626   	; 0x31e4 <PWM_vInit+0x728>
    2b8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b8c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b8e:	8d 30       	cpi	r24, 0x0D	; 13
    2b90:	91 05       	cpc	r25, r1
    2b92:	0c f4       	brge	.+2      	; 0x2b96 <PWM_vInit+0xda>
    2b94:	e9 c2       	rjmp	.+1490   	; 0x3168 <PWM_vInit+0x6ac>
    2b96:	2b 81       	ldd	r18, Y+3	; 0x03
    2b98:	3c 81       	ldd	r19, Y+4	; 0x04
    2b9a:	2e 30       	cpi	r18, 0x0E	; 14
    2b9c:	31 05       	cpc	r19, r1
    2b9e:	09 f4       	brne	.+2      	; 0x2ba2 <PWM_vInit+0xe6>
    2ba0:	5e c3       	rjmp	.+1724   	; 0x325e <PWM_vInit+0x7a2>
    2ba2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ba6:	8f 30       	cpi	r24, 0x0F	; 15
    2ba8:	91 05       	cpc	r25, r1
    2baa:	09 f4       	brne	.+2      	; 0x2bae <PWM_vInit+0xf2>
    2bac:	8e c3       	rjmp	.+1820   	; 0x32ca <PWM_vInit+0x80e>
    2bae:	c0 c3       	rjmp	.+1920   	; 0x3330 <PWM_vInit+0x874>
		case TIMER0_PhaseCorrect:
			TCCR0_REG = (TCCR0_REG&0xB7) | 0x40;
    2bb0:	a3 e5       	ldi	r26, 0x53	; 83
    2bb2:	b0 e0       	ldi	r27, 0x00	; 0
    2bb4:	e3 e5       	ldi	r30, 0x53	; 83
    2bb6:	f0 e0       	ldi	r31, 0x00	; 0
    2bb8:	80 81       	ld	r24, Z
    2bba:	87 7b       	andi	r24, 0xB7	; 183
    2bbc:	80 64       	ori	r24, 0x40	; 64
    2bbe:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    2bc0:	e9 81       	ldd	r30, Y+1	; 0x01
    2bc2:	fa 81       	ldd	r31, Y+2	; 0x02
    2bc4:	82 81       	ldd	r24, Z+2	; 0x02
    2bc6:	81 30       	cpi	r24, 0x01	; 1
    2bc8:	41 f4       	brne	.+16     	; 0x2bda <PWM_vInit+0x11e>
				TIMSK_REG |= 0x03;
    2bca:	a9 e5       	ldi	r26, 0x59	; 89
    2bcc:	b0 e0       	ldi	r27, 0x00	; 0
    2bce:	e9 e5       	ldi	r30, 0x59	; 89
    2bd0:	f0 e0       	ldi	r31, 0x00	; 0
    2bd2:	80 81       	ld	r24, Z
    2bd4:	83 60       	ori	r24, 0x03	; 3
    2bd6:	8c 93       	st	X, r24
    2bd8:	ab c3       	rjmp	.+1878   	; 0x3330 <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    2bda:	e9 81       	ldd	r30, Y+1	; 0x01
    2bdc:	fa 81       	ldd	r31, Y+2	; 0x02
    2bde:	82 81       	ldd	r24, Z+2	; 0x02
    2be0:	88 23       	and	r24, r24
    2be2:	09 f0       	breq	.+2      	; 0x2be6 <PWM_vInit+0x12a>
    2be4:	a5 c3       	rjmp	.+1866   	; 0x3330 <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    2be6:	e9 81       	ldd	r30, Y+1	; 0x01
    2be8:	fa 81       	ldd	r31, Y+2	; 0x02
    2bea:	83 81       	ldd	r24, Z+3	; 0x03
    2bec:	81 30       	cpi	r24, 0x01	; 1
    2bee:	49 f4       	brne	.+18     	; 0x2c02 <PWM_vInit+0x146>
					TCCR0_REG = (TCCR0_REG & 0xCF) | 0x20;
    2bf0:	a3 e5       	ldi	r26, 0x53	; 83
    2bf2:	b0 e0       	ldi	r27, 0x00	; 0
    2bf4:	e3 e5       	ldi	r30, 0x53	; 83
    2bf6:	f0 e0       	ldi	r31, 0x00	; 0
    2bf8:	80 81       	ld	r24, Z
    2bfa:	8f 7c       	andi	r24, 0xCF	; 207
    2bfc:	80 62       	ori	r24, 0x20	; 32
    2bfe:	8c 93       	st	X, r24
    2c00:	97 c3       	rjmp	.+1838   	; 0x3330 <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    2c02:	e9 81       	ldd	r30, Y+1	; 0x01
    2c04:	fa 81       	ldd	r31, Y+2	; 0x02
    2c06:	83 81       	ldd	r24, Z+3	; 0x03
    2c08:	88 23       	and	r24, r24
    2c0a:	09 f0       	breq	.+2      	; 0x2c0e <PWM_vInit+0x152>
    2c0c:	91 c3       	rjmp	.+1826   	; 0x3330 <PWM_vInit+0x874>
					TCCR0_REG = (TCCR0_REG & 0xCF) | 0x30;
    2c0e:	a3 e5       	ldi	r26, 0x53	; 83
    2c10:	b0 e0       	ldi	r27, 0x00	; 0
    2c12:	e3 e5       	ldi	r30, 0x53	; 83
    2c14:	f0 e0       	ldi	r31, 0x00	; 0
    2c16:	80 81       	ld	r24, Z
    2c18:	80 63       	ori	r24, 0x30	; 48
    2c1a:	8c 93       	st	X, r24
    2c1c:	89 c3       	rjmp	.+1810   	; 0x3330 <PWM_vInit+0x874>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER0_FastPWM:
			TCCR0_REG = (TCCR0_REG&0xB7) | 0x48;
    2c1e:	a3 e5       	ldi	r26, 0x53	; 83
    2c20:	b0 e0       	ldi	r27, 0x00	; 0
    2c22:	e3 e5       	ldi	r30, 0x53	; 83
    2c24:	f0 e0       	ldi	r31, 0x00	; 0
    2c26:	80 81       	ld	r24, Z
    2c28:	88 64       	ori	r24, 0x48	; 72
    2c2a:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    2c2c:	e9 81       	ldd	r30, Y+1	; 0x01
    2c2e:	fa 81       	ldd	r31, Y+2	; 0x02
    2c30:	82 81       	ldd	r24, Z+2	; 0x02
    2c32:	81 30       	cpi	r24, 0x01	; 1
    2c34:	41 f4       	brne	.+16     	; 0x2c46 <PWM_vInit+0x18a>
				TIMSK_REG |= 0x03;
    2c36:	a9 e5       	ldi	r26, 0x59	; 89
    2c38:	b0 e0       	ldi	r27, 0x00	; 0
    2c3a:	e9 e5       	ldi	r30, 0x59	; 89
    2c3c:	f0 e0       	ldi	r31, 0x00	; 0
    2c3e:	80 81       	ld	r24, Z
    2c40:	83 60       	ori	r24, 0x03	; 3
    2c42:	8c 93       	st	X, r24
    2c44:	75 c3       	rjmp	.+1770   	; 0x3330 <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    2c46:	e9 81       	ldd	r30, Y+1	; 0x01
    2c48:	fa 81       	ldd	r31, Y+2	; 0x02
    2c4a:	82 81       	ldd	r24, Z+2	; 0x02
    2c4c:	88 23       	and	r24, r24
    2c4e:	09 f0       	breq	.+2      	; 0x2c52 <PWM_vInit+0x196>
    2c50:	6f c3       	rjmp	.+1758   	; 0x3330 <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    2c52:	e9 81       	ldd	r30, Y+1	; 0x01
    2c54:	fa 81       	ldd	r31, Y+2	; 0x02
    2c56:	83 81       	ldd	r24, Z+3	; 0x03
    2c58:	81 30       	cpi	r24, 0x01	; 1
    2c5a:	49 f4       	brne	.+18     	; 0x2c6e <PWM_vInit+0x1b2>
					TCCR0_REG = (TCCR0_REG & 0xCF) | 0x20;
    2c5c:	a3 e5       	ldi	r26, 0x53	; 83
    2c5e:	b0 e0       	ldi	r27, 0x00	; 0
    2c60:	e3 e5       	ldi	r30, 0x53	; 83
    2c62:	f0 e0       	ldi	r31, 0x00	; 0
    2c64:	80 81       	ld	r24, Z
    2c66:	8f 7c       	andi	r24, 0xCF	; 207
    2c68:	80 62       	ori	r24, 0x20	; 32
    2c6a:	8c 93       	st	X, r24
    2c6c:	61 c3       	rjmp	.+1730   	; 0x3330 <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    2c6e:	e9 81       	ldd	r30, Y+1	; 0x01
    2c70:	fa 81       	ldd	r31, Y+2	; 0x02
    2c72:	83 81       	ldd	r24, Z+3	; 0x03
    2c74:	88 23       	and	r24, r24
    2c76:	09 f0       	breq	.+2      	; 0x2c7a <PWM_vInit+0x1be>
    2c78:	5b c3       	rjmp	.+1718   	; 0x3330 <PWM_vInit+0x874>
					TCCR0_REG = (TCCR0_REG & 0xCF) | 0x30;
    2c7a:	a3 e5       	ldi	r26, 0x53	; 83
    2c7c:	b0 e0       	ldi	r27, 0x00	; 0
    2c7e:	e3 e5       	ldi	r30, 0x53	; 83
    2c80:	f0 e0       	ldi	r31, 0x00	; 0
    2c82:	80 81       	ld	r24, Z
    2c84:	80 63       	ori	r24, 0x30	; 48
    2c86:	8c 93       	st	X, r24
    2c88:	53 c3       	rjmp	.+1702   	; 0x3330 <PWM_vInit+0x874>
			/*
			 * WGM10 WGM11 bit 0,1 in TCCR1A
			 * WGM12 WGM13 bit 3,4 in TCCR1B
			 */
		case TIMER1_Phase8:
			TCCR1A_REG = (TCCR1A_REG & 0xFC) | 1;
    2c8a:	af e4       	ldi	r26, 0x4F	; 79
    2c8c:	b0 e0       	ldi	r27, 0x00	; 0
    2c8e:	ef e4       	ldi	r30, 0x4F	; 79
    2c90:	f0 e0       	ldi	r31, 0x00	; 0
    2c92:	80 81       	ld	r24, Z
    2c94:	8c 7f       	andi	r24, 0xFC	; 252
    2c96:	81 60       	ori	r24, 0x01	; 1
    2c98:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7);
    2c9a:	ae e4       	ldi	r26, 0x4E	; 78
    2c9c:	b0 e0       	ldi	r27, 0x00	; 0
    2c9e:	ee e4       	ldi	r30, 0x4E	; 78
    2ca0:	f0 e0       	ldi	r31, 0x00	; 0
    2ca2:	80 81       	ld	r24, Z
    2ca4:	87 7e       	andi	r24, 0xE7	; 231
    2ca6:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    2ca8:	e9 81       	ldd	r30, Y+1	; 0x01
    2caa:	fa 81       	ldd	r31, Y+2	; 0x02
    2cac:	82 81       	ldd	r24, Z+2	; 0x02
    2cae:	81 30       	cpi	r24, 0x01	; 1
    2cb0:	41 f4       	brne	.+16     	; 0x2cc2 <PWM_vInit+0x206>
				TIMSK_REG |= 0x3C;
    2cb2:	a9 e5       	ldi	r26, 0x59	; 89
    2cb4:	b0 e0       	ldi	r27, 0x00	; 0
    2cb6:	e9 e5       	ldi	r30, 0x59	; 89
    2cb8:	f0 e0       	ldi	r31, 0x00	; 0
    2cba:	80 81       	ld	r24, Z
    2cbc:	8c 63       	ori	r24, 0x3C	; 60
    2cbe:	8c 93       	st	X, r24
    2cc0:	37 c3       	rjmp	.+1646   	; 0x3330 <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    2cc2:	e9 81       	ldd	r30, Y+1	; 0x01
    2cc4:	fa 81       	ldd	r31, Y+2	; 0x02
    2cc6:	82 81       	ldd	r24, Z+2	; 0x02
    2cc8:	88 23       	and	r24, r24
    2cca:	09 f0       	breq	.+2      	; 0x2cce <PWM_vInit+0x212>
    2ccc:	31 c3       	rjmp	.+1634   	; 0x3330 <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    2cce:	e9 81       	ldd	r30, Y+1	; 0x01
    2cd0:	fa 81       	ldd	r31, Y+2	; 0x02
    2cd2:	83 81       	ldd	r24, Z+3	; 0x03
    2cd4:	81 30       	cpi	r24, 0x01	; 1
    2cd6:	49 f4       	brne	.+18     	; 0x2cea <PWM_vInit+0x22e>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
    2cd8:	af e4       	ldi	r26, 0x4F	; 79
    2cda:	b0 e0       	ldi	r27, 0x00	; 0
    2cdc:	ef e4       	ldi	r30, 0x4F	; 79
    2cde:	f0 e0       	ldi	r31, 0x00	; 0
    2ce0:	80 81       	ld	r24, Z
    2ce2:	8f 7c       	andi	r24, 0xCF	; 207
    2ce4:	80 62       	ori	r24, 0x20	; 32
    2ce6:	8c 93       	st	X, r24
    2ce8:	23 c3       	rjmp	.+1606   	; 0x3330 <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    2cea:	e9 81       	ldd	r30, Y+1	; 0x01
    2cec:	fa 81       	ldd	r31, Y+2	; 0x02
    2cee:	83 81       	ldd	r24, Z+3	; 0x03
    2cf0:	88 23       	and	r24, r24
    2cf2:	09 f0       	breq	.+2      	; 0x2cf6 <PWM_vInit+0x23a>
    2cf4:	1d c3       	rjmp	.+1594   	; 0x3330 <PWM_vInit+0x874>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
    2cf6:	af e4       	ldi	r26, 0x4F	; 79
    2cf8:	b0 e0       	ldi	r27, 0x00	; 0
    2cfa:	ef e4       	ldi	r30, 0x4F	; 79
    2cfc:	f0 e0       	ldi	r31, 0x00	; 0
    2cfe:	80 81       	ld	r24, Z
    2d00:	80 63       	ori	r24, 0x30	; 48
    2d02:	8c 93       	st	X, r24
    2d04:	15 c3       	rjmp	.+1578   	; 0x3330 <PWM_vInit+0x874>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER1_Phase9:
			TCCR1A_REG = (TCCR1A_REG & 0xFC) | 2;
    2d06:	af e4       	ldi	r26, 0x4F	; 79
    2d08:	b0 e0       	ldi	r27, 0x00	; 0
    2d0a:	ef e4       	ldi	r30, 0x4F	; 79
    2d0c:	f0 e0       	ldi	r31, 0x00	; 0
    2d0e:	80 81       	ld	r24, Z
    2d10:	8c 7f       	andi	r24, 0xFC	; 252
    2d12:	82 60       	ori	r24, 0x02	; 2
    2d14:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7);
    2d16:	ae e4       	ldi	r26, 0x4E	; 78
    2d18:	b0 e0       	ldi	r27, 0x00	; 0
    2d1a:	ee e4       	ldi	r30, 0x4E	; 78
    2d1c:	f0 e0       	ldi	r31, 0x00	; 0
    2d1e:	80 81       	ld	r24, Z
    2d20:	87 7e       	andi	r24, 0xE7	; 231
    2d22:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    2d24:	e9 81       	ldd	r30, Y+1	; 0x01
    2d26:	fa 81       	ldd	r31, Y+2	; 0x02
    2d28:	82 81       	ldd	r24, Z+2	; 0x02
    2d2a:	81 30       	cpi	r24, 0x01	; 1
    2d2c:	41 f4       	brne	.+16     	; 0x2d3e <PWM_vInit+0x282>
				TIMSK_REG |= 0x3C;
    2d2e:	a9 e5       	ldi	r26, 0x59	; 89
    2d30:	b0 e0       	ldi	r27, 0x00	; 0
    2d32:	e9 e5       	ldi	r30, 0x59	; 89
    2d34:	f0 e0       	ldi	r31, 0x00	; 0
    2d36:	80 81       	ld	r24, Z
    2d38:	8c 63       	ori	r24, 0x3C	; 60
    2d3a:	8c 93       	st	X, r24
    2d3c:	f9 c2       	rjmp	.+1522   	; 0x3330 <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    2d3e:	e9 81       	ldd	r30, Y+1	; 0x01
    2d40:	fa 81       	ldd	r31, Y+2	; 0x02
    2d42:	82 81       	ldd	r24, Z+2	; 0x02
    2d44:	88 23       	and	r24, r24
    2d46:	09 f0       	breq	.+2      	; 0x2d4a <PWM_vInit+0x28e>
    2d48:	f3 c2       	rjmp	.+1510   	; 0x3330 <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    2d4a:	e9 81       	ldd	r30, Y+1	; 0x01
    2d4c:	fa 81       	ldd	r31, Y+2	; 0x02
    2d4e:	83 81       	ldd	r24, Z+3	; 0x03
    2d50:	81 30       	cpi	r24, 0x01	; 1
    2d52:	49 f4       	brne	.+18     	; 0x2d66 <PWM_vInit+0x2aa>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
    2d54:	af e4       	ldi	r26, 0x4F	; 79
    2d56:	b0 e0       	ldi	r27, 0x00	; 0
    2d58:	ef e4       	ldi	r30, 0x4F	; 79
    2d5a:	f0 e0       	ldi	r31, 0x00	; 0
    2d5c:	80 81       	ld	r24, Z
    2d5e:	8f 7c       	andi	r24, 0xCF	; 207
    2d60:	80 62       	ori	r24, 0x20	; 32
    2d62:	8c 93       	st	X, r24
    2d64:	e5 c2       	rjmp	.+1482   	; 0x3330 <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    2d66:	e9 81       	ldd	r30, Y+1	; 0x01
    2d68:	fa 81       	ldd	r31, Y+2	; 0x02
    2d6a:	83 81       	ldd	r24, Z+3	; 0x03
    2d6c:	88 23       	and	r24, r24
    2d6e:	09 f0       	breq	.+2      	; 0x2d72 <PWM_vInit+0x2b6>
    2d70:	df c2       	rjmp	.+1470   	; 0x3330 <PWM_vInit+0x874>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
    2d72:	af e4       	ldi	r26, 0x4F	; 79
    2d74:	b0 e0       	ldi	r27, 0x00	; 0
    2d76:	ef e4       	ldi	r30, 0x4F	; 79
    2d78:	f0 e0       	ldi	r31, 0x00	; 0
    2d7a:	80 81       	ld	r24, Z
    2d7c:	80 63       	ori	r24, 0x30	; 48
    2d7e:	8c 93       	st	X, r24
    2d80:	d7 c2       	rjmp	.+1454   	; 0x3330 <PWM_vInit+0x874>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER1_Phase10:
			TCCR1A_REG = (TCCR1A_REG & 0xFC) | 3;
    2d82:	af e4       	ldi	r26, 0x4F	; 79
    2d84:	b0 e0       	ldi	r27, 0x00	; 0
    2d86:	ef e4       	ldi	r30, 0x4F	; 79
    2d88:	f0 e0       	ldi	r31, 0x00	; 0
    2d8a:	80 81       	ld	r24, Z
    2d8c:	83 60       	ori	r24, 0x03	; 3
    2d8e:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7);
    2d90:	ae e4       	ldi	r26, 0x4E	; 78
    2d92:	b0 e0       	ldi	r27, 0x00	; 0
    2d94:	ee e4       	ldi	r30, 0x4E	; 78
    2d96:	f0 e0       	ldi	r31, 0x00	; 0
    2d98:	80 81       	ld	r24, Z
    2d9a:	87 7e       	andi	r24, 0xE7	; 231
    2d9c:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    2d9e:	e9 81       	ldd	r30, Y+1	; 0x01
    2da0:	fa 81       	ldd	r31, Y+2	; 0x02
    2da2:	82 81       	ldd	r24, Z+2	; 0x02
    2da4:	81 30       	cpi	r24, 0x01	; 1
    2da6:	41 f4       	brne	.+16     	; 0x2db8 <PWM_vInit+0x2fc>
				TIMSK_REG |= 0x3C;
    2da8:	a9 e5       	ldi	r26, 0x59	; 89
    2daa:	b0 e0       	ldi	r27, 0x00	; 0
    2dac:	e9 e5       	ldi	r30, 0x59	; 89
    2dae:	f0 e0       	ldi	r31, 0x00	; 0
    2db0:	80 81       	ld	r24, Z
    2db2:	8c 63       	ori	r24, 0x3C	; 60
    2db4:	8c 93       	st	X, r24
    2db6:	bc c2       	rjmp	.+1400   	; 0x3330 <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    2db8:	e9 81       	ldd	r30, Y+1	; 0x01
    2dba:	fa 81       	ldd	r31, Y+2	; 0x02
    2dbc:	82 81       	ldd	r24, Z+2	; 0x02
    2dbe:	88 23       	and	r24, r24
    2dc0:	09 f0       	breq	.+2      	; 0x2dc4 <PWM_vInit+0x308>
    2dc2:	b6 c2       	rjmp	.+1388   	; 0x3330 <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    2dc4:	e9 81       	ldd	r30, Y+1	; 0x01
    2dc6:	fa 81       	ldd	r31, Y+2	; 0x02
    2dc8:	83 81       	ldd	r24, Z+3	; 0x03
    2dca:	81 30       	cpi	r24, 0x01	; 1
    2dcc:	49 f4       	brne	.+18     	; 0x2de0 <PWM_vInit+0x324>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
    2dce:	af e4       	ldi	r26, 0x4F	; 79
    2dd0:	b0 e0       	ldi	r27, 0x00	; 0
    2dd2:	ef e4       	ldi	r30, 0x4F	; 79
    2dd4:	f0 e0       	ldi	r31, 0x00	; 0
    2dd6:	80 81       	ld	r24, Z
    2dd8:	8f 7c       	andi	r24, 0xCF	; 207
    2dda:	80 62       	ori	r24, 0x20	; 32
    2ddc:	8c 93       	st	X, r24
    2dde:	a8 c2       	rjmp	.+1360   	; 0x3330 <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    2de0:	e9 81       	ldd	r30, Y+1	; 0x01
    2de2:	fa 81       	ldd	r31, Y+2	; 0x02
    2de4:	83 81       	ldd	r24, Z+3	; 0x03
    2de6:	88 23       	and	r24, r24
    2de8:	09 f0       	breq	.+2      	; 0x2dec <PWM_vInit+0x330>
    2dea:	a2 c2       	rjmp	.+1348   	; 0x3330 <PWM_vInit+0x874>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
    2dec:	af e4       	ldi	r26, 0x4F	; 79
    2dee:	b0 e0       	ldi	r27, 0x00	; 0
    2df0:	ef e4       	ldi	r30, 0x4F	; 79
    2df2:	f0 e0       	ldi	r31, 0x00	; 0
    2df4:	80 81       	ld	r24, Z
    2df6:	80 63       	ori	r24, 0x30	; 48
    2df8:	8c 93       	st	X, r24
    2dfa:	9a c2       	rjmp	.+1332   	; 0x3330 <PWM_vInit+0x874>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER1_Fast8:
			TCCR1A_REG = (TCCR1A_REG & 0xFC) | 1;
    2dfc:	af e4       	ldi	r26, 0x4F	; 79
    2dfe:	b0 e0       	ldi	r27, 0x00	; 0
    2e00:	ef e4       	ldi	r30, 0x4F	; 79
    2e02:	f0 e0       	ldi	r31, 0x00	; 0
    2e04:	80 81       	ld	r24, Z
    2e06:	8c 7f       	andi	r24, 0xFC	; 252
    2e08:	81 60       	ori	r24, 0x01	; 1
    2e0a:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7) | 0x8;
    2e0c:	ae e4       	ldi	r26, 0x4E	; 78
    2e0e:	b0 e0       	ldi	r27, 0x00	; 0
    2e10:	ee e4       	ldi	r30, 0x4E	; 78
    2e12:	f0 e0       	ldi	r31, 0x00	; 0
    2e14:	80 81       	ld	r24, Z
    2e16:	87 7e       	andi	r24, 0xE7	; 231
    2e18:	88 60       	ori	r24, 0x08	; 8
    2e1a:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    2e1c:	e9 81       	ldd	r30, Y+1	; 0x01
    2e1e:	fa 81       	ldd	r31, Y+2	; 0x02
    2e20:	82 81       	ldd	r24, Z+2	; 0x02
    2e22:	81 30       	cpi	r24, 0x01	; 1
    2e24:	41 f4       	brne	.+16     	; 0x2e36 <PWM_vInit+0x37a>
				TIMSK_REG |= 0x3C;
    2e26:	a9 e5       	ldi	r26, 0x59	; 89
    2e28:	b0 e0       	ldi	r27, 0x00	; 0
    2e2a:	e9 e5       	ldi	r30, 0x59	; 89
    2e2c:	f0 e0       	ldi	r31, 0x00	; 0
    2e2e:	80 81       	ld	r24, Z
    2e30:	8c 63       	ori	r24, 0x3C	; 60
    2e32:	8c 93       	st	X, r24
    2e34:	7d c2       	rjmp	.+1274   	; 0x3330 <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    2e36:	e9 81       	ldd	r30, Y+1	; 0x01
    2e38:	fa 81       	ldd	r31, Y+2	; 0x02
    2e3a:	82 81       	ldd	r24, Z+2	; 0x02
    2e3c:	88 23       	and	r24, r24
    2e3e:	09 f0       	breq	.+2      	; 0x2e42 <PWM_vInit+0x386>
    2e40:	77 c2       	rjmp	.+1262   	; 0x3330 <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    2e42:	e9 81       	ldd	r30, Y+1	; 0x01
    2e44:	fa 81       	ldd	r31, Y+2	; 0x02
    2e46:	83 81       	ldd	r24, Z+3	; 0x03
    2e48:	81 30       	cpi	r24, 0x01	; 1
    2e4a:	49 f4       	brne	.+18     	; 0x2e5e <PWM_vInit+0x3a2>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
    2e4c:	af e4       	ldi	r26, 0x4F	; 79
    2e4e:	b0 e0       	ldi	r27, 0x00	; 0
    2e50:	ef e4       	ldi	r30, 0x4F	; 79
    2e52:	f0 e0       	ldi	r31, 0x00	; 0
    2e54:	80 81       	ld	r24, Z
    2e56:	8f 7c       	andi	r24, 0xCF	; 207
    2e58:	80 62       	ori	r24, 0x20	; 32
    2e5a:	8c 93       	st	X, r24
    2e5c:	69 c2       	rjmp	.+1234   	; 0x3330 <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    2e5e:	e9 81       	ldd	r30, Y+1	; 0x01
    2e60:	fa 81       	ldd	r31, Y+2	; 0x02
    2e62:	83 81       	ldd	r24, Z+3	; 0x03
    2e64:	88 23       	and	r24, r24
    2e66:	09 f0       	breq	.+2      	; 0x2e6a <PWM_vInit+0x3ae>
    2e68:	63 c2       	rjmp	.+1222   	; 0x3330 <PWM_vInit+0x874>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
    2e6a:	af e4       	ldi	r26, 0x4F	; 79
    2e6c:	b0 e0       	ldi	r27, 0x00	; 0
    2e6e:	ef e4       	ldi	r30, 0x4F	; 79
    2e70:	f0 e0       	ldi	r31, 0x00	; 0
    2e72:	80 81       	ld	r24, Z
    2e74:	80 63       	ori	r24, 0x30	; 48
    2e76:	8c 93       	st	X, r24
    2e78:	5b c2       	rjmp	.+1206   	; 0x3330 <PWM_vInit+0x874>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER1_Fast9:
			TCCR1A_REG = (TCCR1A_REG & 0xFC) | 2;
    2e7a:	af e4       	ldi	r26, 0x4F	; 79
    2e7c:	b0 e0       	ldi	r27, 0x00	; 0
    2e7e:	ef e4       	ldi	r30, 0x4F	; 79
    2e80:	f0 e0       	ldi	r31, 0x00	; 0
    2e82:	80 81       	ld	r24, Z
    2e84:	8c 7f       	andi	r24, 0xFC	; 252
    2e86:	82 60       	ori	r24, 0x02	; 2
    2e88:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7) | 0x8;
    2e8a:	ae e4       	ldi	r26, 0x4E	; 78
    2e8c:	b0 e0       	ldi	r27, 0x00	; 0
    2e8e:	ee e4       	ldi	r30, 0x4E	; 78
    2e90:	f0 e0       	ldi	r31, 0x00	; 0
    2e92:	80 81       	ld	r24, Z
    2e94:	87 7e       	andi	r24, 0xE7	; 231
    2e96:	88 60       	ori	r24, 0x08	; 8
    2e98:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    2e9a:	e9 81       	ldd	r30, Y+1	; 0x01
    2e9c:	fa 81       	ldd	r31, Y+2	; 0x02
    2e9e:	82 81       	ldd	r24, Z+2	; 0x02
    2ea0:	81 30       	cpi	r24, 0x01	; 1
    2ea2:	41 f4       	brne	.+16     	; 0x2eb4 <PWM_vInit+0x3f8>
				TIMSK_REG |= 0x3C;
    2ea4:	a9 e5       	ldi	r26, 0x59	; 89
    2ea6:	b0 e0       	ldi	r27, 0x00	; 0
    2ea8:	e9 e5       	ldi	r30, 0x59	; 89
    2eaa:	f0 e0       	ldi	r31, 0x00	; 0
    2eac:	80 81       	ld	r24, Z
    2eae:	8c 63       	ori	r24, 0x3C	; 60
    2eb0:	8c 93       	st	X, r24
    2eb2:	3e c2       	rjmp	.+1148   	; 0x3330 <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    2eb4:	e9 81       	ldd	r30, Y+1	; 0x01
    2eb6:	fa 81       	ldd	r31, Y+2	; 0x02
    2eb8:	82 81       	ldd	r24, Z+2	; 0x02
    2eba:	88 23       	and	r24, r24
    2ebc:	09 f0       	breq	.+2      	; 0x2ec0 <PWM_vInit+0x404>
    2ebe:	38 c2       	rjmp	.+1136   	; 0x3330 <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    2ec0:	e9 81       	ldd	r30, Y+1	; 0x01
    2ec2:	fa 81       	ldd	r31, Y+2	; 0x02
    2ec4:	83 81       	ldd	r24, Z+3	; 0x03
    2ec6:	81 30       	cpi	r24, 0x01	; 1
    2ec8:	49 f4       	brne	.+18     	; 0x2edc <PWM_vInit+0x420>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
    2eca:	af e4       	ldi	r26, 0x4F	; 79
    2ecc:	b0 e0       	ldi	r27, 0x00	; 0
    2ece:	ef e4       	ldi	r30, 0x4F	; 79
    2ed0:	f0 e0       	ldi	r31, 0x00	; 0
    2ed2:	80 81       	ld	r24, Z
    2ed4:	8f 7c       	andi	r24, 0xCF	; 207
    2ed6:	80 62       	ori	r24, 0x20	; 32
    2ed8:	8c 93       	st	X, r24
    2eda:	2a c2       	rjmp	.+1108   	; 0x3330 <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    2edc:	e9 81       	ldd	r30, Y+1	; 0x01
    2ede:	fa 81       	ldd	r31, Y+2	; 0x02
    2ee0:	83 81       	ldd	r24, Z+3	; 0x03
    2ee2:	88 23       	and	r24, r24
    2ee4:	09 f0       	breq	.+2      	; 0x2ee8 <PWM_vInit+0x42c>
    2ee6:	24 c2       	rjmp	.+1096   	; 0x3330 <PWM_vInit+0x874>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
    2ee8:	af e4       	ldi	r26, 0x4F	; 79
    2eea:	b0 e0       	ldi	r27, 0x00	; 0
    2eec:	ef e4       	ldi	r30, 0x4F	; 79
    2eee:	f0 e0       	ldi	r31, 0x00	; 0
    2ef0:	80 81       	ld	r24, Z
    2ef2:	80 63       	ori	r24, 0x30	; 48
    2ef4:	8c 93       	st	X, r24
    2ef6:	1c c2       	rjmp	.+1080   	; 0x3330 <PWM_vInit+0x874>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER1_Fast10:
			TCCR1A_REG = (TCCR1A_REG & 0xFC) | 3;
    2ef8:	af e4       	ldi	r26, 0x4F	; 79
    2efa:	b0 e0       	ldi	r27, 0x00	; 0
    2efc:	ef e4       	ldi	r30, 0x4F	; 79
    2efe:	f0 e0       	ldi	r31, 0x00	; 0
    2f00:	80 81       	ld	r24, Z
    2f02:	83 60       	ori	r24, 0x03	; 3
    2f04:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7) | 0x8;
    2f06:	ae e4       	ldi	r26, 0x4E	; 78
    2f08:	b0 e0       	ldi	r27, 0x00	; 0
    2f0a:	ee e4       	ldi	r30, 0x4E	; 78
    2f0c:	f0 e0       	ldi	r31, 0x00	; 0
    2f0e:	80 81       	ld	r24, Z
    2f10:	87 7e       	andi	r24, 0xE7	; 231
    2f12:	88 60       	ori	r24, 0x08	; 8
    2f14:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    2f16:	e9 81       	ldd	r30, Y+1	; 0x01
    2f18:	fa 81       	ldd	r31, Y+2	; 0x02
    2f1a:	82 81       	ldd	r24, Z+2	; 0x02
    2f1c:	81 30       	cpi	r24, 0x01	; 1
    2f1e:	41 f4       	brne	.+16     	; 0x2f30 <PWM_vInit+0x474>
				TIMSK_REG |= 0x3C;
    2f20:	a9 e5       	ldi	r26, 0x59	; 89
    2f22:	b0 e0       	ldi	r27, 0x00	; 0
    2f24:	e9 e5       	ldi	r30, 0x59	; 89
    2f26:	f0 e0       	ldi	r31, 0x00	; 0
    2f28:	80 81       	ld	r24, Z
    2f2a:	8c 63       	ori	r24, 0x3C	; 60
    2f2c:	8c 93       	st	X, r24
    2f2e:	00 c2       	rjmp	.+1024   	; 0x3330 <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    2f30:	e9 81       	ldd	r30, Y+1	; 0x01
    2f32:	fa 81       	ldd	r31, Y+2	; 0x02
    2f34:	82 81       	ldd	r24, Z+2	; 0x02
    2f36:	88 23       	and	r24, r24
    2f38:	09 f0       	breq	.+2      	; 0x2f3c <PWM_vInit+0x480>
    2f3a:	fa c1       	rjmp	.+1012   	; 0x3330 <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    2f3c:	e9 81       	ldd	r30, Y+1	; 0x01
    2f3e:	fa 81       	ldd	r31, Y+2	; 0x02
    2f40:	83 81       	ldd	r24, Z+3	; 0x03
    2f42:	81 30       	cpi	r24, 0x01	; 1
    2f44:	49 f4       	brne	.+18     	; 0x2f58 <PWM_vInit+0x49c>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
    2f46:	af e4       	ldi	r26, 0x4F	; 79
    2f48:	b0 e0       	ldi	r27, 0x00	; 0
    2f4a:	ef e4       	ldi	r30, 0x4F	; 79
    2f4c:	f0 e0       	ldi	r31, 0x00	; 0
    2f4e:	80 81       	ld	r24, Z
    2f50:	8f 7c       	andi	r24, 0xCF	; 207
    2f52:	80 62       	ori	r24, 0x20	; 32
    2f54:	8c 93       	st	X, r24
    2f56:	ec c1       	rjmp	.+984    	; 0x3330 <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    2f58:	e9 81       	ldd	r30, Y+1	; 0x01
    2f5a:	fa 81       	ldd	r31, Y+2	; 0x02
    2f5c:	83 81       	ldd	r24, Z+3	; 0x03
    2f5e:	88 23       	and	r24, r24
    2f60:	09 f0       	breq	.+2      	; 0x2f64 <PWM_vInit+0x4a8>
    2f62:	e6 c1       	rjmp	.+972    	; 0x3330 <PWM_vInit+0x874>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
    2f64:	af e4       	ldi	r26, 0x4F	; 79
    2f66:	b0 e0       	ldi	r27, 0x00	; 0
    2f68:	ef e4       	ldi	r30, 0x4F	; 79
    2f6a:	f0 e0       	ldi	r31, 0x00	; 0
    2f6c:	80 81       	ld	r24, Z
    2f6e:	80 63       	ori	r24, 0x30	; 48
    2f70:	8c 93       	st	X, r24
    2f72:	de c1       	rjmp	.+956    	; 0x3330 <PWM_vInit+0x874>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER1_PhaseFreqICR:
			TCCR1A_REG = (TCCR1A_REG & 0xFC);
    2f74:	af e4       	ldi	r26, 0x4F	; 79
    2f76:	b0 e0       	ldi	r27, 0x00	; 0
    2f78:	ef e4       	ldi	r30, 0x4F	; 79
    2f7a:	f0 e0       	ldi	r31, 0x00	; 0
    2f7c:	80 81       	ld	r24, Z
    2f7e:	8c 7f       	andi	r24, 0xFC	; 252
    2f80:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7) | 0x10;
    2f82:	ae e4       	ldi	r26, 0x4E	; 78
    2f84:	b0 e0       	ldi	r27, 0x00	; 0
    2f86:	ee e4       	ldi	r30, 0x4E	; 78
    2f88:	f0 e0       	ldi	r31, 0x00	; 0
    2f8a:	80 81       	ld	r24, Z
    2f8c:	87 7e       	andi	r24, 0xE7	; 231
    2f8e:	80 61       	ori	r24, 0x10	; 16
    2f90:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    2f92:	e9 81       	ldd	r30, Y+1	; 0x01
    2f94:	fa 81       	ldd	r31, Y+2	; 0x02
    2f96:	82 81       	ldd	r24, Z+2	; 0x02
    2f98:	81 30       	cpi	r24, 0x01	; 1
    2f9a:	41 f4       	brne	.+16     	; 0x2fac <PWM_vInit+0x4f0>
				TIMSK_REG |= 0x3C;
    2f9c:	a9 e5       	ldi	r26, 0x59	; 89
    2f9e:	b0 e0       	ldi	r27, 0x00	; 0
    2fa0:	e9 e5       	ldi	r30, 0x59	; 89
    2fa2:	f0 e0       	ldi	r31, 0x00	; 0
    2fa4:	80 81       	ld	r24, Z
    2fa6:	8c 63       	ori	r24, 0x3C	; 60
    2fa8:	8c 93       	st	X, r24
    2faa:	c2 c1       	rjmp	.+900    	; 0x3330 <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    2fac:	e9 81       	ldd	r30, Y+1	; 0x01
    2fae:	fa 81       	ldd	r31, Y+2	; 0x02
    2fb0:	82 81       	ldd	r24, Z+2	; 0x02
    2fb2:	88 23       	and	r24, r24
    2fb4:	09 f0       	breq	.+2      	; 0x2fb8 <PWM_vInit+0x4fc>
    2fb6:	bc c1       	rjmp	.+888    	; 0x3330 <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    2fb8:	e9 81       	ldd	r30, Y+1	; 0x01
    2fba:	fa 81       	ldd	r31, Y+2	; 0x02
    2fbc:	83 81       	ldd	r24, Z+3	; 0x03
    2fbe:	81 30       	cpi	r24, 0x01	; 1
    2fc0:	49 f4       	brne	.+18     	; 0x2fd4 <PWM_vInit+0x518>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
    2fc2:	af e4       	ldi	r26, 0x4F	; 79
    2fc4:	b0 e0       	ldi	r27, 0x00	; 0
    2fc6:	ef e4       	ldi	r30, 0x4F	; 79
    2fc8:	f0 e0       	ldi	r31, 0x00	; 0
    2fca:	80 81       	ld	r24, Z
    2fcc:	8f 7c       	andi	r24, 0xCF	; 207
    2fce:	80 62       	ori	r24, 0x20	; 32
    2fd0:	8c 93       	st	X, r24
    2fd2:	ae c1       	rjmp	.+860    	; 0x3330 <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    2fd4:	e9 81       	ldd	r30, Y+1	; 0x01
    2fd6:	fa 81       	ldd	r31, Y+2	; 0x02
    2fd8:	83 81       	ldd	r24, Z+3	; 0x03
    2fda:	88 23       	and	r24, r24
    2fdc:	09 f0       	breq	.+2      	; 0x2fe0 <PWM_vInit+0x524>
    2fde:	a8 c1       	rjmp	.+848    	; 0x3330 <PWM_vInit+0x874>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
    2fe0:	af e4       	ldi	r26, 0x4F	; 79
    2fe2:	b0 e0       	ldi	r27, 0x00	; 0
    2fe4:	ef e4       	ldi	r30, 0x4F	; 79
    2fe6:	f0 e0       	ldi	r31, 0x00	; 0
    2fe8:	80 81       	ld	r24, Z
    2fea:	80 63       	ori	r24, 0x30	; 48
    2fec:	8c 93       	st	X, r24
    2fee:	a0 c1       	rjmp	.+832    	; 0x3330 <PWM_vInit+0x874>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER1_PhaseFreqOCR:
			TCCR1A_REG = (TCCR1A_REG & 0xFC) | 1;
    2ff0:	af e4       	ldi	r26, 0x4F	; 79
    2ff2:	b0 e0       	ldi	r27, 0x00	; 0
    2ff4:	ef e4       	ldi	r30, 0x4F	; 79
    2ff6:	f0 e0       	ldi	r31, 0x00	; 0
    2ff8:	80 81       	ld	r24, Z
    2ffa:	8c 7f       	andi	r24, 0xFC	; 252
    2ffc:	81 60       	ori	r24, 0x01	; 1
    2ffe:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7) | 0x10;
    3000:	ae e4       	ldi	r26, 0x4E	; 78
    3002:	b0 e0       	ldi	r27, 0x00	; 0
    3004:	ee e4       	ldi	r30, 0x4E	; 78
    3006:	f0 e0       	ldi	r31, 0x00	; 0
    3008:	80 81       	ld	r24, Z
    300a:	87 7e       	andi	r24, 0xE7	; 231
    300c:	80 61       	ori	r24, 0x10	; 16
    300e:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    3010:	e9 81       	ldd	r30, Y+1	; 0x01
    3012:	fa 81       	ldd	r31, Y+2	; 0x02
    3014:	82 81       	ldd	r24, Z+2	; 0x02
    3016:	81 30       	cpi	r24, 0x01	; 1
    3018:	41 f4       	brne	.+16     	; 0x302a <PWM_vInit+0x56e>
				TIMSK_REG |= 0x3C;
    301a:	a9 e5       	ldi	r26, 0x59	; 89
    301c:	b0 e0       	ldi	r27, 0x00	; 0
    301e:	e9 e5       	ldi	r30, 0x59	; 89
    3020:	f0 e0       	ldi	r31, 0x00	; 0
    3022:	80 81       	ld	r24, Z
    3024:	8c 63       	ori	r24, 0x3C	; 60
    3026:	8c 93       	st	X, r24
    3028:	83 c1       	rjmp	.+774    	; 0x3330 <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    302a:	e9 81       	ldd	r30, Y+1	; 0x01
    302c:	fa 81       	ldd	r31, Y+2	; 0x02
    302e:	82 81       	ldd	r24, Z+2	; 0x02
    3030:	88 23       	and	r24, r24
    3032:	09 f0       	breq	.+2      	; 0x3036 <PWM_vInit+0x57a>
    3034:	7d c1       	rjmp	.+762    	; 0x3330 <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    3036:	e9 81       	ldd	r30, Y+1	; 0x01
    3038:	fa 81       	ldd	r31, Y+2	; 0x02
    303a:	83 81       	ldd	r24, Z+3	; 0x03
    303c:	81 30       	cpi	r24, 0x01	; 1
    303e:	49 f4       	brne	.+18     	; 0x3052 <PWM_vInit+0x596>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
    3040:	af e4       	ldi	r26, 0x4F	; 79
    3042:	b0 e0       	ldi	r27, 0x00	; 0
    3044:	ef e4       	ldi	r30, 0x4F	; 79
    3046:	f0 e0       	ldi	r31, 0x00	; 0
    3048:	80 81       	ld	r24, Z
    304a:	8f 7c       	andi	r24, 0xCF	; 207
    304c:	80 62       	ori	r24, 0x20	; 32
    304e:	8c 93       	st	X, r24
    3050:	6f c1       	rjmp	.+734    	; 0x3330 <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    3052:	e9 81       	ldd	r30, Y+1	; 0x01
    3054:	fa 81       	ldd	r31, Y+2	; 0x02
    3056:	83 81       	ldd	r24, Z+3	; 0x03
    3058:	88 23       	and	r24, r24
    305a:	09 f0       	breq	.+2      	; 0x305e <PWM_vInit+0x5a2>
    305c:	69 c1       	rjmp	.+722    	; 0x3330 <PWM_vInit+0x874>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
    305e:	af e4       	ldi	r26, 0x4F	; 79
    3060:	b0 e0       	ldi	r27, 0x00	; 0
    3062:	ef e4       	ldi	r30, 0x4F	; 79
    3064:	f0 e0       	ldi	r31, 0x00	; 0
    3066:	80 81       	ld	r24, Z
    3068:	80 63       	ori	r24, 0x30	; 48
    306a:	8c 93       	st	X, r24
    306c:	61 c1       	rjmp	.+706    	; 0x3330 <PWM_vInit+0x874>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER1_PhaseICR:
			TCCR1A_REG = (TCCR1A_REG & 0xFC) | 2;
    306e:	af e4       	ldi	r26, 0x4F	; 79
    3070:	b0 e0       	ldi	r27, 0x00	; 0
    3072:	ef e4       	ldi	r30, 0x4F	; 79
    3074:	f0 e0       	ldi	r31, 0x00	; 0
    3076:	80 81       	ld	r24, Z
    3078:	8c 7f       	andi	r24, 0xFC	; 252
    307a:	82 60       	ori	r24, 0x02	; 2
    307c:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7) | 0x10;
    307e:	ae e4       	ldi	r26, 0x4E	; 78
    3080:	b0 e0       	ldi	r27, 0x00	; 0
    3082:	ee e4       	ldi	r30, 0x4E	; 78
    3084:	f0 e0       	ldi	r31, 0x00	; 0
    3086:	80 81       	ld	r24, Z
    3088:	87 7e       	andi	r24, 0xE7	; 231
    308a:	80 61       	ori	r24, 0x10	; 16
    308c:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    308e:	e9 81       	ldd	r30, Y+1	; 0x01
    3090:	fa 81       	ldd	r31, Y+2	; 0x02
    3092:	82 81       	ldd	r24, Z+2	; 0x02
    3094:	81 30       	cpi	r24, 0x01	; 1
    3096:	41 f4       	brne	.+16     	; 0x30a8 <PWM_vInit+0x5ec>
				TIMSK_REG |= 0x3C;
    3098:	a9 e5       	ldi	r26, 0x59	; 89
    309a:	b0 e0       	ldi	r27, 0x00	; 0
    309c:	e9 e5       	ldi	r30, 0x59	; 89
    309e:	f0 e0       	ldi	r31, 0x00	; 0
    30a0:	80 81       	ld	r24, Z
    30a2:	8c 63       	ori	r24, 0x3C	; 60
    30a4:	8c 93       	st	X, r24
    30a6:	44 c1       	rjmp	.+648    	; 0x3330 <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    30a8:	e9 81       	ldd	r30, Y+1	; 0x01
    30aa:	fa 81       	ldd	r31, Y+2	; 0x02
    30ac:	82 81       	ldd	r24, Z+2	; 0x02
    30ae:	88 23       	and	r24, r24
    30b0:	09 f0       	breq	.+2      	; 0x30b4 <PWM_vInit+0x5f8>
    30b2:	3e c1       	rjmp	.+636    	; 0x3330 <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    30b4:	e9 81       	ldd	r30, Y+1	; 0x01
    30b6:	fa 81       	ldd	r31, Y+2	; 0x02
    30b8:	83 81       	ldd	r24, Z+3	; 0x03
    30ba:	81 30       	cpi	r24, 0x01	; 1
    30bc:	49 f4       	brne	.+18     	; 0x30d0 <PWM_vInit+0x614>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
    30be:	af e4       	ldi	r26, 0x4F	; 79
    30c0:	b0 e0       	ldi	r27, 0x00	; 0
    30c2:	ef e4       	ldi	r30, 0x4F	; 79
    30c4:	f0 e0       	ldi	r31, 0x00	; 0
    30c6:	80 81       	ld	r24, Z
    30c8:	8f 7c       	andi	r24, 0xCF	; 207
    30ca:	80 62       	ori	r24, 0x20	; 32
    30cc:	8c 93       	st	X, r24
    30ce:	30 c1       	rjmp	.+608    	; 0x3330 <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    30d0:	e9 81       	ldd	r30, Y+1	; 0x01
    30d2:	fa 81       	ldd	r31, Y+2	; 0x02
    30d4:	83 81       	ldd	r24, Z+3	; 0x03
    30d6:	88 23       	and	r24, r24
    30d8:	09 f0       	breq	.+2      	; 0x30dc <PWM_vInit+0x620>
    30da:	2a c1       	rjmp	.+596    	; 0x3330 <PWM_vInit+0x874>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
    30dc:	af e4       	ldi	r26, 0x4F	; 79
    30de:	b0 e0       	ldi	r27, 0x00	; 0
    30e0:	ef e4       	ldi	r30, 0x4F	; 79
    30e2:	f0 e0       	ldi	r31, 0x00	; 0
    30e4:	80 81       	ld	r24, Z
    30e6:	80 63       	ori	r24, 0x30	; 48
    30e8:	8c 93       	st	X, r24
    30ea:	22 c1       	rjmp	.+580    	; 0x3330 <PWM_vInit+0x874>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER1_PhaseOCR:
			TCCR1A_REG = (TCCR1A_REG & 0xFC) | 3;
    30ec:	af e4       	ldi	r26, 0x4F	; 79
    30ee:	b0 e0       	ldi	r27, 0x00	; 0
    30f0:	ef e4       	ldi	r30, 0x4F	; 79
    30f2:	f0 e0       	ldi	r31, 0x00	; 0
    30f4:	80 81       	ld	r24, Z
    30f6:	83 60       	ori	r24, 0x03	; 3
    30f8:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7) | 0x10;
    30fa:	ae e4       	ldi	r26, 0x4E	; 78
    30fc:	b0 e0       	ldi	r27, 0x00	; 0
    30fe:	ee e4       	ldi	r30, 0x4E	; 78
    3100:	f0 e0       	ldi	r31, 0x00	; 0
    3102:	80 81       	ld	r24, Z
    3104:	87 7e       	andi	r24, 0xE7	; 231
    3106:	80 61       	ori	r24, 0x10	; 16
    3108:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    310a:	e9 81       	ldd	r30, Y+1	; 0x01
    310c:	fa 81       	ldd	r31, Y+2	; 0x02
    310e:	82 81       	ldd	r24, Z+2	; 0x02
    3110:	81 30       	cpi	r24, 0x01	; 1
    3112:	41 f4       	brne	.+16     	; 0x3124 <PWM_vInit+0x668>
				TIMSK_REG |= 0x3C;
    3114:	a9 e5       	ldi	r26, 0x59	; 89
    3116:	b0 e0       	ldi	r27, 0x00	; 0
    3118:	e9 e5       	ldi	r30, 0x59	; 89
    311a:	f0 e0       	ldi	r31, 0x00	; 0
    311c:	80 81       	ld	r24, Z
    311e:	8c 63       	ori	r24, 0x3C	; 60
    3120:	8c 93       	st	X, r24
    3122:	06 c1       	rjmp	.+524    	; 0x3330 <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    3124:	e9 81       	ldd	r30, Y+1	; 0x01
    3126:	fa 81       	ldd	r31, Y+2	; 0x02
    3128:	82 81       	ldd	r24, Z+2	; 0x02
    312a:	88 23       	and	r24, r24
    312c:	09 f0       	breq	.+2      	; 0x3130 <PWM_vInit+0x674>
    312e:	00 c1       	rjmp	.+512    	; 0x3330 <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    3130:	e9 81       	ldd	r30, Y+1	; 0x01
    3132:	fa 81       	ldd	r31, Y+2	; 0x02
    3134:	83 81       	ldd	r24, Z+3	; 0x03
    3136:	81 30       	cpi	r24, 0x01	; 1
    3138:	49 f4       	brne	.+18     	; 0x314c <PWM_vInit+0x690>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
    313a:	af e4       	ldi	r26, 0x4F	; 79
    313c:	b0 e0       	ldi	r27, 0x00	; 0
    313e:	ef e4       	ldi	r30, 0x4F	; 79
    3140:	f0 e0       	ldi	r31, 0x00	; 0
    3142:	80 81       	ld	r24, Z
    3144:	8f 7c       	andi	r24, 0xCF	; 207
    3146:	80 62       	ori	r24, 0x20	; 32
    3148:	8c 93       	st	X, r24
    314a:	f2 c0       	rjmp	.+484    	; 0x3330 <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    314c:	e9 81       	ldd	r30, Y+1	; 0x01
    314e:	fa 81       	ldd	r31, Y+2	; 0x02
    3150:	83 81       	ldd	r24, Z+3	; 0x03
    3152:	88 23       	and	r24, r24
    3154:	09 f0       	breq	.+2      	; 0x3158 <PWM_vInit+0x69c>
    3156:	ec c0       	rjmp	.+472    	; 0x3330 <PWM_vInit+0x874>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
    3158:	af e4       	ldi	r26, 0x4F	; 79
    315a:	b0 e0       	ldi	r27, 0x00	; 0
    315c:	ef e4       	ldi	r30, 0x4F	; 79
    315e:	f0 e0       	ldi	r31, 0x00	; 0
    3160:	80 81       	ld	r24, Z
    3162:	80 63       	ori	r24, 0x30	; 48
    3164:	8c 93       	st	X, r24
    3166:	e4 c0       	rjmp	.+456    	; 0x3330 <PWM_vInit+0x874>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER1_FastICR:
			TCCR1A_REG = (TCCR1A_REG & 0xFC) | 2;
    3168:	af e4       	ldi	r26, 0x4F	; 79
    316a:	b0 e0       	ldi	r27, 0x00	; 0
    316c:	ef e4       	ldi	r30, 0x4F	; 79
    316e:	f0 e0       	ldi	r31, 0x00	; 0
    3170:	80 81       	ld	r24, Z
    3172:	8c 7f       	andi	r24, 0xFC	; 252
    3174:	82 60       	ori	r24, 0x02	; 2
    3176:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7) | 0x18;
    3178:	ae e4       	ldi	r26, 0x4E	; 78
    317a:	b0 e0       	ldi	r27, 0x00	; 0
    317c:	ee e4       	ldi	r30, 0x4E	; 78
    317e:	f0 e0       	ldi	r31, 0x00	; 0
    3180:	80 81       	ld	r24, Z
    3182:	88 61       	ori	r24, 0x18	; 24
    3184:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    3186:	e9 81       	ldd	r30, Y+1	; 0x01
    3188:	fa 81       	ldd	r31, Y+2	; 0x02
    318a:	82 81       	ldd	r24, Z+2	; 0x02
    318c:	81 30       	cpi	r24, 0x01	; 1
    318e:	41 f4       	brne	.+16     	; 0x31a0 <PWM_vInit+0x6e4>
				TIMSK_REG |= 0x3C;
    3190:	a9 e5       	ldi	r26, 0x59	; 89
    3192:	b0 e0       	ldi	r27, 0x00	; 0
    3194:	e9 e5       	ldi	r30, 0x59	; 89
    3196:	f0 e0       	ldi	r31, 0x00	; 0
    3198:	80 81       	ld	r24, Z
    319a:	8c 63       	ori	r24, 0x3C	; 60
    319c:	8c 93       	st	X, r24
    319e:	c8 c0       	rjmp	.+400    	; 0x3330 <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    31a0:	e9 81       	ldd	r30, Y+1	; 0x01
    31a2:	fa 81       	ldd	r31, Y+2	; 0x02
    31a4:	82 81       	ldd	r24, Z+2	; 0x02
    31a6:	88 23       	and	r24, r24
    31a8:	09 f0       	breq	.+2      	; 0x31ac <PWM_vInit+0x6f0>
    31aa:	c2 c0       	rjmp	.+388    	; 0x3330 <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    31ac:	e9 81       	ldd	r30, Y+1	; 0x01
    31ae:	fa 81       	ldd	r31, Y+2	; 0x02
    31b0:	83 81       	ldd	r24, Z+3	; 0x03
    31b2:	81 30       	cpi	r24, 0x01	; 1
    31b4:	49 f4       	brne	.+18     	; 0x31c8 <PWM_vInit+0x70c>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
    31b6:	af e4       	ldi	r26, 0x4F	; 79
    31b8:	b0 e0       	ldi	r27, 0x00	; 0
    31ba:	ef e4       	ldi	r30, 0x4F	; 79
    31bc:	f0 e0       	ldi	r31, 0x00	; 0
    31be:	80 81       	ld	r24, Z
    31c0:	8f 7c       	andi	r24, 0xCF	; 207
    31c2:	80 62       	ori	r24, 0x20	; 32
    31c4:	8c 93       	st	X, r24
    31c6:	b4 c0       	rjmp	.+360    	; 0x3330 <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    31c8:	e9 81       	ldd	r30, Y+1	; 0x01
    31ca:	fa 81       	ldd	r31, Y+2	; 0x02
    31cc:	83 81       	ldd	r24, Z+3	; 0x03
    31ce:	88 23       	and	r24, r24
    31d0:	09 f0       	breq	.+2      	; 0x31d4 <PWM_vInit+0x718>
    31d2:	ae c0       	rjmp	.+348    	; 0x3330 <PWM_vInit+0x874>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
    31d4:	af e4       	ldi	r26, 0x4F	; 79
    31d6:	b0 e0       	ldi	r27, 0x00	; 0
    31d8:	ef e4       	ldi	r30, 0x4F	; 79
    31da:	f0 e0       	ldi	r31, 0x00	; 0
    31dc:	80 81       	ld	r24, Z
    31de:	80 63       	ori	r24, 0x30	; 48
    31e0:	8c 93       	st	X, r24
    31e2:	a6 c0       	rjmp	.+332    	; 0x3330 <PWM_vInit+0x874>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER1_FastOCR:
			TCCR1A_REG = (TCCR1A_REG & 0xFC) | 3;
    31e4:	af e4       	ldi	r26, 0x4F	; 79
    31e6:	b0 e0       	ldi	r27, 0x00	; 0
    31e8:	ef e4       	ldi	r30, 0x4F	; 79
    31ea:	f0 e0       	ldi	r31, 0x00	; 0
    31ec:	80 81       	ld	r24, Z
    31ee:	83 60       	ori	r24, 0x03	; 3
    31f0:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7) | 0x18;
    31f2:	ae e4       	ldi	r26, 0x4E	; 78
    31f4:	b0 e0       	ldi	r27, 0x00	; 0
    31f6:	ee e4       	ldi	r30, 0x4E	; 78
    31f8:	f0 e0       	ldi	r31, 0x00	; 0
    31fa:	80 81       	ld	r24, Z
    31fc:	88 61       	ori	r24, 0x18	; 24
    31fe:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    3200:	e9 81       	ldd	r30, Y+1	; 0x01
    3202:	fa 81       	ldd	r31, Y+2	; 0x02
    3204:	82 81       	ldd	r24, Z+2	; 0x02
    3206:	81 30       	cpi	r24, 0x01	; 1
    3208:	41 f4       	brne	.+16     	; 0x321a <PWM_vInit+0x75e>
				TIMSK_REG |= 0x3C;
    320a:	a9 e5       	ldi	r26, 0x59	; 89
    320c:	b0 e0       	ldi	r27, 0x00	; 0
    320e:	e9 e5       	ldi	r30, 0x59	; 89
    3210:	f0 e0       	ldi	r31, 0x00	; 0
    3212:	80 81       	ld	r24, Z
    3214:	8c 63       	ori	r24, 0x3C	; 60
    3216:	8c 93       	st	X, r24
    3218:	8b c0       	rjmp	.+278    	; 0x3330 <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    321a:	e9 81       	ldd	r30, Y+1	; 0x01
    321c:	fa 81       	ldd	r31, Y+2	; 0x02
    321e:	82 81       	ldd	r24, Z+2	; 0x02
    3220:	88 23       	and	r24, r24
    3222:	09 f0       	breq	.+2      	; 0x3226 <PWM_vInit+0x76a>
    3224:	85 c0       	rjmp	.+266    	; 0x3330 <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    3226:	e9 81       	ldd	r30, Y+1	; 0x01
    3228:	fa 81       	ldd	r31, Y+2	; 0x02
    322a:	83 81       	ldd	r24, Z+3	; 0x03
    322c:	81 30       	cpi	r24, 0x01	; 1
    322e:	49 f4       	brne	.+18     	; 0x3242 <PWM_vInit+0x786>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
    3230:	af e4       	ldi	r26, 0x4F	; 79
    3232:	b0 e0       	ldi	r27, 0x00	; 0
    3234:	ef e4       	ldi	r30, 0x4F	; 79
    3236:	f0 e0       	ldi	r31, 0x00	; 0
    3238:	80 81       	ld	r24, Z
    323a:	8f 7c       	andi	r24, 0xCF	; 207
    323c:	80 62       	ori	r24, 0x20	; 32
    323e:	8c 93       	st	X, r24
    3240:	77 c0       	rjmp	.+238    	; 0x3330 <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    3242:	e9 81       	ldd	r30, Y+1	; 0x01
    3244:	fa 81       	ldd	r31, Y+2	; 0x02
    3246:	83 81       	ldd	r24, Z+3	; 0x03
    3248:	88 23       	and	r24, r24
    324a:	09 f0       	breq	.+2      	; 0x324e <PWM_vInit+0x792>
    324c:	71 c0       	rjmp	.+226    	; 0x3330 <PWM_vInit+0x874>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
    324e:	af e4       	ldi	r26, 0x4F	; 79
    3250:	b0 e0       	ldi	r27, 0x00	; 0
    3252:	ef e4       	ldi	r30, 0x4F	; 79
    3254:	f0 e0       	ldi	r31, 0x00	; 0
    3256:	80 81       	ld	r24, Z
    3258:	80 63       	ori	r24, 0x30	; 48
    325a:	8c 93       	st	X, r24
    325c:	69 c0       	rjmp	.+210    	; 0x3330 <PWM_vInit+0x874>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER2_PhaseCorrect:
			TCCR2_REG = (TCCR2_REG & 0xB7) | 0x40;
    325e:	a5 e4       	ldi	r26, 0x45	; 69
    3260:	b0 e0       	ldi	r27, 0x00	; 0
    3262:	e5 e4       	ldi	r30, 0x45	; 69
    3264:	f0 e0       	ldi	r31, 0x00	; 0
    3266:	80 81       	ld	r24, Z
    3268:	87 7b       	andi	r24, 0xB7	; 183
    326a:	80 64       	ori	r24, 0x40	; 64
    326c:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    326e:	e9 81       	ldd	r30, Y+1	; 0x01
    3270:	fa 81       	ldd	r31, Y+2	; 0x02
    3272:	82 81       	ldd	r24, Z+2	; 0x02
    3274:	81 30       	cpi	r24, 0x01	; 1
    3276:	41 f4       	brne	.+16     	; 0x3288 <PWM_vInit+0x7cc>
				TIMSK_REG |= 0xC0;
    3278:	a9 e5       	ldi	r26, 0x59	; 89
    327a:	b0 e0       	ldi	r27, 0x00	; 0
    327c:	e9 e5       	ldi	r30, 0x59	; 89
    327e:	f0 e0       	ldi	r31, 0x00	; 0
    3280:	80 81       	ld	r24, Z
    3282:	80 6c       	ori	r24, 0xC0	; 192
    3284:	8c 93       	st	X, r24
    3286:	54 c0       	rjmp	.+168    	; 0x3330 <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    3288:	e9 81       	ldd	r30, Y+1	; 0x01
    328a:	fa 81       	ldd	r31, Y+2	; 0x02
    328c:	82 81       	ldd	r24, Z+2	; 0x02
    328e:	88 23       	and	r24, r24
    3290:	09 f0       	breq	.+2      	; 0x3294 <PWM_vInit+0x7d8>
    3292:	4e c0       	rjmp	.+156    	; 0x3330 <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    3294:	e9 81       	ldd	r30, Y+1	; 0x01
    3296:	fa 81       	ldd	r31, Y+2	; 0x02
    3298:	83 81       	ldd	r24, Z+3	; 0x03
    329a:	81 30       	cpi	r24, 0x01	; 1
    329c:	49 f4       	brne	.+18     	; 0x32b0 <PWM_vInit+0x7f4>
					TCCR2_REG = (TCCR1A_REG & 0xCF) | 0x20;
    329e:	a5 e4       	ldi	r26, 0x45	; 69
    32a0:	b0 e0       	ldi	r27, 0x00	; 0
    32a2:	ef e4       	ldi	r30, 0x4F	; 79
    32a4:	f0 e0       	ldi	r31, 0x00	; 0
    32a6:	80 81       	ld	r24, Z
    32a8:	8f 7c       	andi	r24, 0xCF	; 207
    32aa:	80 62       	ori	r24, 0x20	; 32
    32ac:	8c 93       	st	X, r24
    32ae:	40 c0       	rjmp	.+128    	; 0x3330 <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    32b0:	e9 81       	ldd	r30, Y+1	; 0x01
    32b2:	fa 81       	ldd	r31, Y+2	; 0x02
    32b4:	83 81       	ldd	r24, Z+3	; 0x03
    32b6:	88 23       	and	r24, r24
    32b8:	d9 f5       	brne	.+118    	; 0x3330 <PWM_vInit+0x874>
					TCCR2_REG = (TCCR1A_REG & 0xCF) | 0x30;
    32ba:	a5 e4       	ldi	r26, 0x45	; 69
    32bc:	b0 e0       	ldi	r27, 0x00	; 0
    32be:	ef e4       	ldi	r30, 0x4F	; 79
    32c0:	f0 e0       	ldi	r31, 0x00	; 0
    32c2:	80 81       	ld	r24, Z
    32c4:	80 63       	ori	r24, 0x30	; 48
    32c6:	8c 93       	st	X, r24
    32c8:	33 c0       	rjmp	.+102    	; 0x3330 <PWM_vInit+0x874>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER2_FastPWM:
			TCCR2_REG = (TCCR2_REG & 0xB7) | 0x48;
    32ca:	a5 e4       	ldi	r26, 0x45	; 69
    32cc:	b0 e0       	ldi	r27, 0x00	; 0
    32ce:	e5 e4       	ldi	r30, 0x45	; 69
    32d0:	f0 e0       	ldi	r31, 0x00	; 0
    32d2:	80 81       	ld	r24, Z
    32d4:	88 64       	ori	r24, 0x48	; 72
    32d6:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    32d8:	e9 81       	ldd	r30, Y+1	; 0x01
    32da:	fa 81       	ldd	r31, Y+2	; 0x02
    32dc:	82 81       	ldd	r24, Z+2	; 0x02
    32de:	81 30       	cpi	r24, 0x01	; 1
    32e0:	41 f4       	brne	.+16     	; 0x32f2 <PWM_vInit+0x836>
				TIMSK_REG |= 0xC0;
    32e2:	a9 e5       	ldi	r26, 0x59	; 89
    32e4:	b0 e0       	ldi	r27, 0x00	; 0
    32e6:	e9 e5       	ldi	r30, 0x59	; 89
    32e8:	f0 e0       	ldi	r31, 0x00	; 0
    32ea:	80 81       	ld	r24, Z
    32ec:	80 6c       	ori	r24, 0xC0	; 192
    32ee:	8c 93       	st	X, r24
    32f0:	1f c0       	rjmp	.+62     	; 0x3330 <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    32f2:	e9 81       	ldd	r30, Y+1	; 0x01
    32f4:	fa 81       	ldd	r31, Y+2	; 0x02
    32f6:	82 81       	ldd	r24, Z+2	; 0x02
    32f8:	88 23       	and	r24, r24
    32fa:	d1 f4       	brne	.+52     	; 0x3330 <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    32fc:	e9 81       	ldd	r30, Y+1	; 0x01
    32fe:	fa 81       	ldd	r31, Y+2	; 0x02
    3300:	83 81       	ldd	r24, Z+3	; 0x03
    3302:	81 30       	cpi	r24, 0x01	; 1
    3304:	49 f4       	brne	.+18     	; 0x3318 <PWM_vInit+0x85c>
					TCCR2_REG = (TCCR1A_REG & 0xCF) | 0x20;
    3306:	a5 e4       	ldi	r26, 0x45	; 69
    3308:	b0 e0       	ldi	r27, 0x00	; 0
    330a:	ef e4       	ldi	r30, 0x4F	; 79
    330c:	f0 e0       	ldi	r31, 0x00	; 0
    330e:	80 81       	ld	r24, Z
    3310:	8f 7c       	andi	r24, 0xCF	; 207
    3312:	80 62       	ori	r24, 0x20	; 32
    3314:	8c 93       	st	X, r24
    3316:	0c c0       	rjmp	.+24     	; 0x3330 <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    3318:	e9 81       	ldd	r30, Y+1	; 0x01
    331a:	fa 81       	ldd	r31, Y+2	; 0x02
    331c:	83 81       	ldd	r24, Z+3	; 0x03
    331e:	88 23       	and	r24, r24
    3320:	39 f4       	brne	.+14     	; 0x3330 <PWM_vInit+0x874>
					TCCR2_REG = (TCCR1A_REG & 0xCF) | 0x30;
    3322:	a5 e4       	ldi	r26, 0x45	; 69
    3324:	b0 e0       	ldi	r27, 0x00	; 0
    3326:	ef e4       	ldi	r30, 0x4F	; 79
    3328:	f0 e0       	ldi	r31, 0x00	; 0
    332a:	80 81       	ld	r24, Z
    332c:	80 63       	ori	r24, 0x30	; 48
    332e:	8c 93       	st	X, r24
			else{ /* Do Nothing */ }
			break;
		default: /* Do Nothing */ break;
		}
	}
}
    3330:	0f 90       	pop	r0
    3332:	0f 90       	pop	r0
    3334:	0f 90       	pop	r0
    3336:	0f 90       	pop	r0
    3338:	cf 91       	pop	r28
    333a:	df 91       	pop	r29
    333c:	08 95       	ret

0000333e <PWM_vSetICR>:

void PWM_vSetICR(const PWM_cfg_t *PWM, u16 Copy_u16ICRValue){
    333e:	df 93       	push	r29
    3340:	cf 93       	push	r28
    3342:	00 d0       	rcall	.+0      	; 0x3344 <PWM_vSetICR+0x6>
    3344:	00 d0       	rcall	.+0      	; 0x3346 <PWM_vSetICR+0x8>
    3346:	cd b7       	in	r28, 0x3d	; 61
    3348:	de b7       	in	r29, 0x3e	; 62
    334a:	9a 83       	std	Y+2, r25	; 0x02
    334c:	89 83       	std	Y+1, r24	; 0x01
    334e:	7c 83       	std	Y+4, r23	; 0x04
    3350:	6b 83       	std	Y+3, r22	; 0x03
	if(PWM != NULL){
    3352:	89 81       	ldd	r24, Y+1	; 0x01
    3354:	9a 81       	ldd	r25, Y+2	; 0x02
    3356:	00 97       	sbiw	r24, 0x00	; 0
    3358:	79 f0       	breq	.+30     	; 0x3378 <PWM_vSetICR+0x3a>
		switch(PWM->PWM_TimerChannel){
    335a:	e9 81       	ldd	r30, Y+1	; 0x01
    335c:	fa 81       	ldd	r31, Y+2	; 0x02
    335e:	80 81       	ld	r24, Z
    3360:	88 2f       	mov	r24, r24
    3362:	90 e0       	ldi	r25, 0x00	; 0
    3364:	02 97       	sbiw	r24, 0x02	; 2
    3366:	8c 30       	cpi	r24, 0x0C	; 12
    3368:	91 05       	cpc	r25, r1
    336a:	30 f4       	brcc	.+12     	; 0x3378 <PWM_vSetICR+0x3a>
		case TIMER1_PhaseFreqOCR:
		case TIMER1_PhaseICR:
		case TIMER1_PhaseOCR:
		case TIMER1_FastICR:
		case TIMER1_FastOCR:
			ICR1_REG = Copy_u16ICRValue;
    336c:	e6 e4       	ldi	r30, 0x46	; 70
    336e:	f0 e0       	ldi	r31, 0x00	; 0
    3370:	8b 81       	ldd	r24, Y+3	; 0x03
    3372:	9c 81       	ldd	r25, Y+4	; 0x04
    3374:	91 83       	std	Z+1, r25	; 0x01
    3376:	80 83       	st	Z, r24
			break;
		default: /* Do Nothing */ break;
		}
	}
}
    3378:	0f 90       	pop	r0
    337a:	0f 90       	pop	r0
    337c:	0f 90       	pop	r0
    337e:	0f 90       	pop	r0
    3380:	cf 91       	pop	r28
    3382:	df 91       	pop	r29
    3384:	08 95       	ret

00003386 <PWM_vSetOCR>:

void PWM_vSetOCR(const PWM_cfg_t *PWM, u16 Copy_u16OCRValue){
    3386:	df 93       	push	r29
    3388:	cf 93       	push	r28
    338a:	00 d0       	rcall	.+0      	; 0x338c <PWM_vSetOCR+0x6>
    338c:	00 d0       	rcall	.+0      	; 0x338e <PWM_vSetOCR+0x8>
    338e:	00 d0       	rcall	.+0      	; 0x3390 <PWM_vSetOCR+0xa>
    3390:	cd b7       	in	r28, 0x3d	; 61
    3392:	de b7       	in	r29, 0x3e	; 62
    3394:	9a 83       	std	Y+2, r25	; 0x02
    3396:	89 83       	std	Y+1, r24	; 0x01
    3398:	7c 83       	std	Y+4, r23	; 0x04
    339a:	6b 83       	std	Y+3, r22	; 0x03
	if(PWM != NULL){
    339c:	89 81       	ldd	r24, Y+1	; 0x01
    339e:	9a 81       	ldd	r25, Y+2	; 0x02
    33a0:	00 97       	sbiw	r24, 0x00	; 0
    33a2:	61 f1       	breq	.+88     	; 0x33fc <PWM_vSetOCR+0x76>
		switch(PWM->PWM_TimerChannel){
    33a4:	e9 81       	ldd	r30, Y+1	; 0x01
    33a6:	fa 81       	ldd	r31, Y+2	; 0x02
    33a8:	80 81       	ld	r24, Z
    33aa:	28 2f       	mov	r18, r24
    33ac:	30 e0       	ldi	r19, 0x00	; 0
    33ae:	3e 83       	std	Y+6, r19	; 0x06
    33b0:	2d 83       	std	Y+5, r18	; 0x05
    33b2:	8d 81       	ldd	r24, Y+5	; 0x05
    33b4:	9e 81       	ldd	r25, Y+6	; 0x06
    33b6:	8e 30       	cpi	r24, 0x0E	; 14
    33b8:	91 05       	cpc	r25, r1
    33ba:	54 f4       	brge	.+20     	; 0x33d0 <PWM_vSetOCR+0x4a>
    33bc:	2d 81       	ldd	r18, Y+5	; 0x05
    33be:	3e 81       	ldd	r19, Y+6	; 0x06
    33c0:	22 30       	cpi	r18, 0x02	; 2
    33c2:	31 05       	cpc	r19, r1
    33c4:	84 f4       	brge	.+32     	; 0x33e6 <PWM_vSetOCR+0x60>
    33c6:	8d 81       	ldd	r24, Y+5	; 0x05
    33c8:	9e 81       	ldd	r25, Y+6	; 0x06
    33ca:	99 23       	and	r25, r25
    33cc:	bc f0       	brlt	.+46     	; 0x33fc <PWM_vSetOCR+0x76>
    33ce:	06 c0       	rjmp	.+12     	; 0x33dc <PWM_vSetOCR+0x56>
    33d0:	2d 81       	ldd	r18, Y+5	; 0x05
    33d2:	3e 81       	ldd	r19, Y+6	; 0x06
    33d4:	20 31       	cpi	r18, 0x10	; 16
    33d6:	31 05       	cpc	r19, r1
    33d8:	8c f4       	brge	.+34     	; 0x33fc <PWM_vSetOCR+0x76>
    33da:	0c c0       	rjmp	.+24     	; 0x33f4 <PWM_vSetOCR+0x6e>
		case TIMER0_PhaseCorrect:
		case TIMER0_FastPWM:
			OCR0_REG = (u8)Copy_u16OCRValue;
    33dc:	ec e5       	ldi	r30, 0x5C	; 92
    33de:	f0 e0       	ldi	r31, 0x00	; 0
    33e0:	8b 81       	ldd	r24, Y+3	; 0x03
    33e2:	80 83       	st	Z, r24
    33e4:	0b c0       	rjmp	.+22     	; 0x33fc <PWM_vSetOCR+0x76>
		case TIMER1_PhaseFreqOCR:
		case TIMER1_PhaseICR:
		case TIMER1_PhaseOCR:
		case TIMER1_FastICR:
		case TIMER1_FastOCR:
			OCR1B_REG = Copy_u16OCRValue;
    33e6:	e8 e4       	ldi	r30, 0x48	; 72
    33e8:	f0 e0       	ldi	r31, 0x00	; 0
    33ea:	8b 81       	ldd	r24, Y+3	; 0x03
    33ec:	9c 81       	ldd	r25, Y+4	; 0x04
    33ee:	91 83       	std	Z+1, r25	; 0x01
    33f0:	80 83       	st	Z, r24
    33f2:	04 c0       	rjmp	.+8      	; 0x33fc <PWM_vSetOCR+0x76>
			break;
		case TIMER2_PhaseCorrect:
		case TIMER2_FastPWM:
			OCR2_REG = (u8)Copy_u16OCRValue;
    33f4:	e3 e4       	ldi	r30, 0x43	; 67
    33f6:	f0 e0       	ldi	r31, 0x00	; 0
    33f8:	8b 81       	ldd	r24, Y+3	; 0x03
    33fa:	80 83       	st	Z, r24
			break;
		default: /* Do Nothing */ break;
		}
	}
}
    33fc:	26 96       	adiw	r28, 0x06	; 6
    33fe:	0f b6       	in	r0, 0x3f	; 63
    3400:	f8 94       	cli
    3402:	de bf       	out	0x3e, r29	; 62
    3404:	0f be       	out	0x3f, r0	; 63
    3406:	cd bf       	out	0x3d, r28	; 61
    3408:	cf 91       	pop	r28
    340a:	df 91       	pop	r29
    340c:	08 95       	ret

0000340e <PWM_vStart>:

void PWM_vStart(const PWM_cfg_t *PWM){
    340e:	df 93       	push	r29
    3410:	cf 93       	push	r28
    3412:	cd b7       	in	r28, 0x3d	; 61
    3414:	de b7       	in	r29, 0x3e	; 62
    3416:	2a 97       	sbiw	r28, 0x0a	; 10
    3418:	0f b6       	in	r0, 0x3f	; 63
    341a:	f8 94       	cli
    341c:	de bf       	out	0x3e, r29	; 62
    341e:	0f be       	out	0x3f, r0	; 63
    3420:	cd bf       	out	0x3d, r28	; 61
    3422:	9a 83       	std	Y+2, r25	; 0x02
    3424:	89 83       	std	Y+1, r24	; 0x01
	if(PWM != NULL){
    3426:	89 81       	ldd	r24, Y+1	; 0x01
    3428:	9a 81       	ldd	r25, Y+2	; 0x02
    342a:	00 97       	sbiw	r24, 0x00	; 0
    342c:	09 f4       	brne	.+2      	; 0x3430 <PWM_vStart+0x22>
    342e:	a7 c1       	rjmp	.+846    	; 0x377e <PWM_vStart+0x370>
		switch(PWM->PWM_TimerChannel){
    3430:	e9 81       	ldd	r30, Y+1	; 0x01
    3432:	fa 81       	ldd	r31, Y+2	; 0x02
    3434:	80 81       	ld	r24, Z
    3436:	28 2f       	mov	r18, r24
    3438:	30 e0       	ldi	r19, 0x00	; 0
    343a:	3a 87       	std	Y+10, r19	; 0x0a
    343c:	29 87       	std	Y+9, r18	; 0x09
    343e:	89 85       	ldd	r24, Y+9	; 0x09
    3440:	9a 85       	ldd	r25, Y+10	; 0x0a
    3442:	8e 30       	cpi	r24, 0x0E	; 14
    3444:	91 05       	cpc	r25, r1
    3446:	64 f4       	brge	.+24     	; 0x3460 <PWM_vStart+0x52>
    3448:	29 85       	ldd	r18, Y+9	; 0x09
    344a:	3a 85       	ldd	r19, Y+10	; 0x0a
    344c:	22 30       	cpi	r18, 0x02	; 2
    344e:	31 05       	cpc	r19, r1
    3450:	0c f0       	brlt	.+2      	; 0x3454 <PWM_vStart+0x46>
    3452:	90 c0       	rjmp	.+288    	; 0x3574 <PWM_vStart+0x166>
    3454:	89 85       	ldd	r24, Y+9	; 0x09
    3456:	9a 85       	ldd	r25, Y+10	; 0x0a
    3458:	99 23       	and	r25, r25
    345a:	0c f4       	brge	.+2      	; 0x345e <PWM_vStart+0x50>
    345c:	90 c1       	rjmp	.+800    	; 0x377e <PWM_vStart+0x370>
    345e:	07 c0       	rjmp	.+14     	; 0x346e <PWM_vStart+0x60>
    3460:	29 85       	ldd	r18, Y+9	; 0x09
    3462:	3a 85       	ldd	r19, Y+10	; 0x0a
    3464:	20 31       	cpi	r18, 0x10	; 16
    3466:	31 05       	cpc	r19, r1
    3468:	0c f0       	brlt	.+2      	; 0x346c <PWM_vStart+0x5e>
    346a:	89 c1       	rjmp	.+786    	; 0x377e <PWM_vStart+0x370>
    346c:	06 c1       	rjmp	.+524    	; 0x367a <PWM_vStart+0x26c>
		case TIMER0_PhaseCorrect:
		case TIMER0_FastPWM:
			DIO_vSetPinDir(PORTB, DIO_PIN_NUM_3, DIO_OUTPUT);
    346e:	81 e0       	ldi	r24, 0x01	; 1
    3470:	63 e0       	ldi	r22, 0x03	; 3
    3472:	41 e0       	ldi	r20, 0x01	; 1
    3474:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <DIO_vSetPinDir>
			switch(PWM->PWM_TimerPrescale){
    3478:	e9 81       	ldd	r30, Y+1	; 0x01
    347a:	fa 81       	ldd	r31, Y+2	; 0x02
    347c:	81 81       	ldd	r24, Z+1	; 0x01
    347e:	28 2f       	mov	r18, r24
    3480:	30 e0       	ldi	r19, 0x00	; 0
    3482:	38 87       	std	Y+8, r19	; 0x08
    3484:	2f 83       	std	Y+7, r18	; 0x07
    3486:	8f 81       	ldd	r24, Y+7	; 0x07
    3488:	98 85       	ldd	r25, Y+8	; 0x08
    348a:	83 30       	cpi	r24, 0x03	; 3
    348c:	91 05       	cpc	r25, r1
    348e:	09 f4       	brne	.+2      	; 0x3492 <PWM_vStart+0x84>
    3490:	45 c0       	rjmp	.+138    	; 0x351c <PWM_vStart+0x10e>
    3492:	2f 81       	ldd	r18, Y+7	; 0x07
    3494:	38 85       	ldd	r19, Y+8	; 0x08
    3496:	24 30       	cpi	r18, 0x04	; 4
    3498:	31 05       	cpc	r19, r1
    349a:	7c f4       	brge	.+30     	; 0x34ba <PWM_vStart+0xac>
    349c:	8f 81       	ldd	r24, Y+7	; 0x07
    349e:	98 85       	ldd	r25, Y+8	; 0x08
    34a0:	81 30       	cpi	r24, 0x01	; 1
    34a2:	91 05       	cpc	r25, r1
    34a4:	49 f1       	breq	.+82     	; 0x34f8 <PWM_vStart+0xea>
    34a6:	2f 81       	ldd	r18, Y+7	; 0x07
    34a8:	38 85       	ldd	r19, Y+8	; 0x08
    34aa:	22 30       	cpi	r18, 0x02	; 2
    34ac:	31 05       	cpc	r19, r1
    34ae:	6c f5       	brge	.+90     	; 0x350a <PWM_vStart+0xfc>
    34b0:	8f 81       	ldd	r24, Y+7	; 0x07
    34b2:	98 85       	ldd	r25, Y+8	; 0x08
    34b4:	00 97       	sbiw	r24, 0x00	; 0
    34b6:	c1 f0       	breq	.+48     	; 0x34e8 <PWM_vStart+0xda>
    34b8:	62 c1       	rjmp	.+708    	; 0x377e <PWM_vStart+0x370>
    34ba:	2f 81       	ldd	r18, Y+7	; 0x07
    34bc:	38 85       	ldd	r19, Y+8	; 0x08
    34be:	25 30       	cpi	r18, 0x05	; 5
    34c0:	31 05       	cpc	r19, r1
    34c2:	09 f4       	brne	.+2      	; 0x34c6 <PWM_vStart+0xb8>
    34c4:	3d c0       	rjmp	.+122    	; 0x3540 <PWM_vStart+0x132>
    34c6:	8f 81       	ldd	r24, Y+7	; 0x07
    34c8:	98 85       	ldd	r25, Y+8	; 0x08
    34ca:	85 30       	cpi	r24, 0x05	; 5
    34cc:	91 05       	cpc	r25, r1
    34ce:	7c f1       	brlt	.+94     	; 0x352e <PWM_vStart+0x120>
    34d0:	2f 81       	ldd	r18, Y+7	; 0x07
    34d2:	38 85       	ldd	r19, Y+8	; 0x08
    34d4:	26 30       	cpi	r18, 0x06	; 6
    34d6:	31 05       	cpc	r19, r1
    34d8:	e1 f1       	breq	.+120    	; 0x3552 <PWM_vStart+0x144>
    34da:	8f 81       	ldd	r24, Y+7	; 0x07
    34dc:	98 85       	ldd	r25, Y+8	; 0x08
    34de:	87 30       	cpi	r24, 0x07	; 7
    34e0:	91 05       	cpc	r25, r1
    34e2:	09 f4       	brne	.+2      	; 0x34e6 <PWM_vStart+0xd8>
    34e4:	3f c0       	rjmp	.+126    	; 0x3564 <PWM_vStart+0x156>
    34e6:	4b c1       	rjmp	.+662    	; 0x377e <PWM_vStart+0x370>
			case PRE_NO_CLK:
				TCCR0_REG = (TCCR0_REG&0xF8);
    34e8:	a3 e5       	ldi	r26, 0x53	; 83
    34ea:	b0 e0       	ldi	r27, 0x00	; 0
    34ec:	e3 e5       	ldi	r30, 0x53	; 83
    34ee:	f0 e0       	ldi	r31, 0x00	; 0
    34f0:	80 81       	ld	r24, Z
    34f2:	88 7f       	andi	r24, 0xF8	; 248
    34f4:	8c 93       	st	X, r24
    34f6:	43 c1       	rjmp	.+646    	; 0x377e <PWM_vStart+0x370>
				break;
			case PRE_0:
				TCCR0_REG = (TCCR0_REG&0xF8) | 1;
    34f8:	a3 e5       	ldi	r26, 0x53	; 83
    34fa:	b0 e0       	ldi	r27, 0x00	; 0
    34fc:	e3 e5       	ldi	r30, 0x53	; 83
    34fe:	f0 e0       	ldi	r31, 0x00	; 0
    3500:	80 81       	ld	r24, Z
    3502:	88 7f       	andi	r24, 0xF8	; 248
    3504:	81 60       	ori	r24, 0x01	; 1
    3506:	8c 93       	st	X, r24
    3508:	3a c1       	rjmp	.+628    	; 0x377e <PWM_vStart+0x370>
				break;
			case PRE_8:
				TCCR0_REG = (TCCR0_REG&0xF8) | 2;
    350a:	a3 e5       	ldi	r26, 0x53	; 83
    350c:	b0 e0       	ldi	r27, 0x00	; 0
    350e:	e3 e5       	ldi	r30, 0x53	; 83
    3510:	f0 e0       	ldi	r31, 0x00	; 0
    3512:	80 81       	ld	r24, Z
    3514:	88 7f       	andi	r24, 0xF8	; 248
    3516:	82 60       	ori	r24, 0x02	; 2
    3518:	8c 93       	st	X, r24
    351a:	31 c1       	rjmp	.+610    	; 0x377e <PWM_vStart+0x370>
				break;
			case PRE_64:
				TCCR0_REG = (TCCR0_REG&0xF8) | 3;
    351c:	a3 e5       	ldi	r26, 0x53	; 83
    351e:	b0 e0       	ldi	r27, 0x00	; 0
    3520:	e3 e5       	ldi	r30, 0x53	; 83
    3522:	f0 e0       	ldi	r31, 0x00	; 0
    3524:	80 81       	ld	r24, Z
    3526:	88 7f       	andi	r24, 0xF8	; 248
    3528:	83 60       	ori	r24, 0x03	; 3
    352a:	8c 93       	st	X, r24
    352c:	28 c1       	rjmp	.+592    	; 0x377e <PWM_vStart+0x370>
				break;
			case PRE_256:
				TCCR0_REG = (TCCR0_REG&0xF8) | 4;
    352e:	a3 e5       	ldi	r26, 0x53	; 83
    3530:	b0 e0       	ldi	r27, 0x00	; 0
    3532:	e3 e5       	ldi	r30, 0x53	; 83
    3534:	f0 e0       	ldi	r31, 0x00	; 0
    3536:	80 81       	ld	r24, Z
    3538:	88 7f       	andi	r24, 0xF8	; 248
    353a:	84 60       	ori	r24, 0x04	; 4
    353c:	8c 93       	st	X, r24
    353e:	1f c1       	rjmp	.+574    	; 0x377e <PWM_vStart+0x370>
				break;
			case PRE_1024:
				TCCR0_REG = (TCCR0_REG&0xF8) | 5;
    3540:	a3 e5       	ldi	r26, 0x53	; 83
    3542:	b0 e0       	ldi	r27, 0x00	; 0
    3544:	e3 e5       	ldi	r30, 0x53	; 83
    3546:	f0 e0       	ldi	r31, 0x00	; 0
    3548:	80 81       	ld	r24, Z
    354a:	88 7f       	andi	r24, 0xF8	; 248
    354c:	85 60       	ori	r24, 0x05	; 5
    354e:	8c 93       	st	X, r24
    3550:	16 c1       	rjmp	.+556    	; 0x377e <PWM_vStart+0x370>
				break;
			case PRE_EXT_FALLING:
				TCCR0_REG = (TCCR0_REG&0xF8) | 6;
    3552:	a3 e5       	ldi	r26, 0x53	; 83
    3554:	b0 e0       	ldi	r27, 0x00	; 0
    3556:	e3 e5       	ldi	r30, 0x53	; 83
    3558:	f0 e0       	ldi	r31, 0x00	; 0
    355a:	80 81       	ld	r24, Z
    355c:	88 7f       	andi	r24, 0xF8	; 248
    355e:	86 60       	ori	r24, 0x06	; 6
    3560:	8c 93       	st	X, r24
    3562:	0d c1       	rjmp	.+538    	; 0x377e <PWM_vStart+0x370>
				break;
			case PRE_EXT_RISING:
				TCCR0_REG = (TCCR0_REG&0xF8) | 7;
    3564:	a3 e5       	ldi	r26, 0x53	; 83
    3566:	b0 e0       	ldi	r27, 0x00	; 0
    3568:	e3 e5       	ldi	r30, 0x53	; 83
    356a:	f0 e0       	ldi	r31, 0x00	; 0
    356c:	80 81       	ld	r24, Z
    356e:	87 60       	ori	r24, 0x07	; 7
    3570:	8c 93       	st	X, r24
    3572:	05 c1       	rjmp	.+522    	; 0x377e <PWM_vStart+0x370>
		case TIMER1_PhaseFreqOCR:
		case TIMER1_PhaseICR:
		case TIMER1_PhaseOCR:
		case TIMER1_FastICR:
		case TIMER1_FastOCR:
			DIO_vSetPinDir(PORTD, DIO_PIN_NUM_4, DIO_OUTPUT);
    3574:	83 e0       	ldi	r24, 0x03	; 3
    3576:	64 e0       	ldi	r22, 0x04	; 4
    3578:	41 e0       	ldi	r20, 0x01	; 1
    357a:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <DIO_vSetPinDir>
			switch(PWM->PWM_TimerPrescale){
    357e:	e9 81       	ldd	r30, Y+1	; 0x01
    3580:	fa 81       	ldd	r31, Y+2	; 0x02
    3582:	81 81       	ldd	r24, Z+1	; 0x01
    3584:	28 2f       	mov	r18, r24
    3586:	30 e0       	ldi	r19, 0x00	; 0
    3588:	3e 83       	std	Y+6, r19	; 0x06
    358a:	2d 83       	std	Y+5, r18	; 0x05
    358c:	8d 81       	ldd	r24, Y+5	; 0x05
    358e:	9e 81       	ldd	r25, Y+6	; 0x06
    3590:	83 30       	cpi	r24, 0x03	; 3
    3592:	91 05       	cpc	r25, r1
    3594:	09 f4       	brne	.+2      	; 0x3598 <PWM_vStart+0x18a>
    3596:	45 c0       	rjmp	.+138    	; 0x3622 <PWM_vStart+0x214>
    3598:	2d 81       	ldd	r18, Y+5	; 0x05
    359a:	3e 81       	ldd	r19, Y+6	; 0x06
    359c:	24 30       	cpi	r18, 0x04	; 4
    359e:	31 05       	cpc	r19, r1
    35a0:	7c f4       	brge	.+30     	; 0x35c0 <PWM_vStart+0x1b2>
    35a2:	8d 81       	ldd	r24, Y+5	; 0x05
    35a4:	9e 81       	ldd	r25, Y+6	; 0x06
    35a6:	81 30       	cpi	r24, 0x01	; 1
    35a8:	91 05       	cpc	r25, r1
    35aa:	49 f1       	breq	.+82     	; 0x35fe <PWM_vStart+0x1f0>
    35ac:	2d 81       	ldd	r18, Y+5	; 0x05
    35ae:	3e 81       	ldd	r19, Y+6	; 0x06
    35b0:	22 30       	cpi	r18, 0x02	; 2
    35b2:	31 05       	cpc	r19, r1
    35b4:	6c f5       	brge	.+90     	; 0x3610 <PWM_vStart+0x202>
    35b6:	8d 81       	ldd	r24, Y+5	; 0x05
    35b8:	9e 81       	ldd	r25, Y+6	; 0x06
    35ba:	00 97       	sbiw	r24, 0x00	; 0
    35bc:	c1 f0       	breq	.+48     	; 0x35ee <PWM_vStart+0x1e0>
    35be:	df c0       	rjmp	.+446    	; 0x377e <PWM_vStart+0x370>
    35c0:	2d 81       	ldd	r18, Y+5	; 0x05
    35c2:	3e 81       	ldd	r19, Y+6	; 0x06
    35c4:	25 30       	cpi	r18, 0x05	; 5
    35c6:	31 05       	cpc	r19, r1
    35c8:	09 f4       	brne	.+2      	; 0x35cc <PWM_vStart+0x1be>
    35ca:	3d c0       	rjmp	.+122    	; 0x3646 <PWM_vStart+0x238>
    35cc:	8d 81       	ldd	r24, Y+5	; 0x05
    35ce:	9e 81       	ldd	r25, Y+6	; 0x06
    35d0:	85 30       	cpi	r24, 0x05	; 5
    35d2:	91 05       	cpc	r25, r1
    35d4:	7c f1       	brlt	.+94     	; 0x3634 <PWM_vStart+0x226>
    35d6:	2d 81       	ldd	r18, Y+5	; 0x05
    35d8:	3e 81       	ldd	r19, Y+6	; 0x06
    35da:	26 30       	cpi	r18, 0x06	; 6
    35dc:	31 05       	cpc	r19, r1
    35de:	e1 f1       	breq	.+120    	; 0x3658 <PWM_vStart+0x24a>
    35e0:	8d 81       	ldd	r24, Y+5	; 0x05
    35e2:	9e 81       	ldd	r25, Y+6	; 0x06
    35e4:	87 30       	cpi	r24, 0x07	; 7
    35e6:	91 05       	cpc	r25, r1
    35e8:	09 f4       	brne	.+2      	; 0x35ec <PWM_vStart+0x1de>
    35ea:	3f c0       	rjmp	.+126    	; 0x366a <PWM_vStart+0x25c>
    35ec:	c8 c0       	rjmp	.+400    	; 0x377e <PWM_vStart+0x370>
			case PRE_NO_CLK:
				TCCR1B_REG = (TCCR1B_REG&0xF8);
    35ee:	ae e4       	ldi	r26, 0x4E	; 78
    35f0:	b0 e0       	ldi	r27, 0x00	; 0
    35f2:	ee e4       	ldi	r30, 0x4E	; 78
    35f4:	f0 e0       	ldi	r31, 0x00	; 0
    35f6:	80 81       	ld	r24, Z
    35f8:	88 7f       	andi	r24, 0xF8	; 248
    35fa:	8c 93       	st	X, r24
    35fc:	c0 c0       	rjmp	.+384    	; 0x377e <PWM_vStart+0x370>
				break;
			case PRE_0:
				TCCR1B_REG = (TCCR1B_REG&0xF8) | 1;
    35fe:	ae e4       	ldi	r26, 0x4E	; 78
    3600:	b0 e0       	ldi	r27, 0x00	; 0
    3602:	ee e4       	ldi	r30, 0x4E	; 78
    3604:	f0 e0       	ldi	r31, 0x00	; 0
    3606:	80 81       	ld	r24, Z
    3608:	88 7f       	andi	r24, 0xF8	; 248
    360a:	81 60       	ori	r24, 0x01	; 1
    360c:	8c 93       	st	X, r24
    360e:	b7 c0       	rjmp	.+366    	; 0x377e <PWM_vStart+0x370>
				break;
			case PRE_8:
				TCCR1B_REG = (TCCR1B_REG&0xF8) | 2;
    3610:	ae e4       	ldi	r26, 0x4E	; 78
    3612:	b0 e0       	ldi	r27, 0x00	; 0
    3614:	ee e4       	ldi	r30, 0x4E	; 78
    3616:	f0 e0       	ldi	r31, 0x00	; 0
    3618:	80 81       	ld	r24, Z
    361a:	88 7f       	andi	r24, 0xF8	; 248
    361c:	82 60       	ori	r24, 0x02	; 2
    361e:	8c 93       	st	X, r24
    3620:	ae c0       	rjmp	.+348    	; 0x377e <PWM_vStart+0x370>
				break;
			case PRE_64:
				TCCR1B_REG = (TCCR1B_REG&0xF8) | 3;
    3622:	ae e4       	ldi	r26, 0x4E	; 78
    3624:	b0 e0       	ldi	r27, 0x00	; 0
    3626:	ee e4       	ldi	r30, 0x4E	; 78
    3628:	f0 e0       	ldi	r31, 0x00	; 0
    362a:	80 81       	ld	r24, Z
    362c:	88 7f       	andi	r24, 0xF8	; 248
    362e:	83 60       	ori	r24, 0x03	; 3
    3630:	8c 93       	st	X, r24
    3632:	a5 c0       	rjmp	.+330    	; 0x377e <PWM_vStart+0x370>
				break;
			case PRE_256:
				TCCR1B_REG = (TCCR1B_REG&0xF8) | 4;
    3634:	ae e4       	ldi	r26, 0x4E	; 78
    3636:	b0 e0       	ldi	r27, 0x00	; 0
    3638:	ee e4       	ldi	r30, 0x4E	; 78
    363a:	f0 e0       	ldi	r31, 0x00	; 0
    363c:	80 81       	ld	r24, Z
    363e:	88 7f       	andi	r24, 0xF8	; 248
    3640:	84 60       	ori	r24, 0x04	; 4
    3642:	8c 93       	st	X, r24
    3644:	9c c0       	rjmp	.+312    	; 0x377e <PWM_vStart+0x370>
				break;
			case PRE_1024:
				TCCR1B_REG = (TCCR1B_REG&0xF8) | 5;
    3646:	ae e4       	ldi	r26, 0x4E	; 78
    3648:	b0 e0       	ldi	r27, 0x00	; 0
    364a:	ee e4       	ldi	r30, 0x4E	; 78
    364c:	f0 e0       	ldi	r31, 0x00	; 0
    364e:	80 81       	ld	r24, Z
    3650:	88 7f       	andi	r24, 0xF8	; 248
    3652:	85 60       	ori	r24, 0x05	; 5
    3654:	8c 93       	st	X, r24
    3656:	93 c0       	rjmp	.+294    	; 0x377e <PWM_vStart+0x370>
				break;
			case PRE_EXT_FALLING:
				TCCR1B_REG = (TCCR1B_REG&0xF8) | 6;
    3658:	ae e4       	ldi	r26, 0x4E	; 78
    365a:	b0 e0       	ldi	r27, 0x00	; 0
    365c:	ee e4       	ldi	r30, 0x4E	; 78
    365e:	f0 e0       	ldi	r31, 0x00	; 0
    3660:	80 81       	ld	r24, Z
    3662:	88 7f       	andi	r24, 0xF8	; 248
    3664:	86 60       	ori	r24, 0x06	; 6
    3666:	8c 93       	st	X, r24
    3668:	8a c0       	rjmp	.+276    	; 0x377e <PWM_vStart+0x370>
				break;
			case PRE_EXT_RISING:
				TCCR1B_REG = (TCCR1B_REG&0xF8) | 7;
    366a:	ae e4       	ldi	r26, 0x4E	; 78
    366c:	b0 e0       	ldi	r27, 0x00	; 0
    366e:	ee e4       	ldi	r30, 0x4E	; 78
    3670:	f0 e0       	ldi	r31, 0x00	; 0
    3672:	80 81       	ld	r24, Z
    3674:	87 60       	ori	r24, 0x07	; 7
    3676:	8c 93       	st	X, r24
    3678:	82 c0       	rjmp	.+260    	; 0x377e <PWM_vStart+0x370>
			default: /* Do Nothing */ break;
			}
			break;
		case TIMER2_PhaseCorrect:
		case TIMER2_FastPWM:
			DIO_vSetPinDir(PORTD, DIO_PIN_NUM_7, DIO_OUTPUT);
    367a:	83 e0       	ldi	r24, 0x03	; 3
    367c:	67 e0       	ldi	r22, 0x07	; 7
    367e:	41 e0       	ldi	r20, 0x01	; 1
    3680:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <DIO_vSetPinDir>
			switch(PWM->PWM_TimerPrescale){
    3684:	e9 81       	ldd	r30, Y+1	; 0x01
    3686:	fa 81       	ldd	r31, Y+2	; 0x02
    3688:	81 81       	ldd	r24, Z+1	; 0x01
    368a:	28 2f       	mov	r18, r24
    368c:	30 e0       	ldi	r19, 0x00	; 0
    368e:	3c 83       	std	Y+4, r19	; 0x04
    3690:	2b 83       	std	Y+3, r18	; 0x03
    3692:	8b 81       	ldd	r24, Y+3	; 0x03
    3694:	9c 81       	ldd	r25, Y+4	; 0x04
    3696:	83 30       	cpi	r24, 0x03	; 3
    3698:	91 05       	cpc	r25, r1
    369a:	09 f4       	brne	.+2      	; 0x369e <PWM_vStart+0x290>
    369c:	4e c0       	rjmp	.+156    	; 0x373a <PWM_vStart+0x32c>
    369e:	2b 81       	ldd	r18, Y+3	; 0x03
    36a0:	3c 81       	ldd	r19, Y+4	; 0x04
    36a2:	24 30       	cpi	r18, 0x04	; 4
    36a4:	31 05       	cpc	r19, r1
    36a6:	7c f4       	brge	.+30     	; 0x36c6 <PWM_vStart+0x2b8>
    36a8:	8b 81       	ldd	r24, Y+3	; 0x03
    36aa:	9c 81       	ldd	r25, Y+4	; 0x04
    36ac:	81 30       	cpi	r24, 0x01	; 1
    36ae:	91 05       	cpc	r25, r1
    36b0:	49 f1       	breq	.+82     	; 0x3704 <PWM_vStart+0x2f6>
    36b2:	2b 81       	ldd	r18, Y+3	; 0x03
    36b4:	3c 81       	ldd	r19, Y+4	; 0x04
    36b6:	22 30       	cpi	r18, 0x02	; 2
    36b8:	31 05       	cpc	r19, r1
    36ba:	6c f5       	brge	.+90     	; 0x3716 <PWM_vStart+0x308>
    36bc:	8b 81       	ldd	r24, Y+3	; 0x03
    36be:	9c 81       	ldd	r25, Y+4	; 0x04
    36c0:	00 97       	sbiw	r24, 0x00	; 0
    36c2:	c1 f0       	breq	.+48     	; 0x36f4 <PWM_vStart+0x2e6>
    36c4:	5c c0       	rjmp	.+184    	; 0x377e <PWM_vStart+0x370>
    36c6:	2b 81       	ldd	r18, Y+3	; 0x03
    36c8:	3c 81       	ldd	r19, Y+4	; 0x04
    36ca:	25 30       	cpi	r18, 0x05	; 5
    36cc:	31 05       	cpc	r19, r1
    36ce:	09 f4       	brne	.+2      	; 0x36d2 <PWM_vStart+0x2c4>
    36d0:	4f c0       	rjmp	.+158    	; 0x3770 <PWM_vStart+0x362>
    36d2:	8b 81       	ldd	r24, Y+3	; 0x03
    36d4:	9c 81       	ldd	r25, Y+4	; 0x04
    36d6:	85 30       	cpi	r24, 0x05	; 5
    36d8:	91 05       	cpc	r25, r1
    36da:	0c f4       	brge	.+2      	; 0x36de <PWM_vStart+0x2d0>
    36dc:	40 c0       	rjmp	.+128    	; 0x375e <PWM_vStart+0x350>
    36de:	2b 81       	ldd	r18, Y+3	; 0x03
    36e0:	3c 81       	ldd	r19, Y+4	; 0x04
    36e2:	28 30       	cpi	r18, 0x08	; 8
    36e4:	31 05       	cpc	r19, r1
    36e6:	01 f1       	breq	.+64     	; 0x3728 <PWM_vStart+0x31a>
    36e8:	8b 81       	ldd	r24, Y+3	; 0x03
    36ea:	9c 81       	ldd	r25, Y+4	; 0x04
    36ec:	89 30       	cpi	r24, 0x09	; 9
    36ee:	91 05       	cpc	r25, r1
    36f0:	69 f1       	breq	.+90     	; 0x374c <PWM_vStart+0x33e>
    36f2:	45 c0       	rjmp	.+138    	; 0x377e <PWM_vStart+0x370>
			case PRE_NO_CLK:
				TCCR2_REG = (TCCR2_REG&0xF8);
    36f4:	a5 e4       	ldi	r26, 0x45	; 69
    36f6:	b0 e0       	ldi	r27, 0x00	; 0
    36f8:	e5 e4       	ldi	r30, 0x45	; 69
    36fa:	f0 e0       	ldi	r31, 0x00	; 0
    36fc:	80 81       	ld	r24, Z
    36fe:	88 7f       	andi	r24, 0xF8	; 248
    3700:	8c 93       	st	X, r24
    3702:	3d c0       	rjmp	.+122    	; 0x377e <PWM_vStart+0x370>
				break;
			case PRE_0:
				TCCR2_REG = (TCCR2_REG&0xF8) | 1;
    3704:	a5 e4       	ldi	r26, 0x45	; 69
    3706:	b0 e0       	ldi	r27, 0x00	; 0
    3708:	e5 e4       	ldi	r30, 0x45	; 69
    370a:	f0 e0       	ldi	r31, 0x00	; 0
    370c:	80 81       	ld	r24, Z
    370e:	88 7f       	andi	r24, 0xF8	; 248
    3710:	81 60       	ori	r24, 0x01	; 1
    3712:	8c 93       	st	X, r24
    3714:	34 c0       	rjmp	.+104    	; 0x377e <PWM_vStart+0x370>
				break;
			case PRE_8:
				TCCR2_REG = (TCCR2_REG&0xF8) | 2;
    3716:	a5 e4       	ldi	r26, 0x45	; 69
    3718:	b0 e0       	ldi	r27, 0x00	; 0
    371a:	e5 e4       	ldi	r30, 0x45	; 69
    371c:	f0 e0       	ldi	r31, 0x00	; 0
    371e:	80 81       	ld	r24, Z
    3720:	88 7f       	andi	r24, 0xF8	; 248
    3722:	82 60       	ori	r24, 0x02	; 2
    3724:	8c 93       	st	X, r24
    3726:	2b c0       	rjmp	.+86     	; 0x377e <PWM_vStart+0x370>
				break;
			case PRE_32:
				TCCR2_REG = (TCCR2_REG&0xF8) | 3;
    3728:	a5 e4       	ldi	r26, 0x45	; 69
    372a:	b0 e0       	ldi	r27, 0x00	; 0
    372c:	e5 e4       	ldi	r30, 0x45	; 69
    372e:	f0 e0       	ldi	r31, 0x00	; 0
    3730:	80 81       	ld	r24, Z
    3732:	88 7f       	andi	r24, 0xF8	; 248
    3734:	83 60       	ori	r24, 0x03	; 3
    3736:	8c 93       	st	X, r24
    3738:	22 c0       	rjmp	.+68     	; 0x377e <PWM_vStart+0x370>
				break;
			case PRE_64:
				TCCR2_REG = (TCCR2_REG&0xF8) | 4;
    373a:	a5 e4       	ldi	r26, 0x45	; 69
    373c:	b0 e0       	ldi	r27, 0x00	; 0
    373e:	e5 e4       	ldi	r30, 0x45	; 69
    3740:	f0 e0       	ldi	r31, 0x00	; 0
    3742:	80 81       	ld	r24, Z
    3744:	88 7f       	andi	r24, 0xF8	; 248
    3746:	84 60       	ori	r24, 0x04	; 4
    3748:	8c 93       	st	X, r24
    374a:	19 c0       	rjmp	.+50     	; 0x377e <PWM_vStart+0x370>
				break;
			case PRE_128:
				TCCR2_REG = (TCCR2_REG&0xF8) | 5;
    374c:	a5 e4       	ldi	r26, 0x45	; 69
    374e:	b0 e0       	ldi	r27, 0x00	; 0
    3750:	e5 e4       	ldi	r30, 0x45	; 69
    3752:	f0 e0       	ldi	r31, 0x00	; 0
    3754:	80 81       	ld	r24, Z
    3756:	88 7f       	andi	r24, 0xF8	; 248
    3758:	85 60       	ori	r24, 0x05	; 5
    375a:	8c 93       	st	X, r24
    375c:	10 c0       	rjmp	.+32     	; 0x377e <PWM_vStart+0x370>
				break;
			case PRE_256:
				TCCR2_REG = (TCCR2_REG&0xF8) | 6;
    375e:	a5 e4       	ldi	r26, 0x45	; 69
    3760:	b0 e0       	ldi	r27, 0x00	; 0
    3762:	e5 e4       	ldi	r30, 0x45	; 69
    3764:	f0 e0       	ldi	r31, 0x00	; 0
    3766:	80 81       	ld	r24, Z
    3768:	88 7f       	andi	r24, 0xF8	; 248
    376a:	86 60       	ori	r24, 0x06	; 6
    376c:	8c 93       	st	X, r24
    376e:	07 c0       	rjmp	.+14     	; 0x377e <PWM_vStart+0x370>
				break;
			case PRE_1024:
				TCCR2_REG = (TCCR2_REG&0xF8) | 7;
    3770:	a5 e4       	ldi	r26, 0x45	; 69
    3772:	b0 e0       	ldi	r27, 0x00	; 0
    3774:	e5 e4       	ldi	r30, 0x45	; 69
    3776:	f0 e0       	ldi	r31, 0x00	; 0
    3778:	80 81       	ld	r24, Z
    377a:	87 60       	ori	r24, 0x07	; 7
    377c:	8c 93       	st	X, r24
			}
			break;
		default: /* Do Nothing */ break;
		}
	}
}
    377e:	2a 96       	adiw	r28, 0x0a	; 10
    3780:	0f b6       	in	r0, 0x3f	; 63
    3782:	f8 94       	cli
    3784:	de bf       	out	0x3e, r29	; 62
    3786:	0f be       	out	0x3f, r0	; 63
    3788:	cd bf       	out	0x3d, r28	; 61
    378a:	cf 91       	pop	r28
    378c:	df 91       	pop	r29
    378e:	08 95       	ret

00003790 <PWM_vStop>:

void PWM_vStop(const PWM_cfg_t *PWM){
    3790:	df 93       	push	r29
    3792:	cf 93       	push	r28
    3794:	00 d0       	rcall	.+0      	; 0x3796 <PWM_vStop+0x6>
    3796:	00 d0       	rcall	.+0      	; 0x3798 <PWM_vStop+0x8>
    3798:	cd b7       	in	r28, 0x3d	; 61
    379a:	de b7       	in	r29, 0x3e	; 62
    379c:	9a 83       	std	Y+2, r25	; 0x02
    379e:	89 83       	std	Y+1, r24	; 0x01
	if(PWM != NULL){
    37a0:	89 81       	ldd	r24, Y+1	; 0x01
    37a2:	9a 81       	ldd	r25, Y+2	; 0x02
    37a4:	00 97       	sbiw	r24, 0x00	; 0
    37a6:	99 f1       	breq	.+102    	; 0x380e <PWM_vStop+0x7e>
		switch(PWM->PWM_TimerChannel){
    37a8:	e9 81       	ldd	r30, Y+1	; 0x01
    37aa:	fa 81       	ldd	r31, Y+2	; 0x02
    37ac:	80 81       	ld	r24, Z
    37ae:	28 2f       	mov	r18, r24
    37b0:	30 e0       	ldi	r19, 0x00	; 0
    37b2:	3c 83       	std	Y+4, r19	; 0x04
    37b4:	2b 83       	std	Y+3, r18	; 0x03
    37b6:	8b 81       	ldd	r24, Y+3	; 0x03
    37b8:	9c 81       	ldd	r25, Y+4	; 0x04
    37ba:	8e 30       	cpi	r24, 0x0E	; 14
    37bc:	91 05       	cpc	r25, r1
    37be:	54 f4       	brge	.+20     	; 0x37d4 <PWM_vStop+0x44>
    37c0:	2b 81       	ldd	r18, Y+3	; 0x03
    37c2:	3c 81       	ldd	r19, Y+4	; 0x04
    37c4:	22 30       	cpi	r18, 0x02	; 2
    37c6:	31 05       	cpc	r19, r1
    37c8:	9c f4       	brge	.+38     	; 0x37f0 <PWM_vStop+0x60>
    37ca:	8b 81       	ldd	r24, Y+3	; 0x03
    37cc:	9c 81       	ldd	r25, Y+4	; 0x04
    37ce:	99 23       	and	r25, r25
    37d0:	f4 f0       	brlt	.+60     	; 0x380e <PWM_vStop+0x7e>
    37d2:	06 c0       	rjmp	.+12     	; 0x37e0 <PWM_vStop+0x50>
    37d4:	2b 81       	ldd	r18, Y+3	; 0x03
    37d6:	3c 81       	ldd	r19, Y+4	; 0x04
    37d8:	20 31       	cpi	r18, 0x10	; 16
    37da:	31 05       	cpc	r19, r1
    37dc:	c4 f4       	brge	.+48     	; 0x380e <PWM_vStop+0x7e>
    37de:	10 c0       	rjmp	.+32     	; 0x3800 <PWM_vStop+0x70>
		case TIMER0_PhaseCorrect:
		case TIMER0_FastPWM:
			TCCR0_REG &= 0xF8;
    37e0:	a3 e5       	ldi	r26, 0x53	; 83
    37e2:	b0 e0       	ldi	r27, 0x00	; 0
    37e4:	e3 e5       	ldi	r30, 0x53	; 83
    37e6:	f0 e0       	ldi	r31, 0x00	; 0
    37e8:	80 81       	ld	r24, Z
    37ea:	88 7f       	andi	r24, 0xF8	; 248
    37ec:	8c 93       	st	X, r24
    37ee:	0f c0       	rjmp	.+30     	; 0x380e <PWM_vStop+0x7e>
		case TIMER1_PhaseFreqOCR:
		case TIMER1_PhaseICR:
		case TIMER1_PhaseOCR:
		case TIMER1_FastICR:
		case TIMER1_FastOCR:
			TCCR1B_REG &= 0xF8;
    37f0:	ae e4       	ldi	r26, 0x4E	; 78
    37f2:	b0 e0       	ldi	r27, 0x00	; 0
    37f4:	ee e4       	ldi	r30, 0x4E	; 78
    37f6:	f0 e0       	ldi	r31, 0x00	; 0
    37f8:	80 81       	ld	r24, Z
    37fa:	88 7f       	andi	r24, 0xF8	; 248
    37fc:	8c 93       	st	X, r24
    37fe:	07 c0       	rjmp	.+14     	; 0x380e <PWM_vStop+0x7e>
			break;
		case TIMER2_PhaseCorrect:
		case TIMER2_FastPWM:
			TCCR2_REG &= 0xF8;
    3800:	a5 e4       	ldi	r26, 0x45	; 69
    3802:	b0 e0       	ldi	r27, 0x00	; 0
    3804:	e5 e4       	ldi	r30, 0x45	; 69
    3806:	f0 e0       	ldi	r31, 0x00	; 0
    3808:	80 81       	ld	r24, Z
    380a:	88 7f       	andi	r24, 0xF8	; 248
    380c:	8c 93       	st	X, r24
			break;
		default: /* Do Nothing */ break;
		}
	}
}
    380e:	0f 90       	pop	r0
    3810:	0f 90       	pop	r0
    3812:	0f 90       	pop	r0
    3814:	0f 90       	pop	r0
    3816:	cf 91       	pop	r28
    3818:	df 91       	pop	r29
    381a:	08 95       	ret

0000381c <GIE_Enable>:
/*
The I-bit is cleared by hardware after an interrupt
has occurred, and is set by the RETI instruction to enable subsequent interrupts.
The I-bit can also be set and cleared by the application with ---the SEI and CLI---  instruction
  */
void GIE_Enable(){
    381c:	df 93       	push	r29
    381e:	cf 93       	push	r28
    3820:	cd b7       	in	r28, 0x3d	; 61
    3822:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, 7);
    3824:	af e5       	ldi	r26, 0x5F	; 95
    3826:	b0 e0       	ldi	r27, 0x00	; 0
    3828:	ef e5       	ldi	r30, 0x5F	; 95
    382a:	f0 e0       	ldi	r31, 0x00	; 0
    382c:	80 81       	ld	r24, Z
    382e:	80 68       	ori	r24, 0x80	; 128
    3830:	8c 93       	st	X, r24
}
    3832:	cf 91       	pop	r28
    3834:	df 91       	pop	r29
    3836:	08 95       	ret

00003838 <GIE_Disable>:

void GIE_Disable(){
    3838:	df 93       	push	r29
    383a:	cf 93       	push	r28
    383c:	cd b7       	in	r28, 0x3d	; 61
    383e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG, 7);
    3840:	af e5       	ldi	r26, 0x5F	; 95
    3842:	b0 e0       	ldi	r27, 0x00	; 0
    3844:	ef e5       	ldi	r30, 0x5F	; 95
    3846:	f0 e0       	ldi	r31, 0x00	; 0
    3848:	80 81       	ld	r24, Z
    384a:	8f 77       	andi	r24, 0x7F	; 127
    384c:	8c 93       	st	X, r24
}
    384e:	cf 91       	pop	r28
    3850:	df 91       	pop	r29
    3852:	08 95       	ret

00003854 <EXTI_Enable>:

static pf PF1_CallBack ;
static pf PF2_CallBack;
static pf PF3_CallBack;

void EXTI_Enable(u8 INT){
    3854:	df 93       	push	r29
    3856:	cf 93       	push	r28
    3858:	0f 92       	push	r0
    385a:	cd b7       	in	r28, 0x3d	; 61
    385c:	de b7       	in	r29, 0x3e	; 62
    385e:	89 83       	std	Y+1, r24	; 0x01
	//Enable Interrupt
	SET_BIT(GICR, INT);
    3860:	ab e5       	ldi	r26, 0x5B	; 91
    3862:	b0 e0       	ldi	r27, 0x00	; 0
    3864:	eb e5       	ldi	r30, 0x5B	; 91
    3866:	f0 e0       	ldi	r31, 0x00	; 0
    3868:	80 81       	ld	r24, Z
    386a:	48 2f       	mov	r20, r24
    386c:	89 81       	ldd	r24, Y+1	; 0x01
    386e:	28 2f       	mov	r18, r24
    3870:	30 e0       	ldi	r19, 0x00	; 0
    3872:	81 e0       	ldi	r24, 0x01	; 1
    3874:	90 e0       	ldi	r25, 0x00	; 0
    3876:	02 2e       	mov	r0, r18
    3878:	02 c0       	rjmp	.+4      	; 0x387e <EXTI_Enable+0x2a>
    387a:	88 0f       	add	r24, r24
    387c:	99 1f       	adc	r25, r25
    387e:	0a 94       	dec	r0
    3880:	e2 f7       	brpl	.-8      	; 0x387a <EXTI_Enable+0x26>
    3882:	84 2b       	or	r24, r20
    3884:	8c 93       	st	X, r24
}
    3886:	0f 90       	pop	r0
    3888:	cf 91       	pop	r28
    388a:	df 91       	pop	r29
    388c:	08 95       	ret

0000388e <EXTI_Disable>:


void EXTI_Disable(u8 INT){
    388e:	df 93       	push	r29
    3890:	cf 93       	push	r28
    3892:	0f 92       	push	r0
    3894:	cd b7       	in	r28, 0x3d	; 61
    3896:	de b7       	in	r29, 0x3e	; 62
    3898:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(GICR, INT); //Disable bit INT in GICR REG (INT0 , INT1 ,INT2)
    389a:	ab e5       	ldi	r26, 0x5B	; 91
    389c:	b0 e0       	ldi	r27, 0x00	; 0
    389e:	eb e5       	ldi	r30, 0x5B	; 91
    38a0:	f0 e0       	ldi	r31, 0x00	; 0
    38a2:	80 81       	ld	r24, Z
    38a4:	48 2f       	mov	r20, r24
    38a6:	89 81       	ldd	r24, Y+1	; 0x01
    38a8:	28 2f       	mov	r18, r24
    38aa:	30 e0       	ldi	r19, 0x00	; 0
    38ac:	81 e0       	ldi	r24, 0x01	; 1
    38ae:	90 e0       	ldi	r25, 0x00	; 0
    38b0:	02 2e       	mov	r0, r18
    38b2:	02 c0       	rjmp	.+4      	; 0x38b8 <EXTI_Disable+0x2a>
    38b4:	88 0f       	add	r24, r24
    38b6:	99 1f       	adc	r25, r25
    38b8:	0a 94       	dec	r0
    38ba:	e2 f7       	brpl	.-8      	; 0x38b4 <EXTI_Disable+0x26>
    38bc:	80 95       	com	r24
    38be:	84 23       	and	r24, r20
    38c0:	8c 93       	st	X, r24
}
    38c2:	0f 90       	pop	r0
    38c4:	cf 91       	pop	r28
    38c6:	df 91       	pop	r29
    38c8:	08 95       	ret

000038ca <EXTI_InitMode>:

tenuErrorStatus EXTI_InitMode(u8 INT, u8 mode){
    38ca:	df 93       	push	r29
    38cc:	cf 93       	push	r28
    38ce:	00 d0       	rcall	.+0      	; 0x38d0 <EXTI_InitMode+0x6>
    38d0:	0f 92       	push	r0
    38d2:	cd b7       	in	r28, 0x3d	; 61
    38d4:	de b7       	in	r29, 0x3e	; 62
    38d6:	8a 83       	std	Y+2, r24	; 0x02
    38d8:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus enuReturnStateLoc = EOK;
    38da:	19 82       	std	Y+1, r1	; 0x01
	if(INT == EXTI_INT0){
    38dc:	8a 81       	ldd	r24, Y+2	; 0x02
    38de:	86 30       	cpi	r24, 0x06	; 6
    38e0:	09 f0       	breq	.+2      	; 0x38e4 <EXTI_InitMode+0x1a>
    38e2:	4b c0       	rjmp	.+150    	; 0x397a <EXTI_InitMode+0xb0>
		if (mode == EXTI_LOW_SGNL){
    38e4:	8b 81       	ldd	r24, Y+3	; 0x03
    38e6:	81 30       	cpi	r24, 0x01	; 1
    38e8:	79 f4       	brne	.+30     	; 0x3908 <EXTI_InitMode+0x3e>
			CLR_BIT(MCUCR, EXTI_ISC00);
    38ea:	a5 e5       	ldi	r26, 0x55	; 85
    38ec:	b0 e0       	ldi	r27, 0x00	; 0
    38ee:	e5 e5       	ldi	r30, 0x55	; 85
    38f0:	f0 e0       	ldi	r31, 0x00	; 0
    38f2:	80 81       	ld	r24, Z
    38f4:	8e 7f       	andi	r24, 0xFE	; 254
    38f6:	8c 93       	st	X, r24
			CLR_BIT(MCUCR, EXTI_ISC01);
    38f8:	a5 e5       	ldi	r26, 0x55	; 85
    38fa:	b0 e0       	ldi	r27, 0x00	; 0
    38fc:	e5 e5       	ldi	r30, 0x55	; 85
    38fe:	f0 e0       	ldi	r31, 0x00	; 0
    3900:	80 81       	ld	r24, Z
    3902:	8d 7f       	andi	r24, 0xFD	; 253
    3904:	8c 93       	st	X, r24
    3906:	a6 c0       	rjmp	.+332    	; 0x3a54 <EXTI_InitMode+0x18a>
		}else if (mode == EXTI_LOG_CHNG){
    3908:	8b 81       	ldd	r24, Y+3	; 0x03
    390a:	82 30       	cpi	r24, 0x02	; 2
    390c:	79 f4       	brne	.+30     	; 0x392c <EXTI_InitMode+0x62>
			SET_BIT(MCUCR, EXTI_ISC00);
    390e:	a5 e5       	ldi	r26, 0x55	; 85
    3910:	b0 e0       	ldi	r27, 0x00	; 0
    3912:	e5 e5       	ldi	r30, 0x55	; 85
    3914:	f0 e0       	ldi	r31, 0x00	; 0
    3916:	80 81       	ld	r24, Z
    3918:	81 60       	ori	r24, 0x01	; 1
    391a:	8c 93       	st	X, r24
			CLR_BIT(MCUCR, EXTI_ISC01);
    391c:	a5 e5       	ldi	r26, 0x55	; 85
    391e:	b0 e0       	ldi	r27, 0x00	; 0
    3920:	e5 e5       	ldi	r30, 0x55	; 85
    3922:	f0 e0       	ldi	r31, 0x00	; 0
    3924:	80 81       	ld	r24, Z
    3926:	8d 7f       	andi	r24, 0xFD	; 253
    3928:	8c 93       	st	X, r24
    392a:	94 c0       	rjmp	.+296    	; 0x3a54 <EXTI_InitMode+0x18a>
		}else if (mode == EXTI_FAL_EDGE){
    392c:	8b 81       	ldd	r24, Y+3	; 0x03
    392e:	83 30       	cpi	r24, 0x03	; 3
    3930:	79 f4       	brne	.+30     	; 0x3950 <EXTI_InitMode+0x86>
			CLR_BIT(MCUCR, EXTI_ISC00);
    3932:	a5 e5       	ldi	r26, 0x55	; 85
    3934:	b0 e0       	ldi	r27, 0x00	; 0
    3936:	e5 e5       	ldi	r30, 0x55	; 85
    3938:	f0 e0       	ldi	r31, 0x00	; 0
    393a:	80 81       	ld	r24, Z
    393c:	8e 7f       	andi	r24, 0xFE	; 254
    393e:	8c 93       	st	X, r24
			SET_BIT(MCUCR, EXTI_ISC01);
    3940:	a5 e5       	ldi	r26, 0x55	; 85
    3942:	b0 e0       	ldi	r27, 0x00	; 0
    3944:	e5 e5       	ldi	r30, 0x55	; 85
    3946:	f0 e0       	ldi	r31, 0x00	; 0
    3948:	80 81       	ld	r24, Z
    394a:	82 60       	ori	r24, 0x02	; 2
    394c:	8c 93       	st	X, r24
    394e:	82 c0       	rjmp	.+260    	; 0x3a54 <EXTI_InitMode+0x18a>
		}else if(mode == EXTI_RAIS_EDGE){
    3950:	8b 81       	ldd	r24, Y+3	; 0x03
    3952:	84 30       	cpi	r24, 0x04	; 4
    3954:	79 f4       	brne	.+30     	; 0x3974 <EXTI_InitMode+0xaa>
			SET_BIT(MCUCR, EXTI_ISC00);
    3956:	a5 e5       	ldi	r26, 0x55	; 85
    3958:	b0 e0       	ldi	r27, 0x00	; 0
    395a:	e5 e5       	ldi	r30, 0x55	; 85
    395c:	f0 e0       	ldi	r31, 0x00	; 0
    395e:	80 81       	ld	r24, Z
    3960:	81 60       	ori	r24, 0x01	; 1
    3962:	8c 93       	st	X, r24
			SET_BIT(MCUCR, EXTI_ISC01);
    3964:	a5 e5       	ldi	r26, 0x55	; 85
    3966:	b0 e0       	ldi	r27, 0x00	; 0
    3968:	e5 e5       	ldi	r30, 0x55	; 85
    396a:	f0 e0       	ldi	r31, 0x00	; 0
    396c:	80 81       	ld	r24, Z
    396e:	82 60       	ori	r24, 0x02	; 2
    3970:	8c 93       	st	X, r24
    3972:	70 c0       	rjmp	.+224    	; 0x3a54 <EXTI_InitMode+0x18a>
		}else{
			enuReturnStateLoc = PARAM_OUT_RANGE;
    3974:	81 e0       	ldi	r24, 0x01	; 1
    3976:	89 83       	std	Y+1, r24	; 0x01
    3978:	6d c0       	rjmp	.+218    	; 0x3a54 <EXTI_InitMode+0x18a>
		}

	}else if(INT == EXTI_INT1){
    397a:	8a 81       	ldd	r24, Y+2	; 0x02
    397c:	87 30       	cpi	r24, 0x07	; 7
    397e:	09 f0       	breq	.+2      	; 0x3982 <EXTI_InitMode+0xb8>
    3980:	4b c0       	rjmp	.+150    	; 0x3a18 <EXTI_InitMode+0x14e>
		if (mode == EXTI_LOW_SGNL){
    3982:	8b 81       	ldd	r24, Y+3	; 0x03
    3984:	81 30       	cpi	r24, 0x01	; 1
    3986:	79 f4       	brne	.+30     	; 0x39a6 <EXTI_InitMode+0xdc>
			CLR_BIT(MCUCR, EXTI_ISC10);
    3988:	a5 e5       	ldi	r26, 0x55	; 85
    398a:	b0 e0       	ldi	r27, 0x00	; 0
    398c:	e5 e5       	ldi	r30, 0x55	; 85
    398e:	f0 e0       	ldi	r31, 0x00	; 0
    3990:	80 81       	ld	r24, Z
    3992:	8b 7f       	andi	r24, 0xFB	; 251
    3994:	8c 93       	st	X, r24
			CLR_BIT(MCUCR, EXTI_ISC11);
    3996:	a5 e5       	ldi	r26, 0x55	; 85
    3998:	b0 e0       	ldi	r27, 0x00	; 0
    399a:	e5 e5       	ldi	r30, 0x55	; 85
    399c:	f0 e0       	ldi	r31, 0x00	; 0
    399e:	80 81       	ld	r24, Z
    39a0:	87 7f       	andi	r24, 0xF7	; 247
    39a2:	8c 93       	st	X, r24
    39a4:	57 c0       	rjmp	.+174    	; 0x3a54 <EXTI_InitMode+0x18a>
		}else if (mode == EXTI_LOG_CHNG){
    39a6:	8b 81       	ldd	r24, Y+3	; 0x03
    39a8:	82 30       	cpi	r24, 0x02	; 2
    39aa:	79 f4       	brne	.+30     	; 0x39ca <EXTI_InitMode+0x100>
			SET_BIT(MCUCR, EXTI_ISC10);
    39ac:	a5 e5       	ldi	r26, 0x55	; 85
    39ae:	b0 e0       	ldi	r27, 0x00	; 0
    39b0:	e5 e5       	ldi	r30, 0x55	; 85
    39b2:	f0 e0       	ldi	r31, 0x00	; 0
    39b4:	80 81       	ld	r24, Z
    39b6:	84 60       	ori	r24, 0x04	; 4
    39b8:	8c 93       	st	X, r24
			CLR_BIT(MCUCR, EXTI_ISC11);
    39ba:	a5 e5       	ldi	r26, 0x55	; 85
    39bc:	b0 e0       	ldi	r27, 0x00	; 0
    39be:	e5 e5       	ldi	r30, 0x55	; 85
    39c0:	f0 e0       	ldi	r31, 0x00	; 0
    39c2:	80 81       	ld	r24, Z
    39c4:	87 7f       	andi	r24, 0xF7	; 247
    39c6:	8c 93       	st	X, r24
    39c8:	45 c0       	rjmp	.+138    	; 0x3a54 <EXTI_InitMode+0x18a>
		}else if (mode == EXTI_FAL_EDGE){
    39ca:	8b 81       	ldd	r24, Y+3	; 0x03
    39cc:	83 30       	cpi	r24, 0x03	; 3
    39ce:	79 f4       	brne	.+30     	; 0x39ee <EXTI_InitMode+0x124>
			CLR_BIT(MCUCR, EXTI_ISC10);
    39d0:	a5 e5       	ldi	r26, 0x55	; 85
    39d2:	b0 e0       	ldi	r27, 0x00	; 0
    39d4:	e5 e5       	ldi	r30, 0x55	; 85
    39d6:	f0 e0       	ldi	r31, 0x00	; 0
    39d8:	80 81       	ld	r24, Z
    39da:	8b 7f       	andi	r24, 0xFB	; 251
    39dc:	8c 93       	st	X, r24
			SET_BIT(MCUCR, EXTI_ISC11);
    39de:	a5 e5       	ldi	r26, 0x55	; 85
    39e0:	b0 e0       	ldi	r27, 0x00	; 0
    39e2:	e5 e5       	ldi	r30, 0x55	; 85
    39e4:	f0 e0       	ldi	r31, 0x00	; 0
    39e6:	80 81       	ld	r24, Z
    39e8:	88 60       	ori	r24, 0x08	; 8
    39ea:	8c 93       	st	X, r24
    39ec:	33 c0       	rjmp	.+102    	; 0x3a54 <EXTI_InitMode+0x18a>
		}else if(mode == EXTI_RAIS_EDGE){
    39ee:	8b 81       	ldd	r24, Y+3	; 0x03
    39f0:	84 30       	cpi	r24, 0x04	; 4
    39f2:	79 f4       	brne	.+30     	; 0x3a12 <EXTI_InitMode+0x148>
			SET_BIT(MCUCR, EXTI_ISC10);
    39f4:	a5 e5       	ldi	r26, 0x55	; 85
    39f6:	b0 e0       	ldi	r27, 0x00	; 0
    39f8:	e5 e5       	ldi	r30, 0x55	; 85
    39fa:	f0 e0       	ldi	r31, 0x00	; 0
    39fc:	80 81       	ld	r24, Z
    39fe:	84 60       	ori	r24, 0x04	; 4
    3a00:	8c 93       	st	X, r24
			SET_BIT(MCUCR, EXTI_ISC11);
    3a02:	a5 e5       	ldi	r26, 0x55	; 85
    3a04:	b0 e0       	ldi	r27, 0x00	; 0
    3a06:	e5 e5       	ldi	r30, 0x55	; 85
    3a08:	f0 e0       	ldi	r31, 0x00	; 0
    3a0a:	80 81       	ld	r24, Z
    3a0c:	88 60       	ori	r24, 0x08	; 8
    3a0e:	8c 93       	st	X, r24
    3a10:	21 c0       	rjmp	.+66     	; 0x3a54 <EXTI_InitMode+0x18a>
		}else{
			enuReturnStateLoc = PARAM_OUT_RANGE;
    3a12:	81 e0       	ldi	r24, 0x01	; 1
    3a14:	89 83       	std	Y+1, r24	; 0x01
    3a16:	1e c0       	rjmp	.+60     	; 0x3a54 <EXTI_InitMode+0x18a>
		}

	}else if(INT == EXTI_INT2){
    3a18:	8a 81       	ldd	r24, Y+2	; 0x02
    3a1a:	85 30       	cpi	r24, 0x05	; 5
    3a1c:	c9 f4       	brne	.+50     	; 0x3a50 <EXTI_InitMode+0x186>
		if(mode == EXTI_FAL_EDGE){
    3a1e:	8b 81       	ldd	r24, Y+3	; 0x03
    3a20:	83 30       	cpi	r24, 0x03	; 3
    3a22:	41 f4       	brne	.+16     	; 0x3a34 <EXTI_InitMode+0x16a>
			CLR_BIT(MCUCSR, EXTI_ISC2);
    3a24:	a4 e5       	ldi	r26, 0x54	; 84
    3a26:	b0 e0       	ldi	r27, 0x00	; 0
    3a28:	e4 e5       	ldi	r30, 0x54	; 84
    3a2a:	f0 e0       	ldi	r31, 0x00	; 0
    3a2c:	80 81       	ld	r24, Z
    3a2e:	8f 7b       	andi	r24, 0xBF	; 191
    3a30:	8c 93       	st	X, r24
    3a32:	10 c0       	rjmp	.+32     	; 0x3a54 <EXTI_InitMode+0x18a>
		}else if(mode == EXTI_RAIS_EDGE){
    3a34:	8b 81       	ldd	r24, Y+3	; 0x03
    3a36:	84 30       	cpi	r24, 0x04	; 4
    3a38:	41 f4       	brne	.+16     	; 0x3a4a <EXTI_InitMode+0x180>
			SET_BIT(MCUCSR, EXTI_ISC2);
    3a3a:	a4 e5       	ldi	r26, 0x54	; 84
    3a3c:	b0 e0       	ldi	r27, 0x00	; 0
    3a3e:	e4 e5       	ldi	r30, 0x54	; 84
    3a40:	f0 e0       	ldi	r31, 0x00	; 0
    3a42:	80 81       	ld	r24, Z
    3a44:	80 64       	ori	r24, 0x40	; 64
    3a46:	8c 93       	st	X, r24
    3a48:	05 c0       	rjmp	.+10     	; 0x3a54 <EXTI_InitMode+0x18a>
		}else{
			enuReturnStateLoc = PARAM_OUT_RANGE;
    3a4a:	81 e0       	ldi	r24, 0x01	; 1
    3a4c:	89 83       	std	Y+1, r24	; 0x01
    3a4e:	02 c0       	rjmp	.+4      	; 0x3a54 <EXTI_InitMode+0x18a>
		}
	}
	else{
		enuReturnStateLoc = PARAM_OUT_RANGE;
    3a50:	81 e0       	ldi	r24, 0x01	; 1
    3a52:	89 83       	std	Y+1, r24	; 0x01
	}

	return enuReturnStateLoc;
    3a54:	89 81       	ldd	r24, Y+1	; 0x01

}
    3a56:	0f 90       	pop	r0
    3a58:	0f 90       	pop	r0
    3a5a:	0f 90       	pop	r0
    3a5c:	cf 91       	pop	r28
    3a5e:	df 91       	pop	r29
    3a60:	08 95       	ret

00003a62 <EXTI_CheckIntFlag>:

u8 EXTI_CheckIntFlag(u8 INT)    //check if  specific interrupt flag is up
{
    3a62:	df 93       	push	r29
    3a64:	cf 93       	push	r28
    3a66:	00 d0       	rcall	.+0      	; 0x3a68 <EXTI_CheckIntFlag+0x6>
    3a68:	cd b7       	in	r28, 0x3d	; 61
    3a6a:	de b7       	in	r29, 0x3e	; 62
    3a6c:	89 83       	std	Y+1, r24	; 0x01
	if(INT == EXTI_INT0)
    3a6e:	89 81       	ldd	r24, Y+1	; 0x01
    3a70:	86 30       	cpi	r24, 0x06	; 6
    3a72:	91 f4       	brne	.+36     	; 0x3a98 <EXTI_CheckIntFlag+0x36>
	{
		if (GET_BIT(GIFR, EXTI_INTF0) == HIGH)
    3a74:	ea e5       	ldi	r30, 0x5A	; 90
    3a76:	f0 e0       	ldi	r31, 0x00	; 0
    3a78:	80 81       	ld	r24, Z
    3a7a:	82 95       	swap	r24
    3a7c:	86 95       	lsr	r24
    3a7e:	86 95       	lsr	r24
    3a80:	83 70       	andi	r24, 0x03	; 3
    3a82:	88 2f       	mov	r24, r24
    3a84:	90 e0       	ldi	r25, 0x00	; 0
    3a86:	81 70       	andi	r24, 0x01	; 1
    3a88:	90 70       	andi	r25, 0x00	; 0
    3a8a:	88 23       	and	r24, r24
    3a8c:	19 f0       	breq	.+6      	; 0x3a94 <EXTI_CheckIntFlag+0x32>
		{
			return 1;
    3a8e:	81 e0       	ldi	r24, 0x01	; 1
    3a90:	8a 83       	std	Y+2, r24	; 0x02
    3a92:	28 c0       	rjmp	.+80     	; 0x3ae4 <EXTI_CheckIntFlag+0x82>
		}
		else
		{
			return 0;
    3a94:	1a 82       	std	Y+2, r1	; 0x02
    3a96:	26 c0       	rjmp	.+76     	; 0x3ae4 <EXTI_CheckIntFlag+0x82>
		}
	}
	else if(INT == EXTI_INT1)
    3a98:	89 81       	ldd	r24, Y+1	; 0x01
    3a9a:	87 30       	cpi	r24, 0x07	; 7
    3a9c:	69 f4       	brne	.+26     	; 0x3ab8 <EXTI_CheckIntFlag+0x56>
	{
		if (GET_BIT(GIFR, EXTI_INTF1) == HIGH)
    3a9e:	ea e5       	ldi	r30, 0x5A	; 90
    3aa0:	f0 e0       	ldi	r31, 0x00	; 0
    3aa2:	80 81       	ld	r24, Z
    3aa4:	88 1f       	adc	r24, r24
    3aa6:	88 27       	eor	r24, r24
    3aa8:	88 1f       	adc	r24, r24
    3aaa:	81 30       	cpi	r24, 0x01	; 1
    3aac:	19 f4       	brne	.+6      	; 0x3ab4 <EXTI_CheckIntFlag+0x52>
		{
			return 1 ;
    3aae:	81 e0       	ldi	r24, 0x01	; 1
    3ab0:	8a 83       	std	Y+2, r24	; 0x02
    3ab2:	18 c0       	rjmp	.+48     	; 0x3ae4 <EXTI_CheckIntFlag+0x82>
		}
		else
		{
			return 0;
    3ab4:	1a 82       	std	Y+2, r1	; 0x02
    3ab6:	16 c0       	rjmp	.+44     	; 0x3ae4 <EXTI_CheckIntFlag+0x82>
		}
	}
	else if(INT == EXTI_INT2)
    3ab8:	89 81       	ldd	r24, Y+1	; 0x01
    3aba:	85 30       	cpi	r24, 0x05	; 5
    3abc:	89 f4       	brne	.+34     	; 0x3ae0 <EXTI_CheckIntFlag+0x7e>
	{
		if (GET_BIT(GIFR, EXTI_INTF2) == HIGH)
    3abe:	ea e5       	ldi	r30, 0x5A	; 90
    3ac0:	f0 e0       	ldi	r31, 0x00	; 0
    3ac2:	80 81       	ld	r24, Z
    3ac4:	82 95       	swap	r24
    3ac6:	86 95       	lsr	r24
    3ac8:	87 70       	andi	r24, 0x07	; 7
    3aca:	88 2f       	mov	r24, r24
    3acc:	90 e0       	ldi	r25, 0x00	; 0
    3ace:	81 70       	andi	r24, 0x01	; 1
    3ad0:	90 70       	andi	r25, 0x00	; 0
    3ad2:	88 23       	and	r24, r24
    3ad4:	19 f0       	breq	.+6      	; 0x3adc <EXTI_CheckIntFlag+0x7a>
		{
			return 1 ;
    3ad6:	81 e0       	ldi	r24, 0x01	; 1
    3ad8:	8a 83       	std	Y+2, r24	; 0x02
    3ada:	04 c0       	rjmp	.+8      	; 0x3ae4 <EXTI_CheckIntFlag+0x82>
		}
		else
		{
			return 0;
    3adc:	1a 82       	std	Y+2, r1	; 0x02
    3ade:	02 c0       	rjmp	.+4      	; 0x3ae4 <EXTI_CheckIntFlag+0x82>
		}
	}

	return -1;
    3ae0:	8f ef       	ldi	r24, 0xFF	; 255
    3ae2:	8a 83       	std	Y+2, r24	; 0x02
    3ae4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3ae6:	0f 90       	pop	r0
    3ae8:	0f 90       	pop	r0
    3aea:	cf 91       	pop	r28
    3aec:	df 91       	pop	r29
    3aee:	08 95       	ret

00003af0 <EXTI_FnCallBack_INT0>:

void EXTI_FnCallBack_INT0(pf callback){
    3af0:	df 93       	push	r29
    3af2:	cf 93       	push	r28
    3af4:	00 d0       	rcall	.+0      	; 0x3af6 <EXTI_FnCallBack_INT0+0x6>
    3af6:	cd b7       	in	r28, 0x3d	; 61
    3af8:	de b7       	in	r29, 0x3e	; 62
    3afa:	9a 83       	std	Y+2, r25	; 0x02
    3afc:	89 83       	std	Y+1, r24	; 0x01
	PF1_CallBack = callback;
    3afe:	89 81       	ldd	r24, Y+1	; 0x01
    3b00:	9a 81       	ldd	r25, Y+2	; 0x02
    3b02:	90 93 1d 06 	sts	0x061D, r25
    3b06:	80 93 1c 06 	sts	0x061C, r24
}
    3b0a:	0f 90       	pop	r0
    3b0c:	0f 90       	pop	r0
    3b0e:	cf 91       	pop	r28
    3b10:	df 91       	pop	r29
    3b12:	08 95       	ret

00003b14 <EXTI_FnCallBack_INT1>:
void EXTI_FnCallBack_INT1(pf callback){
    3b14:	df 93       	push	r29
    3b16:	cf 93       	push	r28
    3b18:	00 d0       	rcall	.+0      	; 0x3b1a <EXTI_FnCallBack_INT1+0x6>
    3b1a:	cd b7       	in	r28, 0x3d	; 61
    3b1c:	de b7       	in	r29, 0x3e	; 62
    3b1e:	9a 83       	std	Y+2, r25	; 0x02
    3b20:	89 83       	std	Y+1, r24	; 0x01
	PF2_CallBack = callback;
    3b22:	89 81       	ldd	r24, Y+1	; 0x01
    3b24:	9a 81       	ldd	r25, Y+2	; 0x02
    3b26:	90 93 1f 06 	sts	0x061F, r25
    3b2a:	80 93 1e 06 	sts	0x061E, r24
}
    3b2e:	0f 90       	pop	r0
    3b30:	0f 90       	pop	r0
    3b32:	cf 91       	pop	r28
    3b34:	df 91       	pop	r29
    3b36:	08 95       	ret

00003b38 <EXTI_FnCallBack_INT2>:
void EXTI_FnCallBack_INT2(pf callback){
    3b38:	df 93       	push	r29
    3b3a:	cf 93       	push	r28
    3b3c:	00 d0       	rcall	.+0      	; 0x3b3e <EXTI_FnCallBack_INT2+0x6>
    3b3e:	cd b7       	in	r28, 0x3d	; 61
    3b40:	de b7       	in	r29, 0x3e	; 62
    3b42:	9a 83       	std	Y+2, r25	; 0x02
    3b44:	89 83       	std	Y+1, r24	; 0x01
	PF3_CallBack = callback;
    3b46:	89 81       	ldd	r24, Y+1	; 0x01
    3b48:	9a 81       	ldd	r25, Y+2	; 0x02
    3b4a:	90 93 21 06 	sts	0x0621, r25
    3b4e:	80 93 20 06 	sts	0x0620, r24
}
    3b52:	0f 90       	pop	r0
    3b54:	0f 90       	pop	r0
    3b56:	cf 91       	pop	r28
    3b58:	df 91       	pop	r29
    3b5a:	08 95       	ret

00003b5c <__vector_1>:

void __vector_1() {
    3b5c:	1f 92       	push	r1
    3b5e:	0f 92       	push	r0
    3b60:	0f b6       	in	r0, 0x3f	; 63
    3b62:	0f 92       	push	r0
    3b64:	11 24       	eor	r1, r1
    3b66:	2f 93       	push	r18
    3b68:	3f 93       	push	r19
    3b6a:	4f 93       	push	r20
    3b6c:	5f 93       	push	r21
    3b6e:	6f 93       	push	r22
    3b70:	7f 93       	push	r23
    3b72:	8f 93       	push	r24
    3b74:	9f 93       	push	r25
    3b76:	af 93       	push	r26
    3b78:	bf 93       	push	r27
    3b7a:	ef 93       	push	r30
    3b7c:	ff 93       	push	r31
    3b7e:	df 93       	push	r29
    3b80:	cf 93       	push	r28
    3b82:	cd b7       	in	r28, 0x3d	; 61
    3b84:	de b7       	in	r29, 0x3e	; 62
	PF1_CallBack();
    3b86:	e0 91 1c 06 	lds	r30, 0x061C
    3b8a:	f0 91 1d 06 	lds	r31, 0x061D
    3b8e:	09 95       	icall
}
    3b90:	cf 91       	pop	r28
    3b92:	df 91       	pop	r29
    3b94:	ff 91       	pop	r31
    3b96:	ef 91       	pop	r30
    3b98:	bf 91       	pop	r27
    3b9a:	af 91       	pop	r26
    3b9c:	9f 91       	pop	r25
    3b9e:	8f 91       	pop	r24
    3ba0:	7f 91       	pop	r23
    3ba2:	6f 91       	pop	r22
    3ba4:	5f 91       	pop	r21
    3ba6:	4f 91       	pop	r20
    3ba8:	3f 91       	pop	r19
    3baa:	2f 91       	pop	r18
    3bac:	0f 90       	pop	r0
    3bae:	0f be       	out	0x3f, r0	; 63
    3bb0:	0f 90       	pop	r0
    3bb2:	1f 90       	pop	r1
    3bb4:	18 95       	reti

00003bb6 <__vector_2>:


void __vector_2() {
    3bb6:	1f 92       	push	r1
    3bb8:	0f 92       	push	r0
    3bba:	0f b6       	in	r0, 0x3f	; 63
    3bbc:	0f 92       	push	r0
    3bbe:	11 24       	eor	r1, r1
    3bc0:	2f 93       	push	r18
    3bc2:	3f 93       	push	r19
    3bc4:	4f 93       	push	r20
    3bc6:	5f 93       	push	r21
    3bc8:	6f 93       	push	r22
    3bca:	7f 93       	push	r23
    3bcc:	8f 93       	push	r24
    3bce:	9f 93       	push	r25
    3bd0:	af 93       	push	r26
    3bd2:	bf 93       	push	r27
    3bd4:	ef 93       	push	r30
    3bd6:	ff 93       	push	r31
    3bd8:	df 93       	push	r29
    3bda:	cf 93       	push	r28
    3bdc:	cd b7       	in	r28, 0x3d	; 61
    3bde:	de b7       	in	r29, 0x3e	; 62
	PF2_CallBack();
    3be0:	e0 91 1e 06 	lds	r30, 0x061E
    3be4:	f0 91 1f 06 	lds	r31, 0x061F
    3be8:	09 95       	icall
}
    3bea:	cf 91       	pop	r28
    3bec:	df 91       	pop	r29
    3bee:	ff 91       	pop	r31
    3bf0:	ef 91       	pop	r30
    3bf2:	bf 91       	pop	r27
    3bf4:	af 91       	pop	r26
    3bf6:	9f 91       	pop	r25
    3bf8:	8f 91       	pop	r24
    3bfa:	7f 91       	pop	r23
    3bfc:	6f 91       	pop	r22
    3bfe:	5f 91       	pop	r21
    3c00:	4f 91       	pop	r20
    3c02:	3f 91       	pop	r19
    3c04:	2f 91       	pop	r18
    3c06:	0f 90       	pop	r0
    3c08:	0f be       	out	0x3f, r0	; 63
    3c0a:	0f 90       	pop	r0
    3c0c:	1f 90       	pop	r1
    3c0e:	18 95       	reti

00003c10 <__vector_3>:


void __vector_3() {
    3c10:	1f 92       	push	r1
    3c12:	0f 92       	push	r0
    3c14:	0f b6       	in	r0, 0x3f	; 63
    3c16:	0f 92       	push	r0
    3c18:	11 24       	eor	r1, r1
    3c1a:	2f 93       	push	r18
    3c1c:	3f 93       	push	r19
    3c1e:	4f 93       	push	r20
    3c20:	5f 93       	push	r21
    3c22:	6f 93       	push	r22
    3c24:	7f 93       	push	r23
    3c26:	8f 93       	push	r24
    3c28:	9f 93       	push	r25
    3c2a:	af 93       	push	r26
    3c2c:	bf 93       	push	r27
    3c2e:	ef 93       	push	r30
    3c30:	ff 93       	push	r31
    3c32:	df 93       	push	r29
    3c34:	cf 93       	push	r28
    3c36:	cd b7       	in	r28, 0x3d	; 61
    3c38:	de b7       	in	r29, 0x3e	; 62
	PF3_CallBack();
    3c3a:	e0 91 20 06 	lds	r30, 0x0620
    3c3e:	f0 91 21 06 	lds	r31, 0x0621
    3c42:	09 95       	icall
}
    3c44:	cf 91       	pop	r28
    3c46:	df 91       	pop	r29
    3c48:	ff 91       	pop	r31
    3c4a:	ef 91       	pop	r30
    3c4c:	bf 91       	pop	r27
    3c4e:	af 91       	pop	r26
    3c50:	9f 91       	pop	r25
    3c52:	8f 91       	pop	r24
    3c54:	7f 91       	pop	r23
    3c56:	6f 91       	pop	r22
    3c58:	5f 91       	pop	r21
    3c5a:	4f 91       	pop	r20
    3c5c:	3f 91       	pop	r19
    3c5e:	2f 91       	pop	r18
    3c60:	0f 90       	pop	r0
    3c62:	0f be       	out	0x3f, r0	; 63
    3c64:	0f 90       	pop	r0
    3c66:	1f 90       	pop	r1
    3c68:	18 95       	reti

00003c6a <DIO_voidInit>:
#include "DIO_priv.h"



void DIO_voidInit(void)
{
    3c6a:	df 93       	push	r29
    3c6c:	cf 93       	push	r28
    3c6e:	cd b7       	in	r28, 0x3d	; 61
    3c70:	de b7       	in	r29, 0x3e	; 62
   DDRA = CONC(DIO_PIN_DIR_7 ,DIO_PIN_DIR_6 ,DIO_PIN_DIR_5 ,DIO_PIN_DIR_4 ,DIO_PIN_DIR_3 ,DIO_PIN_DIR_2 ,DIO_PIN_DIR_1 ,DIO_PIN_DIR_0 );
    3c72:	ea e3       	ldi	r30, 0x3A	; 58
    3c74:	f0 e0       	ldi	r31, 0x00	; 0
    3c76:	8f ee       	ldi	r24, 0xEF	; 239
    3c78:	80 83       	st	Z, r24
   DDRB = CONC(DIO_PIN_DIR_15,DIO_PIN_DIR_14,DIO_PIN_DIR_13,DIO_PIN_DIR_12,DIO_PIN_DIR_11,DIO_PIN_DIR_10,DIO_PIN_DIR_9 ,DIO_PIN_DIR_8 );
    3c7a:	e7 e3       	ldi	r30, 0x37	; 55
    3c7c:	f0 e0       	ldi	r31, 0x00	; 0
    3c7e:	8f ef       	ldi	r24, 0xFF	; 255
    3c80:	80 83       	st	Z, r24
   DDRC = CONC(DIO_PIN_DIR_23,DIO_PIN_DIR_22,DIO_PIN_DIR_21,DIO_PIN_DIR_20,DIO_PIN_DIR_19,DIO_PIN_DIR_18,DIO_PIN_DIR_17,DIO_PIN_DIR_16);
    3c82:	e4 e3       	ldi	r30, 0x34	; 52
    3c84:	f0 e0       	ldi	r31, 0x00	; 0
    3c86:	8f ef       	ldi	r24, 0xFF	; 255
    3c88:	80 83       	st	Z, r24
   DDRD = CONC(DIO_PIN_DIR_31,DIO_PIN_DIR_30,DIO_PIN_DIR_29,DIO_PIN_DIR_28,DIO_PIN_DIR_27,DIO_PIN_DIR_26,DIO_PIN_DIR_25,DIO_PIN_DIR_24);
    3c8a:	e1 e3       	ldi	r30, 0x31	; 49
    3c8c:	f0 e0       	ldi	r31, 0x00	; 0
    3c8e:	8f ef       	ldi	r24, 0xFF	; 255
    3c90:	80 83       	st	Z, r24

}
    3c92:	cf 91       	pop	r28
    3c94:	df 91       	pop	r29
    3c96:	08 95       	ret

00003c98 <DIO_vSetPinDir>:
//sets data direction of 1 pin in a port
void DIO_vSetPinDir(u8 Copy_u8PortName, u8 Copy_u8PinNum, u8 Copy_u8PinDir){
    3c98:	df 93       	push	r29
    3c9a:	cf 93       	push	r28
    3c9c:	cd b7       	in	r28, 0x3d	; 61
    3c9e:	de b7       	in	r29, 0x3e	; 62
    3ca0:	27 97       	sbiw	r28, 0x07	; 7
    3ca2:	0f b6       	in	r0, 0x3f	; 63
    3ca4:	f8 94       	cli
    3ca6:	de bf       	out	0x3e, r29	; 62
    3ca8:	0f be       	out	0x3f, r0	; 63
    3caa:	cd bf       	out	0x3d, r28	; 61
    3cac:	89 83       	std	Y+1, r24	; 0x01
    3cae:	6a 83       	std	Y+2, r22	; 0x02
    3cb0:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8PinDir == DIO_OUTPUT)
    3cb2:	8b 81       	ldd	r24, Y+3	; 0x03
    3cb4:	81 30       	cpi	r24, 0x01	; 1
    3cb6:	09 f0       	breq	.+2      	; 0x3cba <DIO_vSetPinDir+0x22>
    3cb8:	6f c0       	rjmp	.+222    	; 0x3d98 <DIO_vSetPinDir+0x100>
	{
		switch(Copy_u8PortName)
    3cba:	89 81       	ldd	r24, Y+1	; 0x01
    3cbc:	28 2f       	mov	r18, r24
    3cbe:	30 e0       	ldi	r19, 0x00	; 0
    3cc0:	3f 83       	std	Y+7, r19	; 0x07
    3cc2:	2e 83       	std	Y+6, r18	; 0x06
    3cc4:	8e 81       	ldd	r24, Y+6	; 0x06
    3cc6:	9f 81       	ldd	r25, Y+7	; 0x07
    3cc8:	81 30       	cpi	r24, 0x01	; 1
    3cca:	91 05       	cpc	r25, r1
    3ccc:	49 f1       	breq	.+82     	; 0x3d20 <DIO_vSetPinDir+0x88>
    3cce:	2e 81       	ldd	r18, Y+6	; 0x06
    3cd0:	3f 81       	ldd	r19, Y+7	; 0x07
    3cd2:	22 30       	cpi	r18, 0x02	; 2
    3cd4:	31 05       	cpc	r19, r1
    3cd6:	2c f4       	brge	.+10     	; 0x3ce2 <DIO_vSetPinDir+0x4a>
    3cd8:	8e 81       	ldd	r24, Y+6	; 0x06
    3cda:	9f 81       	ldd	r25, Y+7	; 0x07
    3cdc:	00 97       	sbiw	r24, 0x00	; 0
    3cde:	61 f0       	breq	.+24     	; 0x3cf8 <DIO_vSetPinDir+0x60>
    3ce0:	d2 c0       	rjmp	.+420    	; 0x3e86 <DIO_vSetPinDir+0x1ee>
    3ce2:	2e 81       	ldd	r18, Y+6	; 0x06
    3ce4:	3f 81       	ldd	r19, Y+7	; 0x07
    3ce6:	22 30       	cpi	r18, 0x02	; 2
    3ce8:	31 05       	cpc	r19, r1
    3cea:	71 f1       	breq	.+92     	; 0x3d48 <DIO_vSetPinDir+0xb0>
    3cec:	8e 81       	ldd	r24, Y+6	; 0x06
    3cee:	9f 81       	ldd	r25, Y+7	; 0x07
    3cf0:	83 30       	cpi	r24, 0x03	; 3
    3cf2:	91 05       	cpc	r25, r1
    3cf4:	e9 f1       	breq	.+122    	; 0x3d70 <DIO_vSetPinDir+0xd8>
    3cf6:	c7 c0       	rjmp	.+398    	; 0x3e86 <DIO_vSetPinDir+0x1ee>
		{
		case PORTA: SET_BIT(DDRA, Copy_u8PinNum); break;
    3cf8:	aa e3       	ldi	r26, 0x3A	; 58
    3cfa:	b0 e0       	ldi	r27, 0x00	; 0
    3cfc:	ea e3       	ldi	r30, 0x3A	; 58
    3cfe:	f0 e0       	ldi	r31, 0x00	; 0
    3d00:	80 81       	ld	r24, Z
    3d02:	48 2f       	mov	r20, r24
    3d04:	8a 81       	ldd	r24, Y+2	; 0x02
    3d06:	28 2f       	mov	r18, r24
    3d08:	30 e0       	ldi	r19, 0x00	; 0
    3d0a:	81 e0       	ldi	r24, 0x01	; 1
    3d0c:	90 e0       	ldi	r25, 0x00	; 0
    3d0e:	02 2e       	mov	r0, r18
    3d10:	02 c0       	rjmp	.+4      	; 0x3d16 <DIO_vSetPinDir+0x7e>
    3d12:	88 0f       	add	r24, r24
    3d14:	99 1f       	adc	r25, r25
    3d16:	0a 94       	dec	r0
    3d18:	e2 f7       	brpl	.-8      	; 0x3d12 <DIO_vSetPinDir+0x7a>
    3d1a:	84 2b       	or	r24, r20
    3d1c:	8c 93       	st	X, r24
    3d1e:	b3 c0       	rjmp	.+358    	; 0x3e86 <DIO_vSetPinDir+0x1ee>
		case PORTB: SET_BIT(DDRB, Copy_u8PinNum); break;
    3d20:	a7 e3       	ldi	r26, 0x37	; 55
    3d22:	b0 e0       	ldi	r27, 0x00	; 0
    3d24:	e7 e3       	ldi	r30, 0x37	; 55
    3d26:	f0 e0       	ldi	r31, 0x00	; 0
    3d28:	80 81       	ld	r24, Z
    3d2a:	48 2f       	mov	r20, r24
    3d2c:	8a 81       	ldd	r24, Y+2	; 0x02
    3d2e:	28 2f       	mov	r18, r24
    3d30:	30 e0       	ldi	r19, 0x00	; 0
    3d32:	81 e0       	ldi	r24, 0x01	; 1
    3d34:	90 e0       	ldi	r25, 0x00	; 0
    3d36:	02 2e       	mov	r0, r18
    3d38:	02 c0       	rjmp	.+4      	; 0x3d3e <DIO_vSetPinDir+0xa6>
    3d3a:	88 0f       	add	r24, r24
    3d3c:	99 1f       	adc	r25, r25
    3d3e:	0a 94       	dec	r0
    3d40:	e2 f7       	brpl	.-8      	; 0x3d3a <DIO_vSetPinDir+0xa2>
    3d42:	84 2b       	or	r24, r20
    3d44:	8c 93       	st	X, r24
    3d46:	9f c0       	rjmp	.+318    	; 0x3e86 <DIO_vSetPinDir+0x1ee>
		case PORTC: SET_BIT(DDRC, Copy_u8PinNum); break;
    3d48:	a4 e3       	ldi	r26, 0x34	; 52
    3d4a:	b0 e0       	ldi	r27, 0x00	; 0
    3d4c:	e4 e3       	ldi	r30, 0x34	; 52
    3d4e:	f0 e0       	ldi	r31, 0x00	; 0
    3d50:	80 81       	ld	r24, Z
    3d52:	48 2f       	mov	r20, r24
    3d54:	8a 81       	ldd	r24, Y+2	; 0x02
    3d56:	28 2f       	mov	r18, r24
    3d58:	30 e0       	ldi	r19, 0x00	; 0
    3d5a:	81 e0       	ldi	r24, 0x01	; 1
    3d5c:	90 e0       	ldi	r25, 0x00	; 0
    3d5e:	02 2e       	mov	r0, r18
    3d60:	02 c0       	rjmp	.+4      	; 0x3d66 <DIO_vSetPinDir+0xce>
    3d62:	88 0f       	add	r24, r24
    3d64:	99 1f       	adc	r25, r25
    3d66:	0a 94       	dec	r0
    3d68:	e2 f7       	brpl	.-8      	; 0x3d62 <DIO_vSetPinDir+0xca>
    3d6a:	84 2b       	or	r24, r20
    3d6c:	8c 93       	st	X, r24
    3d6e:	8b c0       	rjmp	.+278    	; 0x3e86 <DIO_vSetPinDir+0x1ee>
		case PORTD: SET_BIT(DDRD, Copy_u8PinNum); break;
    3d70:	a1 e3       	ldi	r26, 0x31	; 49
    3d72:	b0 e0       	ldi	r27, 0x00	; 0
    3d74:	e1 e3       	ldi	r30, 0x31	; 49
    3d76:	f0 e0       	ldi	r31, 0x00	; 0
    3d78:	80 81       	ld	r24, Z
    3d7a:	48 2f       	mov	r20, r24
    3d7c:	8a 81       	ldd	r24, Y+2	; 0x02
    3d7e:	28 2f       	mov	r18, r24
    3d80:	30 e0       	ldi	r19, 0x00	; 0
    3d82:	81 e0       	ldi	r24, 0x01	; 1
    3d84:	90 e0       	ldi	r25, 0x00	; 0
    3d86:	02 2e       	mov	r0, r18
    3d88:	02 c0       	rjmp	.+4      	; 0x3d8e <DIO_vSetPinDir+0xf6>
    3d8a:	88 0f       	add	r24, r24
    3d8c:	99 1f       	adc	r25, r25
    3d8e:	0a 94       	dec	r0
    3d90:	e2 f7       	brpl	.-8      	; 0x3d8a <DIO_vSetPinDir+0xf2>
    3d92:	84 2b       	or	r24, r20
    3d94:	8c 93       	st	X, r24
    3d96:	77 c0       	rjmp	.+238    	; 0x3e86 <DIO_vSetPinDir+0x1ee>
		}
	}
	else if(Copy_u8PinDir == DIO_INPUT)
    3d98:	8b 81       	ldd	r24, Y+3	; 0x03
    3d9a:	88 23       	and	r24, r24
    3d9c:	09 f0       	breq	.+2      	; 0x3da0 <DIO_vSetPinDir+0x108>
    3d9e:	73 c0       	rjmp	.+230    	; 0x3e86 <DIO_vSetPinDir+0x1ee>
	{
		switch(Copy_u8PortName)
    3da0:	89 81       	ldd	r24, Y+1	; 0x01
    3da2:	28 2f       	mov	r18, r24
    3da4:	30 e0       	ldi	r19, 0x00	; 0
    3da6:	3d 83       	std	Y+5, r19	; 0x05
    3da8:	2c 83       	std	Y+4, r18	; 0x04
    3daa:	8c 81       	ldd	r24, Y+4	; 0x04
    3dac:	9d 81       	ldd	r25, Y+5	; 0x05
    3dae:	81 30       	cpi	r24, 0x01	; 1
    3db0:	91 05       	cpc	r25, r1
    3db2:	59 f1       	breq	.+86     	; 0x3e0a <DIO_vSetPinDir+0x172>
    3db4:	2c 81       	ldd	r18, Y+4	; 0x04
    3db6:	3d 81       	ldd	r19, Y+5	; 0x05
    3db8:	22 30       	cpi	r18, 0x02	; 2
    3dba:	31 05       	cpc	r19, r1
    3dbc:	2c f4       	brge	.+10     	; 0x3dc8 <DIO_vSetPinDir+0x130>
    3dbe:	8c 81       	ldd	r24, Y+4	; 0x04
    3dc0:	9d 81       	ldd	r25, Y+5	; 0x05
    3dc2:	00 97       	sbiw	r24, 0x00	; 0
    3dc4:	69 f0       	breq	.+26     	; 0x3de0 <DIO_vSetPinDir+0x148>
    3dc6:	5f c0       	rjmp	.+190    	; 0x3e86 <DIO_vSetPinDir+0x1ee>
    3dc8:	2c 81       	ldd	r18, Y+4	; 0x04
    3dca:	3d 81       	ldd	r19, Y+5	; 0x05
    3dcc:	22 30       	cpi	r18, 0x02	; 2
    3dce:	31 05       	cpc	r19, r1
    3dd0:	89 f1       	breq	.+98     	; 0x3e34 <DIO_vSetPinDir+0x19c>
    3dd2:	8c 81       	ldd	r24, Y+4	; 0x04
    3dd4:	9d 81       	ldd	r25, Y+5	; 0x05
    3dd6:	83 30       	cpi	r24, 0x03	; 3
    3dd8:	91 05       	cpc	r25, r1
    3dda:	09 f4       	brne	.+2      	; 0x3dde <DIO_vSetPinDir+0x146>
    3ddc:	40 c0       	rjmp	.+128    	; 0x3e5e <DIO_vSetPinDir+0x1c6>
    3dde:	53 c0       	rjmp	.+166    	; 0x3e86 <DIO_vSetPinDir+0x1ee>
		{
		case PORTA: CLR_BIT(DDRA, Copy_u8PinNum); break;
    3de0:	aa e3       	ldi	r26, 0x3A	; 58
    3de2:	b0 e0       	ldi	r27, 0x00	; 0
    3de4:	ea e3       	ldi	r30, 0x3A	; 58
    3de6:	f0 e0       	ldi	r31, 0x00	; 0
    3de8:	80 81       	ld	r24, Z
    3dea:	48 2f       	mov	r20, r24
    3dec:	8a 81       	ldd	r24, Y+2	; 0x02
    3dee:	28 2f       	mov	r18, r24
    3df0:	30 e0       	ldi	r19, 0x00	; 0
    3df2:	81 e0       	ldi	r24, 0x01	; 1
    3df4:	90 e0       	ldi	r25, 0x00	; 0
    3df6:	02 2e       	mov	r0, r18
    3df8:	02 c0       	rjmp	.+4      	; 0x3dfe <DIO_vSetPinDir+0x166>
    3dfa:	88 0f       	add	r24, r24
    3dfc:	99 1f       	adc	r25, r25
    3dfe:	0a 94       	dec	r0
    3e00:	e2 f7       	brpl	.-8      	; 0x3dfa <DIO_vSetPinDir+0x162>
    3e02:	80 95       	com	r24
    3e04:	84 23       	and	r24, r20
    3e06:	8c 93       	st	X, r24
    3e08:	3e c0       	rjmp	.+124    	; 0x3e86 <DIO_vSetPinDir+0x1ee>
		case PORTB: CLR_BIT(DDRB, Copy_u8PinNum); break;
    3e0a:	a7 e3       	ldi	r26, 0x37	; 55
    3e0c:	b0 e0       	ldi	r27, 0x00	; 0
    3e0e:	e7 e3       	ldi	r30, 0x37	; 55
    3e10:	f0 e0       	ldi	r31, 0x00	; 0
    3e12:	80 81       	ld	r24, Z
    3e14:	48 2f       	mov	r20, r24
    3e16:	8a 81       	ldd	r24, Y+2	; 0x02
    3e18:	28 2f       	mov	r18, r24
    3e1a:	30 e0       	ldi	r19, 0x00	; 0
    3e1c:	81 e0       	ldi	r24, 0x01	; 1
    3e1e:	90 e0       	ldi	r25, 0x00	; 0
    3e20:	02 2e       	mov	r0, r18
    3e22:	02 c0       	rjmp	.+4      	; 0x3e28 <DIO_vSetPinDir+0x190>
    3e24:	88 0f       	add	r24, r24
    3e26:	99 1f       	adc	r25, r25
    3e28:	0a 94       	dec	r0
    3e2a:	e2 f7       	brpl	.-8      	; 0x3e24 <DIO_vSetPinDir+0x18c>
    3e2c:	80 95       	com	r24
    3e2e:	84 23       	and	r24, r20
    3e30:	8c 93       	st	X, r24
    3e32:	29 c0       	rjmp	.+82     	; 0x3e86 <DIO_vSetPinDir+0x1ee>
		case PORTC: CLR_BIT(DDRC, Copy_u8PinNum); break;
    3e34:	a4 e3       	ldi	r26, 0x34	; 52
    3e36:	b0 e0       	ldi	r27, 0x00	; 0
    3e38:	e4 e3       	ldi	r30, 0x34	; 52
    3e3a:	f0 e0       	ldi	r31, 0x00	; 0
    3e3c:	80 81       	ld	r24, Z
    3e3e:	48 2f       	mov	r20, r24
    3e40:	8a 81       	ldd	r24, Y+2	; 0x02
    3e42:	28 2f       	mov	r18, r24
    3e44:	30 e0       	ldi	r19, 0x00	; 0
    3e46:	81 e0       	ldi	r24, 0x01	; 1
    3e48:	90 e0       	ldi	r25, 0x00	; 0
    3e4a:	02 2e       	mov	r0, r18
    3e4c:	02 c0       	rjmp	.+4      	; 0x3e52 <DIO_vSetPinDir+0x1ba>
    3e4e:	88 0f       	add	r24, r24
    3e50:	99 1f       	adc	r25, r25
    3e52:	0a 94       	dec	r0
    3e54:	e2 f7       	brpl	.-8      	; 0x3e4e <DIO_vSetPinDir+0x1b6>
    3e56:	80 95       	com	r24
    3e58:	84 23       	and	r24, r20
    3e5a:	8c 93       	st	X, r24
    3e5c:	14 c0       	rjmp	.+40     	; 0x3e86 <DIO_vSetPinDir+0x1ee>
		case PORTD: CLR_BIT(DDRD, Copy_u8PinNum); break;
    3e5e:	a1 e3       	ldi	r26, 0x31	; 49
    3e60:	b0 e0       	ldi	r27, 0x00	; 0
    3e62:	e1 e3       	ldi	r30, 0x31	; 49
    3e64:	f0 e0       	ldi	r31, 0x00	; 0
    3e66:	80 81       	ld	r24, Z
    3e68:	48 2f       	mov	r20, r24
    3e6a:	8a 81       	ldd	r24, Y+2	; 0x02
    3e6c:	28 2f       	mov	r18, r24
    3e6e:	30 e0       	ldi	r19, 0x00	; 0
    3e70:	81 e0       	ldi	r24, 0x01	; 1
    3e72:	90 e0       	ldi	r25, 0x00	; 0
    3e74:	02 2e       	mov	r0, r18
    3e76:	02 c0       	rjmp	.+4      	; 0x3e7c <DIO_vSetPinDir+0x1e4>
    3e78:	88 0f       	add	r24, r24
    3e7a:	99 1f       	adc	r25, r25
    3e7c:	0a 94       	dec	r0
    3e7e:	e2 f7       	brpl	.-8      	; 0x3e78 <DIO_vSetPinDir+0x1e0>
    3e80:	80 95       	com	r24
    3e82:	84 23       	and	r24, r20
    3e84:	8c 93       	st	X, r24
		}
	}
}
    3e86:	27 96       	adiw	r28, 0x07	; 7
    3e88:	0f b6       	in	r0, 0x3f	; 63
    3e8a:	f8 94       	cli
    3e8c:	de bf       	out	0x3e, r29	; 62
    3e8e:	0f be       	out	0x3f, r0	; 63
    3e90:	cd bf       	out	0x3d, r28	; 61
    3e92:	cf 91       	pop	r28
    3e94:	df 91       	pop	r29
    3e96:	08 95       	ret

00003e98 <DIO_InitCertainPort>:
void DIO_InitCertainPort(u8 PORT)
{
    3e98:	df 93       	push	r29
    3e9a:	cf 93       	push	r28
    3e9c:	0f 92       	push	r0
    3e9e:	cd b7       	in	r28, 0x3d	; 61
    3ea0:	de b7       	in	r29, 0x3e	; 62
    3ea2:	89 83       	std	Y+1, r24	; 0x01
	if(PORT == ODRA){
    3ea4:	eb e3       	ldi	r30, 0x3B	; 59
    3ea6:	f0 e0       	ldi	r31, 0x00	; 0
    3ea8:	90 81       	ld	r25, Z
    3eaa:	89 81       	ldd	r24, Y+1	; 0x01
    3eac:	98 17       	cp	r25, r24
    3eae:	29 f4       	brne	.+10     	; 0x3eba <DIO_InitCertainPort+0x22>
		DDRA = CONC(DIO_PIN_DIR_7 ,DIO_PIN_DIR_6 ,DIO_PIN_DIR_5 ,DIO_PIN_DIR_4 ,DIO_PIN_DIR_3 ,DIO_PIN_DIR_2 ,DIO_PIN_DIR_1 ,DIO_PIN_DIR_0 );
    3eb0:	ea e3       	ldi	r30, 0x3A	; 58
    3eb2:	f0 e0       	ldi	r31, 0x00	; 0
    3eb4:	8f ee       	ldi	r24, 0xEF	; 239
    3eb6:	80 83       	st	Z, r24
    3eb8:	20 c0       	rjmp	.+64     	; 0x3efa <DIO_InitCertainPort+0x62>
	}else if(PORT == ODRB){
    3eba:	e8 e3       	ldi	r30, 0x38	; 56
    3ebc:	f0 e0       	ldi	r31, 0x00	; 0
    3ebe:	90 81       	ld	r25, Z
    3ec0:	89 81       	ldd	r24, Y+1	; 0x01
    3ec2:	98 17       	cp	r25, r24
    3ec4:	29 f4       	brne	.+10     	; 0x3ed0 <DIO_InitCertainPort+0x38>
		DDRB = CONC(DIO_PIN_DIR_15,DIO_PIN_DIR_14,DIO_PIN_DIR_13,DIO_PIN_DIR_12,DIO_PIN_DIR_11,DIO_PIN_DIR_10,DIO_PIN_DIR_9 ,DIO_PIN_DIR_8 );
    3ec6:	e7 e3       	ldi	r30, 0x37	; 55
    3ec8:	f0 e0       	ldi	r31, 0x00	; 0
    3eca:	8f ef       	ldi	r24, 0xFF	; 255
    3ecc:	80 83       	st	Z, r24
    3ece:	15 c0       	rjmp	.+42     	; 0x3efa <DIO_InitCertainPort+0x62>
	}else if(PORT == ODRC){
    3ed0:	e5 e3       	ldi	r30, 0x35	; 53
    3ed2:	f0 e0       	ldi	r31, 0x00	; 0
    3ed4:	90 81       	ld	r25, Z
    3ed6:	89 81       	ldd	r24, Y+1	; 0x01
    3ed8:	98 17       	cp	r25, r24
    3eda:	29 f4       	brne	.+10     	; 0x3ee6 <DIO_InitCertainPort+0x4e>
		DDRC = CONC(DIO_PIN_DIR_23,DIO_PIN_DIR_22,DIO_PIN_DIR_21,DIO_PIN_DIR_20,DIO_PIN_DIR_19,DIO_PIN_DIR_18,DIO_PIN_DIR_17,DIO_PIN_DIR_16);
    3edc:	e4 e3       	ldi	r30, 0x34	; 52
    3ede:	f0 e0       	ldi	r31, 0x00	; 0
    3ee0:	8f ef       	ldi	r24, 0xFF	; 255
    3ee2:	80 83       	st	Z, r24
    3ee4:	0a c0       	rjmp	.+20     	; 0x3efa <DIO_InitCertainPort+0x62>
	}else if(PORT == ODRD){
    3ee6:	e2 e3       	ldi	r30, 0x32	; 50
    3ee8:	f0 e0       	ldi	r31, 0x00	; 0
    3eea:	90 81       	ld	r25, Z
    3eec:	89 81       	ldd	r24, Y+1	; 0x01
    3eee:	98 17       	cp	r25, r24
    3ef0:	21 f4       	brne	.+8      	; 0x3efa <DIO_InitCertainPort+0x62>
		DDRD = CONC(DIO_PIN_DIR_31,DIO_PIN_DIR_30,DIO_PIN_DIR_29,DIO_PIN_DIR_28,DIO_PIN_DIR_27,DIO_PIN_DIR_26,DIO_PIN_DIR_25,DIO_PIN_DIR_24);
    3ef2:	e1 e3       	ldi	r30, 0x31	; 49
    3ef4:	f0 e0       	ldi	r31, 0x00	; 0
    3ef6:	8f ef       	ldi	r24, 0xFF	; 255
    3ef8:	80 83       	st	Z, r24
	}
	return;
}
    3efa:	0f 90       	pop	r0
    3efc:	cf 91       	pop	r28
    3efe:	df 91       	pop	r29
    3f00:	08 95       	ret

00003f02 <DIO_enuWritePin>:



tenuErrorStatus DIO_enuWritePin(u8 u8PinNumCpy,u8 u8PinValueCpy)
{
    3f02:	df 93       	push	r29
    3f04:	cf 93       	push	r28
    3f06:	cd b7       	in	r28, 0x3d	; 61
    3f08:	de b7       	in	r29, 0x3e	; 62
    3f0a:	2b 97       	sbiw	r28, 0x0b	; 11
    3f0c:	0f b6       	in	r0, 0x3f	; 63
    3f0e:	f8 94       	cli
    3f10:	de bf       	out	0x3e, r29	; 62
    3f12:	0f be       	out	0x3f, r0	; 63
    3f14:	cd bf       	out	0x3d, r28	; 61
    3f16:	8a 83       	std	Y+2, r24	; 0x02
    3f18:	6b 83       	std	Y+3, r22	; 0x03

	tenuErrorStatus enuReturnStateLoc = EOK;
    3f1a:	19 82       	std	Y+1, r1	; 0x01
	if (u8PinNumCpy >= DIO_PIN_NUM_0 && u8PinNumCpy <= DIO_PIN_NUM_7)
    3f1c:	8a 81       	ldd	r24, Y+2	; 0x02
    3f1e:	88 30       	cpi	r24, 0x08	; 8
    3f20:	d8 f5       	brcc	.+118    	; 0x3f98 <DIO_enuWritePin+0x96>
	{
		switch (u8PinValueCpy)
    3f22:	8b 81       	ldd	r24, Y+3	; 0x03
    3f24:	28 2f       	mov	r18, r24
    3f26:	30 e0       	ldi	r19, 0x00	; 0
    3f28:	3b 87       	std	Y+11, r19	; 0x0b
    3f2a:	2a 87       	std	Y+10, r18	; 0x0a
    3f2c:	8a 85       	ldd	r24, Y+10	; 0x0a
    3f2e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3f30:	00 97       	sbiw	r24, 0x00	; 0
    3f32:	31 f0       	breq	.+12     	; 0x3f40 <DIO_enuWritePin+0x3e>
    3f34:	2a 85       	ldd	r18, Y+10	; 0x0a
    3f36:	3b 85       	ldd	r19, Y+11	; 0x0b
    3f38:	21 30       	cpi	r18, 0x01	; 1
    3f3a:	31 05       	cpc	r19, r1
    3f3c:	b1 f0       	breq	.+44     	; 0x3f6a <DIO_enuWritePin+0x68>
    3f3e:	29 c0       	rjmp	.+82     	; 0x3f92 <DIO_enuWritePin+0x90>
		{
			case DIO_LOW :
			 CLR_BIT (ODRA ,  u8PinNumCpy);
    3f40:	ab e3       	ldi	r26, 0x3B	; 59
    3f42:	b0 e0       	ldi	r27, 0x00	; 0
    3f44:	eb e3       	ldi	r30, 0x3B	; 59
    3f46:	f0 e0       	ldi	r31, 0x00	; 0
    3f48:	80 81       	ld	r24, Z
    3f4a:	48 2f       	mov	r20, r24
    3f4c:	8a 81       	ldd	r24, Y+2	; 0x02
    3f4e:	28 2f       	mov	r18, r24
    3f50:	30 e0       	ldi	r19, 0x00	; 0
    3f52:	81 e0       	ldi	r24, 0x01	; 1
    3f54:	90 e0       	ldi	r25, 0x00	; 0
    3f56:	02 2e       	mov	r0, r18
    3f58:	02 c0       	rjmp	.+4      	; 0x3f5e <DIO_enuWritePin+0x5c>
    3f5a:	88 0f       	add	r24, r24
    3f5c:	99 1f       	adc	r25, r25
    3f5e:	0a 94       	dec	r0
    3f60:	e2 f7       	brpl	.-8      	; 0x3f5a <DIO_enuWritePin+0x58>
    3f62:	80 95       	com	r24
    3f64:	84 23       	and	r24, r20
    3f66:	8c 93       	st	X, r24
    3f68:	f8 c0       	rjmp	.+496    	; 0x415a <DIO_enuWritePin+0x258>
			break;
			case DIO_HIGH :
			 SET_BIT(ODRA , u8PinNumCpy);
    3f6a:	ab e3       	ldi	r26, 0x3B	; 59
    3f6c:	b0 e0       	ldi	r27, 0x00	; 0
    3f6e:	eb e3       	ldi	r30, 0x3B	; 59
    3f70:	f0 e0       	ldi	r31, 0x00	; 0
    3f72:	80 81       	ld	r24, Z
    3f74:	48 2f       	mov	r20, r24
    3f76:	8a 81       	ldd	r24, Y+2	; 0x02
    3f78:	28 2f       	mov	r18, r24
    3f7a:	30 e0       	ldi	r19, 0x00	; 0
    3f7c:	81 e0       	ldi	r24, 0x01	; 1
    3f7e:	90 e0       	ldi	r25, 0x00	; 0
    3f80:	02 2e       	mov	r0, r18
    3f82:	02 c0       	rjmp	.+4      	; 0x3f88 <DIO_enuWritePin+0x86>
    3f84:	88 0f       	add	r24, r24
    3f86:	99 1f       	adc	r25, r25
    3f88:	0a 94       	dec	r0
    3f8a:	e2 f7       	brpl	.-8      	; 0x3f84 <DIO_enuWritePin+0x82>
    3f8c:	84 2b       	or	r24, r20
    3f8e:	8c 93       	st	X, r24
    3f90:	e4 c0       	rjmp	.+456    	; 0x415a <DIO_enuWritePin+0x258>
			break ;
			default :
			enuReturnStateLoc = PARAM_OUT_RANGE ;
    3f92:	81 e0       	ldi	r24, 0x01	; 1
    3f94:	89 83       	std	Y+1, r24	; 0x01
    3f96:	e1 c0       	rjmp	.+450    	; 0x415a <DIO_enuWritePin+0x258>
		}
	}
	else if (u8PinNumCpy >= DIO_PIN_NUM_8 && u8PinNumCpy <= DIO_PIN_NUM_15)
    3f98:	8a 81       	ldd	r24, Y+2	; 0x02
    3f9a:	88 30       	cpi	r24, 0x08	; 8
    3f9c:	08 f4       	brcc	.+2      	; 0x3fa0 <DIO_enuWritePin+0x9e>
    3f9e:	45 c0       	rjmp	.+138    	; 0x402a <DIO_enuWritePin+0x128>
    3fa0:	8a 81       	ldd	r24, Y+2	; 0x02
    3fa2:	80 31       	cpi	r24, 0x10	; 16
    3fa4:	08 f0       	brcs	.+2      	; 0x3fa8 <DIO_enuWritePin+0xa6>
    3fa6:	41 c0       	rjmp	.+130    	; 0x402a <DIO_enuWritePin+0x128>
	{
		switch (u8PinValueCpy)
    3fa8:	8b 81       	ldd	r24, Y+3	; 0x03
    3faa:	28 2f       	mov	r18, r24
    3fac:	30 e0       	ldi	r19, 0x00	; 0
    3fae:	39 87       	std	Y+9, r19	; 0x09
    3fb0:	28 87       	std	Y+8, r18	; 0x08
    3fb2:	88 85       	ldd	r24, Y+8	; 0x08
    3fb4:	99 85       	ldd	r25, Y+9	; 0x09
    3fb6:	00 97       	sbiw	r24, 0x00	; 0
    3fb8:	31 f0       	breq	.+12     	; 0x3fc6 <DIO_enuWritePin+0xc4>
    3fba:	28 85       	ldd	r18, Y+8	; 0x08
    3fbc:	39 85       	ldd	r19, Y+9	; 0x09
    3fbe:	21 30       	cpi	r18, 0x01	; 1
    3fc0:	31 05       	cpc	r19, r1
    3fc2:	c9 f0       	breq	.+50     	; 0x3ff6 <DIO_enuWritePin+0xf4>
    3fc4:	2f c0       	rjmp	.+94     	; 0x4024 <DIO_enuWritePin+0x122>
		{
			case DIO_LOW :
			 CLR_BIT (ODRB ,  u8PinNumCpy%8); //0 1 2 3 4 5 6 7 => 8%8 = 0, 9%8 = 1, 10%8 = 2, 11%8 = 3, 12%8 = 4, 13%8 = 5, 14%8 = 6, 15%8 = 7
    3fc6:	a8 e3       	ldi	r26, 0x38	; 56
    3fc8:	b0 e0       	ldi	r27, 0x00	; 0
    3fca:	e8 e3       	ldi	r30, 0x38	; 56
    3fcc:	f0 e0       	ldi	r31, 0x00	; 0
    3fce:	80 81       	ld	r24, Z
    3fd0:	48 2f       	mov	r20, r24
    3fd2:	8a 81       	ldd	r24, Y+2	; 0x02
    3fd4:	88 2f       	mov	r24, r24
    3fd6:	90 e0       	ldi	r25, 0x00	; 0
    3fd8:	9c 01       	movw	r18, r24
    3fda:	27 70       	andi	r18, 0x07	; 7
    3fdc:	30 70       	andi	r19, 0x00	; 0
    3fde:	81 e0       	ldi	r24, 0x01	; 1
    3fe0:	90 e0       	ldi	r25, 0x00	; 0
    3fe2:	02 2e       	mov	r0, r18
    3fe4:	02 c0       	rjmp	.+4      	; 0x3fea <DIO_enuWritePin+0xe8>
    3fe6:	88 0f       	add	r24, r24
    3fe8:	99 1f       	adc	r25, r25
    3fea:	0a 94       	dec	r0
    3fec:	e2 f7       	brpl	.-8      	; 0x3fe6 <DIO_enuWritePin+0xe4>
    3fee:	80 95       	com	r24
    3ff0:	84 23       	and	r24, r20
    3ff2:	8c 93       	st	X, r24
    3ff4:	b2 c0       	rjmp	.+356    	; 0x415a <DIO_enuWritePin+0x258>
			break;
			case DIO_HIGH :
			 SET_BIT(ODRB , u8PinNumCpy%8);
    3ff6:	a8 e3       	ldi	r26, 0x38	; 56
    3ff8:	b0 e0       	ldi	r27, 0x00	; 0
    3ffa:	e8 e3       	ldi	r30, 0x38	; 56
    3ffc:	f0 e0       	ldi	r31, 0x00	; 0
    3ffe:	80 81       	ld	r24, Z
    4000:	48 2f       	mov	r20, r24
    4002:	8a 81       	ldd	r24, Y+2	; 0x02
    4004:	88 2f       	mov	r24, r24
    4006:	90 e0       	ldi	r25, 0x00	; 0
    4008:	9c 01       	movw	r18, r24
    400a:	27 70       	andi	r18, 0x07	; 7
    400c:	30 70       	andi	r19, 0x00	; 0
    400e:	81 e0       	ldi	r24, 0x01	; 1
    4010:	90 e0       	ldi	r25, 0x00	; 0
    4012:	02 2e       	mov	r0, r18
    4014:	02 c0       	rjmp	.+4      	; 0x401a <DIO_enuWritePin+0x118>
    4016:	88 0f       	add	r24, r24
    4018:	99 1f       	adc	r25, r25
    401a:	0a 94       	dec	r0
    401c:	e2 f7       	brpl	.-8      	; 0x4016 <DIO_enuWritePin+0x114>
    401e:	84 2b       	or	r24, r20
    4020:	8c 93       	st	X, r24
    4022:	9b c0       	rjmp	.+310    	; 0x415a <DIO_enuWritePin+0x258>
			break ;
			default :
			enuReturnStateLoc = PARAM_OUT_RANGE ;
    4024:	81 e0       	ldi	r24, 0x01	; 1
    4026:	89 83       	std	Y+1, r24	; 0x01
    4028:	98 c0       	rjmp	.+304    	; 0x415a <DIO_enuWritePin+0x258>
		}
	}
	else if (u8PinNumCpy >= DIO_PIN_NUM_16 && u8PinNumCpy <= DIO_PIN_NUM_23)
    402a:	8a 81       	ldd	r24, Y+2	; 0x02
    402c:	80 31       	cpi	r24, 0x10	; 16
    402e:	08 f4       	brcc	.+2      	; 0x4032 <DIO_enuWritePin+0x130>
    4030:	45 c0       	rjmp	.+138    	; 0x40bc <DIO_enuWritePin+0x1ba>
    4032:	8a 81       	ldd	r24, Y+2	; 0x02
    4034:	88 31       	cpi	r24, 0x18	; 24
    4036:	08 f0       	brcs	.+2      	; 0x403a <DIO_enuWritePin+0x138>
    4038:	41 c0       	rjmp	.+130    	; 0x40bc <DIO_enuWritePin+0x1ba>
	{
		switch (u8PinValueCpy)
    403a:	8b 81       	ldd	r24, Y+3	; 0x03
    403c:	28 2f       	mov	r18, r24
    403e:	30 e0       	ldi	r19, 0x00	; 0
    4040:	3f 83       	std	Y+7, r19	; 0x07
    4042:	2e 83       	std	Y+6, r18	; 0x06
    4044:	8e 81       	ldd	r24, Y+6	; 0x06
    4046:	9f 81       	ldd	r25, Y+7	; 0x07
    4048:	00 97       	sbiw	r24, 0x00	; 0
    404a:	31 f0       	breq	.+12     	; 0x4058 <DIO_enuWritePin+0x156>
    404c:	2e 81       	ldd	r18, Y+6	; 0x06
    404e:	3f 81       	ldd	r19, Y+7	; 0x07
    4050:	21 30       	cpi	r18, 0x01	; 1
    4052:	31 05       	cpc	r19, r1
    4054:	c9 f0       	breq	.+50     	; 0x4088 <DIO_enuWritePin+0x186>
    4056:	2f c0       	rjmp	.+94     	; 0x40b6 <DIO_enuWritePin+0x1b4>
		{
			case DIO_LOW :
			 CLR_BIT (ODRC ,  u8PinNumCpy%16);
    4058:	a5 e3       	ldi	r26, 0x35	; 53
    405a:	b0 e0       	ldi	r27, 0x00	; 0
    405c:	e5 e3       	ldi	r30, 0x35	; 53
    405e:	f0 e0       	ldi	r31, 0x00	; 0
    4060:	80 81       	ld	r24, Z
    4062:	48 2f       	mov	r20, r24
    4064:	8a 81       	ldd	r24, Y+2	; 0x02
    4066:	88 2f       	mov	r24, r24
    4068:	90 e0       	ldi	r25, 0x00	; 0
    406a:	9c 01       	movw	r18, r24
    406c:	2f 70       	andi	r18, 0x0F	; 15
    406e:	30 70       	andi	r19, 0x00	; 0
    4070:	81 e0       	ldi	r24, 0x01	; 1
    4072:	90 e0       	ldi	r25, 0x00	; 0
    4074:	02 2e       	mov	r0, r18
    4076:	02 c0       	rjmp	.+4      	; 0x407c <DIO_enuWritePin+0x17a>
    4078:	88 0f       	add	r24, r24
    407a:	99 1f       	adc	r25, r25
    407c:	0a 94       	dec	r0
    407e:	e2 f7       	brpl	.-8      	; 0x4078 <DIO_enuWritePin+0x176>
    4080:	80 95       	com	r24
    4082:	84 23       	and	r24, r20
    4084:	8c 93       	st	X, r24
    4086:	69 c0       	rjmp	.+210    	; 0x415a <DIO_enuWritePin+0x258>
			break;
			case DIO_HIGH :
			 SET_BIT(ODRC , u8PinNumCpy%16);
    4088:	a5 e3       	ldi	r26, 0x35	; 53
    408a:	b0 e0       	ldi	r27, 0x00	; 0
    408c:	e5 e3       	ldi	r30, 0x35	; 53
    408e:	f0 e0       	ldi	r31, 0x00	; 0
    4090:	80 81       	ld	r24, Z
    4092:	48 2f       	mov	r20, r24
    4094:	8a 81       	ldd	r24, Y+2	; 0x02
    4096:	88 2f       	mov	r24, r24
    4098:	90 e0       	ldi	r25, 0x00	; 0
    409a:	9c 01       	movw	r18, r24
    409c:	2f 70       	andi	r18, 0x0F	; 15
    409e:	30 70       	andi	r19, 0x00	; 0
    40a0:	81 e0       	ldi	r24, 0x01	; 1
    40a2:	90 e0       	ldi	r25, 0x00	; 0
    40a4:	02 2e       	mov	r0, r18
    40a6:	02 c0       	rjmp	.+4      	; 0x40ac <DIO_enuWritePin+0x1aa>
    40a8:	88 0f       	add	r24, r24
    40aa:	99 1f       	adc	r25, r25
    40ac:	0a 94       	dec	r0
    40ae:	e2 f7       	brpl	.-8      	; 0x40a8 <DIO_enuWritePin+0x1a6>
    40b0:	84 2b       	or	r24, r20
    40b2:	8c 93       	st	X, r24
    40b4:	52 c0       	rjmp	.+164    	; 0x415a <DIO_enuWritePin+0x258>
			break ;
			default :
			enuReturnStateLoc = PARAM_OUT_RANGE ;
    40b6:	81 e0       	ldi	r24, 0x01	; 1
    40b8:	89 83       	std	Y+1, r24	; 0x01
    40ba:	4f c0       	rjmp	.+158    	; 0x415a <DIO_enuWritePin+0x258>
		}
	}
	else if (u8PinNumCpy >= DIO_PIN_NUM_24 && u8PinNumCpy <= DIO_PIN_NUM_31)
    40bc:	8a 81       	ldd	r24, Y+2	; 0x02
    40be:	88 31       	cpi	r24, 0x18	; 24
    40c0:	08 f4       	brcc	.+2      	; 0x40c4 <DIO_enuWritePin+0x1c2>
    40c2:	49 c0       	rjmp	.+146    	; 0x4156 <DIO_enuWritePin+0x254>
    40c4:	8a 81       	ldd	r24, Y+2	; 0x02
    40c6:	80 32       	cpi	r24, 0x20	; 32
    40c8:	08 f0       	brcs	.+2      	; 0x40cc <DIO_enuWritePin+0x1ca>
    40ca:	45 c0       	rjmp	.+138    	; 0x4156 <DIO_enuWritePin+0x254>
	{
		switch (u8PinValueCpy)
    40cc:	8b 81       	ldd	r24, Y+3	; 0x03
    40ce:	28 2f       	mov	r18, r24
    40d0:	30 e0       	ldi	r19, 0x00	; 0
    40d2:	3d 83       	std	Y+5, r19	; 0x05
    40d4:	2c 83       	std	Y+4, r18	; 0x04
    40d6:	8c 81       	ldd	r24, Y+4	; 0x04
    40d8:	9d 81       	ldd	r25, Y+5	; 0x05
    40da:	00 97       	sbiw	r24, 0x00	; 0
    40dc:	31 f0       	breq	.+12     	; 0x40ea <DIO_enuWritePin+0x1e8>
    40de:	2c 81       	ldd	r18, Y+4	; 0x04
    40e0:	3d 81       	ldd	r19, Y+5	; 0x05
    40e2:	21 30       	cpi	r18, 0x01	; 1
    40e4:	31 05       	cpc	r19, r1
    40e6:	d9 f0       	breq	.+54     	; 0x411e <DIO_enuWritePin+0x21c>
    40e8:	33 c0       	rjmp	.+102    	; 0x4150 <DIO_enuWritePin+0x24e>
		{
			case DIO_LOW :
			 CLR_BIT (ODRD ,  u8PinNumCpy%24);
    40ea:	a2 e3       	ldi	r26, 0x32	; 50
    40ec:	b0 e0       	ldi	r27, 0x00	; 0
    40ee:	e2 e3       	ldi	r30, 0x32	; 50
    40f0:	f0 e0       	ldi	r31, 0x00	; 0
    40f2:	80 81       	ld	r24, Z
    40f4:	48 2f       	mov	r20, r24
    40f6:	8a 81       	ldd	r24, Y+2	; 0x02
    40f8:	98 e1       	ldi	r25, 0x18	; 24
    40fa:	69 2f       	mov	r22, r25
    40fc:	0e 94 1f 32 	call	0x643e	; 0x643e <__udivmodqi4>
    4100:	89 2f       	mov	r24, r25
    4102:	28 2f       	mov	r18, r24
    4104:	30 e0       	ldi	r19, 0x00	; 0
    4106:	81 e0       	ldi	r24, 0x01	; 1
    4108:	90 e0       	ldi	r25, 0x00	; 0
    410a:	02 2e       	mov	r0, r18
    410c:	02 c0       	rjmp	.+4      	; 0x4112 <DIO_enuWritePin+0x210>
    410e:	88 0f       	add	r24, r24
    4110:	99 1f       	adc	r25, r25
    4112:	0a 94       	dec	r0
    4114:	e2 f7       	brpl	.-8      	; 0x410e <DIO_enuWritePin+0x20c>
    4116:	80 95       	com	r24
    4118:	84 23       	and	r24, r20
    411a:	8c 93       	st	X, r24
    411c:	1e c0       	rjmp	.+60     	; 0x415a <DIO_enuWritePin+0x258>
			break;
			case DIO_HIGH :
			 SET_BIT(ODRD , u8PinNumCpy%24);
    411e:	a2 e3       	ldi	r26, 0x32	; 50
    4120:	b0 e0       	ldi	r27, 0x00	; 0
    4122:	e2 e3       	ldi	r30, 0x32	; 50
    4124:	f0 e0       	ldi	r31, 0x00	; 0
    4126:	80 81       	ld	r24, Z
    4128:	48 2f       	mov	r20, r24
    412a:	8a 81       	ldd	r24, Y+2	; 0x02
    412c:	98 e1       	ldi	r25, 0x18	; 24
    412e:	69 2f       	mov	r22, r25
    4130:	0e 94 1f 32 	call	0x643e	; 0x643e <__udivmodqi4>
    4134:	89 2f       	mov	r24, r25
    4136:	28 2f       	mov	r18, r24
    4138:	30 e0       	ldi	r19, 0x00	; 0
    413a:	81 e0       	ldi	r24, 0x01	; 1
    413c:	90 e0       	ldi	r25, 0x00	; 0
    413e:	02 2e       	mov	r0, r18
    4140:	02 c0       	rjmp	.+4      	; 0x4146 <DIO_enuWritePin+0x244>
    4142:	88 0f       	add	r24, r24
    4144:	99 1f       	adc	r25, r25
    4146:	0a 94       	dec	r0
    4148:	e2 f7       	brpl	.-8      	; 0x4142 <DIO_enuWritePin+0x240>
    414a:	84 2b       	or	r24, r20
    414c:	8c 93       	st	X, r24
    414e:	05 c0       	rjmp	.+10     	; 0x415a <DIO_enuWritePin+0x258>
			break ;
			default :
			enuReturnStateLoc = PARAM_OUT_RANGE ;
    4150:	81 e0       	ldi	r24, 0x01	; 1
    4152:	89 83       	std	Y+1, r24	; 0x01
    4154:	02 c0       	rjmp	.+4      	; 0x415a <DIO_enuWritePin+0x258>
		}
	}
	else
	{
		enuReturnStateLoc = PARAM_OUT_RANGE ;
    4156:	81 e0       	ldi	r24, 0x01	; 1
    4158:	89 83       	std	Y+1, r24	; 0x01
	}

	return enuReturnStateLoc ;
    415a:	89 81       	ldd	r24, Y+1	; 0x01

}
    415c:	2b 96       	adiw	r28, 0x0b	; 11
    415e:	0f b6       	in	r0, 0x3f	; 63
    4160:	f8 94       	cli
    4162:	de bf       	out	0x3e, r29	; 62
    4164:	0f be       	out	0x3f, r0	; 63
    4166:	cd bf       	out	0x3d, r28	; 61
    4168:	cf 91       	pop	r28
    416a:	df 91       	pop	r29
    416c:	08 95       	ret

0000416e <DIO_enuReadPin>:
//#define GET_BIT(byte,pos) ( (byte >> pos) & 1 )
//4 => 0100 
//GET_BIT(4, 1)     0100 >> 1 = 00010 & 0001 = 0

tenuErrorStatus DIO_enuReadPin(u8 u8PinNumCpy ,u8 *pu8PinValueCpy )
{
    416e:	df 93       	push	r29
    4170:	cf 93       	push	r28
    4172:	00 d0       	rcall	.+0      	; 0x4174 <DIO_enuReadPin+0x6>
    4174:	00 d0       	rcall	.+0      	; 0x4176 <DIO_enuReadPin+0x8>
    4176:	cd b7       	in	r28, 0x3d	; 61
    4178:	de b7       	in	r29, 0x3e	; 62
    417a:	8a 83       	std	Y+2, r24	; 0x02
    417c:	7c 83       	std	Y+4, r23	; 0x04
    417e:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus  enuReturnStateLoc = EOK;
    4180:	19 82       	std	Y+1, r1	; 0x01

	if (pu8PinValueCpy != NULL_PTR)
    4182:	8b 81       	ldd	r24, Y+3	; 0x03
    4184:	9c 81       	ldd	r25, Y+4	; 0x04
    4186:	00 97       	sbiw	r24, 0x00	; 0
    4188:	09 f4       	brne	.+2      	; 0x418c <DIO_enuReadPin+0x1e>
    418a:	71 c0       	rjmp	.+226    	; 0x426e <DIO_enuReadPin+0x100>
	{
		//IDR
		if (u8PinNumCpy >= DIO_PIN_NUM_0 && u8PinNumCpy <= DIO_PIN_NUM_7)
    418c:	8a 81       	ldd	r24, Y+2	; 0x02
    418e:	88 30       	cpi	r24, 0x08	; 8
    4190:	a0 f4       	brcc	.+40     	; 0x41ba <DIO_enuReadPin+0x4c>
		{
			*pu8PinValueCpy  = GET_BIT(IDRA , u8PinNumCpy);
    4192:	e9 e3       	ldi	r30, 0x39	; 57
    4194:	f0 e0       	ldi	r31, 0x00	; 0
    4196:	80 81       	ld	r24, Z
    4198:	28 2f       	mov	r18, r24
    419a:	30 e0       	ldi	r19, 0x00	; 0
    419c:	8a 81       	ldd	r24, Y+2	; 0x02
    419e:	88 2f       	mov	r24, r24
    41a0:	90 e0       	ldi	r25, 0x00	; 0
    41a2:	a9 01       	movw	r20, r18
    41a4:	02 c0       	rjmp	.+4      	; 0x41aa <DIO_enuReadPin+0x3c>
    41a6:	55 95       	asr	r21
    41a8:	47 95       	ror	r20
    41aa:	8a 95       	dec	r24
    41ac:	e2 f7       	brpl	.-8      	; 0x41a6 <DIO_enuReadPin+0x38>
    41ae:	ca 01       	movw	r24, r20
    41b0:	81 70       	andi	r24, 0x01	; 1
    41b2:	eb 81       	ldd	r30, Y+3	; 0x03
    41b4:	fc 81       	ldd	r31, Y+4	; 0x04
    41b6:	80 83       	st	Z, r24
    41b8:	5c c0       	rjmp	.+184    	; 0x4272 <DIO_enuReadPin+0x104>
		}
		else if (u8PinNumCpy >= DIO_PIN_NUM_8 && u8PinNumCpy <= DIO_PIN_NUM_15)
    41ba:	8a 81       	ldd	r24, Y+2	; 0x02
    41bc:	88 30       	cpi	r24, 0x08	; 8
    41be:	c8 f0       	brcs	.+50     	; 0x41f2 <DIO_enuReadPin+0x84>
    41c0:	8a 81       	ldd	r24, Y+2	; 0x02
    41c2:	80 31       	cpi	r24, 0x10	; 16
    41c4:	b0 f4       	brcc	.+44     	; 0x41f2 <DIO_enuReadPin+0x84>
		{
			*pu8PinValueCpy  = GET_BIT(IDRB , u8PinNumCpy%8);
    41c6:	e6 e3       	ldi	r30, 0x36	; 54
    41c8:	f0 e0       	ldi	r31, 0x00	; 0
    41ca:	80 81       	ld	r24, Z
    41cc:	28 2f       	mov	r18, r24
    41ce:	30 e0       	ldi	r19, 0x00	; 0
    41d0:	8a 81       	ldd	r24, Y+2	; 0x02
    41d2:	88 2f       	mov	r24, r24
    41d4:	90 e0       	ldi	r25, 0x00	; 0
    41d6:	87 70       	andi	r24, 0x07	; 7
    41d8:	90 70       	andi	r25, 0x00	; 0
    41da:	a9 01       	movw	r20, r18
    41dc:	02 c0       	rjmp	.+4      	; 0x41e2 <DIO_enuReadPin+0x74>
    41de:	55 95       	asr	r21
    41e0:	47 95       	ror	r20
    41e2:	8a 95       	dec	r24
    41e4:	e2 f7       	brpl	.-8      	; 0x41de <DIO_enuReadPin+0x70>
    41e6:	ca 01       	movw	r24, r20
    41e8:	81 70       	andi	r24, 0x01	; 1
    41ea:	eb 81       	ldd	r30, Y+3	; 0x03
    41ec:	fc 81       	ldd	r31, Y+4	; 0x04
    41ee:	80 83       	st	Z, r24
    41f0:	40 c0       	rjmp	.+128    	; 0x4272 <DIO_enuReadPin+0x104>
		}
		else if (u8PinNumCpy >= DIO_PIN_NUM_16 && u8PinNumCpy <= DIO_PIN_NUM_23)
    41f2:	8a 81       	ldd	r24, Y+2	; 0x02
    41f4:	80 31       	cpi	r24, 0x10	; 16
    41f6:	c8 f0       	brcs	.+50     	; 0x422a <DIO_enuReadPin+0xbc>
    41f8:	8a 81       	ldd	r24, Y+2	; 0x02
    41fa:	88 31       	cpi	r24, 0x18	; 24
    41fc:	b0 f4       	brcc	.+44     	; 0x422a <DIO_enuReadPin+0xbc>
		{
			*pu8PinValueCpy  = GET_BIT(IDRC , u8PinNumCpy%16);
    41fe:	e3 e3       	ldi	r30, 0x33	; 51
    4200:	f0 e0       	ldi	r31, 0x00	; 0
    4202:	80 81       	ld	r24, Z
    4204:	28 2f       	mov	r18, r24
    4206:	30 e0       	ldi	r19, 0x00	; 0
    4208:	8a 81       	ldd	r24, Y+2	; 0x02
    420a:	88 2f       	mov	r24, r24
    420c:	90 e0       	ldi	r25, 0x00	; 0
    420e:	8f 70       	andi	r24, 0x0F	; 15
    4210:	90 70       	andi	r25, 0x00	; 0
    4212:	a9 01       	movw	r20, r18
    4214:	02 c0       	rjmp	.+4      	; 0x421a <DIO_enuReadPin+0xac>
    4216:	55 95       	asr	r21
    4218:	47 95       	ror	r20
    421a:	8a 95       	dec	r24
    421c:	e2 f7       	brpl	.-8      	; 0x4216 <DIO_enuReadPin+0xa8>
    421e:	ca 01       	movw	r24, r20
    4220:	81 70       	andi	r24, 0x01	; 1
    4222:	eb 81       	ldd	r30, Y+3	; 0x03
    4224:	fc 81       	ldd	r31, Y+4	; 0x04
    4226:	80 83       	st	Z, r24
    4228:	24 c0       	rjmp	.+72     	; 0x4272 <DIO_enuReadPin+0x104>
		}
		else if (u8PinNumCpy >= DIO_PIN_NUM_24 && u8PinNumCpy <= DIO_PIN_NUM_31)
    422a:	8a 81       	ldd	r24, Y+2	; 0x02
    422c:	88 31       	cpi	r24, 0x18	; 24
    422e:	e0 f0       	brcs	.+56     	; 0x4268 <DIO_enuReadPin+0xfa>
    4230:	8a 81       	ldd	r24, Y+2	; 0x02
    4232:	80 32       	cpi	r24, 0x20	; 32
    4234:	c8 f4       	brcc	.+50     	; 0x4268 <DIO_enuReadPin+0xfa>
		{
			*pu8PinValueCpy  = GET_BIT(IDRD , u8PinNumCpy%24);
    4236:	e0 e3       	ldi	r30, 0x30	; 48
    4238:	f0 e0       	ldi	r31, 0x00	; 0
    423a:	80 81       	ld	r24, Z
    423c:	28 2f       	mov	r18, r24
    423e:	30 e0       	ldi	r19, 0x00	; 0
    4240:	8a 81       	ldd	r24, Y+2	; 0x02
    4242:	98 e1       	ldi	r25, 0x18	; 24
    4244:	69 2f       	mov	r22, r25
    4246:	0e 94 1f 32 	call	0x643e	; 0x643e <__udivmodqi4>
    424a:	89 2f       	mov	r24, r25
    424c:	88 2f       	mov	r24, r24
    424e:	90 e0       	ldi	r25, 0x00	; 0
    4250:	a9 01       	movw	r20, r18
    4252:	02 c0       	rjmp	.+4      	; 0x4258 <DIO_enuReadPin+0xea>
    4254:	55 95       	asr	r21
    4256:	47 95       	ror	r20
    4258:	8a 95       	dec	r24
    425a:	e2 f7       	brpl	.-8      	; 0x4254 <DIO_enuReadPin+0xe6>
    425c:	ca 01       	movw	r24, r20
    425e:	81 70       	andi	r24, 0x01	; 1
    4260:	eb 81       	ldd	r30, Y+3	; 0x03
    4262:	fc 81       	ldd	r31, Y+4	; 0x04
    4264:	80 83       	st	Z, r24
    4266:	05 c0       	rjmp	.+10     	; 0x4272 <DIO_enuReadPin+0x104>
		}
		else
		{
			enuReturnStateLoc = PARAM_OUT_RANGE ;
    4268:	81 e0       	ldi	r24, 0x01	; 1
    426a:	89 83       	std	Y+1, r24	; 0x01
    426c:	02 c0       	rjmp	.+4      	; 0x4272 <DIO_enuReadPin+0x104>
		}
	}
	else
	{
		enuReturnStateLoc = PARAM_NULL_PTR ;
    426e:	82 e0       	ldi	r24, 0x02	; 2
    4270:	89 83       	std	Y+1, r24	; 0x01
	}

	return enuReturnStateLoc ;
    4272:	89 81       	ldd	r24, Y+1	; 0x01

}
    4274:	0f 90       	pop	r0
    4276:	0f 90       	pop	r0
    4278:	0f 90       	pop	r0
    427a:	0f 90       	pop	r0
    427c:	cf 91       	pop	r28
    427e:	df 91       	pop	r29
    4280:	08 95       	ret

00004282 <DIO_enuStatePullup>:

tenuErrorStatus DIO_enuStatePullup(u8 u8PinNumCpy, u8 u8StateCpy)
{
    4282:	df 93       	push	r29
    4284:	cf 93       	push	r28
    4286:	00 d0       	rcall	.+0      	; 0x4288 <DIO_enuStatePullup+0x6>
    4288:	cd b7       	in	r28, 0x3d	; 61
    428a:	de b7       	in	r29, 0x3e	; 62
    428c:	89 83       	std	Y+1, r24	; 0x01
    428e:	6a 83       	std	Y+2, r22	; 0x02
   return DIO_enuWritePin(u8PinNumCpy,u8StateCpy);
    4290:	89 81       	ldd	r24, Y+1	; 0x01
    4292:	6a 81       	ldd	r22, Y+2	; 0x02
    4294:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <DIO_enuWritePin>
}
    4298:	0f 90       	pop	r0
    429a:	0f 90       	pop	r0
    429c:	cf 91       	pop	r28
    429e:	df 91       	pop	r29
    42a0:	08 95       	ret

000042a2 <DIO_enuWriteGroup>:



tenuErrorStatus DIO_enuWriteGroup(u8 *pau8PinNumCpy,u8 * pau8PinValueCpy , u8 u8SizeCpy)
{
    42a2:	df 93       	push	r29
    42a4:	cf 93       	push	r28
    42a6:	cd b7       	in	r28, 0x3d	; 61
    42a8:	de b7       	in	r29, 0x3e	; 62
    42aa:	27 97       	sbiw	r28, 0x07	; 7
    42ac:	0f b6       	in	r0, 0x3f	; 63
    42ae:	f8 94       	cli
    42b0:	de bf       	out	0x3e, r29	; 62
    42b2:	0f be       	out	0x3f, r0	; 63
    42b4:	cd bf       	out	0x3d, r28	; 61
    42b6:	9c 83       	std	Y+4, r25	; 0x04
    42b8:	8b 83       	std	Y+3, r24	; 0x03
    42ba:	7e 83       	std	Y+6, r23	; 0x06
    42bc:	6d 83       	std	Y+5, r22	; 0x05
    42be:	4f 83       	std	Y+7, r20	; 0x07
	tenuErrorStatus enuReturnStateLoc = EOK;
    42c0:	1a 82       	std	Y+2, r1	; 0x02
	u8 u8CntrLoc;
	for (u8CntrLoc = 0 ; u8CntrLoc < u8SizeCpy ; u8CntrLoc++)
    42c2:	19 82       	std	Y+1, r1	; 0x01
    42c4:	1d c0       	rjmp	.+58     	; 0x4300 <DIO_enuWriteGroup+0x5e>
	{
		enuReturnStateLoc = DIO_enuWritePin(pau8PinNumCpy[u8CntrLoc],pau8PinValueCpy[u8CntrLoc]);
    42c6:	89 81       	ldd	r24, Y+1	; 0x01
    42c8:	28 2f       	mov	r18, r24
    42ca:	30 e0       	ldi	r19, 0x00	; 0
    42cc:	8b 81       	ldd	r24, Y+3	; 0x03
    42ce:	9c 81       	ldd	r25, Y+4	; 0x04
    42d0:	fc 01       	movw	r30, r24
    42d2:	e2 0f       	add	r30, r18
    42d4:	f3 1f       	adc	r31, r19
    42d6:	40 81       	ld	r20, Z
    42d8:	89 81       	ldd	r24, Y+1	; 0x01
    42da:	28 2f       	mov	r18, r24
    42dc:	30 e0       	ldi	r19, 0x00	; 0
    42de:	8d 81       	ldd	r24, Y+5	; 0x05
    42e0:	9e 81       	ldd	r25, Y+6	; 0x06
    42e2:	fc 01       	movw	r30, r24
    42e4:	e2 0f       	add	r30, r18
    42e6:	f3 1f       	adc	r31, r19
    42e8:	90 81       	ld	r25, Z
    42ea:	84 2f       	mov	r24, r20
    42ec:	69 2f       	mov	r22, r25
    42ee:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <DIO_enuWritePin>
    42f2:	8a 83       	std	Y+2, r24	; 0x02
		if (enuReturnStateLoc != EOK)
    42f4:	8a 81       	ldd	r24, Y+2	; 0x02
    42f6:	88 23       	and	r24, r24
    42f8:	39 f4       	brne	.+14     	; 0x4308 <DIO_enuWriteGroup+0x66>

tenuErrorStatus DIO_enuWriteGroup(u8 *pau8PinNumCpy,u8 * pau8PinValueCpy , u8 u8SizeCpy)
{
	tenuErrorStatus enuReturnStateLoc = EOK;
	u8 u8CntrLoc;
	for (u8CntrLoc = 0 ; u8CntrLoc < u8SizeCpy ; u8CntrLoc++)
    42fa:	89 81       	ldd	r24, Y+1	; 0x01
    42fc:	8f 5f       	subi	r24, 0xFF	; 255
    42fe:	89 83       	std	Y+1, r24	; 0x01
    4300:	99 81       	ldd	r25, Y+1	; 0x01
    4302:	8f 81       	ldd	r24, Y+7	; 0x07
    4304:	98 17       	cp	r25, r24
    4306:	f8 f2       	brcs	.-66     	; 0x42c6 <DIO_enuWriteGroup+0x24>
		if (enuReturnStateLoc != EOK)
		{
			break;
		}
	}
	return enuReturnStateLoc;
    4308:	8a 81       	ldd	r24, Y+2	; 0x02
}
    430a:	27 96       	adiw	r28, 0x07	; 7
    430c:	0f b6       	in	r0, 0x3f	; 63
    430e:	f8 94       	cli
    4310:	de bf       	out	0x3e, r29	; 62
    4312:	0f be       	out	0x3f, r0	; 63
    4314:	cd bf       	out	0x3d, r28	; 61
    4316:	cf 91       	pop	r28
    4318:	df 91       	pop	r29
    431a:	08 95       	ret

0000431c <Siren_vInit>:

void __vector_11(void) __attribute__((signal));
static PWM_cfg_t CURRENT_SIREN;
static enu_siren_state CURRENT_STATE;

void Siren_vInit(){
    431c:	df 93       	push	r29
    431e:	cf 93       	push	r28
    4320:	cd b7       	in	r28, 0x3d	; 61
    4322:	de b7       	in	r29, 0x3e	; 62
#if SIREN_TIMER == SIREN_TIMER0
	/* PWM0 implementation */

	CURRENT_SIREN.PWM_InvertOrNot = PWM_NonInvertingMode;
    4324:	81 e0       	ldi	r24, 0x01	; 1
    4326:	80 93 25 06 	sts	0x0625, r24
	CURRENT_SIREN.PWM_TimerChannel = TIMER0_FastPWM;
    432a:	81 e0       	ldi	r24, 0x01	; 1
    432c:	80 93 22 06 	sts	0x0622, r24
	CURRENT_SIREN.PWM_TimerPrescale = PRE_64;
    4330:	83 e0       	ldi	r24, 0x03	; 3
    4332:	80 93 23 06 	sts	0x0623, r24
	CURRENT_SIREN.PWM_ToggleMode = PWM_OCmode;
    4336:	10 92 24 06 	sts	0x0624, r1
	DIO_vSetPinDir(PORTB, DIO_PIN_NUM_3, DIO_OUTPUT);
    433a:	81 e0       	ldi	r24, 0x01	; 1
    433c:	63 e0       	ldi	r22, 0x03	; 3
    433e:	41 e0       	ldi	r20, 0x01	; 1
    4340:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <DIO_vSetPinDir>
	PWM_vInit(&CURRENT_SIREN);
    4344:	82 e2       	ldi	r24, 0x22	; 34
    4346:	96 e0       	ldi	r25, 0x06	; 6
    4348:	0e 94 5e 15 	call	0x2abc	; 0x2abc <PWM_vInit>
	TIMSK_REG = (1<<TOIE0);
    434c:	e9 e5       	ldi	r30, 0x59	; 89
    434e:	f0 e0       	ldi	r31, 0x00	; 0
    4350:	81 e0       	ldi	r24, 0x01	; 1
    4352:	80 83       	st	Z, r24
	GIE_Enable();
    4354:	0e 94 0e 1c 	call	0x381c	; 0x381c <GIE_Enable>
	CURRENT_STATE = siren_off;
    4358:	10 92 26 06 	sts	0x0626, r1

#elif SIREN_TIMER == SIREN_TIMER2
	/* PWM2 implementation */

#endif
}
    435c:	cf 91       	pop	r28
    435e:	df 91       	pop	r29
    4360:	08 95       	ret

00004362 <SIREN_vChangeSound>:

void SIREN_vChangeSound(u16 Copy_u16Frequency){
    4362:	0f 93       	push	r16
    4364:	1f 93       	push	r17
    4366:	df 93       	push	r29
    4368:	cf 93       	push	r28
    436a:	00 d0       	rcall	.+0      	; 0x436c <SIREN_vChangeSound+0xa>
    436c:	0f 92       	push	r0
    436e:	cd b7       	in	r28, 0x3d	; 61
    4370:	de b7       	in	r29, 0x3e	; 62
    4372:	9b 83       	std	Y+3, r25	; 0x03
    4374:	8a 83       	std	Y+2, r24	; 0x02
	u8 prescaler = 1;
    4376:	81 e0       	ldi	r24, 0x01	; 1
    4378:	89 83       	std	Y+1, r24	; 0x01
	if(siren_off == CURRENT_STATE){
    437a:	80 91 26 06 	lds	r24, 0x0626
    437e:	88 23       	and	r24, r24
    4380:	39 f4       	brne	.+14     	; 0x4390 <SIREN_vChangeSound+0x2e>
		PWM_vStart(&CURRENT_SIREN);
    4382:	82 e2       	ldi	r24, 0x22	; 34
    4384:	96 e0       	ldi	r25, 0x06	; 6
    4386:	0e 94 07 1a 	call	0x340e	; 0x340e <PWM_vStart>
		CURRENT_STATE = siren_on;
    438a:	81 e0       	ldi	r24, 0x01	; 1
    438c:	80 93 26 06 	sts	0x0626, r24
	}
#if SIREN_TIMER == SIREN_TIMER0
	OCR0_REG = (u16)(F_CPU / (2 * Copy_u16Frequency * prescaler)) - 1;
    4390:	0c e5       	ldi	r16, 0x5C	; 92
    4392:	10 e0       	ldi	r17, 0x00	; 0
    4394:	89 81       	ldd	r24, Y+1	; 0x01
    4396:	28 2f       	mov	r18, r24
    4398:	30 e0       	ldi	r19, 0x00	; 0
    439a:	8a 81       	ldd	r24, Y+2	; 0x02
    439c:	9b 81       	ldd	r25, Y+3	; 0x03
    439e:	ac 01       	movw	r20, r24
    43a0:	24 9f       	mul	r18, r20
    43a2:	c0 01       	movw	r24, r0
    43a4:	25 9f       	mul	r18, r21
    43a6:	90 0d       	add	r25, r0
    43a8:	34 9f       	mul	r19, r20
    43aa:	90 0d       	add	r25, r0
    43ac:	11 24       	eor	r1, r1
    43ae:	88 0f       	add	r24, r24
    43b0:	99 1f       	adc	r25, r25
    43b2:	9c 01       	movw	r18, r24
    43b4:	40 e0       	ldi	r20, 0x00	; 0
    43b6:	50 e0       	ldi	r21, 0x00	; 0
    43b8:	80 e0       	ldi	r24, 0x00	; 0
    43ba:	92 e1       	ldi	r25, 0x12	; 18
    43bc:	aa e7       	ldi	r26, 0x7A	; 122
    43be:	b0 e0       	ldi	r27, 0x00	; 0
    43c0:	bc 01       	movw	r22, r24
    43c2:	cd 01       	movw	r24, r26
    43c4:	0e 94 2b 32 	call	0x6456	; 0x6456 <__udivmodsi4>
    43c8:	da 01       	movw	r26, r20
    43ca:	c9 01       	movw	r24, r18
    43cc:	81 50       	subi	r24, 0x01	; 1
    43ce:	f8 01       	movw	r30, r16
    43d0:	80 83       	st	Z, r24

#elif SIREN_TIMER == SIREN_TIMER2
	/* PWM2 implementation */

#endif
}
    43d2:	0f 90       	pop	r0
    43d4:	0f 90       	pop	r0
    43d6:	0f 90       	pop	r0
    43d8:	cf 91       	pop	r28
    43da:	df 91       	pop	r29
    43dc:	1f 91       	pop	r17
    43de:	0f 91       	pop	r16
    43e0:	08 95       	ret

000043e2 <SIREN_vStop>:

void SIREN_vStop(){
    43e2:	df 93       	push	r29
    43e4:	cf 93       	push	r28
    43e6:	cd b7       	in	r28, 0x3d	; 61
    43e8:	de b7       	in	r29, 0x3e	; 62
#if SIREN_TIMER == SIREN_TIMER0
	PWM_vStop(&CURRENT_SIREN);
    43ea:	82 e2       	ldi	r24, 0x22	; 34
    43ec:	96 e0       	ldi	r25, 0x06	; 6
    43ee:	0e 94 c8 1b 	call	0x3790	; 0x3790 <PWM_vStop>
	CURRENT_STATE = siren_off;
    43f2:	10 92 26 06 	sts	0x0626, r1

#elif SIREN_TIMER == SIREN_TIMER2
	/* PWM2 implementation */

#endif
}
    43f6:	cf 91       	pop	r28
    43f8:	df 91       	pop	r29
    43fa:	08 95       	ret

000043fc <__vector_11>:

/* TIMER0 OVF ISR */
void __vector_11(void){
    43fc:	1f 92       	push	r1
    43fe:	0f 92       	push	r0
    4400:	0f b6       	in	r0, 0x3f	; 63
    4402:	0f 92       	push	r0
    4404:	11 24       	eor	r1, r1
    4406:	8f 93       	push	r24
    4408:	9f 93       	push	r25
    440a:	af 93       	push	r26
    440c:	bf 93       	push	r27
    440e:	ef 93       	push	r30
    4410:	ff 93       	push	r31
    4412:	df 93       	push	r29
    4414:	cf 93       	push	r28
    4416:	cd b7       	in	r28, 0x3d	; 61
    4418:	de b7       	in	r29, 0x3e	; 62
	TOGGLE_BIT(ODRB, DIO_PIN_NUM_3);
    441a:	a8 e3       	ldi	r26, 0x38	; 56
    441c:	b0 e0       	ldi	r27, 0x00	; 0
    441e:	e8 e3       	ldi	r30, 0x38	; 56
    4420:	f0 e0       	ldi	r31, 0x00	; 0
    4422:	90 81       	ld	r25, Z
    4424:	88 e0       	ldi	r24, 0x08	; 8
    4426:	89 27       	eor	r24, r25
    4428:	8c 93       	st	X, r24
}
    442a:	cf 91       	pop	r28
    442c:	df 91       	pop	r29
    442e:	ff 91       	pop	r31
    4430:	ef 91       	pop	r30
    4432:	bf 91       	pop	r27
    4434:	af 91       	pop	r26
    4436:	9f 91       	pop	r25
    4438:	8f 91       	pop	r24
    443a:	0f 90       	pop	r0
    443c:	0f be       	out	0x3f, r0	; 63
    443e:	0f 90       	pop	r0
    4440:	1f 90       	pop	r1
    4442:	18 95       	reti

00004444 <SERVO_vInit>:
 */


#include "SERVO_prog.h"

void SERVO_vInit(const SERVO_PWM_cfg_t * Servo_PWM){
    4444:	df 93       	push	r29
    4446:	cf 93       	push	r28
    4448:	00 d0       	rcall	.+0      	; 0x444a <SERVO_vInit+0x6>
    444a:	cd b7       	in	r28, 0x3d	; 61
    444c:	de b7       	in	r29, 0x3e	; 62
    444e:	9a 83       	std	Y+2, r25	; 0x02
    4450:	89 83       	std	Y+1, r24	; 0x01
	if(Servo_PWM != NULL){
    4452:	89 81       	ldd	r24, Y+1	; 0x01
    4454:	9a 81       	ldd	r25, Y+2	; 0x02
    4456:	00 97       	sbiw	r24, 0x00	; 0
    4458:	41 f1       	breq	.+80     	; 0x44aa <SERVO_vInit+0x66>
		PWM_vInit(&(Servo_PWM->ServoPWM));
    445a:	89 81       	ldd	r24, Y+1	; 0x01
    445c:	9a 81       	ldd	r25, Y+2	; 0x02
    445e:	0e 94 5e 15 	call	0x2abc	; 0x2abc <PWM_vInit>
		if( (Servo_PWM->ServoPWM.PWM_TimerChannel == TIMER1_PhaseFreqICR) || (Servo_PWM->ServoPWM.PWM_TimerChannel == TIMER1_PhaseICR) || (Servo_PWM->ServoPWM.PWM_TimerChannel == TIMER1_FastICR) ){
    4462:	e9 81       	ldd	r30, Y+1	; 0x01
    4464:	fa 81       	ldd	r31, Y+2	; 0x02
    4466:	80 81       	ld	r24, Z
    4468:	88 30       	cpi	r24, 0x08	; 8
    446a:	51 f0       	breq	.+20     	; 0x4480 <SERVO_vInit+0x3c>
    446c:	e9 81       	ldd	r30, Y+1	; 0x01
    446e:	fa 81       	ldd	r31, Y+2	; 0x02
    4470:	80 81       	ld	r24, Z
    4472:	8a 30       	cpi	r24, 0x0A	; 10
    4474:	29 f0       	breq	.+10     	; 0x4480 <SERVO_vInit+0x3c>
    4476:	e9 81       	ldd	r30, Y+1	; 0x01
    4478:	fa 81       	ldd	r31, Y+2	; 0x02
    447a:	80 81       	ld	r24, Z
    447c:	8c 30       	cpi	r24, 0x0C	; 12
    447e:	49 f4       	brne	.+18     	; 0x4492 <SERVO_vInit+0x4e>
			PWM_vSetICR(&(Servo_PWM->ServoPWM), Servo_PWM->ICR_Value);
    4480:	89 81       	ldd	r24, Y+1	; 0x01
    4482:	9a 81       	ldd	r25, Y+2	; 0x02
    4484:	e9 81       	ldd	r30, Y+1	; 0x01
    4486:	fa 81       	ldd	r31, Y+2	; 0x02
    4488:	25 81       	ldd	r18, Z+5	; 0x05
    448a:	36 81       	ldd	r19, Z+6	; 0x06
    448c:	b9 01       	movw	r22, r18
    448e:	0e 94 9f 19 	call	0x333e	; 0x333e <PWM_vSetICR>
		}
		SERVO_vChangeDirection(Servo_PWM, Servo_PWM->ServoInitialDirection);
    4492:	e9 81       	ldd	r30, Y+1	; 0x01
    4494:	fa 81       	ldd	r31, Y+2	; 0x02
    4496:	24 81       	ldd	r18, Z+4	; 0x04
    4498:	89 81       	ldd	r24, Y+1	; 0x01
    449a:	9a 81       	ldd	r25, Y+2	; 0x02
    449c:	62 2f       	mov	r22, r18
    449e:	0e 94 5a 22 	call	0x44b4	; 0x44b4 <SERVO_vChangeDirection>
		PWM_vStart(&(Servo_PWM->ServoPWM));
    44a2:	89 81       	ldd	r24, Y+1	; 0x01
    44a4:	9a 81       	ldd	r25, Y+2	; 0x02
    44a6:	0e 94 07 1a 	call	0x340e	; 0x340e <PWM_vStart>
	}
}
    44aa:	0f 90       	pop	r0
    44ac:	0f 90       	pop	r0
    44ae:	cf 91       	pop	r28
    44b0:	df 91       	pop	r29
    44b2:	08 95       	ret

000044b4 <SERVO_vChangeDirection>:

void SERVO_vChangeDirection(const SERVO_PWM_cfg_t *Servo_PWM, enu_servoDirections Copy_enuDirection){
    44b4:	df 93       	push	r29
    44b6:	cf 93       	push	r28
    44b8:	00 d0       	rcall	.+0      	; 0x44ba <SERVO_vChangeDirection+0x6>
    44ba:	00 d0       	rcall	.+0      	; 0x44bc <SERVO_vChangeDirection+0x8>
    44bc:	0f 92       	push	r0
    44be:	cd b7       	in	r28, 0x3d	; 61
    44c0:	de b7       	in	r29, 0x3e	; 62
    44c2:	9a 83       	std	Y+2, r25	; 0x02
    44c4:	89 83       	std	Y+1, r24	; 0x01
    44c6:	6b 83       	std	Y+3, r22	; 0x03
	switch(Copy_enuDirection){
    44c8:	8b 81       	ldd	r24, Y+3	; 0x03
    44ca:	28 2f       	mov	r18, r24
    44cc:	30 e0       	ldi	r19, 0x00	; 0
    44ce:	3d 83       	std	Y+5, r19	; 0x05
    44d0:	2c 83       	std	Y+4, r18	; 0x04
    44d2:	8c 81       	ldd	r24, Y+4	; 0x04
    44d4:	9d 81       	ldd	r25, Y+5	; 0x05
    44d6:	81 30       	cpi	r24, 0x01	; 1
    44d8:	91 05       	cpc	r25, r1
    44da:	99 f0       	breq	.+38     	; 0x4502 <SERVO_vChangeDirection+0x4e>
    44dc:	2c 81       	ldd	r18, Y+4	; 0x04
    44de:	3d 81       	ldd	r19, Y+5	; 0x05
    44e0:	22 30       	cpi	r18, 0x02	; 2
    44e2:	31 05       	cpc	r19, r1
    44e4:	c1 f0       	breq	.+48     	; 0x4516 <SERVO_vChangeDirection+0x62>
    44e6:	8c 81       	ldd	r24, Y+4	; 0x04
    44e8:	9d 81       	ldd	r25, Y+5	; 0x05
    44ea:	00 97       	sbiw	r24, 0x00	; 0
    44ec:	e9 f4       	brne	.+58     	; 0x4528 <SERVO_vChangeDirection+0x74>
	case SERVO_0:
		PWM_vSetOCR(&(Servo_PWM->ServoPWM), Servo_PWM->OCR_0degree_Value);
    44ee:	89 81       	ldd	r24, Y+1	; 0x01
    44f0:	9a 81       	ldd	r25, Y+2	; 0x02
    44f2:	e9 81       	ldd	r30, Y+1	; 0x01
    44f4:	fa 81       	ldd	r31, Y+2	; 0x02
    44f6:	27 81       	ldd	r18, Z+7	; 0x07
    44f8:	30 85       	ldd	r19, Z+8	; 0x08
    44fa:	b9 01       	movw	r22, r18
    44fc:	0e 94 c3 19 	call	0x3386	; 0x3386 <PWM_vSetOCR>
    4500:	13 c0       	rjmp	.+38     	; 0x4528 <SERVO_vChangeDirection+0x74>
		break;
	case SERVO_90:
		PWM_vSetOCR(&(Servo_PWM->ServoPWM), Servo_PWM->OCR_90degree_Value);
    4502:	89 81       	ldd	r24, Y+1	; 0x01
    4504:	9a 81       	ldd	r25, Y+2	; 0x02
    4506:	e9 81       	ldd	r30, Y+1	; 0x01
    4508:	fa 81       	ldd	r31, Y+2	; 0x02
    450a:	21 85       	ldd	r18, Z+9	; 0x09
    450c:	32 85       	ldd	r19, Z+10	; 0x0a
    450e:	b9 01       	movw	r22, r18
    4510:	0e 94 c3 19 	call	0x3386	; 0x3386 <PWM_vSetOCR>
    4514:	09 c0       	rjmp	.+18     	; 0x4528 <SERVO_vChangeDirection+0x74>
		break;
	case SERVO_180:
		PWM_vSetOCR(&(Servo_PWM->ServoPWM), Servo_PWM->OCR_180degree_Value);
    4516:	89 81       	ldd	r24, Y+1	; 0x01
    4518:	9a 81       	ldd	r25, Y+2	; 0x02
    451a:	e9 81       	ldd	r30, Y+1	; 0x01
    451c:	fa 81       	ldd	r31, Y+2	; 0x02
    451e:	23 85       	ldd	r18, Z+11	; 0x0b
    4520:	34 85       	ldd	r19, Z+12	; 0x0c
    4522:	b9 01       	movw	r22, r18
    4524:	0e 94 c3 19 	call	0x3386	; 0x3386 <PWM_vSetOCR>
		break;
	default: /* Do Nothing */ break;
	}
}
    4528:	0f 90       	pop	r0
    452a:	0f 90       	pop	r0
    452c:	0f 90       	pop	r0
    452e:	0f 90       	pop	r0
    4530:	0f 90       	pop	r0
    4532:	cf 91       	pop	r28
    4534:	df 91       	pop	r29
    4536:	08 95       	ret

00004538 <SERVO_vStart>:

void SERVO_vStart(const SERVO_PWM_cfg_t *Servo_PWM){
    4538:	df 93       	push	r29
    453a:	cf 93       	push	r28
    453c:	00 d0       	rcall	.+0      	; 0x453e <SERVO_vStart+0x6>
    453e:	cd b7       	in	r28, 0x3d	; 61
    4540:	de b7       	in	r29, 0x3e	; 62
    4542:	9a 83       	std	Y+2, r25	; 0x02
    4544:	89 83       	std	Y+1, r24	; 0x01
	PWM_vStart(&(Servo_PWM->ServoPWM));
    4546:	89 81       	ldd	r24, Y+1	; 0x01
    4548:	9a 81       	ldd	r25, Y+2	; 0x02
    454a:	0e 94 07 1a 	call	0x340e	; 0x340e <PWM_vStart>
}
    454e:	0f 90       	pop	r0
    4550:	0f 90       	pop	r0
    4552:	cf 91       	pop	r28
    4554:	df 91       	pop	r29
    4556:	08 95       	ret

00004558 <SERVO_vStop>:

void SERVO_vStop(const SERVO_PWM_cfg_t *Servo_PWM){
    4558:	df 93       	push	r29
    455a:	cf 93       	push	r28
    455c:	00 d0       	rcall	.+0      	; 0x455e <SERVO_vStop+0x6>
    455e:	cd b7       	in	r28, 0x3d	; 61
    4560:	de b7       	in	r29, 0x3e	; 62
    4562:	9a 83       	std	Y+2, r25	; 0x02
    4564:	89 83       	std	Y+1, r24	; 0x01
	PWM_vStop(&(Servo_PWM->ServoPWM));
    4566:	89 81       	ldd	r24, Y+1	; 0x01
    4568:	9a 81       	ldd	r25, Y+2	; 0x02
    456a:	0e 94 c8 1b 	call	0x3790	; 0x3790 <PWM_vStop>
}
    456e:	0f 90       	pop	r0
    4570:	0f 90       	pop	r0
    4572:	cf 91       	pop	r28
    4574:	df 91       	pop	r29
    4576:	08 95       	ret

00004578 <Sev_Display>:
#include "SEV_cfg.h"
#include "SEV_priv.h"



tenuErrorStatus Sev_Display(u8 u8sevIndex, u8 u8num){
    4578:	df 93       	push	r29
    457a:	cf 93       	push	r28
    457c:	cd b7       	in	r28, 0x3d	; 61
    457e:	de b7       	in	r29, 0x3e	; 62
    4580:	62 97       	sbiw	r28, 0x12	; 18
    4582:	0f b6       	in	r0, 0x3f	; 63
    4584:	f8 94       	cli
    4586:	de bf       	out	0x3e, r29	; 62
    4588:	0f be       	out	0x3f, r0	; 63
    458a:	cd bf       	out	0x3d, r28	; 61
    458c:	8c 87       	std	Y+12, r24	; 0x0c
    458e:	6d 87       	std	Y+13, r22	; 0x0d
    tenuErrorStatus enuReturnLoc = EOK;
    4590:	19 82       	std	Y+1, r1	; 0x01
    u8 au8Cathode[10] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F};
    4592:	ce 01       	movw	r24, r28
    4594:	02 96       	adiw	r24, 0x02	; 2
    4596:	9f 87       	std	Y+15, r25	; 0x0f
    4598:	8e 87       	std	Y+14, r24	; 0x0e
    459a:	e0 e1       	ldi	r30, 0x10	; 16
    459c:	f6 e0       	ldi	r31, 0x06	; 6
    459e:	f9 8b       	std	Y+17, r31	; 0x11
    45a0:	e8 8b       	std	Y+16, r30	; 0x10
    45a2:	fa e0       	ldi	r31, 0x0A	; 10
    45a4:	fa 8b       	std	Y+18, r31	; 0x12
    45a6:	e8 89       	ldd	r30, Y+16	; 0x10
    45a8:	f9 89       	ldd	r31, Y+17	; 0x11
    45aa:	00 80       	ld	r0, Z
    45ac:	88 89       	ldd	r24, Y+16	; 0x10
    45ae:	99 89       	ldd	r25, Y+17	; 0x11
    45b0:	01 96       	adiw	r24, 0x01	; 1
    45b2:	99 8b       	std	Y+17, r25	; 0x11
    45b4:	88 8b       	std	Y+16, r24	; 0x10
    45b6:	ee 85       	ldd	r30, Y+14	; 0x0e
    45b8:	ff 85       	ldd	r31, Y+15	; 0x0f
    45ba:	00 82       	st	Z, r0
    45bc:	8e 85       	ldd	r24, Y+14	; 0x0e
    45be:	9f 85       	ldd	r25, Y+15	; 0x0f
    45c0:	01 96       	adiw	r24, 0x01	; 1
    45c2:	9f 87       	std	Y+15, r25	; 0x0f
    45c4:	8e 87       	std	Y+14, r24	; 0x0e
    45c6:	9a 89       	ldd	r25, Y+18	; 0x12
    45c8:	91 50       	subi	r25, 0x01	; 1
    45ca:	9a 8b       	std	Y+18, r25	; 0x12
    45cc:	ea 89       	ldd	r30, Y+18	; 0x12
    45ce:	ee 23       	and	r30, r30
    45d0:	51 f7       	brne	.-44     	; 0x45a6 <Sev_Display+0x2e>
    if(u8sevIndex < MAX_SEV_SEGMENT){
    45d2:	8c 85       	ldd	r24, Y+12	; 0x0c
    45d4:	82 30       	cpi	r24, 0x02	; 2
    45d6:	98 f5       	brcc	.+102    	; 0x463e <Sev_Display+0xc6>
        if(u8num < 10){
    45d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    45da:	8a 30       	cpi	r24, 0x0A	; 10
    45dc:	90 f5       	brcc	.+100    	; 0x4642 <Sev_Display+0xca>
            if(SEV_ConfigSet[u8sevIndex].common_mode == Common_Cathode){
    45de:	8c 85       	ldd	r24, Y+12	; 0x0c
    45e0:	28 2f       	mov	r18, r24
    45e2:	30 e0       	ldi	r19, 0x00	; 0
    45e4:	c9 01       	movw	r24, r18
    45e6:	88 0f       	add	r24, r24
    45e8:	99 1f       	adc	r25, r25
    45ea:	88 0f       	add	r24, r24
    45ec:	99 1f       	adc	r25, r25
    45ee:	88 0f       	add	r24, r24
    45f0:	99 1f       	adc	r25, r25
    45f2:	82 0f       	add	r24, r18
    45f4:	93 1f       	adc	r25, r19
    45f6:	fc 01       	movw	r30, r24
    45f8:	e4 5a       	subi	r30, 0xA4	; 164
    45fa:	fb 4f       	sbci	r31, 0xFB	; 251
    45fc:	80 81       	ld	r24, Z
    45fe:	88 23       	and	r24, r24
    4600:	71 f4       	brne	.+28     	; 0x461e <Sev_Display+0xa6>
            	PutOnBus(u8sevIndex, au8Cathode[u8num]);
    4602:	8d 85       	ldd	r24, Y+13	; 0x0d
    4604:	28 2f       	mov	r18, r24
    4606:	30 e0       	ldi	r19, 0x00	; 0
    4608:	ce 01       	movw	r24, r28
    460a:	02 96       	adiw	r24, 0x02	; 2
    460c:	fc 01       	movw	r30, r24
    460e:	e2 0f       	add	r30, r18
    4610:	f3 1f       	adc	r31, r19
    4612:	90 81       	ld	r25, Z
    4614:	8c 85       	ldd	r24, Y+12	; 0x0c
    4616:	69 2f       	mov	r22, r25
    4618:	0e 94 2b 23 	call	0x4656	; 0x4656 <PutOnBus>
    461c:	12 c0       	rjmp	.+36     	; 0x4642 <Sev_Display+0xca>
            }
            else{
            	PutOnBus(u8sevIndex, ~au8Cathode[u8num]);
    461e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4620:	28 2f       	mov	r18, r24
    4622:	30 e0       	ldi	r19, 0x00	; 0
    4624:	ce 01       	movw	r24, r28
    4626:	02 96       	adiw	r24, 0x02	; 2
    4628:	fc 01       	movw	r30, r24
    462a:	e2 0f       	add	r30, r18
    462c:	f3 1f       	adc	r31, r19
    462e:	80 81       	ld	r24, Z
    4630:	98 2f       	mov	r25, r24
    4632:	90 95       	com	r25
    4634:	8c 85       	ldd	r24, Y+12	; 0x0c
    4636:	69 2f       	mov	r22, r25
    4638:	0e 94 2b 23 	call	0x4656	; 0x4656 <PutOnBus>
    463c:	02 c0       	rjmp	.+4      	; 0x4642 <Sev_Display+0xca>
            }
        }
    }else{
        enuReturnLoc = PARAM_OUT_RANGE;
    463e:	81 e0       	ldi	r24, 0x01	; 1
    4640:	89 83       	std	Y+1, r24	; 0x01
    }
    return enuReturnLoc;
    4642:	89 81       	ldd	r24, Y+1	; 0x01
}
    4644:	62 96       	adiw	r28, 0x12	; 18
    4646:	0f b6       	in	r0, 0x3f	; 63
    4648:	f8 94       	cli
    464a:	de bf       	out	0x3e, r29	; 62
    464c:	0f be       	out	0x3f, r0	; 63
    464e:	cd bf       	out	0x3d, r28	; 61
    4650:	cf 91       	pop	r28
    4652:	df 91       	pop	r29
    4654:	08 95       	ret

00004656 <PutOnBus>:

static void PutOnBus(u8 u8sevIndex, u8 u8num){
    4656:	df 93       	push	r29
    4658:	cf 93       	push	r28
    465a:	cd b7       	in	r28, 0x3d	; 61
    465c:	de b7       	in	r29, 0x3e	; 62
    465e:	2a 97       	sbiw	r28, 0x0a	; 10
    4660:	0f b6       	in	r0, 0x3f	; 63
    4662:	f8 94       	cli
    4664:	de bf       	out	0x3e, r29	; 62
    4666:	0f be       	out	0x3f, r0	; 63
    4668:	cd bf       	out	0x3d, r28	; 61
    466a:	89 87       	std	Y+9, r24	; 0x09
    466c:	6a 87       	std	Y+10, r22	; 0x0a
    u8 u8Num[7]; //0x0011 1111
	u8 cntr;
	for(cntr = 0; cntr < 7; cntr++){
    466e:	19 82       	std	Y+1, r1	; 0x01
    4670:	1b c0       	rjmp	.+54     	; 0x46a8 <PutOnBus+0x52>
		u8Num[cntr] = GET_BIT(u8num, cntr);
    4672:	89 81       	ldd	r24, Y+1	; 0x01
    4674:	48 2f       	mov	r20, r24
    4676:	50 e0       	ldi	r21, 0x00	; 0
    4678:	8a 85       	ldd	r24, Y+10	; 0x0a
    467a:	28 2f       	mov	r18, r24
    467c:	30 e0       	ldi	r19, 0x00	; 0
    467e:	89 81       	ldd	r24, Y+1	; 0x01
    4680:	88 2f       	mov	r24, r24
    4682:	90 e0       	ldi	r25, 0x00	; 0
    4684:	b9 01       	movw	r22, r18
    4686:	02 c0       	rjmp	.+4      	; 0x468c <PutOnBus+0x36>
    4688:	75 95       	asr	r23
    468a:	67 95       	ror	r22
    468c:	8a 95       	dec	r24
    468e:	e2 f7       	brpl	.-8      	; 0x4688 <PutOnBus+0x32>
    4690:	cb 01       	movw	r24, r22
    4692:	28 2f       	mov	r18, r24
    4694:	21 70       	andi	r18, 0x01	; 1
    4696:	ce 01       	movw	r24, r28
    4698:	02 96       	adiw	r24, 0x02	; 2
    469a:	fc 01       	movw	r30, r24
    469c:	e4 0f       	add	r30, r20
    469e:	f5 1f       	adc	r31, r21
    46a0:	20 83       	st	Z, r18
}

static void PutOnBus(u8 u8sevIndex, u8 u8num){
    u8 u8Num[7]; //0x0011 1111
	u8 cntr;
	for(cntr = 0; cntr < 7; cntr++){
    46a2:	89 81       	ldd	r24, Y+1	; 0x01
    46a4:	8f 5f       	subi	r24, 0xFF	; 255
    46a6:	89 83       	std	Y+1, r24	; 0x01
    46a8:	89 81       	ldd	r24, Y+1	; 0x01
    46aa:	87 30       	cpi	r24, 0x07	; 7
    46ac:	10 f3       	brcs	.-60     	; 0x4672 <PutOnBus+0x1c>
		u8Num[cntr] = GET_BIT(u8num, cntr);
	}
    DIO_enuWriteGroup(SEV_ConfigSet[u8sevIndex].Au8Pin, u8Num, 7 );
    46ae:	89 85       	ldd	r24, Y+9	; 0x09
    46b0:	28 2f       	mov	r18, r24
    46b2:	30 e0       	ldi	r19, 0x00	; 0
    46b4:	c9 01       	movw	r24, r18
    46b6:	88 0f       	add	r24, r24
    46b8:	99 1f       	adc	r25, r25
    46ba:	88 0f       	add	r24, r24
    46bc:	99 1f       	adc	r25, r25
    46be:	88 0f       	add	r24, r24
    46c0:	99 1f       	adc	r25, r25
    46c2:	82 0f       	add	r24, r18
    46c4:	93 1f       	adc	r25, r19
    46c6:	8c 5a       	subi	r24, 0xAC	; 172
    46c8:	9b 4f       	sbci	r25, 0xFB	; 251
    46ca:	9e 01       	movw	r18, r28
    46cc:	2e 5f       	subi	r18, 0xFE	; 254
    46ce:	3f 4f       	sbci	r19, 0xFF	; 255
    46d0:	b9 01       	movw	r22, r18
    46d2:	47 e0       	ldi	r20, 0x07	; 7
    46d4:	0e 94 51 21 	call	0x42a2	; 0x42a2 <DIO_enuWriteGroup>
}
    46d8:	2a 96       	adiw	r28, 0x0a	; 10
    46da:	0f b6       	in	r0, 0x3f	; 63
    46dc:	f8 94       	cli
    46de:	de bf       	out	0x3e, r29	; 62
    46e0:	0f be       	out	0x3f, r0	; 63
    46e2:	cd bf       	out	0x3d, r28	; 61
    46e4:	cf 91       	pop	r28
    46e6:	df 91       	pop	r29
    46e8:	08 95       	ret

000046ea <Sev_PowerOn>:

tenuErrorStatus Sev_PowerOn(u8 u8sevIndex){
    46ea:	df 93       	push	r29
    46ec:	cf 93       	push	r28
    46ee:	00 d0       	rcall	.+0      	; 0x46f0 <Sev_PowerOn+0x6>
    46f0:	cd b7       	in	r28, 0x3d	; 61
    46f2:	de b7       	in	r29, 0x3e	; 62
    46f4:	8a 83       	std	Y+2, r24	; 0x02
    tenuErrorStatus enuReturnLoc = EOK;
    46f6:	19 82       	std	Y+1, r1	; 0x01
    
    if(u8sevIndex < MAX_SEV_SEGMENT){
    46f8:	8a 81       	ldd	r24, Y+2	; 0x02
    46fa:	82 30       	cpi	r24, 0x02	; 2
    46fc:	e0 f5       	brcc	.+120    	; 0x4776 <Sev_PowerOn+0x8c>
        if(SEV_ConfigSet[u8sevIndex].common_mode == Common_Cathode){
    46fe:	8a 81       	ldd	r24, Y+2	; 0x02
    4700:	28 2f       	mov	r18, r24
    4702:	30 e0       	ldi	r19, 0x00	; 0
    4704:	c9 01       	movw	r24, r18
    4706:	88 0f       	add	r24, r24
    4708:	99 1f       	adc	r25, r25
    470a:	88 0f       	add	r24, r24
    470c:	99 1f       	adc	r25, r25
    470e:	88 0f       	add	r24, r24
    4710:	99 1f       	adc	r25, r25
    4712:	82 0f       	add	r24, r18
    4714:	93 1f       	adc	r25, r19
    4716:	fc 01       	movw	r30, r24
    4718:	e4 5a       	subi	r30, 0xA4	; 164
    471a:	fb 4f       	sbci	r31, 0xFB	; 251
    471c:	80 81       	ld	r24, Z
    471e:	88 23       	and	r24, r24
    4720:	a9 f4       	brne	.+42     	; 0x474c <Sev_PowerOn+0x62>
            enuReturnLoc = DIO_enuWritePin(SEV_ConfigSet[u8sevIndex].common, Common_Cathode);
    4722:	8a 81       	ldd	r24, Y+2	; 0x02
    4724:	28 2f       	mov	r18, r24
    4726:	30 e0       	ldi	r19, 0x00	; 0
    4728:	c9 01       	movw	r24, r18
    472a:	88 0f       	add	r24, r24
    472c:	99 1f       	adc	r25, r25
    472e:	88 0f       	add	r24, r24
    4730:	99 1f       	adc	r25, r25
    4732:	88 0f       	add	r24, r24
    4734:	99 1f       	adc	r25, r25
    4736:	82 0f       	add	r24, r18
    4738:	93 1f       	adc	r25, r19
    473a:	fc 01       	movw	r30, r24
    473c:	e5 5a       	subi	r30, 0xA5	; 165
    473e:	fb 4f       	sbci	r31, 0xFB	; 251
    4740:	80 81       	ld	r24, Z
    4742:	60 e0       	ldi	r22, 0x00	; 0
    4744:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <DIO_enuWritePin>
    4748:	89 83       	std	Y+1, r24	; 0x01
    474a:	17 c0       	rjmp	.+46     	; 0x477a <Sev_PowerOn+0x90>
        }else{
        	 enuReturnLoc = DIO_enuWritePin(SEV_ConfigSet[u8sevIndex].common, Common_Anode);
    474c:	8a 81       	ldd	r24, Y+2	; 0x02
    474e:	28 2f       	mov	r18, r24
    4750:	30 e0       	ldi	r19, 0x00	; 0
    4752:	c9 01       	movw	r24, r18
    4754:	88 0f       	add	r24, r24
    4756:	99 1f       	adc	r25, r25
    4758:	88 0f       	add	r24, r24
    475a:	99 1f       	adc	r25, r25
    475c:	88 0f       	add	r24, r24
    475e:	99 1f       	adc	r25, r25
    4760:	82 0f       	add	r24, r18
    4762:	93 1f       	adc	r25, r19
    4764:	fc 01       	movw	r30, r24
    4766:	e5 5a       	subi	r30, 0xA5	; 165
    4768:	fb 4f       	sbci	r31, 0xFB	; 251
    476a:	80 81       	ld	r24, Z
    476c:	61 e0       	ldi	r22, 0x01	; 1
    476e:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <DIO_enuWritePin>
    4772:	89 83       	std	Y+1, r24	; 0x01
    4774:	02 c0       	rjmp	.+4      	; 0x477a <Sev_PowerOn+0x90>
        }
       
    }else{
        enuReturnLoc = PARAM_OUT_RANGE;
    4776:	81 e0       	ldi	r24, 0x01	; 1
    4778:	89 83       	std	Y+1, r24	; 0x01
    }
    return enuReturnLoc;
    477a:	89 81       	ldd	r24, Y+1	; 0x01
}
    477c:	0f 90       	pop	r0
    477e:	0f 90       	pop	r0
    4780:	cf 91       	pop	r28
    4782:	df 91       	pop	r29
    4784:	08 95       	ret

00004786 <Sev_PowerOff>:

tenuErrorStatus Sev_PowerOff(u8 u8sevIndex){
    4786:	df 93       	push	r29
    4788:	cf 93       	push	r28
    478a:	00 d0       	rcall	.+0      	; 0x478c <Sev_PowerOff+0x6>
    478c:	cd b7       	in	r28, 0x3d	; 61
    478e:	de b7       	in	r29, 0x3e	; 62
    4790:	8a 83       	std	Y+2, r24	; 0x02
    tenuErrorStatus enuReturnLoc = EOK;
    4792:	19 82       	std	Y+1, r1	; 0x01
    
    if(u8sevIndex < MAX_SEV_SEGMENT){
    4794:	8a 81       	ldd	r24, Y+2	; 0x02
    4796:	82 30       	cpi	r24, 0x02	; 2
    4798:	e0 f5       	brcc	.+120    	; 0x4812 <Sev_PowerOff+0x8c>
        if(SEV_ConfigSet[u8sevIndex].common_mode == Common_Cathode){
    479a:	8a 81       	ldd	r24, Y+2	; 0x02
    479c:	28 2f       	mov	r18, r24
    479e:	30 e0       	ldi	r19, 0x00	; 0
    47a0:	c9 01       	movw	r24, r18
    47a2:	88 0f       	add	r24, r24
    47a4:	99 1f       	adc	r25, r25
    47a6:	88 0f       	add	r24, r24
    47a8:	99 1f       	adc	r25, r25
    47aa:	88 0f       	add	r24, r24
    47ac:	99 1f       	adc	r25, r25
    47ae:	82 0f       	add	r24, r18
    47b0:	93 1f       	adc	r25, r19
    47b2:	fc 01       	movw	r30, r24
    47b4:	e4 5a       	subi	r30, 0xA4	; 164
    47b6:	fb 4f       	sbci	r31, 0xFB	; 251
    47b8:	80 81       	ld	r24, Z
    47ba:	88 23       	and	r24, r24
    47bc:	a9 f4       	brne	.+42     	; 0x47e8 <Sev_PowerOff+0x62>
        	 enuReturnLoc = DIO_enuWritePin(SEV_ConfigSet[u8sevIndex].common, Common_Anode);
    47be:	8a 81       	ldd	r24, Y+2	; 0x02
    47c0:	28 2f       	mov	r18, r24
    47c2:	30 e0       	ldi	r19, 0x00	; 0
    47c4:	c9 01       	movw	r24, r18
    47c6:	88 0f       	add	r24, r24
    47c8:	99 1f       	adc	r25, r25
    47ca:	88 0f       	add	r24, r24
    47cc:	99 1f       	adc	r25, r25
    47ce:	88 0f       	add	r24, r24
    47d0:	99 1f       	adc	r25, r25
    47d2:	82 0f       	add	r24, r18
    47d4:	93 1f       	adc	r25, r19
    47d6:	fc 01       	movw	r30, r24
    47d8:	e5 5a       	subi	r30, 0xA5	; 165
    47da:	fb 4f       	sbci	r31, 0xFB	; 251
    47dc:	80 81       	ld	r24, Z
    47de:	61 e0       	ldi	r22, 0x01	; 1
    47e0:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <DIO_enuWritePin>
    47e4:	89 83       	std	Y+1, r24	; 0x01
    47e6:	17 c0       	rjmp	.+46     	; 0x4816 <Sev_PowerOff+0x90>
        }else{
        	 enuReturnLoc = DIO_enuWritePin(SEV_ConfigSet[u8sevIndex].common, Common_Cathode);
    47e8:	8a 81       	ldd	r24, Y+2	; 0x02
    47ea:	28 2f       	mov	r18, r24
    47ec:	30 e0       	ldi	r19, 0x00	; 0
    47ee:	c9 01       	movw	r24, r18
    47f0:	88 0f       	add	r24, r24
    47f2:	99 1f       	adc	r25, r25
    47f4:	88 0f       	add	r24, r24
    47f6:	99 1f       	adc	r25, r25
    47f8:	88 0f       	add	r24, r24
    47fa:	99 1f       	adc	r25, r25
    47fc:	82 0f       	add	r24, r18
    47fe:	93 1f       	adc	r25, r19
    4800:	fc 01       	movw	r30, r24
    4802:	e5 5a       	subi	r30, 0xA5	; 165
    4804:	fb 4f       	sbci	r31, 0xFB	; 251
    4806:	80 81       	ld	r24, Z
    4808:	60 e0       	ldi	r22, 0x00	; 0
    480a:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <DIO_enuWritePin>
    480e:	89 83       	std	Y+1, r24	; 0x01
    4810:	02 c0       	rjmp	.+4      	; 0x4816 <Sev_PowerOff+0x90>
        }
       
    }else{
        enuReturnLoc = PARAM_OUT_RANGE;
    4812:	81 e0       	ldi	r24, 0x01	; 1
    4814:	89 83       	std	Y+1, r24	; 0x01
    }
    return enuReturnLoc;
    4816:	89 81       	ldd	r24, Y+1	; 0x01
}
    4818:	0f 90       	pop	r0
    481a:	0f 90       	pop	r0
    481c:	cf 91       	pop	r28
    481e:	df 91       	pop	r29
    4820:	08 95       	ret

00004822 <Lcd_Init>:
static void Lcd_SendData(u8 data);
#if LCD_MODE == LCD_MODE_4_BIT
static void Lcd_Enter_4Bit_Mode(void);
#endif

void Lcd_Init(const Lcd_DisplayControlType* control) {
    4822:	df 93       	push	r29
    4824:	cf 93       	push	r28
    4826:	00 d0       	rcall	.+0      	; 0x4828 <Lcd_Init+0x6>
    4828:	cd b7       	in	r28, 0x3d	; 61
    482a:	de b7       	in	r29, 0x3e	; 62
    482c:	9a 83       	std	Y+2, r25	; 0x02
    482e:	89 83       	std	Y+1, r24	; 0x01
#if LCD_MODE == LCD_MODE_4_BIT
    Lcd_Enter_4Bit_Mode();
#endif

    Lcd_ControlDisplay(control);
    4830:	89 81       	ldd	r24, Y+1	; 0x01
    4832:	9a 81       	ldd	r25, Y+2	; 0x02
    4834:	0e 94 e9 28 	call	0x51d2	; 0x51d2 <Lcd_ControlDisplay>

   /* Display Clear */
   Lcd_SendCommand(0b00000001);
    4838:	81 e0       	ldi	r24, 0x01	; 1
    483a:	0e 94 f3 29 	call	0x53e6	; 0x53e6 <Lcd_SendCommand>
}
    483e:	0f 90       	pop	r0
    4840:	0f 90       	pop	r0
    4842:	cf 91       	pop	r28
    4844:	df 91       	pop	r29
    4846:	08 95       	ret

00004848 <Lcd_DisplayCharcter>:


void Lcd_DisplayCharcter(char data) {
    4848:	df 93       	push	r29
    484a:	cf 93       	push	r28
    484c:	0f 92       	push	r0
    484e:	cd b7       	in	r28, 0x3d	; 61
    4850:	de b7       	in	r29, 0x3e	; 62
    4852:	89 83       	std	Y+1, r24	; 0x01
    Lcd_SendData(data);
    4854:	89 81       	ldd	r24, Y+1	; 0x01
    4856:	0e 94 95 2a 	call	0x552a	; 0x552a <Lcd_SendData>
}
    485a:	0f 90       	pop	r0
    485c:	cf 91       	pop	r28
    485e:	df 91       	pop	r29
    4860:	08 95       	ret

00004862 <Lcd_DisplayString>:

void Lcd_DisplayString(const char* str) {
    4862:	df 93       	push	r29
    4864:	cf 93       	push	r28
    4866:	00 d0       	rcall	.+0      	; 0x4868 <Lcd_DisplayString+0x6>
    4868:	00 d0       	rcall	.+0      	; 0x486a <Lcd_DisplayString+0x8>
    486a:	cd b7       	in	r28, 0x3d	; 61
    486c:	de b7       	in	r29, 0x3e	; 62
    486e:	9c 83       	std	Y+4, r25	; 0x04
    4870:	8b 83       	std	Y+3, r24	; 0x03
	int i = 0;
    4872:	1a 82       	std	Y+2, r1	; 0x02
    4874:	19 82       	std	Y+1, r1	; 0x01
    4876:	0f c0       	rjmp	.+30     	; 0x4896 <Lcd_DisplayString+0x34>
    while (str[i] != '\0') {
        Lcd_SendData(str[i]);
    4878:	29 81       	ldd	r18, Y+1	; 0x01
    487a:	3a 81       	ldd	r19, Y+2	; 0x02
    487c:	8b 81       	ldd	r24, Y+3	; 0x03
    487e:	9c 81       	ldd	r25, Y+4	; 0x04
    4880:	fc 01       	movw	r30, r24
    4882:	e2 0f       	add	r30, r18
    4884:	f3 1f       	adc	r31, r19
    4886:	80 81       	ld	r24, Z
    4888:	0e 94 95 2a 	call	0x552a	; 0x552a <Lcd_SendData>
        i++;
    488c:	89 81       	ldd	r24, Y+1	; 0x01
    488e:	9a 81       	ldd	r25, Y+2	; 0x02
    4890:	01 96       	adiw	r24, 0x01	; 1
    4892:	9a 83       	std	Y+2, r25	; 0x02
    4894:	89 83       	std	Y+1, r24	; 0x01
    Lcd_SendData(data);
}

void Lcd_DisplayString(const char* str) {
	int i = 0;
    while (str[i] != '\0') {
    4896:	29 81       	ldd	r18, Y+1	; 0x01
    4898:	3a 81       	ldd	r19, Y+2	; 0x02
    489a:	8b 81       	ldd	r24, Y+3	; 0x03
    489c:	9c 81       	ldd	r25, Y+4	; 0x04
    489e:	fc 01       	movw	r30, r24
    48a0:	e2 0f       	add	r30, r18
    48a2:	f3 1f       	adc	r31, r19
    48a4:	80 81       	ld	r24, Z
    48a6:	88 23       	and	r24, r24
    48a8:	39 f7       	brne	.-50     	; 0x4878 <Lcd_DisplayString+0x16>
        Lcd_SendData(str[i]);
        i++;
    }
}
    48aa:	0f 90       	pop	r0
    48ac:	0f 90       	pop	r0
    48ae:	0f 90       	pop	r0
    48b0:	0f 90       	pop	r0
    48b2:	cf 91       	pop	r28
    48b4:	df 91       	pop	r29
    48b6:	08 95       	ret

000048b8 <Lcd_DisplayNumber>:

void Lcd_DisplayNumber(s32 number) {
    48b8:	af 92       	push	r10
    48ba:	bf 92       	push	r11
    48bc:	cf 92       	push	r12
    48be:	df 92       	push	r13
    48c0:	ef 92       	push	r14
    48c2:	ff 92       	push	r15
    48c4:	0f 93       	push	r16
    48c6:	1f 93       	push	r17
    48c8:	df 93       	push	r29
    48ca:	cf 93       	push	r28
    48cc:	cd b7       	in	r28, 0x3d	; 61
    48ce:	de b7       	in	r29, 0x3e	; 62
    48d0:	c3 56       	subi	r28, 0x63	; 99
    48d2:	d0 40       	sbci	r29, 0x00	; 0
    48d4:	0f b6       	in	r0, 0x3f	; 63
    48d6:	f8 94       	cli
    48d8:	de bf       	out	0x3e, r29	; 62
    48da:	0f be       	out	0x3f, r0	; 63
    48dc:	cd bf       	out	0x3d, r28	; 61
    48de:	6a 87       	std	Y+10, r22	; 0x0a
    48e0:	7b 87       	std	Y+11, r23	; 0x0b
    48e2:	8c 87       	std	Y+12, r24	; 0x0c
    48e4:	9d 87       	std	Y+13, r25	; 0x0d
    u64 reversed = 0;
    48e6:	1a 82       	std	Y+2, r1	; 0x02
    48e8:	1b 82       	std	Y+3, r1	; 0x03
    48ea:	1c 82       	std	Y+4, r1	; 0x04
    48ec:	1d 82       	std	Y+5, r1	; 0x05
    48ee:	1e 82       	std	Y+6, r1	; 0x06
    48f0:	1f 82       	std	Y+7, r1	; 0x07
    48f2:	18 86       	std	Y+8, r1	; 0x08
    48f4:	19 86       	std	Y+9, r1	; 0x09
    u8 digitsCounter = 0;
    48f6:	19 82       	std	Y+1, r1	; 0x01
    if (number < 0) {
    48f8:	8a 85       	ldd	r24, Y+10	; 0x0a
    48fa:	9b 85       	ldd	r25, Y+11	; 0x0b
    48fc:	ac 85       	ldd	r26, Y+12	; 0x0c
    48fe:	bd 85       	ldd	r27, Y+13	; 0x0d
    4900:	bb 23       	and	r27, r27
    4902:	94 f4       	brge	.+36     	; 0x4928 <Lcd_DisplayNumber+0x70>
        number = number * -1;
    4904:	8a 85       	ldd	r24, Y+10	; 0x0a
    4906:	9b 85       	ldd	r25, Y+11	; 0x0b
    4908:	ac 85       	ldd	r26, Y+12	; 0x0c
    490a:	bd 85       	ldd	r27, Y+13	; 0x0d
    490c:	b0 95       	com	r27
    490e:	a0 95       	com	r26
    4910:	90 95       	com	r25
    4912:	81 95       	neg	r24
    4914:	9f 4f       	sbci	r25, 0xFF	; 255
    4916:	af 4f       	sbci	r26, 0xFF	; 255
    4918:	bf 4f       	sbci	r27, 0xFF	; 255
    491a:	8a 87       	std	Y+10, r24	; 0x0a
    491c:	9b 87       	std	Y+11, r25	; 0x0b
    491e:	ac 87       	std	Y+12, r26	; 0x0c
    4920:	bd 87       	std	Y+13, r27	; 0x0d
        Lcd_SendData('-');
    4922:	8d e2       	ldi	r24, 0x2D	; 45
    4924:	0e 94 95 2a 	call	0x552a	; 0x552a <Lcd_SendData>
    }
    do {
        reversed = (reversed*10) + (number%10);
    4928:	2a 81       	ldd	r18, Y+2	; 0x02
    492a:	3b 81       	ldd	r19, Y+3	; 0x03
    492c:	4c 81       	ldd	r20, Y+4	; 0x04
    492e:	5d 81       	ldd	r21, Y+5	; 0x05
    4930:	6e 81       	ldd	r22, Y+6	; 0x06
    4932:	7f 81       	ldd	r23, Y+7	; 0x07
    4934:	88 85       	ldd	r24, Y+8	; 0x08
    4936:	99 85       	ldd	r25, Y+9	; 0x09
    4938:	a2 2e       	mov	r10, r18
    493a:	b3 2e       	mov	r11, r19
    493c:	c4 2e       	mov	r12, r20
    493e:	d5 2e       	mov	r13, r21
    4940:	e6 2e       	mov	r14, r22
    4942:	f7 2e       	mov	r15, r23
    4944:	08 2f       	mov	r16, r24
    4946:	19 2f       	mov	r17, r25
    4948:	2a 2d       	mov	r18, r10
    494a:	3b 2d       	mov	r19, r11
    494c:	4c 2d       	mov	r20, r12
    494e:	5d 2d       	mov	r21, r13
    4950:	6e 2d       	mov	r22, r14
    4952:	7f 2d       	mov	r23, r15
    4954:	80 2f       	mov	r24, r16
    4956:	91 2f       	mov	r25, r17
    4958:	01 e0       	ldi	r16, 0x01	; 1
    495a:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    495e:	2e 8f       	std	Y+30, r18	; 0x1e
    4960:	3f 8f       	std	Y+31, r19	; 0x1f
    4962:	48 a3       	std	Y+32, r20	; 0x20
    4964:	59 a3       	std	Y+33, r21	; 0x21
    4966:	6a a3       	std	Y+34, r22	; 0x22
    4968:	7b a3       	std	Y+35, r23	; 0x23
    496a:	8c a3       	std	Y+36, r24	; 0x24
    496c:	9d a3       	std	Y+37, r25	; 0x25
    496e:	2e 8d       	ldd	r18, Y+30	; 0x1e
    4970:	3f 8d       	ldd	r19, Y+31	; 0x1f
    4972:	48 a1       	ldd	r20, Y+32	; 0x20
    4974:	59 a1       	ldd	r21, Y+33	; 0x21
    4976:	6a a1       	ldd	r22, Y+34	; 0x22
    4978:	7b a1       	ldd	r23, Y+35	; 0x23
    497a:	8c a1       	ldd	r24, Y+36	; 0x24
    497c:	9d a1       	ldd	r25, Y+37	; 0x25
    497e:	02 e0       	ldi	r16, 0x02	; 2
    4980:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    4984:	2e a3       	std	Y+38, r18	; 0x26
    4986:	3f a3       	std	Y+39, r19	; 0x27
    4988:	48 a7       	std	Y+40, r20	; 0x28
    498a:	59 a7       	std	Y+41, r21	; 0x29
    498c:	6a a7       	std	Y+42, r22	; 0x2a
    498e:	7b a7       	std	Y+43, r23	; 0x2b
    4990:	8c a7       	std	Y+44, r24	; 0x2c
    4992:	9d a7       	std	Y+45, r25	; 0x2d
    4994:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4996:	9e a1       	ldd	r25, Y+38	; 0x26
    4998:	89 0f       	add	r24, r25
    499a:	8e a7       	std	Y+46, r24	; 0x2e
    499c:	81 e0       	ldi	r24, 0x01	; 1
    499e:	8e ab       	std	Y+54, r24	; 0x36
    49a0:	9e a5       	ldd	r25, Y+46	; 0x2e
    49a2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    49a4:	98 17       	cp	r25, r24
    49a6:	08 f0       	brcs	.+2      	; 0x49aa <Lcd_DisplayNumber+0xf2>
    49a8:	1e aa       	std	Y+54, r1	; 0x36
    49aa:	9f 8d       	ldd	r25, Y+31	; 0x1f
    49ac:	8f a1       	ldd	r24, Y+39	; 0x27
    49ae:	98 0f       	add	r25, r24
    49b0:	9f a7       	std	Y+47, r25	; 0x2f
    49b2:	91 e0       	ldi	r25, 0x01	; 1
    49b4:	9f ab       	std	Y+55, r25	; 0x37
    49b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    49b8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    49ba:	89 17       	cp	r24, r25
    49bc:	08 f0       	brcs	.+2      	; 0x49c0 <Lcd_DisplayNumber+0x108>
    49be:	1f aa       	std	Y+55, r1	; 0x37
    49c0:	8e a9       	ldd	r24, Y+54	; 0x36
    49c2:	9f a5       	ldd	r25, Y+47	; 0x2f
    49c4:	89 0f       	add	r24, r25
    49c6:	88 af       	std	Y+56, r24	; 0x38
    49c8:	81 e0       	ldi	r24, 0x01	; 1
    49ca:	89 af       	std	Y+57, r24	; 0x39
    49cc:	98 ad       	ldd	r25, Y+56	; 0x38
    49ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    49d0:	98 17       	cp	r25, r24
    49d2:	08 f0       	brcs	.+2      	; 0x49d6 <Lcd_DisplayNumber+0x11e>
    49d4:	19 ae       	std	Y+57, r1	; 0x39
    49d6:	9f a9       	ldd	r25, Y+55	; 0x37
    49d8:	89 ad       	ldd	r24, Y+57	; 0x39
    49da:	98 2b       	or	r25, r24
    49dc:	9f ab       	std	Y+55, r25	; 0x37
    49de:	98 ad       	ldd	r25, Y+56	; 0x38
    49e0:	9f a7       	std	Y+47, r25	; 0x2f
    49e2:	88 a1       	ldd	r24, Y+32	; 0x20
    49e4:	98 a5       	ldd	r25, Y+40	; 0x28
    49e6:	89 0f       	add	r24, r25
    49e8:	88 ab       	std	Y+48, r24	; 0x30
    49ea:	81 e0       	ldi	r24, 0x01	; 1
    49ec:	8a af       	std	Y+58, r24	; 0x3a
    49ee:	98 a9       	ldd	r25, Y+48	; 0x30
    49f0:	88 a1       	ldd	r24, Y+32	; 0x20
    49f2:	98 17       	cp	r25, r24
    49f4:	08 f0       	brcs	.+2      	; 0x49f8 <Lcd_DisplayNumber+0x140>
    49f6:	1a ae       	std	Y+58, r1	; 0x3a
    49f8:	9f a9       	ldd	r25, Y+55	; 0x37
    49fa:	88 a9       	ldd	r24, Y+48	; 0x30
    49fc:	98 0f       	add	r25, r24
    49fe:	9b af       	std	Y+59, r25	; 0x3b
    4a00:	91 e0       	ldi	r25, 0x01	; 1
    4a02:	9c af       	std	Y+60, r25	; 0x3c
    4a04:	8b ad       	ldd	r24, Y+59	; 0x3b
    4a06:	98 a9       	ldd	r25, Y+48	; 0x30
    4a08:	89 17       	cp	r24, r25
    4a0a:	08 f0       	brcs	.+2      	; 0x4a0e <Lcd_DisplayNumber+0x156>
    4a0c:	1c ae       	std	Y+60, r1	; 0x3c
    4a0e:	8a ad       	ldd	r24, Y+58	; 0x3a
    4a10:	9c ad       	ldd	r25, Y+60	; 0x3c
    4a12:	89 2b       	or	r24, r25
    4a14:	8a af       	std	Y+58, r24	; 0x3a
    4a16:	8b ad       	ldd	r24, Y+59	; 0x3b
    4a18:	88 ab       	std	Y+48, r24	; 0x30
    4a1a:	99 a1       	ldd	r25, Y+33	; 0x21
    4a1c:	89 a5       	ldd	r24, Y+41	; 0x29
    4a1e:	98 0f       	add	r25, r24
    4a20:	99 ab       	std	Y+49, r25	; 0x31
    4a22:	91 e0       	ldi	r25, 0x01	; 1
    4a24:	9d af       	std	Y+61, r25	; 0x3d
    4a26:	89 a9       	ldd	r24, Y+49	; 0x31
    4a28:	99 a1       	ldd	r25, Y+33	; 0x21
    4a2a:	89 17       	cp	r24, r25
    4a2c:	08 f0       	brcs	.+2      	; 0x4a30 <Lcd_DisplayNumber+0x178>
    4a2e:	1d ae       	std	Y+61, r1	; 0x3d
    4a30:	8a ad       	ldd	r24, Y+58	; 0x3a
    4a32:	99 a9       	ldd	r25, Y+49	; 0x31
    4a34:	89 0f       	add	r24, r25
    4a36:	8e af       	std	Y+62, r24	; 0x3e
    4a38:	81 e0       	ldi	r24, 0x01	; 1
    4a3a:	8f af       	std	Y+63, r24	; 0x3f
    4a3c:	9e ad       	ldd	r25, Y+62	; 0x3e
    4a3e:	89 a9       	ldd	r24, Y+49	; 0x31
    4a40:	98 17       	cp	r25, r24
    4a42:	08 f0       	brcs	.+2      	; 0x4a46 <Lcd_DisplayNumber+0x18e>
    4a44:	1f ae       	std	Y+63, r1	; 0x3f
    4a46:	9d ad       	ldd	r25, Y+61	; 0x3d
    4a48:	8f ad       	ldd	r24, Y+63	; 0x3f
    4a4a:	98 2b       	or	r25, r24
    4a4c:	9d af       	std	Y+61, r25	; 0x3d
    4a4e:	9e ad       	ldd	r25, Y+62	; 0x3e
    4a50:	99 ab       	std	Y+49, r25	; 0x31
    4a52:	8a a1       	ldd	r24, Y+34	; 0x22
    4a54:	9a a5       	ldd	r25, Y+42	; 0x2a
    4a56:	89 0f       	add	r24, r25
    4a58:	8a ab       	std	Y+50, r24	; 0x32
    4a5a:	81 e0       	ldi	r24, 0x01	; 1
    4a5c:	21 96       	adiw	r28, 0x01	; 1
    4a5e:	8f af       	std	Y+63, r24	; 0x3f
    4a60:	21 97       	sbiw	r28, 0x01	; 1
    4a62:	9a a9       	ldd	r25, Y+50	; 0x32
    4a64:	8a a1       	ldd	r24, Y+34	; 0x22
    4a66:	98 17       	cp	r25, r24
    4a68:	18 f0       	brcs	.+6      	; 0x4a70 <Lcd_DisplayNumber+0x1b8>
    4a6a:	21 96       	adiw	r28, 0x01	; 1
    4a6c:	1f ae       	std	Y+63, r1	; 0x3f
    4a6e:	21 97       	sbiw	r28, 0x01	; 1
    4a70:	9d ad       	ldd	r25, Y+61	; 0x3d
    4a72:	8a a9       	ldd	r24, Y+50	; 0x32
    4a74:	98 0f       	add	r25, r24
    4a76:	22 96       	adiw	r28, 0x02	; 2
    4a78:	9f af       	std	Y+63, r25	; 0x3f
    4a7a:	22 97       	sbiw	r28, 0x02	; 2
    4a7c:	91 e0       	ldi	r25, 0x01	; 1
    4a7e:	23 96       	adiw	r28, 0x03	; 3
    4a80:	9f af       	std	Y+63, r25	; 0x3f
    4a82:	23 97       	sbiw	r28, 0x03	; 3
    4a84:	22 96       	adiw	r28, 0x02	; 2
    4a86:	8f ad       	ldd	r24, Y+63	; 0x3f
    4a88:	22 97       	sbiw	r28, 0x02	; 2
    4a8a:	9a a9       	ldd	r25, Y+50	; 0x32
    4a8c:	89 17       	cp	r24, r25
    4a8e:	18 f0       	brcs	.+6      	; 0x4a96 <Lcd_DisplayNumber+0x1de>
    4a90:	23 96       	adiw	r28, 0x03	; 3
    4a92:	1f ae       	std	Y+63, r1	; 0x3f
    4a94:	23 97       	sbiw	r28, 0x03	; 3
    4a96:	21 96       	adiw	r28, 0x01	; 1
    4a98:	8f ad       	ldd	r24, Y+63	; 0x3f
    4a9a:	21 97       	sbiw	r28, 0x01	; 1
    4a9c:	23 96       	adiw	r28, 0x03	; 3
    4a9e:	9f ad       	ldd	r25, Y+63	; 0x3f
    4aa0:	23 97       	sbiw	r28, 0x03	; 3
    4aa2:	89 2b       	or	r24, r25
    4aa4:	21 96       	adiw	r28, 0x01	; 1
    4aa6:	8f af       	std	Y+63, r24	; 0x3f
    4aa8:	21 97       	sbiw	r28, 0x01	; 1
    4aaa:	22 96       	adiw	r28, 0x02	; 2
    4aac:	8f ad       	ldd	r24, Y+63	; 0x3f
    4aae:	22 97       	sbiw	r28, 0x02	; 2
    4ab0:	8a ab       	std	Y+50, r24	; 0x32
    4ab2:	9b a1       	ldd	r25, Y+35	; 0x23
    4ab4:	8b a5       	ldd	r24, Y+43	; 0x2b
    4ab6:	98 0f       	add	r25, r24
    4ab8:	9b ab       	std	Y+51, r25	; 0x33
    4aba:	91 e0       	ldi	r25, 0x01	; 1
    4abc:	24 96       	adiw	r28, 0x04	; 4
    4abe:	9f af       	std	Y+63, r25	; 0x3f
    4ac0:	24 97       	sbiw	r28, 0x04	; 4
    4ac2:	8b a9       	ldd	r24, Y+51	; 0x33
    4ac4:	9b a1       	ldd	r25, Y+35	; 0x23
    4ac6:	89 17       	cp	r24, r25
    4ac8:	18 f0       	brcs	.+6      	; 0x4ad0 <Lcd_DisplayNumber+0x218>
    4aca:	24 96       	adiw	r28, 0x04	; 4
    4acc:	1f ae       	std	Y+63, r1	; 0x3f
    4ace:	24 97       	sbiw	r28, 0x04	; 4
    4ad0:	21 96       	adiw	r28, 0x01	; 1
    4ad2:	8f ad       	ldd	r24, Y+63	; 0x3f
    4ad4:	21 97       	sbiw	r28, 0x01	; 1
    4ad6:	9b a9       	ldd	r25, Y+51	; 0x33
    4ad8:	89 0f       	add	r24, r25
    4ada:	25 96       	adiw	r28, 0x05	; 5
    4adc:	8f af       	std	Y+63, r24	; 0x3f
    4ade:	25 97       	sbiw	r28, 0x05	; 5
    4ae0:	81 e0       	ldi	r24, 0x01	; 1
    4ae2:	26 96       	adiw	r28, 0x06	; 6
    4ae4:	8f af       	std	Y+63, r24	; 0x3f
    4ae6:	26 97       	sbiw	r28, 0x06	; 6
    4ae8:	25 96       	adiw	r28, 0x05	; 5
    4aea:	9f ad       	ldd	r25, Y+63	; 0x3f
    4aec:	25 97       	sbiw	r28, 0x05	; 5
    4aee:	8b a9       	ldd	r24, Y+51	; 0x33
    4af0:	98 17       	cp	r25, r24
    4af2:	18 f0       	brcs	.+6      	; 0x4afa <Lcd_DisplayNumber+0x242>
    4af4:	26 96       	adiw	r28, 0x06	; 6
    4af6:	1f ae       	std	Y+63, r1	; 0x3f
    4af8:	26 97       	sbiw	r28, 0x06	; 6
    4afa:	24 96       	adiw	r28, 0x04	; 4
    4afc:	9f ad       	ldd	r25, Y+63	; 0x3f
    4afe:	24 97       	sbiw	r28, 0x04	; 4
    4b00:	26 96       	adiw	r28, 0x06	; 6
    4b02:	8f ad       	ldd	r24, Y+63	; 0x3f
    4b04:	26 97       	sbiw	r28, 0x06	; 6
    4b06:	98 2b       	or	r25, r24
    4b08:	24 96       	adiw	r28, 0x04	; 4
    4b0a:	9f af       	std	Y+63, r25	; 0x3f
    4b0c:	24 97       	sbiw	r28, 0x04	; 4
    4b0e:	25 96       	adiw	r28, 0x05	; 5
    4b10:	9f ad       	ldd	r25, Y+63	; 0x3f
    4b12:	25 97       	sbiw	r28, 0x05	; 5
    4b14:	9b ab       	std	Y+51, r25	; 0x33
    4b16:	8c a1       	ldd	r24, Y+36	; 0x24
    4b18:	9c a5       	ldd	r25, Y+44	; 0x2c
    4b1a:	89 0f       	add	r24, r25
    4b1c:	8c ab       	std	Y+52, r24	; 0x34
    4b1e:	81 e0       	ldi	r24, 0x01	; 1
    4b20:	27 96       	adiw	r28, 0x07	; 7
    4b22:	8f af       	std	Y+63, r24	; 0x3f
    4b24:	27 97       	sbiw	r28, 0x07	; 7
    4b26:	9c a9       	ldd	r25, Y+52	; 0x34
    4b28:	8c a1       	ldd	r24, Y+36	; 0x24
    4b2a:	98 17       	cp	r25, r24
    4b2c:	18 f0       	brcs	.+6      	; 0x4b34 <Lcd_DisplayNumber+0x27c>
    4b2e:	27 96       	adiw	r28, 0x07	; 7
    4b30:	1f ae       	std	Y+63, r1	; 0x3f
    4b32:	27 97       	sbiw	r28, 0x07	; 7
    4b34:	24 96       	adiw	r28, 0x04	; 4
    4b36:	9f ad       	ldd	r25, Y+63	; 0x3f
    4b38:	24 97       	sbiw	r28, 0x04	; 4
    4b3a:	8c a9       	ldd	r24, Y+52	; 0x34
    4b3c:	98 0f       	add	r25, r24
    4b3e:	28 96       	adiw	r28, 0x08	; 8
    4b40:	9f af       	std	Y+63, r25	; 0x3f
    4b42:	28 97       	sbiw	r28, 0x08	; 8
    4b44:	91 e0       	ldi	r25, 0x01	; 1
    4b46:	29 96       	adiw	r28, 0x09	; 9
    4b48:	9f af       	std	Y+63, r25	; 0x3f
    4b4a:	29 97       	sbiw	r28, 0x09	; 9
    4b4c:	28 96       	adiw	r28, 0x08	; 8
    4b4e:	8f ad       	ldd	r24, Y+63	; 0x3f
    4b50:	28 97       	sbiw	r28, 0x08	; 8
    4b52:	9c a9       	ldd	r25, Y+52	; 0x34
    4b54:	89 17       	cp	r24, r25
    4b56:	18 f0       	brcs	.+6      	; 0x4b5e <Lcd_DisplayNumber+0x2a6>
    4b58:	29 96       	adiw	r28, 0x09	; 9
    4b5a:	1f ae       	std	Y+63, r1	; 0x3f
    4b5c:	29 97       	sbiw	r28, 0x09	; 9
    4b5e:	27 96       	adiw	r28, 0x07	; 7
    4b60:	8f ad       	ldd	r24, Y+63	; 0x3f
    4b62:	27 97       	sbiw	r28, 0x07	; 7
    4b64:	29 96       	adiw	r28, 0x09	; 9
    4b66:	9f ad       	ldd	r25, Y+63	; 0x3f
    4b68:	29 97       	sbiw	r28, 0x09	; 9
    4b6a:	89 2b       	or	r24, r25
    4b6c:	27 96       	adiw	r28, 0x07	; 7
    4b6e:	8f af       	std	Y+63, r24	; 0x3f
    4b70:	27 97       	sbiw	r28, 0x07	; 7
    4b72:	28 96       	adiw	r28, 0x08	; 8
    4b74:	8f ad       	ldd	r24, Y+63	; 0x3f
    4b76:	28 97       	sbiw	r28, 0x08	; 8
    4b78:	8c ab       	std	Y+52, r24	; 0x34
    4b7a:	9d a1       	ldd	r25, Y+37	; 0x25
    4b7c:	8d a5       	ldd	r24, Y+45	; 0x2d
    4b7e:	98 0f       	add	r25, r24
    4b80:	9d ab       	std	Y+53, r25	; 0x35
    4b82:	27 96       	adiw	r28, 0x07	; 7
    4b84:	8f ad       	ldd	r24, Y+63	; 0x3f
    4b86:	27 97       	sbiw	r28, 0x07	; 7
    4b88:	9d a9       	ldd	r25, Y+53	; 0x35
    4b8a:	89 0f       	add	r24, r25
    4b8c:	8d ab       	std	Y+53, r24	; 0x35
    4b8e:	8e a5       	ldd	r24, Y+46	; 0x2e
    4b90:	8e 8b       	std	Y+22, r24	; 0x16
    4b92:	9f a5       	ldd	r25, Y+47	; 0x2f
    4b94:	9f 8b       	std	Y+23, r25	; 0x17
    4b96:	88 a9       	ldd	r24, Y+48	; 0x30
    4b98:	88 8f       	std	Y+24, r24	; 0x18
    4b9a:	99 a9       	ldd	r25, Y+49	; 0x31
    4b9c:	99 8f       	std	Y+25, r25	; 0x19
    4b9e:	8a a9       	ldd	r24, Y+50	; 0x32
    4ba0:	8a 8f       	std	Y+26, r24	; 0x1a
    4ba2:	9b a9       	ldd	r25, Y+51	; 0x33
    4ba4:	9b 8f       	std	Y+27, r25	; 0x1b
    4ba6:	8c a9       	ldd	r24, Y+52	; 0x34
    4ba8:	8c 8f       	std	Y+28, r24	; 0x1c
    4baa:	9d a9       	ldd	r25, Y+53	; 0x35
    4bac:	9d 8f       	std	Y+29, r25	; 0x1d
    4bae:	8a 85       	ldd	r24, Y+10	; 0x0a
    4bb0:	9b 85       	ldd	r25, Y+11	; 0x0b
    4bb2:	ac 85       	ldd	r26, Y+12	; 0x0c
    4bb4:	bd 85       	ldd	r27, Y+13	; 0x0d
    4bb6:	2a e0       	ldi	r18, 0x0A	; 10
    4bb8:	30 e0       	ldi	r19, 0x00	; 0
    4bba:	40 e0       	ldi	r20, 0x00	; 0
    4bbc:	50 e0       	ldi	r21, 0x00	; 0
    4bbe:	bc 01       	movw	r22, r24
    4bc0:	cd 01       	movw	r24, r26
    4bc2:	0e 94 4d 32 	call	0x649a	; 0x649a <__divmodsi4>
    4bc6:	dc 01       	movw	r26, r24
    4bc8:	cb 01       	movw	r24, r22
    4bca:	9c 01       	movw	r18, r24
    4bcc:	ad 01       	movw	r20, r26
    4bce:	da 01       	movw	r26, r20
    4bd0:	c9 01       	movw	r24, r18
    4bd2:	bb 0f       	add	r27, r27
    4bd4:	88 0b       	sbc	r24, r24
    4bd6:	98 2f       	mov	r25, r24
    4bd8:	dc 01       	movw	r26, r24
    4bda:	2e 87       	std	Y+14, r18	; 0x0e
    4bdc:	3f 87       	std	Y+15, r19	; 0x0f
    4bde:	48 8b       	std	Y+16, r20	; 0x10
    4be0:	59 8b       	std	Y+17, r21	; 0x11
    4be2:	8a 8b       	std	Y+18, r24	; 0x12
    4be4:	8b 8b       	std	Y+19, r24	; 0x13
    4be6:	8c 8b       	std	Y+20, r24	; 0x14
    4be8:	8d 8b       	std	Y+21, r24	; 0x15
    4bea:	8e 89       	ldd	r24, Y+22	; 0x16
    4bec:	9e 85       	ldd	r25, Y+14	; 0x0e
    4bee:	89 0f       	add	r24, r25
    4bf0:	2a 96       	adiw	r28, 0x0a	; 10
    4bf2:	8f af       	std	Y+63, r24	; 0x3f
    4bf4:	2a 97       	sbiw	r28, 0x0a	; 10
    4bf6:	81 e0       	ldi	r24, 0x01	; 1
    4bf8:	62 96       	adiw	r28, 0x12	; 18
    4bfa:	8f af       	std	Y+63, r24	; 0x3f
    4bfc:	62 97       	sbiw	r28, 0x12	; 18
    4bfe:	2a 96       	adiw	r28, 0x0a	; 10
    4c00:	9f ad       	ldd	r25, Y+63	; 0x3f
    4c02:	2a 97       	sbiw	r28, 0x0a	; 10
    4c04:	8e 89       	ldd	r24, Y+22	; 0x16
    4c06:	98 17       	cp	r25, r24
    4c08:	18 f0       	brcs	.+6      	; 0x4c10 <Lcd_DisplayNumber+0x358>
    4c0a:	62 96       	adiw	r28, 0x12	; 18
    4c0c:	1f ae       	std	Y+63, r1	; 0x3f
    4c0e:	62 97       	sbiw	r28, 0x12	; 18
    4c10:	9f 89       	ldd	r25, Y+23	; 0x17
    4c12:	8f 85       	ldd	r24, Y+15	; 0x0f
    4c14:	98 0f       	add	r25, r24
    4c16:	2b 96       	adiw	r28, 0x0b	; 11
    4c18:	9f af       	std	Y+63, r25	; 0x3f
    4c1a:	2b 97       	sbiw	r28, 0x0b	; 11
    4c1c:	91 e0       	ldi	r25, 0x01	; 1
    4c1e:	63 96       	adiw	r28, 0x13	; 19
    4c20:	9f af       	std	Y+63, r25	; 0x3f
    4c22:	63 97       	sbiw	r28, 0x13	; 19
    4c24:	2b 96       	adiw	r28, 0x0b	; 11
    4c26:	8f ad       	ldd	r24, Y+63	; 0x3f
    4c28:	2b 97       	sbiw	r28, 0x0b	; 11
    4c2a:	9f 89       	ldd	r25, Y+23	; 0x17
    4c2c:	89 17       	cp	r24, r25
    4c2e:	18 f0       	brcs	.+6      	; 0x4c36 <Lcd_DisplayNumber+0x37e>
    4c30:	63 96       	adiw	r28, 0x13	; 19
    4c32:	1f ae       	std	Y+63, r1	; 0x3f
    4c34:	63 97       	sbiw	r28, 0x13	; 19
    4c36:	62 96       	adiw	r28, 0x12	; 18
    4c38:	8f ad       	ldd	r24, Y+63	; 0x3f
    4c3a:	62 97       	sbiw	r28, 0x12	; 18
    4c3c:	2b 96       	adiw	r28, 0x0b	; 11
    4c3e:	9f ad       	ldd	r25, Y+63	; 0x3f
    4c40:	2b 97       	sbiw	r28, 0x0b	; 11
    4c42:	89 0f       	add	r24, r25
    4c44:	64 96       	adiw	r28, 0x14	; 20
    4c46:	8f af       	std	Y+63, r24	; 0x3f
    4c48:	64 97       	sbiw	r28, 0x14	; 20
    4c4a:	81 e0       	ldi	r24, 0x01	; 1
    4c4c:	65 96       	adiw	r28, 0x15	; 21
    4c4e:	8f af       	std	Y+63, r24	; 0x3f
    4c50:	65 97       	sbiw	r28, 0x15	; 21
    4c52:	64 96       	adiw	r28, 0x14	; 20
    4c54:	9f ad       	ldd	r25, Y+63	; 0x3f
    4c56:	64 97       	sbiw	r28, 0x14	; 20
    4c58:	2b 96       	adiw	r28, 0x0b	; 11
    4c5a:	8f ad       	ldd	r24, Y+63	; 0x3f
    4c5c:	2b 97       	sbiw	r28, 0x0b	; 11
    4c5e:	98 17       	cp	r25, r24
    4c60:	18 f0       	brcs	.+6      	; 0x4c68 <Lcd_DisplayNumber+0x3b0>
    4c62:	65 96       	adiw	r28, 0x15	; 21
    4c64:	1f ae       	std	Y+63, r1	; 0x3f
    4c66:	65 97       	sbiw	r28, 0x15	; 21
    4c68:	63 96       	adiw	r28, 0x13	; 19
    4c6a:	9f ad       	ldd	r25, Y+63	; 0x3f
    4c6c:	63 97       	sbiw	r28, 0x13	; 19
    4c6e:	65 96       	adiw	r28, 0x15	; 21
    4c70:	8f ad       	ldd	r24, Y+63	; 0x3f
    4c72:	65 97       	sbiw	r28, 0x15	; 21
    4c74:	98 2b       	or	r25, r24
    4c76:	63 96       	adiw	r28, 0x13	; 19
    4c78:	9f af       	std	Y+63, r25	; 0x3f
    4c7a:	63 97       	sbiw	r28, 0x13	; 19
    4c7c:	64 96       	adiw	r28, 0x14	; 20
    4c7e:	9f ad       	ldd	r25, Y+63	; 0x3f
    4c80:	64 97       	sbiw	r28, 0x14	; 20
    4c82:	2b 96       	adiw	r28, 0x0b	; 11
    4c84:	9f af       	std	Y+63, r25	; 0x3f
    4c86:	2b 97       	sbiw	r28, 0x0b	; 11
    4c88:	88 8d       	ldd	r24, Y+24	; 0x18
    4c8a:	98 89       	ldd	r25, Y+16	; 0x10
    4c8c:	89 0f       	add	r24, r25
    4c8e:	2c 96       	adiw	r28, 0x0c	; 12
    4c90:	8f af       	std	Y+63, r24	; 0x3f
    4c92:	2c 97       	sbiw	r28, 0x0c	; 12
    4c94:	81 e0       	ldi	r24, 0x01	; 1
    4c96:	66 96       	adiw	r28, 0x16	; 22
    4c98:	8f af       	std	Y+63, r24	; 0x3f
    4c9a:	66 97       	sbiw	r28, 0x16	; 22
    4c9c:	2c 96       	adiw	r28, 0x0c	; 12
    4c9e:	9f ad       	ldd	r25, Y+63	; 0x3f
    4ca0:	2c 97       	sbiw	r28, 0x0c	; 12
    4ca2:	88 8d       	ldd	r24, Y+24	; 0x18
    4ca4:	98 17       	cp	r25, r24
    4ca6:	18 f0       	brcs	.+6      	; 0x4cae <Lcd_DisplayNumber+0x3f6>
    4ca8:	66 96       	adiw	r28, 0x16	; 22
    4caa:	1f ae       	std	Y+63, r1	; 0x3f
    4cac:	66 97       	sbiw	r28, 0x16	; 22
    4cae:	63 96       	adiw	r28, 0x13	; 19
    4cb0:	9f ad       	ldd	r25, Y+63	; 0x3f
    4cb2:	63 97       	sbiw	r28, 0x13	; 19
    4cb4:	2c 96       	adiw	r28, 0x0c	; 12
    4cb6:	8f ad       	ldd	r24, Y+63	; 0x3f
    4cb8:	2c 97       	sbiw	r28, 0x0c	; 12
    4cba:	98 0f       	add	r25, r24
    4cbc:	67 96       	adiw	r28, 0x17	; 23
    4cbe:	9f af       	std	Y+63, r25	; 0x3f
    4cc0:	67 97       	sbiw	r28, 0x17	; 23
    4cc2:	91 e0       	ldi	r25, 0x01	; 1
    4cc4:	68 96       	adiw	r28, 0x18	; 24
    4cc6:	9f af       	std	Y+63, r25	; 0x3f
    4cc8:	68 97       	sbiw	r28, 0x18	; 24
    4cca:	67 96       	adiw	r28, 0x17	; 23
    4ccc:	8f ad       	ldd	r24, Y+63	; 0x3f
    4cce:	67 97       	sbiw	r28, 0x17	; 23
    4cd0:	2c 96       	adiw	r28, 0x0c	; 12
    4cd2:	9f ad       	ldd	r25, Y+63	; 0x3f
    4cd4:	2c 97       	sbiw	r28, 0x0c	; 12
    4cd6:	89 17       	cp	r24, r25
    4cd8:	18 f0       	brcs	.+6      	; 0x4ce0 <Lcd_DisplayNumber+0x428>
    4cda:	68 96       	adiw	r28, 0x18	; 24
    4cdc:	1f ae       	std	Y+63, r1	; 0x3f
    4cde:	68 97       	sbiw	r28, 0x18	; 24
    4ce0:	66 96       	adiw	r28, 0x16	; 22
    4ce2:	8f ad       	ldd	r24, Y+63	; 0x3f
    4ce4:	66 97       	sbiw	r28, 0x16	; 22
    4ce6:	68 96       	adiw	r28, 0x18	; 24
    4ce8:	9f ad       	ldd	r25, Y+63	; 0x3f
    4cea:	68 97       	sbiw	r28, 0x18	; 24
    4cec:	89 2b       	or	r24, r25
    4cee:	66 96       	adiw	r28, 0x16	; 22
    4cf0:	8f af       	std	Y+63, r24	; 0x3f
    4cf2:	66 97       	sbiw	r28, 0x16	; 22
    4cf4:	67 96       	adiw	r28, 0x17	; 23
    4cf6:	8f ad       	ldd	r24, Y+63	; 0x3f
    4cf8:	67 97       	sbiw	r28, 0x17	; 23
    4cfa:	2c 96       	adiw	r28, 0x0c	; 12
    4cfc:	8f af       	std	Y+63, r24	; 0x3f
    4cfe:	2c 97       	sbiw	r28, 0x0c	; 12
    4d00:	99 8d       	ldd	r25, Y+25	; 0x19
    4d02:	89 89       	ldd	r24, Y+17	; 0x11
    4d04:	98 0f       	add	r25, r24
    4d06:	2d 96       	adiw	r28, 0x0d	; 13
    4d08:	9f af       	std	Y+63, r25	; 0x3f
    4d0a:	2d 97       	sbiw	r28, 0x0d	; 13
    4d0c:	91 e0       	ldi	r25, 0x01	; 1
    4d0e:	69 96       	adiw	r28, 0x19	; 25
    4d10:	9f af       	std	Y+63, r25	; 0x3f
    4d12:	69 97       	sbiw	r28, 0x19	; 25
    4d14:	2d 96       	adiw	r28, 0x0d	; 13
    4d16:	8f ad       	ldd	r24, Y+63	; 0x3f
    4d18:	2d 97       	sbiw	r28, 0x0d	; 13
    4d1a:	99 8d       	ldd	r25, Y+25	; 0x19
    4d1c:	89 17       	cp	r24, r25
    4d1e:	18 f0       	brcs	.+6      	; 0x4d26 <Lcd_DisplayNumber+0x46e>
    4d20:	69 96       	adiw	r28, 0x19	; 25
    4d22:	1f ae       	std	Y+63, r1	; 0x3f
    4d24:	69 97       	sbiw	r28, 0x19	; 25
    4d26:	66 96       	adiw	r28, 0x16	; 22
    4d28:	8f ad       	ldd	r24, Y+63	; 0x3f
    4d2a:	66 97       	sbiw	r28, 0x16	; 22
    4d2c:	2d 96       	adiw	r28, 0x0d	; 13
    4d2e:	9f ad       	ldd	r25, Y+63	; 0x3f
    4d30:	2d 97       	sbiw	r28, 0x0d	; 13
    4d32:	89 0f       	add	r24, r25
    4d34:	6a 96       	adiw	r28, 0x1a	; 26
    4d36:	8f af       	std	Y+63, r24	; 0x3f
    4d38:	6a 97       	sbiw	r28, 0x1a	; 26
    4d3a:	81 e0       	ldi	r24, 0x01	; 1
    4d3c:	6b 96       	adiw	r28, 0x1b	; 27
    4d3e:	8f af       	std	Y+63, r24	; 0x3f
    4d40:	6b 97       	sbiw	r28, 0x1b	; 27
    4d42:	6a 96       	adiw	r28, 0x1a	; 26
    4d44:	9f ad       	ldd	r25, Y+63	; 0x3f
    4d46:	6a 97       	sbiw	r28, 0x1a	; 26
    4d48:	2d 96       	adiw	r28, 0x0d	; 13
    4d4a:	8f ad       	ldd	r24, Y+63	; 0x3f
    4d4c:	2d 97       	sbiw	r28, 0x0d	; 13
    4d4e:	98 17       	cp	r25, r24
    4d50:	18 f0       	brcs	.+6      	; 0x4d58 <Lcd_DisplayNumber+0x4a0>
    4d52:	6b 96       	adiw	r28, 0x1b	; 27
    4d54:	1f ae       	std	Y+63, r1	; 0x3f
    4d56:	6b 97       	sbiw	r28, 0x1b	; 27
    4d58:	69 96       	adiw	r28, 0x19	; 25
    4d5a:	9f ad       	ldd	r25, Y+63	; 0x3f
    4d5c:	69 97       	sbiw	r28, 0x19	; 25
    4d5e:	6b 96       	adiw	r28, 0x1b	; 27
    4d60:	8f ad       	ldd	r24, Y+63	; 0x3f
    4d62:	6b 97       	sbiw	r28, 0x1b	; 27
    4d64:	98 2b       	or	r25, r24
    4d66:	69 96       	adiw	r28, 0x19	; 25
    4d68:	9f af       	std	Y+63, r25	; 0x3f
    4d6a:	69 97       	sbiw	r28, 0x19	; 25
    4d6c:	6a 96       	adiw	r28, 0x1a	; 26
    4d6e:	9f ad       	ldd	r25, Y+63	; 0x3f
    4d70:	6a 97       	sbiw	r28, 0x1a	; 26
    4d72:	2d 96       	adiw	r28, 0x0d	; 13
    4d74:	9f af       	std	Y+63, r25	; 0x3f
    4d76:	2d 97       	sbiw	r28, 0x0d	; 13
    4d78:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4d7a:	9a 89       	ldd	r25, Y+18	; 0x12
    4d7c:	89 0f       	add	r24, r25
    4d7e:	2e 96       	adiw	r28, 0x0e	; 14
    4d80:	8f af       	std	Y+63, r24	; 0x3f
    4d82:	2e 97       	sbiw	r28, 0x0e	; 14
    4d84:	81 e0       	ldi	r24, 0x01	; 1
    4d86:	6c 96       	adiw	r28, 0x1c	; 28
    4d88:	8f af       	std	Y+63, r24	; 0x3f
    4d8a:	6c 97       	sbiw	r28, 0x1c	; 28
    4d8c:	2e 96       	adiw	r28, 0x0e	; 14
    4d8e:	9f ad       	ldd	r25, Y+63	; 0x3f
    4d90:	2e 97       	sbiw	r28, 0x0e	; 14
    4d92:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4d94:	98 17       	cp	r25, r24
    4d96:	18 f0       	brcs	.+6      	; 0x4d9e <Lcd_DisplayNumber+0x4e6>
    4d98:	6c 96       	adiw	r28, 0x1c	; 28
    4d9a:	1f ae       	std	Y+63, r1	; 0x3f
    4d9c:	6c 97       	sbiw	r28, 0x1c	; 28
    4d9e:	69 96       	adiw	r28, 0x19	; 25
    4da0:	9f ad       	ldd	r25, Y+63	; 0x3f
    4da2:	69 97       	sbiw	r28, 0x19	; 25
    4da4:	2e 96       	adiw	r28, 0x0e	; 14
    4da6:	8f ad       	ldd	r24, Y+63	; 0x3f
    4da8:	2e 97       	sbiw	r28, 0x0e	; 14
    4daa:	98 0f       	add	r25, r24
    4dac:	6d 96       	adiw	r28, 0x1d	; 29
    4dae:	9f af       	std	Y+63, r25	; 0x3f
    4db0:	6d 97       	sbiw	r28, 0x1d	; 29
    4db2:	91 e0       	ldi	r25, 0x01	; 1
    4db4:	6e 96       	adiw	r28, 0x1e	; 30
    4db6:	9f af       	std	Y+63, r25	; 0x3f
    4db8:	6e 97       	sbiw	r28, 0x1e	; 30
    4dba:	6d 96       	adiw	r28, 0x1d	; 29
    4dbc:	8f ad       	ldd	r24, Y+63	; 0x3f
    4dbe:	6d 97       	sbiw	r28, 0x1d	; 29
    4dc0:	2e 96       	adiw	r28, 0x0e	; 14
    4dc2:	9f ad       	ldd	r25, Y+63	; 0x3f
    4dc4:	2e 97       	sbiw	r28, 0x0e	; 14
    4dc6:	89 17       	cp	r24, r25
    4dc8:	18 f0       	brcs	.+6      	; 0x4dd0 <Lcd_DisplayNumber+0x518>
    4dca:	6e 96       	adiw	r28, 0x1e	; 30
    4dcc:	1f ae       	std	Y+63, r1	; 0x3f
    4dce:	6e 97       	sbiw	r28, 0x1e	; 30
    4dd0:	6c 96       	adiw	r28, 0x1c	; 28
    4dd2:	8f ad       	ldd	r24, Y+63	; 0x3f
    4dd4:	6c 97       	sbiw	r28, 0x1c	; 28
    4dd6:	6e 96       	adiw	r28, 0x1e	; 30
    4dd8:	9f ad       	ldd	r25, Y+63	; 0x3f
    4dda:	6e 97       	sbiw	r28, 0x1e	; 30
    4ddc:	89 2b       	or	r24, r25
    4dde:	6c 96       	adiw	r28, 0x1c	; 28
    4de0:	8f af       	std	Y+63, r24	; 0x3f
    4de2:	6c 97       	sbiw	r28, 0x1c	; 28
    4de4:	6d 96       	adiw	r28, 0x1d	; 29
    4de6:	8f ad       	ldd	r24, Y+63	; 0x3f
    4de8:	6d 97       	sbiw	r28, 0x1d	; 29
    4dea:	2e 96       	adiw	r28, 0x0e	; 14
    4dec:	8f af       	std	Y+63, r24	; 0x3f
    4dee:	2e 97       	sbiw	r28, 0x0e	; 14
    4df0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4df2:	8b 89       	ldd	r24, Y+19	; 0x13
    4df4:	98 0f       	add	r25, r24
    4df6:	2f 96       	adiw	r28, 0x0f	; 15
    4df8:	9f af       	std	Y+63, r25	; 0x3f
    4dfa:	2f 97       	sbiw	r28, 0x0f	; 15
    4dfc:	91 e0       	ldi	r25, 0x01	; 1
    4dfe:	6f 96       	adiw	r28, 0x1f	; 31
    4e00:	9f af       	std	Y+63, r25	; 0x3f
    4e02:	6f 97       	sbiw	r28, 0x1f	; 31
    4e04:	2f 96       	adiw	r28, 0x0f	; 15
    4e06:	8f ad       	ldd	r24, Y+63	; 0x3f
    4e08:	2f 97       	sbiw	r28, 0x0f	; 15
    4e0a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4e0c:	89 17       	cp	r24, r25
    4e0e:	18 f0       	brcs	.+6      	; 0x4e16 <Lcd_DisplayNumber+0x55e>
    4e10:	6f 96       	adiw	r28, 0x1f	; 31
    4e12:	1f ae       	std	Y+63, r1	; 0x3f
    4e14:	6f 97       	sbiw	r28, 0x1f	; 31
    4e16:	6c 96       	adiw	r28, 0x1c	; 28
    4e18:	8f ad       	ldd	r24, Y+63	; 0x3f
    4e1a:	6c 97       	sbiw	r28, 0x1c	; 28
    4e1c:	2f 96       	adiw	r28, 0x0f	; 15
    4e1e:	9f ad       	ldd	r25, Y+63	; 0x3f
    4e20:	2f 97       	sbiw	r28, 0x0f	; 15
    4e22:	89 0f       	add	r24, r25
    4e24:	a0 96       	adiw	r28, 0x20	; 32
    4e26:	8f af       	std	Y+63, r24	; 0x3f
    4e28:	a0 97       	sbiw	r28, 0x20	; 32
    4e2a:	81 e0       	ldi	r24, 0x01	; 1
    4e2c:	a1 96       	adiw	r28, 0x21	; 33
    4e2e:	8f af       	std	Y+63, r24	; 0x3f
    4e30:	a1 97       	sbiw	r28, 0x21	; 33
    4e32:	a0 96       	adiw	r28, 0x20	; 32
    4e34:	9f ad       	ldd	r25, Y+63	; 0x3f
    4e36:	a0 97       	sbiw	r28, 0x20	; 32
    4e38:	2f 96       	adiw	r28, 0x0f	; 15
    4e3a:	8f ad       	ldd	r24, Y+63	; 0x3f
    4e3c:	2f 97       	sbiw	r28, 0x0f	; 15
    4e3e:	98 17       	cp	r25, r24
    4e40:	18 f0       	brcs	.+6      	; 0x4e48 <Lcd_DisplayNumber+0x590>
    4e42:	a1 96       	adiw	r28, 0x21	; 33
    4e44:	1f ae       	std	Y+63, r1	; 0x3f
    4e46:	a1 97       	sbiw	r28, 0x21	; 33
    4e48:	6f 96       	adiw	r28, 0x1f	; 31
    4e4a:	9f ad       	ldd	r25, Y+63	; 0x3f
    4e4c:	6f 97       	sbiw	r28, 0x1f	; 31
    4e4e:	a1 96       	adiw	r28, 0x21	; 33
    4e50:	8f ad       	ldd	r24, Y+63	; 0x3f
    4e52:	a1 97       	sbiw	r28, 0x21	; 33
    4e54:	98 2b       	or	r25, r24
    4e56:	6f 96       	adiw	r28, 0x1f	; 31
    4e58:	9f af       	std	Y+63, r25	; 0x3f
    4e5a:	6f 97       	sbiw	r28, 0x1f	; 31
    4e5c:	a0 96       	adiw	r28, 0x20	; 32
    4e5e:	9f ad       	ldd	r25, Y+63	; 0x3f
    4e60:	a0 97       	sbiw	r28, 0x20	; 32
    4e62:	2f 96       	adiw	r28, 0x0f	; 15
    4e64:	9f af       	std	Y+63, r25	; 0x3f
    4e66:	2f 97       	sbiw	r28, 0x0f	; 15
    4e68:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4e6a:	9c 89       	ldd	r25, Y+20	; 0x14
    4e6c:	89 0f       	add	r24, r25
    4e6e:	60 96       	adiw	r28, 0x10	; 16
    4e70:	8f af       	std	Y+63, r24	; 0x3f
    4e72:	60 97       	sbiw	r28, 0x10	; 16
    4e74:	81 e0       	ldi	r24, 0x01	; 1
    4e76:	a2 96       	adiw	r28, 0x22	; 34
    4e78:	8f af       	std	Y+63, r24	; 0x3f
    4e7a:	a2 97       	sbiw	r28, 0x22	; 34
    4e7c:	60 96       	adiw	r28, 0x10	; 16
    4e7e:	9f ad       	ldd	r25, Y+63	; 0x3f
    4e80:	60 97       	sbiw	r28, 0x10	; 16
    4e82:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4e84:	98 17       	cp	r25, r24
    4e86:	18 f0       	brcs	.+6      	; 0x4e8e <Lcd_DisplayNumber+0x5d6>
    4e88:	a2 96       	adiw	r28, 0x22	; 34
    4e8a:	1f ae       	std	Y+63, r1	; 0x3f
    4e8c:	a2 97       	sbiw	r28, 0x22	; 34
    4e8e:	6f 96       	adiw	r28, 0x1f	; 31
    4e90:	9f ad       	ldd	r25, Y+63	; 0x3f
    4e92:	6f 97       	sbiw	r28, 0x1f	; 31
    4e94:	60 96       	adiw	r28, 0x10	; 16
    4e96:	8f ad       	ldd	r24, Y+63	; 0x3f
    4e98:	60 97       	sbiw	r28, 0x10	; 16
    4e9a:	98 0f       	add	r25, r24
    4e9c:	a3 96       	adiw	r28, 0x23	; 35
    4e9e:	9f af       	std	Y+63, r25	; 0x3f
    4ea0:	a3 97       	sbiw	r28, 0x23	; 35
    4ea2:	91 e0       	ldi	r25, 0x01	; 1
    4ea4:	a4 96       	adiw	r28, 0x24	; 36
    4ea6:	9f af       	std	Y+63, r25	; 0x3f
    4ea8:	a4 97       	sbiw	r28, 0x24	; 36
    4eaa:	a3 96       	adiw	r28, 0x23	; 35
    4eac:	8f ad       	ldd	r24, Y+63	; 0x3f
    4eae:	a3 97       	sbiw	r28, 0x23	; 35
    4eb0:	60 96       	adiw	r28, 0x10	; 16
    4eb2:	9f ad       	ldd	r25, Y+63	; 0x3f
    4eb4:	60 97       	sbiw	r28, 0x10	; 16
    4eb6:	89 17       	cp	r24, r25
    4eb8:	18 f0       	brcs	.+6      	; 0x4ec0 <Lcd_DisplayNumber+0x608>
    4eba:	a4 96       	adiw	r28, 0x24	; 36
    4ebc:	1f ae       	std	Y+63, r1	; 0x3f
    4ebe:	a4 97       	sbiw	r28, 0x24	; 36
    4ec0:	a2 96       	adiw	r28, 0x22	; 34
    4ec2:	8f ad       	ldd	r24, Y+63	; 0x3f
    4ec4:	a2 97       	sbiw	r28, 0x22	; 34
    4ec6:	a4 96       	adiw	r28, 0x24	; 36
    4ec8:	9f ad       	ldd	r25, Y+63	; 0x3f
    4eca:	a4 97       	sbiw	r28, 0x24	; 36
    4ecc:	89 2b       	or	r24, r25
    4ece:	a2 96       	adiw	r28, 0x22	; 34
    4ed0:	8f af       	std	Y+63, r24	; 0x3f
    4ed2:	a2 97       	sbiw	r28, 0x22	; 34
    4ed4:	a3 96       	adiw	r28, 0x23	; 35
    4ed6:	8f ad       	ldd	r24, Y+63	; 0x3f
    4ed8:	a3 97       	sbiw	r28, 0x23	; 35
    4eda:	60 96       	adiw	r28, 0x10	; 16
    4edc:	8f af       	std	Y+63, r24	; 0x3f
    4ede:	60 97       	sbiw	r28, 0x10	; 16
    4ee0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4ee2:	8d 89       	ldd	r24, Y+21	; 0x15
    4ee4:	98 0f       	add	r25, r24
    4ee6:	61 96       	adiw	r28, 0x11	; 17
    4ee8:	9f af       	std	Y+63, r25	; 0x3f
    4eea:	61 97       	sbiw	r28, 0x11	; 17
    4eec:	a2 96       	adiw	r28, 0x22	; 34
    4eee:	8f ad       	ldd	r24, Y+63	; 0x3f
    4ef0:	a2 97       	sbiw	r28, 0x22	; 34
    4ef2:	61 96       	adiw	r28, 0x11	; 17
    4ef4:	9f ad       	ldd	r25, Y+63	; 0x3f
    4ef6:	61 97       	sbiw	r28, 0x11	; 17
    4ef8:	89 0f       	add	r24, r25
    4efa:	61 96       	adiw	r28, 0x11	; 17
    4efc:	8f af       	std	Y+63, r24	; 0x3f
    4efe:	61 97       	sbiw	r28, 0x11	; 17
    4f00:	2a 96       	adiw	r28, 0x0a	; 10
    4f02:	8f ad       	ldd	r24, Y+63	; 0x3f
    4f04:	2a 97       	sbiw	r28, 0x0a	; 10
    4f06:	8a 83       	std	Y+2, r24	; 0x02
    4f08:	2b 96       	adiw	r28, 0x0b	; 11
    4f0a:	9f ad       	ldd	r25, Y+63	; 0x3f
    4f0c:	2b 97       	sbiw	r28, 0x0b	; 11
    4f0e:	9b 83       	std	Y+3, r25	; 0x03
    4f10:	2c 96       	adiw	r28, 0x0c	; 12
    4f12:	8f ad       	ldd	r24, Y+63	; 0x3f
    4f14:	2c 97       	sbiw	r28, 0x0c	; 12
    4f16:	8c 83       	std	Y+4, r24	; 0x04
    4f18:	2d 96       	adiw	r28, 0x0d	; 13
    4f1a:	9f ad       	ldd	r25, Y+63	; 0x3f
    4f1c:	2d 97       	sbiw	r28, 0x0d	; 13
    4f1e:	9d 83       	std	Y+5, r25	; 0x05
    4f20:	2e 96       	adiw	r28, 0x0e	; 14
    4f22:	8f ad       	ldd	r24, Y+63	; 0x3f
    4f24:	2e 97       	sbiw	r28, 0x0e	; 14
    4f26:	8e 83       	std	Y+6, r24	; 0x06
    4f28:	2f 96       	adiw	r28, 0x0f	; 15
    4f2a:	9f ad       	ldd	r25, Y+63	; 0x3f
    4f2c:	2f 97       	sbiw	r28, 0x0f	; 15
    4f2e:	9f 83       	std	Y+7, r25	; 0x07
    4f30:	60 96       	adiw	r28, 0x10	; 16
    4f32:	8f ad       	ldd	r24, Y+63	; 0x3f
    4f34:	60 97       	sbiw	r28, 0x10	; 16
    4f36:	88 87       	std	Y+8, r24	; 0x08
    4f38:	61 96       	adiw	r28, 0x11	; 17
    4f3a:	9f ad       	ldd	r25, Y+63	; 0x3f
    4f3c:	61 97       	sbiw	r28, 0x11	; 17
    4f3e:	99 87       	std	Y+9, r25	; 0x09
        number /= 10;
    4f40:	8a 85       	ldd	r24, Y+10	; 0x0a
    4f42:	9b 85       	ldd	r25, Y+11	; 0x0b
    4f44:	ac 85       	ldd	r26, Y+12	; 0x0c
    4f46:	bd 85       	ldd	r27, Y+13	; 0x0d
    4f48:	2a e0       	ldi	r18, 0x0A	; 10
    4f4a:	30 e0       	ldi	r19, 0x00	; 0
    4f4c:	40 e0       	ldi	r20, 0x00	; 0
    4f4e:	50 e0       	ldi	r21, 0x00	; 0
    4f50:	bc 01       	movw	r22, r24
    4f52:	cd 01       	movw	r24, r26
    4f54:	0e 94 4d 32 	call	0x649a	; 0x649a <__divmodsi4>
    4f58:	da 01       	movw	r26, r20
    4f5a:	c9 01       	movw	r24, r18
    4f5c:	8a 87       	std	Y+10, r24	; 0x0a
    4f5e:	9b 87       	std	Y+11, r25	; 0x0b
    4f60:	ac 87       	std	Y+12, r26	; 0x0c
    4f62:	bd 87       	std	Y+13, r27	; 0x0d
        digitsCounter++;
    4f64:	89 81       	ldd	r24, Y+1	; 0x01
    4f66:	8f 5f       	subi	r24, 0xFF	; 255
    4f68:	89 83       	std	Y+1, r24	; 0x01
    } while (number > 0);
    4f6a:	8a 85       	ldd	r24, Y+10	; 0x0a
    4f6c:	9b 85       	ldd	r25, Y+11	; 0x0b
    4f6e:	ac 85       	ldd	r26, Y+12	; 0x0c
    4f70:	bd 85       	ldd	r27, Y+13	; 0x0d
    4f72:	18 16       	cp	r1, r24
    4f74:	19 06       	cpc	r1, r25
    4f76:	1a 06       	cpc	r1, r26
    4f78:	1b 06       	cpc	r1, r27
    4f7a:	0c f4       	brge	.+2      	; 0x4f7e <Lcd_DisplayNumber+0x6c6>
    4f7c:	d5 cc       	rjmp	.-1622   	; 0x4928 <Lcd_DisplayNumber+0x70>
    4f7e:	61 c0       	rjmp	.+194    	; 0x5042 <Lcd_DisplayNumber+0x78a>
    while (digitsCounter > 0) {
        Lcd_SendData(reversed%10 + '0');
    4f80:	aa 80       	ldd	r10, Y+2	; 0x02
    4f82:	bb 80       	ldd	r11, Y+3	; 0x03
    4f84:	cc 80       	ldd	r12, Y+4	; 0x04
    4f86:	dd 80       	ldd	r13, Y+5	; 0x05
    4f88:	ee 80       	ldd	r14, Y+6	; 0x06
    4f8a:	ff 80       	ldd	r15, Y+7	; 0x07
    4f8c:	08 85       	ldd	r16, Y+8	; 0x08
    4f8e:	19 85       	ldd	r17, Y+9	; 0x09
    4f90:	2a 2d       	mov	r18, r10
    4f92:	3b 2d       	mov	r19, r11
    4f94:	4c 2d       	mov	r20, r12
    4f96:	5d 2d       	mov	r21, r13
    4f98:	6e 2d       	mov	r22, r14
    4f9a:	7f 2d       	mov	r23, r15
    4f9c:	80 2f       	mov	r24, r16
    4f9e:	91 2f       	mov	r25, r17
    4fa0:	0f 2e       	mov	r0, r31
    4fa2:	fa e0       	ldi	r31, 0x0A	; 10
    4fa4:	af 2e       	mov	r10, r31
    4fa6:	f0 2d       	mov	r31, r0
    4fa8:	bb 24       	eor	r11, r11
    4faa:	cc 24       	eor	r12, r12
    4fac:	dd 24       	eor	r13, r13
    4fae:	ee 24       	eor	r14, r14
    4fb0:	ff 24       	eor	r15, r15
    4fb2:	00 e0       	ldi	r16, 0x00	; 0
    4fb4:	10 e0       	ldi	r17, 0x00	; 0
    4fb6:	0e 94 3d 07 	call	0xe7a	; 0xe7a <__umoddi3>
    4fba:	a2 2e       	mov	r10, r18
    4fbc:	b3 2e       	mov	r11, r19
    4fbe:	c4 2e       	mov	r12, r20
    4fc0:	d5 2e       	mov	r13, r21
    4fc2:	e6 2e       	mov	r14, r22
    4fc4:	f7 2e       	mov	r15, r23
    4fc6:	08 2f       	mov	r16, r24
    4fc8:	19 2f       	mov	r17, r25
    4fca:	2a 2d       	mov	r18, r10
    4fcc:	3b 2d       	mov	r19, r11
    4fce:	4c 2d       	mov	r20, r12
    4fd0:	5d 2d       	mov	r21, r13
    4fd2:	6e 2d       	mov	r22, r14
    4fd4:	7f 2d       	mov	r23, r15
    4fd6:	80 2f       	mov	r24, r16
    4fd8:	91 2f       	mov	r25, r17
    4fda:	82 2f       	mov	r24, r18
    4fdc:	80 5d       	subi	r24, 0xD0	; 208
    4fde:	0e 94 95 2a 	call	0x552a	; 0x552a <Lcd_SendData>
        reversed /= 10;
    4fe2:	aa 80       	ldd	r10, Y+2	; 0x02
    4fe4:	bb 80       	ldd	r11, Y+3	; 0x03
    4fe6:	cc 80       	ldd	r12, Y+4	; 0x04
    4fe8:	dd 80       	ldd	r13, Y+5	; 0x05
    4fea:	ee 80       	ldd	r14, Y+6	; 0x06
    4fec:	ff 80       	ldd	r15, Y+7	; 0x07
    4fee:	08 85       	ldd	r16, Y+8	; 0x08
    4ff0:	19 85       	ldd	r17, Y+9	; 0x09
    4ff2:	2a 2d       	mov	r18, r10
    4ff4:	3b 2d       	mov	r19, r11
    4ff6:	4c 2d       	mov	r20, r12
    4ff8:	5d 2d       	mov	r21, r13
    4ffa:	6e 2d       	mov	r22, r14
    4ffc:	7f 2d       	mov	r23, r15
    4ffe:	80 2f       	mov	r24, r16
    5000:	91 2f       	mov	r25, r17
    5002:	0f 2e       	mov	r0, r31
    5004:	fa e0       	ldi	r31, 0x0A	; 10
    5006:	af 2e       	mov	r10, r31
    5008:	f0 2d       	mov	r31, r0
    500a:	bb 24       	eor	r11, r11
    500c:	cc 24       	eor	r12, r12
    500e:	dd 24       	eor	r13, r13
    5010:	ee 24       	eor	r14, r14
    5012:	ff 24       	eor	r15, r15
    5014:	00 e0       	ldi	r16, 0x00	; 0
    5016:	10 e0       	ldi	r17, 0x00	; 0
    5018:	0e 94 c8 00 	call	0x190	; 0x190 <__udivdi3>
    501c:	a2 2e       	mov	r10, r18
    501e:	b3 2e       	mov	r11, r19
    5020:	c4 2e       	mov	r12, r20
    5022:	d5 2e       	mov	r13, r21
    5024:	e6 2e       	mov	r14, r22
    5026:	f7 2e       	mov	r15, r23
    5028:	08 2f       	mov	r16, r24
    502a:	19 2f       	mov	r17, r25
    502c:	aa 82       	std	Y+2, r10	; 0x02
    502e:	bb 82       	std	Y+3, r11	; 0x03
    5030:	cc 82       	std	Y+4, r12	; 0x04
    5032:	dd 82       	std	Y+5, r13	; 0x05
    5034:	ee 82       	std	Y+6, r14	; 0x06
    5036:	ff 82       	std	Y+7, r15	; 0x07
    5038:	08 87       	std	Y+8, r16	; 0x08
    503a:	19 87       	std	Y+9, r17	; 0x09
        digitsCounter--;
    503c:	89 81       	ldd	r24, Y+1	; 0x01
    503e:	81 50       	subi	r24, 0x01	; 1
    5040:	89 83       	std	Y+1, r24	; 0x01
    do {
        reversed = (reversed*10) + (number%10);
        number /= 10;
        digitsCounter++;
    } while (number > 0);
    while (digitsCounter > 0) {
    5042:	89 81       	ldd	r24, Y+1	; 0x01
    5044:	88 23       	and	r24, r24
    5046:	09 f0       	breq	.+2      	; 0x504a <Lcd_DisplayNumber+0x792>
    5048:	9b cf       	rjmp	.-202    	; 0x4f80 <Lcd_DisplayNumber+0x6c8>
        Lcd_SendData(reversed%10 + '0');
        reversed /= 10;
        digitsCounter--;
    }
}
    504a:	cd 59       	subi	r28, 0x9D	; 157
    504c:	df 4f       	sbci	r29, 0xFF	; 255
    504e:	0f b6       	in	r0, 0x3f	; 63
    5050:	f8 94       	cli
    5052:	de bf       	out	0x3e, r29	; 62
    5054:	0f be       	out	0x3f, r0	; 63
    5056:	cd bf       	out	0x3d, r28	; 61
    5058:	cf 91       	pop	r28
    505a:	df 91       	pop	r29
    505c:	1f 91       	pop	r17
    505e:	0f 91       	pop	r16
    5060:	ff 90       	pop	r15
    5062:	ef 90       	pop	r14
    5064:	df 90       	pop	r13
    5066:	cf 90       	pop	r12
    5068:	bf 90       	pop	r11
    506a:	af 90       	pop	r10
    506c:	08 95       	ret

0000506e <Lcd_ClearDisplay>:

void Lcd_ClearDisplay(void) {
    506e:	df 93       	push	r29
    5070:	cf 93       	push	r28
    5072:	cd b7       	in	r28, 0x3d	; 61
    5074:	de b7       	in	r29, 0x3e	; 62
    Lcd_SendCommand(1);
    5076:	81 e0       	ldi	r24, 0x01	; 1
    5078:	0e 94 f3 29 	call	0x53e6	; 0x53e6 <Lcd_SendCommand>
}
    507c:	cf 91       	pop	r28
    507e:	df 91       	pop	r29
    5080:	08 95       	ret

00005082 <Lcd_SetCursorPosition>:
// 1, 39 -> 1*0x40 + 39 = 0x40 + 0x27 = 0x67
void Lcd_SetCursorPosition(u8 row, u8 column) {
    5082:	df 93       	push	r29
    5084:	cf 93       	push	r28
    5086:	00 d0       	rcall	.+0      	; 0x5088 <Lcd_SetCursorPosition+0x6>
    5088:	0f 92       	push	r0
    508a:	cd b7       	in	r28, 0x3d	; 61
    508c:	de b7       	in	r29, 0x3e	; 62
    508e:	8a 83       	std	Y+2, r24	; 0x02
    5090:	6b 83       	std	Y+3, r22	; 0x03
    u8 address = row*0x40 + column;
    5092:	8a 81       	ldd	r24, Y+2	; 0x02
    5094:	88 2f       	mov	r24, r24
    5096:	90 e0       	ldi	r25, 0x00	; 0
    5098:	00 24       	eor	r0, r0
    509a:	96 95       	lsr	r25
    509c:	87 95       	ror	r24
    509e:	07 94       	ror	r0
    50a0:	96 95       	lsr	r25
    50a2:	87 95       	ror	r24
    50a4:	07 94       	ror	r0
    50a6:	98 2f       	mov	r25, r24
    50a8:	80 2d       	mov	r24, r0
    50aa:	98 2f       	mov	r25, r24
    50ac:	8b 81       	ldd	r24, Y+3	; 0x03
    50ae:	89 0f       	add	r24, r25
    50b0:	89 83       	std	Y+1, r24	; 0x01
    SET_BIT(address, 7);
    50b2:	89 81       	ldd	r24, Y+1	; 0x01
    50b4:	80 68       	ori	r24, 0x80	; 128
    50b6:	89 83       	std	Y+1, r24	; 0x01
    Lcd_SendCommand(address);
    50b8:	89 81       	ldd	r24, Y+1	; 0x01
    50ba:	0e 94 f3 29 	call	0x53e6	; 0x53e6 <Lcd_SendCommand>
}
    50be:	0f 90       	pop	r0
    50c0:	0f 90       	pop	r0
    50c2:	0f 90       	pop	r0
    50c4:	cf 91       	pop	r28
    50c6:	df 91       	pop	r29
    50c8:	08 95       	ret

000050ca <Lcd_ShiftDisplayLeft>:

void Lcd_ShiftDisplayLeft(u8 count) {
    50ca:	df 93       	push	r29
    50cc:	cf 93       	push	r28
    50ce:	0f 92       	push	r0
    50d0:	cd b7       	in	r28, 0x3d	; 61
    50d2:	de b7       	in	r29, 0x3e	; 62
    50d4:	89 83       	std	Y+1, r24	; 0x01
    50d6:	06 c0       	rjmp	.+12     	; 0x50e4 <Lcd_ShiftDisplayLeft+0x1a>
    while (count > 0) {
        Lcd_SendCommand(0b00011000);
    50d8:	88 e1       	ldi	r24, 0x18	; 24
    50da:	0e 94 f3 29 	call	0x53e6	; 0x53e6 <Lcd_SendCommand>
        count--;
    50de:	89 81       	ldd	r24, Y+1	; 0x01
    50e0:	81 50       	subi	r24, 0x01	; 1
    50e2:	89 83       	std	Y+1, r24	; 0x01
    SET_BIT(address, 7);
    Lcd_SendCommand(address);
}

void Lcd_ShiftDisplayLeft(u8 count) {
    while (count > 0) {
    50e4:	89 81       	ldd	r24, Y+1	; 0x01
    50e6:	88 23       	and	r24, r24
    50e8:	b9 f7       	brne	.-18     	; 0x50d8 <Lcd_ShiftDisplayLeft+0xe>
        Lcd_SendCommand(0b00011000);
        count--;
    }
}
    50ea:	0f 90       	pop	r0
    50ec:	cf 91       	pop	r28
    50ee:	df 91       	pop	r29
    50f0:	08 95       	ret

000050f2 <Lcd_moveCursor>:
void Lcd_moveCursor(u8 row,u8 col)
{
    50f2:	df 93       	push	r29
    50f4:	cf 93       	push	r28
    50f6:	00 d0       	rcall	.+0      	; 0x50f8 <Lcd_moveCursor+0x6>
    50f8:	00 d0       	rcall	.+0      	; 0x50fa <Lcd_moveCursor+0x8>
    50fa:	0f 92       	push	r0
    50fc:	cd b7       	in	r28, 0x3d	; 61
    50fe:	de b7       	in	r29, 0x3e	; 62
    5100:	8a 83       	std	Y+2, r24	; 0x02
    5102:	6b 83       	std	Y+3, r22	; 0x03

	u8 Lcd_memory_address;
	switch(row)
    5104:	8a 81       	ldd	r24, Y+2	; 0x02
    5106:	28 2f       	mov	r18, r24
    5108:	30 e0       	ldi	r19, 0x00	; 0
    510a:	3d 83       	std	Y+5, r19	; 0x05
    510c:	2c 83       	std	Y+4, r18	; 0x04
    510e:	8c 81       	ldd	r24, Y+4	; 0x04
    5110:	9d 81       	ldd	r25, Y+5	; 0x05
    5112:	00 97       	sbiw	r24, 0x00	; 0
    5114:	31 f0       	breq	.+12     	; 0x5122 <Lcd_moveCursor+0x30>
    5116:	2c 81       	ldd	r18, Y+4	; 0x04
    5118:	3d 81       	ldd	r19, Y+5	; 0x05
    511a:	21 30       	cpi	r18, 0x01	; 1
    511c:	31 05       	cpc	r19, r1
    511e:	21 f0       	breq	.+8      	; 0x5128 <Lcd_moveCursor+0x36>
    5120:	06 c0       	rjmp	.+12     	; 0x512e <Lcd_moveCursor+0x3c>
	{
	case 0:
		Lcd_memory_address = col;
    5122:	8b 81       	ldd	r24, Y+3	; 0x03
    5124:	89 83       	std	Y+1, r24	; 0x01
    5126:	03 c0       	rjmp	.+6      	; 0x512e <Lcd_moveCursor+0x3c>
		break;
	case 1:
		Lcd_memory_address = col + 0x40;
    5128:	8b 81       	ldd	r24, Y+3	; 0x03
    512a:	80 5c       	subi	r24, 0xC0	; 192
    512c:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/* Move the LCD cursor to this specific address */
	Lcd_SendCommand( Lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    512e:	89 81       	ldd	r24, Y+1	; 0x01
    5130:	80 68       	ori	r24, 0x80	; 128
    5132:	0e 94 f3 29 	call	0x53e6	; 0x53e6 <Lcd_SendCommand>

}
    5136:	0f 90       	pop	r0
    5138:	0f 90       	pop	r0
    513a:	0f 90       	pop	r0
    513c:	0f 90       	pop	r0
    513e:	0f 90       	pop	r0
    5140:	cf 91       	pop	r28
    5142:	df 91       	pop	r29
    5144:	08 95       	ret

00005146 <Lcd_ShiftDisplayRight>:
void Lcd_ShiftDisplayRight(u8 count) {
    5146:	df 93       	push	r29
    5148:	cf 93       	push	r28
    514a:	0f 92       	push	r0
    514c:	cd b7       	in	r28, 0x3d	; 61
    514e:	de b7       	in	r29, 0x3e	; 62
    5150:	89 83       	std	Y+1, r24	; 0x01
    5152:	06 c0       	rjmp	.+12     	; 0x5160 <Lcd_ShiftDisplayRight+0x1a>
    while (count > 0) {
        Lcd_SendCommand(0b00011100);
    5154:	8c e1       	ldi	r24, 0x1C	; 28
    5156:	0e 94 f3 29 	call	0x53e6	; 0x53e6 <Lcd_SendCommand>
        count--;
    515a:	89 81       	ldd	r24, Y+1	; 0x01
    515c:	81 50       	subi	r24, 0x01	; 1
    515e:	89 83       	std	Y+1, r24	; 0x01
	/* Move the LCD cursor to this specific address */
	Lcd_SendCommand( Lcd_memory_address | LCD_SET_CURSOR_LOCATION);

}
void Lcd_ShiftDisplayRight(u8 count) {
    while (count > 0) {
    5160:	89 81       	ldd	r24, Y+1	; 0x01
    5162:	88 23       	and	r24, r24
    5164:	b9 f7       	brne	.-18     	; 0x5154 <Lcd_ShiftDisplayRight+0xe>
        Lcd_SendCommand(0b00011100);
        count--;
    }
}
    5166:	0f 90       	pop	r0
    5168:	cf 91       	pop	r28
    516a:	df 91       	pop	r29
    516c:	08 95       	ret

0000516e <Lcd_ReturnHome>:

void Lcd_ReturnHome(void) {
    516e:	df 93       	push	r29
    5170:	cf 93       	push	r28
    5172:	cd b7       	in	r28, 0x3d	; 61
    5174:	de b7       	in	r29, 0x3e	; 62
    Lcd_SendCommand(0b00000010);
    5176:	82 e0       	ldi	r24, 0x02	; 2
    5178:	0e 94 f3 29 	call	0x53e6	; 0x53e6 <Lcd_SendCommand>
}
    517c:	cf 91       	pop	r28
    517e:	df 91       	pop	r29
    5180:	08 95       	ret

00005182 <Lcd_ShiftCursorRight>:

void Lcd_ShiftCursorRight(u8 count) {
    5182:	df 93       	push	r29
    5184:	cf 93       	push	r28
    5186:	0f 92       	push	r0
    5188:	cd b7       	in	r28, 0x3d	; 61
    518a:	de b7       	in	r29, 0x3e	; 62
    518c:	89 83       	std	Y+1, r24	; 0x01
    518e:	06 c0       	rjmp	.+12     	; 0x519c <Lcd_ShiftCursorRight+0x1a>
    while (count > 0) {
        Lcd_SendCommand(0b00010100);
    5190:	84 e1       	ldi	r24, 0x14	; 20
    5192:	0e 94 f3 29 	call	0x53e6	; 0x53e6 <Lcd_SendCommand>
        count--;
    5196:	89 81       	ldd	r24, Y+1	; 0x01
    5198:	81 50       	subi	r24, 0x01	; 1
    519a:	89 83       	std	Y+1, r24	; 0x01
void Lcd_ReturnHome(void) {
    Lcd_SendCommand(0b00000010);
}

void Lcd_ShiftCursorRight(u8 count) {
    while (count > 0) {
    519c:	89 81       	ldd	r24, Y+1	; 0x01
    519e:	88 23       	and	r24, r24
    51a0:	b9 f7       	brne	.-18     	; 0x5190 <Lcd_ShiftCursorRight+0xe>
        Lcd_SendCommand(0b00010100);
        count--;
    }
}
    51a2:	0f 90       	pop	r0
    51a4:	cf 91       	pop	r28
    51a6:	df 91       	pop	r29
    51a8:	08 95       	ret

000051aa <Lcd_ShiftCursorLeft>:

void Lcd_ShiftCursorLeft(u8 count) {
    51aa:	df 93       	push	r29
    51ac:	cf 93       	push	r28
    51ae:	0f 92       	push	r0
    51b0:	cd b7       	in	r28, 0x3d	; 61
    51b2:	de b7       	in	r29, 0x3e	; 62
    51b4:	89 83       	std	Y+1, r24	; 0x01
    51b6:	06 c0       	rjmp	.+12     	; 0x51c4 <Lcd_ShiftCursorLeft+0x1a>
    while (count > 0) {
        Lcd_SendCommand(0b00010000);
    51b8:	80 e1       	ldi	r24, 0x10	; 16
    51ba:	0e 94 f3 29 	call	0x53e6	; 0x53e6 <Lcd_SendCommand>
        count--;
    51be:	89 81       	ldd	r24, Y+1	; 0x01
    51c0:	81 50       	subi	r24, 0x01	; 1
    51c2:	89 83       	std	Y+1, r24	; 0x01
        count--;
    }
}

void Lcd_ShiftCursorLeft(u8 count) {
    while (count > 0) {
    51c4:	89 81       	ldd	r24, Y+1	; 0x01
    51c6:	88 23       	and	r24, r24
    51c8:	b9 f7       	brne	.-18     	; 0x51b8 <Lcd_ShiftCursorLeft+0xe>
        Lcd_SendCommand(0b00010000);
        count--;
    }
}
    51ca:	0f 90       	pop	r0
    51cc:	cf 91       	pop	r28
    51ce:	df 91       	pop	r29
    51d0:	08 95       	ret

000051d2 <Lcd_ControlDisplay>:

void Lcd_ControlDisplay(const Lcd_DisplayControlType* control) {
    51d2:	df 93       	push	r29
    51d4:	cf 93       	push	r28
    51d6:	00 d0       	rcall	.+0      	; 0x51d8 <Lcd_ControlDisplay+0x6>
    51d8:	0f 92       	push	r0
    51da:	cd b7       	in	r28, 0x3d	; 61
    51dc:	de b7       	in	r29, 0x3e	; 62
    51de:	9b 83       	std	Y+3, r25	; 0x03
    51e0:	8a 83       	std	Y+2, r24	; 0x02
    u8 command;
    /* Display ON/OFF Control */
    command = 0b00001000;
    51e2:	88 e0       	ldi	r24, 0x08	; 8
    51e4:	89 83       	std	Y+1, r24	; 0x01
    if (control->display == LCD_STATE_ON) {
    51e6:	ea 81       	ldd	r30, Y+2	; 0x02
    51e8:	fb 81       	ldd	r31, Y+3	; 0x03
    51ea:	80 81       	ld	r24, Z
    51ec:	81 30       	cpi	r24, 0x01	; 1
    51ee:	99 f4       	brne	.+38     	; 0x5216 <Lcd_ControlDisplay+0x44>
        SET_BIT(command, 2);
    51f0:	89 81       	ldd	r24, Y+1	; 0x01
    51f2:	84 60       	ori	r24, 0x04	; 4
    51f4:	89 83       	std	Y+1, r24	; 0x01
        if (control->cursor == LCD_STATE_ON) {
    51f6:	ea 81       	ldd	r30, Y+2	; 0x02
    51f8:	fb 81       	ldd	r31, Y+3	; 0x03
    51fa:	81 81       	ldd	r24, Z+1	; 0x01
    51fc:	81 30       	cpi	r24, 0x01	; 1
    51fe:	59 f4       	brne	.+22     	; 0x5216 <Lcd_ControlDisplay+0x44>
            SET_BIT(command, 1);
    5200:	89 81       	ldd	r24, Y+1	; 0x01
    5202:	82 60       	ori	r24, 0x02	; 2
    5204:	89 83       	std	Y+1, r24	; 0x01
            if (control->cursorBlink == LCD_STATE_ON) {
    5206:	ea 81       	ldd	r30, Y+2	; 0x02
    5208:	fb 81       	ldd	r31, Y+3	; 0x03
    520a:	82 81       	ldd	r24, Z+2	; 0x02
    520c:	81 30       	cpi	r24, 0x01	; 1
    520e:	19 f4       	brne	.+6      	; 0x5216 <Lcd_ControlDisplay+0x44>
                SET_BIT(command, 0);
    5210:	89 81       	ldd	r24, Y+1	; 0x01
    5212:	81 60       	ori	r24, 0x01	; 1
    5214:	89 83       	std	Y+1, r24	; 0x01
            }
        }
    }
    Lcd_SendCommand(command);
    5216:	89 81       	ldd	r24, Y+1	; 0x01
    5218:	0e 94 f3 29 	call	0x53e6	; 0x53e6 <Lcd_SendCommand>
    /* Function Set */
#if LCD_MODE == LCD_MODE_8_BIT
    command = 0b00110000;
    521c:	80 e3       	ldi	r24, 0x30	; 48
    521e:	89 83       	std	Y+1, r24	; 0x01
#elif LCD_MODE == LCD_MODE_4_BIT
    command = 0b00100000;
#endif
    if (control->lines == LCD_LINES_2) {
    5220:	ea 81       	ldd	r30, Y+2	; 0x02
    5222:	fb 81       	ldd	r31, Y+3	; 0x03
    5224:	83 81       	ldd	r24, Z+3	; 0x03
    5226:	81 30       	cpi	r24, 0x01	; 1
    5228:	19 f4       	brne	.+6      	; 0x5230 <Lcd_ControlDisplay+0x5e>
        SET_BIT(command, 3);
    522a:	89 81       	ldd	r24, Y+1	; 0x01
    522c:	88 60       	ori	r24, 0x08	; 8
    522e:	89 83       	std	Y+1, r24	; 0x01
    }
    if (control->font == LCD_FONT_5X10) {
    5230:	ea 81       	ldd	r30, Y+2	; 0x02
    5232:	fb 81       	ldd	r31, Y+3	; 0x03
    5234:	84 81       	ldd	r24, Z+4	; 0x04
    5236:	81 30       	cpi	r24, 0x01	; 1
    5238:	19 f4       	brne	.+6      	; 0x5240 <Lcd_ControlDisplay+0x6e>
        SET_BIT(command, 2);
    523a:	89 81       	ldd	r24, Y+1	; 0x01
    523c:	84 60       	ori	r24, 0x04	; 4
    523e:	89 83       	std	Y+1, r24	; 0x01
    }
    Lcd_SendCommand(command);
    5240:	89 81       	ldd	r24, Y+1	; 0x01
    5242:	0e 94 f3 29 	call	0x53e6	; 0x53e6 <Lcd_SendCommand>
}
    5246:	0f 90       	pop	r0
    5248:	0f 90       	pop	r0
    524a:	0f 90       	pop	r0
    524c:	cf 91       	pop	r28
    524e:	df 91       	pop	r29
    5250:	08 95       	ret

00005252 <Lcd_SaveSpecialCharacter>:

void Lcd_SaveSpecialCharacter(u8 location, u8* pattern) {
    5252:	df 93       	push	r29
    5254:	cf 93       	push	r28
    5256:	00 d0       	rcall	.+0      	; 0x5258 <Lcd_SaveSpecialCharacter+0x6>
    5258:	00 d0       	rcall	.+0      	; 0x525a <Lcd_SaveSpecialCharacter+0x8>
    525a:	cd b7       	in	r28, 0x3d	; 61
    525c:	de b7       	in	r29, 0x3e	; 62
    525e:	8a 83       	std	Y+2, r24	; 0x02
    5260:	7c 83       	std	Y+4, r23	; 0x04
    5262:	6b 83       	std	Y+3, r22	; 0x03
    u8 i;
    if (location < 8) {
    5264:	8a 81       	ldd	r24, Y+2	; 0x02
    5266:	88 30       	cpi	r24, 0x08	; 8
    5268:	18 f5       	brcc	.+70     	; 0x52b0 <Lcd_SaveSpecialCharacter+0x5e>
        location *= 8;
    526a:	8a 81       	ldd	r24, Y+2	; 0x02
    526c:	88 2f       	mov	r24, r24
    526e:	90 e0       	ldi	r25, 0x00	; 0
    5270:	88 0f       	add	r24, r24
    5272:	99 1f       	adc	r25, r25
    5274:	88 0f       	add	r24, r24
    5276:	99 1f       	adc	r25, r25
    5278:	88 0f       	add	r24, r24
    527a:	99 1f       	adc	r25, r25
    527c:	8a 83       	std	Y+2, r24	; 0x02
        SET_BIT(location, 6);
    527e:	8a 81       	ldd	r24, Y+2	; 0x02
    5280:	80 64       	ori	r24, 0x40	; 64
    5282:	8a 83       	std	Y+2, r24	; 0x02
        Lcd_SendCommand(location);
    5284:	8a 81       	ldd	r24, Y+2	; 0x02
    5286:	0e 94 f3 29 	call	0x53e6	; 0x53e6 <Lcd_SendCommand>
        for (i=0; i<8; i++) {
    528a:	19 82       	std	Y+1, r1	; 0x01
    528c:	0e c0       	rjmp	.+28     	; 0x52aa <Lcd_SaveSpecialCharacter+0x58>
            Lcd_SendData(pattern[i]);
    528e:	89 81       	ldd	r24, Y+1	; 0x01
    5290:	28 2f       	mov	r18, r24
    5292:	30 e0       	ldi	r19, 0x00	; 0
    5294:	8b 81       	ldd	r24, Y+3	; 0x03
    5296:	9c 81       	ldd	r25, Y+4	; 0x04
    5298:	fc 01       	movw	r30, r24
    529a:	e2 0f       	add	r30, r18
    529c:	f3 1f       	adc	r31, r19
    529e:	80 81       	ld	r24, Z
    52a0:	0e 94 95 2a 	call	0x552a	; 0x552a <Lcd_SendData>
    u8 i;
    if (location < 8) {
        location *= 8;
        SET_BIT(location, 6);
        Lcd_SendCommand(location);
        for (i=0; i<8; i++) {
    52a4:	89 81       	ldd	r24, Y+1	; 0x01
    52a6:	8f 5f       	subi	r24, 0xFF	; 255
    52a8:	89 83       	std	Y+1, r24	; 0x01
    52aa:	89 81       	ldd	r24, Y+1	; 0x01
    52ac:	88 30       	cpi	r24, 0x08	; 8
    52ae:	78 f3       	brcs	.-34     	; 0x528e <Lcd_SaveSpecialCharacter+0x3c>
            Lcd_SendData(pattern[i]);
        }
    }
}
    52b0:	0f 90       	pop	r0
    52b2:	0f 90       	pop	r0
    52b4:	0f 90       	pop	r0
    52b6:	0f 90       	pop	r0
    52b8:	cf 91       	pop	r28
    52ba:	df 91       	pop	r29
    52bc:	08 95       	ret

000052be <Lcd_Print>:

void Lcd_Print(char* str, ...) {
    52be:	df 93       	push	r29
    52c0:	cf 93       	push	r28
    52c2:	00 d0       	rcall	.+0      	; 0x52c4 <Lcd_Print+0x6>
    52c4:	00 d0       	rcall	.+0      	; 0x52c6 <Lcd_Print+0x8>
    52c6:	cd b7       	in	r28, 0x3d	; 61
    52c8:	de b7       	in	r29, 0x3e	; 62
	va_list var_list;
	va_start(var_list, str);
    52ca:	ce 01       	movw	r24, r28
    52cc:	0b 96       	adiw	r24, 0x0b	; 11
    52ce:	9a 83       	std	Y+2, r25	; 0x02
    52d0:	89 83       	std	Y+1, r24	; 0x01
    52d2:	7c c0       	rjmp	.+248    	; 0x53cc <Lcd_Print+0x10e>
	while(*str != '\0') {
		if (*str == '%') {
    52d4:	e9 85       	ldd	r30, Y+9	; 0x09
    52d6:	fa 85       	ldd	r31, Y+10	; 0x0a
    52d8:	80 81       	ld	r24, Z
    52da:	85 32       	cpi	r24, 0x25	; 37
    52dc:	09 f0       	breq	.+2      	; 0x52e0 <Lcd_Print+0x22>
    52de:	6c c0       	rjmp	.+216    	; 0x53b8 <Lcd_Print+0xfa>
			str++;
    52e0:	89 85       	ldd	r24, Y+9	; 0x09
    52e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    52e4:	01 96       	adiw	r24, 0x01	; 1
    52e6:	9a 87       	std	Y+10, r25	; 0x0a
    52e8:	89 87       	std	Y+9, r24	; 0x09
			switch(*str) {
    52ea:	e9 85       	ldd	r30, Y+9	; 0x09
    52ec:	fa 85       	ldd	r31, Y+10	; 0x0a
    52ee:	80 81       	ld	r24, Z
    52f0:	28 2f       	mov	r18, r24
    52f2:	30 e0       	ldi	r19, 0x00	; 0
    52f4:	3c 83       	std	Y+4, r19	; 0x04
    52f6:	2b 83       	std	Y+3, r18	; 0x03
    52f8:	8b 81       	ldd	r24, Y+3	; 0x03
    52fa:	9c 81       	ldd	r25, Y+4	; 0x04
    52fc:	84 36       	cpi	r24, 0x64	; 100
    52fe:	91 05       	cpc	r25, r1
    5300:	11 f1       	breq	.+68     	; 0x5346 <Lcd_Print+0x88>
    5302:	2b 81       	ldd	r18, Y+3	; 0x03
    5304:	3c 81       	ldd	r19, Y+4	; 0x04
    5306:	25 36       	cpi	r18, 0x65	; 101
    5308:	31 05       	cpc	r19, r1
    530a:	34 f4       	brge	.+12     	; 0x5318 <Lcd_Print+0x5a>
    530c:	8b 81       	ldd	r24, Y+3	; 0x03
    530e:	9c 81       	ldd	r25, Y+4	; 0x04
    5310:	83 36       	cpi	r24, 0x63	; 99
    5312:	91 05       	cpc	r25, r1
    5314:	61 f0       	breq	.+24     	; 0x532e <Lcd_Print+0x70>
    5316:	4a c0       	rjmp	.+148    	; 0x53ac <Lcd_Print+0xee>
    5318:	2b 81       	ldd	r18, Y+3	; 0x03
    531a:	3c 81       	ldd	r19, Y+4	; 0x04
    531c:	2c 36       	cpi	r18, 0x6C	; 108
    531e:	31 05       	cpc	r19, r1
    5320:	a9 f1       	breq	.+106    	; 0x538c <Lcd_Print+0xce>
    5322:	8b 81       	ldd	r24, Y+3	; 0x03
    5324:	9c 81       	ldd	r25, Y+4	; 0x04
    5326:	85 37       	cpi	r24, 0x75	; 117
    5328:	91 05       	cpc	r25, r1
    532a:	f9 f0       	breq	.+62     	; 0x536a <Lcd_Print+0xac>
    532c:	3f c0       	rjmp	.+126    	; 0x53ac <Lcd_Print+0xee>
				case 'c':
                    Lcd_DisplayCharcter((char)va_arg(var_list, int));
    532e:	29 81       	ldd	r18, Y+1	; 0x01
    5330:	3a 81       	ldd	r19, Y+2	; 0x02
    5332:	c9 01       	movw	r24, r18
    5334:	02 96       	adiw	r24, 0x02	; 2
    5336:	9a 83       	std	Y+2, r25	; 0x02
    5338:	89 83       	std	Y+1, r24	; 0x01
    533a:	f9 01       	movw	r30, r18
    533c:	80 81       	ld	r24, Z
    533e:	91 81       	ldd	r25, Z+1	; 0x01
    5340:	0e 94 24 24 	call	0x4848	; 0x4848 <Lcd_DisplayCharcter>
    5344:	3e c0       	rjmp	.+124    	; 0x53c2 <Lcd_Print+0x104>
					break;
				case 'd':
                    Lcd_DisplayNumber((int)va_arg(var_list, int));
    5346:	29 81       	ldd	r18, Y+1	; 0x01
    5348:	3a 81       	ldd	r19, Y+2	; 0x02
    534a:	c9 01       	movw	r24, r18
    534c:	02 96       	adiw	r24, 0x02	; 2
    534e:	9a 83       	std	Y+2, r25	; 0x02
    5350:	89 83       	std	Y+1, r24	; 0x01
    5352:	f9 01       	movw	r30, r18
    5354:	80 81       	ld	r24, Z
    5356:	91 81       	ldd	r25, Z+1	; 0x01
    5358:	aa 27       	eor	r26, r26
    535a:	97 fd       	sbrc	r25, 7
    535c:	a0 95       	com	r26
    535e:	ba 2f       	mov	r27, r26
    5360:	bc 01       	movw	r22, r24
    5362:	cd 01       	movw	r24, r26
    5364:	0e 94 5c 24 	call	0x48b8	; 0x48b8 <Lcd_DisplayNumber>
    5368:	2c c0       	rjmp	.+88     	; 0x53c2 <Lcd_Print+0x104>
					break;
				case 'u':
                    Lcd_DisplayNumber((unsigned int)va_arg(var_list, unsigned int));
    536a:	29 81       	ldd	r18, Y+1	; 0x01
    536c:	3a 81       	ldd	r19, Y+2	; 0x02
    536e:	c9 01       	movw	r24, r18
    5370:	02 96       	adiw	r24, 0x02	; 2
    5372:	9a 83       	std	Y+2, r25	; 0x02
    5374:	89 83       	std	Y+1, r24	; 0x01
    5376:	f9 01       	movw	r30, r18
    5378:	80 81       	ld	r24, Z
    537a:	91 81       	ldd	r25, Z+1	; 0x01
    537c:	cc 01       	movw	r24, r24
    537e:	a0 e0       	ldi	r26, 0x00	; 0
    5380:	b0 e0       	ldi	r27, 0x00	; 0
    5382:	bc 01       	movw	r22, r24
    5384:	cd 01       	movw	r24, r26
    5386:	0e 94 5c 24 	call	0x48b8	; 0x48b8 <Lcd_DisplayNumber>
    538a:	1b c0       	rjmp	.+54     	; 0x53c2 <Lcd_Print+0x104>
					break;
				case 'l':
                    Lcd_DisplayNumber((long int)va_arg(var_list, long int));
    538c:	29 81       	ldd	r18, Y+1	; 0x01
    538e:	3a 81       	ldd	r19, Y+2	; 0x02
    5390:	c9 01       	movw	r24, r18
    5392:	04 96       	adiw	r24, 0x04	; 4
    5394:	9a 83       	std	Y+2, r25	; 0x02
    5396:	89 83       	std	Y+1, r24	; 0x01
    5398:	f9 01       	movw	r30, r18
    539a:	80 81       	ld	r24, Z
    539c:	91 81       	ldd	r25, Z+1	; 0x01
    539e:	a2 81       	ldd	r26, Z+2	; 0x02
    53a0:	b3 81       	ldd	r27, Z+3	; 0x03
    53a2:	bc 01       	movw	r22, r24
    53a4:	cd 01       	movw	r24, r26
    53a6:	0e 94 5c 24 	call	0x48b8	; 0x48b8 <Lcd_DisplayNumber>
    53aa:	0b c0       	rjmp	.+22     	; 0x53c2 <Lcd_Print+0x104>
					break;
				default:
					Lcd_DisplayCharcter(*str);
    53ac:	e9 85       	ldd	r30, Y+9	; 0x09
    53ae:	fa 85       	ldd	r31, Y+10	; 0x0a
    53b0:	80 81       	ld	r24, Z
    53b2:	0e 94 24 24 	call	0x4848	; 0x4848 <Lcd_DisplayCharcter>
    53b6:	05 c0       	rjmp	.+10     	; 0x53c2 <Lcd_Print+0x104>
					break;
			}
		}
		else {
			Lcd_DisplayCharcter(*str);
    53b8:	e9 85       	ldd	r30, Y+9	; 0x09
    53ba:	fa 85       	ldd	r31, Y+10	; 0x0a
    53bc:	80 81       	ld	r24, Z
    53be:	0e 94 24 24 	call	0x4848	; 0x4848 <Lcd_DisplayCharcter>
		}
		str++;
    53c2:	89 85       	ldd	r24, Y+9	; 0x09
    53c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    53c6:	01 96       	adiw	r24, 0x01	; 1
    53c8:	9a 87       	std	Y+10, r25	; 0x0a
    53ca:	89 87       	std	Y+9, r24	; 0x09
}

void Lcd_Print(char* str, ...) {
	va_list var_list;
	va_start(var_list, str);
	while(*str != '\0') {
    53cc:	e9 85       	ldd	r30, Y+9	; 0x09
    53ce:	fa 85       	ldd	r31, Y+10	; 0x0a
    53d0:	80 81       	ld	r24, Z
    53d2:	88 23       	and	r24, r24
    53d4:	09 f0       	breq	.+2      	; 0x53d8 <Lcd_Print+0x11a>
    53d6:	7e cf       	rjmp	.-260    	; 0x52d4 <Lcd_Print+0x16>
		else {
			Lcd_DisplayCharcter(*str);
		}
		str++;
	}
}
    53d8:	0f 90       	pop	r0
    53da:	0f 90       	pop	r0
    53dc:	0f 90       	pop	r0
    53de:	0f 90       	pop	r0
    53e0:	cf 91       	pop	r28
    53e2:	df 91       	pop	r29
    53e4:	08 95       	ret

000053e6 <Lcd_SendCommand>:



static void Lcd_SendCommand(u8 command) {
    53e6:	df 93       	push	r29
    53e8:	cf 93       	push	r28
    53ea:	cd b7       	in	r28, 0x3d	; 61
    53ec:	de b7       	in	r29, 0x3e	; 62
    53ee:	29 97       	sbiw	r28, 0x09	; 9
    53f0:	0f b6       	in	r0, 0x3f	; 63
    53f2:	f8 94       	cli
    53f4:	de bf       	out	0x3e, r29	; 62
    53f6:	0f be       	out	0x3f, r0	; 63
    53f8:	cd bf       	out	0x3d, r28	; 61
    53fa:	89 87       	std	Y+9, r24	; 0x09
    DIO_enuWritePin(LCD_PIN_RS, DIO_LOW);
    53fc:	87 e0       	ldi	r24, 0x07	; 7
    53fe:	60 e0       	ldi	r22, 0x00	; 0
    5400:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <DIO_enuWritePin>
    DIO_enuWritePin(LCD_PIN_RW, DIO_LOW);
    5404:	86 e0       	ldi	r24, 0x06	; 6
    5406:	60 e0       	ldi	r22, 0x00	; 0
    5408:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <DIO_enuWritePin>
#if LCD_MODE == LCD_MODE_8_BIT
    DIO_enuWritePin(LCD_PIN_D0, GET_BIT(command, 0));
    540c:	89 85       	ldd	r24, Y+9	; 0x09
    540e:	98 2f       	mov	r25, r24
    5410:	91 70       	andi	r25, 0x01	; 1
    5412:	80 e1       	ldi	r24, 0x10	; 16
    5414:	69 2f       	mov	r22, r25
    5416:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <DIO_enuWritePin>
    DIO_enuWritePin(LCD_PIN_D1, GET_BIT(command, 1));
    541a:	89 85       	ldd	r24, Y+9	; 0x09
    541c:	86 95       	lsr	r24
    541e:	98 2f       	mov	r25, r24
    5420:	91 70       	andi	r25, 0x01	; 1
    5422:	81 e1       	ldi	r24, 0x11	; 17
    5424:	69 2f       	mov	r22, r25
    5426:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <DIO_enuWritePin>
    DIO_enuWritePin(LCD_PIN_D2, GET_BIT(command, 2));
    542a:	89 85       	ldd	r24, Y+9	; 0x09
    542c:	86 95       	lsr	r24
    542e:	86 95       	lsr	r24
    5430:	98 2f       	mov	r25, r24
    5432:	91 70       	andi	r25, 0x01	; 1
    5434:	82 e1       	ldi	r24, 0x12	; 18
    5436:	69 2f       	mov	r22, r25
    5438:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <DIO_enuWritePin>
    DIO_enuWritePin(LCD_PIN_D3, GET_BIT(command, 3));
    543c:	89 85       	ldd	r24, Y+9	; 0x09
    543e:	86 95       	lsr	r24
    5440:	86 95       	lsr	r24
    5442:	86 95       	lsr	r24
    5444:	98 2f       	mov	r25, r24
    5446:	91 70       	andi	r25, 0x01	; 1
    5448:	83 e1       	ldi	r24, 0x13	; 19
    544a:	69 2f       	mov	r22, r25
    544c:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <DIO_enuWritePin>
#endif
    DIO_enuWritePin(LCD_PIN_D4, GET_BIT(command, 4));
    5450:	89 85       	ldd	r24, Y+9	; 0x09
    5452:	82 95       	swap	r24
    5454:	8f 70       	andi	r24, 0x0F	; 15
    5456:	98 2f       	mov	r25, r24
    5458:	91 70       	andi	r25, 0x01	; 1
    545a:	84 e1       	ldi	r24, 0x14	; 20
    545c:	69 2f       	mov	r22, r25
    545e:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <DIO_enuWritePin>
    DIO_enuWritePin(LCD_PIN_D5, GET_BIT(command, 5));
    5462:	89 85       	ldd	r24, Y+9	; 0x09
    5464:	82 95       	swap	r24
    5466:	86 95       	lsr	r24
    5468:	87 70       	andi	r24, 0x07	; 7
    546a:	98 2f       	mov	r25, r24
    546c:	91 70       	andi	r25, 0x01	; 1
    546e:	85 e1       	ldi	r24, 0x15	; 21
    5470:	69 2f       	mov	r22, r25
    5472:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <DIO_enuWritePin>
    DIO_enuWritePin(LCD_PIN_D6, GET_BIT(command, 6));
    5476:	89 85       	ldd	r24, Y+9	; 0x09
    5478:	82 95       	swap	r24
    547a:	86 95       	lsr	r24
    547c:	86 95       	lsr	r24
    547e:	83 70       	andi	r24, 0x03	; 3
    5480:	98 2f       	mov	r25, r24
    5482:	91 70       	andi	r25, 0x01	; 1
    5484:	86 e1       	ldi	r24, 0x16	; 22
    5486:	69 2f       	mov	r22, r25
    5488:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <DIO_enuWritePin>
    DIO_enuWritePin(LCD_PIN_D7, GET_BIT(command, 7));
    548c:	89 85       	ldd	r24, Y+9	; 0x09
    548e:	98 2f       	mov	r25, r24
    5490:	99 1f       	adc	r25, r25
    5492:	99 27       	eor	r25, r25
    5494:	99 1f       	adc	r25, r25
    5496:	87 e1       	ldi	r24, 0x17	; 23
    5498:	69 2f       	mov	r22, r25
    549a:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <DIO_enuWritePin>
    DIO_enuWritePin(LCD_PIN_EN, DIO_HIGH);
    549e:	85 e0       	ldi	r24, 0x05	; 5
    54a0:	61 e0       	ldi	r22, 0x01	; 1
    54a2:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <DIO_enuWritePin>
    Delay_ms(2);
    54a6:	1d 82       	std	Y+5, r1	; 0x05
    54a8:	1e 82       	std	Y+6, r1	; 0x06
    54aa:	1f 82       	std	Y+7, r1	; 0x07
    54ac:	18 86       	std	Y+8, r1	; 0x08
    54ae:	28 c0       	rjmp	.+80     	; 0x5500 <Lcd_SendCommand+0x11a>
    54b0:	80 ed       	ldi	r24, 0xD0	; 208
    54b2:	97 e0       	ldi	r25, 0x07	; 7
    54b4:	a0 e0       	ldi	r26, 0x00	; 0
    54b6:	b0 e0       	ldi	r27, 0x00	; 0
    54b8:	89 83       	std	Y+1, r24	; 0x01
    54ba:	9a 83       	std	Y+2, r25	; 0x02
    54bc:	ab 83       	std	Y+3, r26	; 0x03
    54be:	bc 83       	std	Y+4, r27	; 0x04
    54c0:	0c c0       	rjmp	.+24     	; 0x54da <Lcd_SendCommand+0xf4>
    54c2:	00 00       	nop
    54c4:	89 81       	ldd	r24, Y+1	; 0x01
    54c6:	9a 81       	ldd	r25, Y+2	; 0x02
    54c8:	ab 81       	ldd	r26, Y+3	; 0x03
    54ca:	bc 81       	ldd	r27, Y+4	; 0x04
    54cc:	01 97       	sbiw	r24, 0x01	; 1
    54ce:	a1 09       	sbc	r26, r1
    54d0:	b1 09       	sbc	r27, r1
    54d2:	89 83       	std	Y+1, r24	; 0x01
    54d4:	9a 83       	std	Y+2, r25	; 0x02
    54d6:	ab 83       	std	Y+3, r26	; 0x03
    54d8:	bc 83       	std	Y+4, r27	; 0x04
    54da:	89 81       	ldd	r24, Y+1	; 0x01
    54dc:	9a 81       	ldd	r25, Y+2	; 0x02
    54de:	ab 81       	ldd	r26, Y+3	; 0x03
    54e0:	bc 81       	ldd	r27, Y+4	; 0x04
    54e2:	00 97       	sbiw	r24, 0x00	; 0
    54e4:	a1 05       	cpc	r26, r1
    54e6:	b1 05       	cpc	r27, r1
    54e8:	61 f7       	brne	.-40     	; 0x54c2 <Lcd_SendCommand+0xdc>
    54ea:	8d 81       	ldd	r24, Y+5	; 0x05
    54ec:	9e 81       	ldd	r25, Y+6	; 0x06
    54ee:	af 81       	ldd	r26, Y+7	; 0x07
    54f0:	b8 85       	ldd	r27, Y+8	; 0x08
    54f2:	01 97       	sbiw	r24, 0x01	; 1
    54f4:	a1 09       	sbc	r26, r1
    54f6:	b1 09       	sbc	r27, r1
    54f8:	8d 83       	std	Y+5, r24	; 0x05
    54fa:	9e 83       	std	Y+6, r25	; 0x06
    54fc:	af 83       	std	Y+7, r26	; 0x07
    54fe:	b8 87       	std	Y+8, r27	; 0x08
    5500:	8d 81       	ldd	r24, Y+5	; 0x05
    5502:	9e 81       	ldd	r25, Y+6	; 0x06
    5504:	af 81       	ldd	r26, Y+7	; 0x07
    5506:	b8 85       	ldd	r27, Y+8	; 0x08
    5508:	00 97       	sbiw	r24, 0x00	; 0
    550a:	a1 05       	cpc	r26, r1
    550c:	b1 05       	cpc	r27, r1
    550e:	81 f6       	brne	.-96     	; 0x54b0 <Lcd_SendCommand+0xca>
    DIO_enuWritePin(LCD_PIN_EN, DIO_LOW);
    5510:	85 e0       	ldi	r24, 0x05	; 5
    5512:	60 e0       	ldi	r22, 0x00	; 0
    5514:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <DIO_enuWritePin>
    DIO_enuWritePin(LCD_PIN_D7, GET_BIT(command, 3));
    DIO_enuWritePin(LCD_PIN_EN, DIO_u8_HIGH);
    Delay_ms(2);
    DIO_enuWritePin(LCD_PIN_EN, DIO_u8_LOW);
#endif
}
    5518:	29 96       	adiw	r28, 0x09	; 9
    551a:	0f b6       	in	r0, 0x3f	; 63
    551c:	f8 94       	cli
    551e:	de bf       	out	0x3e, r29	; 62
    5520:	0f be       	out	0x3f, r0	; 63
    5522:	cd bf       	out	0x3d, r28	; 61
    5524:	cf 91       	pop	r28
    5526:	df 91       	pop	r29
    5528:	08 95       	ret

0000552a <Lcd_SendData>:

static void Lcd_SendData(u8 data) {
    552a:	df 93       	push	r29
    552c:	cf 93       	push	r28
    552e:	cd b7       	in	r28, 0x3d	; 61
    5530:	de b7       	in	r29, 0x3e	; 62
    5532:	29 97       	sbiw	r28, 0x09	; 9
    5534:	0f b6       	in	r0, 0x3f	; 63
    5536:	f8 94       	cli
    5538:	de bf       	out	0x3e, r29	; 62
    553a:	0f be       	out	0x3f, r0	; 63
    553c:	cd bf       	out	0x3d, r28	; 61
    553e:	89 87       	std	Y+9, r24	; 0x09
	DIO_enuWritePin(LCD_PIN_RS, DIO_HIGH);
    5540:	87 e0       	ldi	r24, 0x07	; 7
    5542:	61 e0       	ldi	r22, 0x01	; 1
    5544:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <DIO_enuWritePin>
	DIO_enuWritePin(LCD_PIN_RW, DIO_LOW);
    5548:	86 e0       	ldi	r24, 0x06	; 6
    554a:	60 e0       	ldi	r22, 0x00	; 0
    554c:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <DIO_enuWritePin>
#if LCD_MODE == LCD_MODE_8_BIT
	DIO_enuWritePin(LCD_PIN_D0, GET_BIT(data, 0));
    5550:	89 85       	ldd	r24, Y+9	; 0x09
    5552:	98 2f       	mov	r25, r24
    5554:	91 70       	andi	r25, 0x01	; 1
    5556:	80 e1       	ldi	r24, 0x10	; 16
    5558:	69 2f       	mov	r22, r25
    555a:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <DIO_enuWritePin>
	DIO_enuWritePin(LCD_PIN_D1, GET_BIT(data, 1));
    555e:	89 85       	ldd	r24, Y+9	; 0x09
    5560:	86 95       	lsr	r24
    5562:	98 2f       	mov	r25, r24
    5564:	91 70       	andi	r25, 0x01	; 1
    5566:	81 e1       	ldi	r24, 0x11	; 17
    5568:	69 2f       	mov	r22, r25
    556a:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <DIO_enuWritePin>
    DIO_enuWritePin(LCD_PIN_D2, GET_BIT(data, 2));
    556e:	89 85       	ldd	r24, Y+9	; 0x09
    5570:	86 95       	lsr	r24
    5572:	86 95       	lsr	r24
    5574:	98 2f       	mov	r25, r24
    5576:	91 70       	andi	r25, 0x01	; 1
    5578:	82 e1       	ldi	r24, 0x12	; 18
    557a:	69 2f       	mov	r22, r25
    557c:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <DIO_enuWritePin>
    DIO_enuWritePin(LCD_PIN_D3, GET_BIT(data, 3));
    5580:	89 85       	ldd	r24, Y+9	; 0x09
    5582:	86 95       	lsr	r24
    5584:	86 95       	lsr	r24
    5586:	86 95       	lsr	r24
    5588:	98 2f       	mov	r25, r24
    558a:	91 70       	andi	r25, 0x01	; 1
    558c:	83 e1       	ldi	r24, 0x13	; 19
    558e:	69 2f       	mov	r22, r25
    5590:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <DIO_enuWritePin>
#endif
    DIO_enuWritePin(LCD_PIN_D4, GET_BIT(data, 4));
    5594:	89 85       	ldd	r24, Y+9	; 0x09
    5596:	82 95       	swap	r24
    5598:	8f 70       	andi	r24, 0x0F	; 15
    559a:	98 2f       	mov	r25, r24
    559c:	91 70       	andi	r25, 0x01	; 1
    559e:	84 e1       	ldi	r24, 0x14	; 20
    55a0:	69 2f       	mov	r22, r25
    55a2:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <DIO_enuWritePin>
    DIO_enuWritePin(LCD_PIN_D5, GET_BIT(data, 5));
    55a6:	89 85       	ldd	r24, Y+9	; 0x09
    55a8:	82 95       	swap	r24
    55aa:	86 95       	lsr	r24
    55ac:	87 70       	andi	r24, 0x07	; 7
    55ae:	98 2f       	mov	r25, r24
    55b0:	91 70       	andi	r25, 0x01	; 1
    55b2:	85 e1       	ldi	r24, 0x15	; 21
    55b4:	69 2f       	mov	r22, r25
    55b6:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <DIO_enuWritePin>
    DIO_enuWritePin(LCD_PIN_D6, GET_BIT(data, 6));
    55ba:	89 85       	ldd	r24, Y+9	; 0x09
    55bc:	82 95       	swap	r24
    55be:	86 95       	lsr	r24
    55c0:	86 95       	lsr	r24
    55c2:	83 70       	andi	r24, 0x03	; 3
    55c4:	98 2f       	mov	r25, r24
    55c6:	91 70       	andi	r25, 0x01	; 1
    55c8:	86 e1       	ldi	r24, 0x16	; 22
    55ca:	69 2f       	mov	r22, r25
    55cc:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <DIO_enuWritePin>
    DIO_enuWritePin(LCD_PIN_D7, GET_BIT(data, 7));
    55d0:	89 85       	ldd	r24, Y+9	; 0x09
    55d2:	98 2f       	mov	r25, r24
    55d4:	99 1f       	adc	r25, r25
    55d6:	99 27       	eor	r25, r25
    55d8:	99 1f       	adc	r25, r25
    55da:	87 e1       	ldi	r24, 0x17	; 23
    55dc:	69 2f       	mov	r22, r25
    55de:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <DIO_enuWritePin>
    DIO_enuWritePin(LCD_PIN_EN, DIO_HIGH);
    55e2:	85 e0       	ldi	r24, 0x05	; 5
    55e4:	61 e0       	ldi	r22, 0x01	; 1
    55e6:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <DIO_enuWritePin>
    Delay_ms(2);
    55ea:	1d 82       	std	Y+5, r1	; 0x05
    55ec:	1e 82       	std	Y+6, r1	; 0x06
    55ee:	1f 82       	std	Y+7, r1	; 0x07
    55f0:	18 86       	std	Y+8, r1	; 0x08
    55f2:	28 c0       	rjmp	.+80     	; 0x5644 <Lcd_SendData+0x11a>
    55f4:	80 ed       	ldi	r24, 0xD0	; 208
    55f6:	97 e0       	ldi	r25, 0x07	; 7
    55f8:	a0 e0       	ldi	r26, 0x00	; 0
    55fa:	b0 e0       	ldi	r27, 0x00	; 0
    55fc:	89 83       	std	Y+1, r24	; 0x01
    55fe:	9a 83       	std	Y+2, r25	; 0x02
    5600:	ab 83       	std	Y+3, r26	; 0x03
    5602:	bc 83       	std	Y+4, r27	; 0x04
    5604:	0c c0       	rjmp	.+24     	; 0x561e <Lcd_SendData+0xf4>
    5606:	00 00       	nop
    5608:	89 81       	ldd	r24, Y+1	; 0x01
    560a:	9a 81       	ldd	r25, Y+2	; 0x02
    560c:	ab 81       	ldd	r26, Y+3	; 0x03
    560e:	bc 81       	ldd	r27, Y+4	; 0x04
    5610:	01 97       	sbiw	r24, 0x01	; 1
    5612:	a1 09       	sbc	r26, r1
    5614:	b1 09       	sbc	r27, r1
    5616:	89 83       	std	Y+1, r24	; 0x01
    5618:	9a 83       	std	Y+2, r25	; 0x02
    561a:	ab 83       	std	Y+3, r26	; 0x03
    561c:	bc 83       	std	Y+4, r27	; 0x04
    561e:	89 81       	ldd	r24, Y+1	; 0x01
    5620:	9a 81       	ldd	r25, Y+2	; 0x02
    5622:	ab 81       	ldd	r26, Y+3	; 0x03
    5624:	bc 81       	ldd	r27, Y+4	; 0x04
    5626:	00 97       	sbiw	r24, 0x00	; 0
    5628:	a1 05       	cpc	r26, r1
    562a:	b1 05       	cpc	r27, r1
    562c:	61 f7       	brne	.-40     	; 0x5606 <Lcd_SendData+0xdc>
    562e:	8d 81       	ldd	r24, Y+5	; 0x05
    5630:	9e 81       	ldd	r25, Y+6	; 0x06
    5632:	af 81       	ldd	r26, Y+7	; 0x07
    5634:	b8 85       	ldd	r27, Y+8	; 0x08
    5636:	01 97       	sbiw	r24, 0x01	; 1
    5638:	a1 09       	sbc	r26, r1
    563a:	b1 09       	sbc	r27, r1
    563c:	8d 83       	std	Y+5, r24	; 0x05
    563e:	9e 83       	std	Y+6, r25	; 0x06
    5640:	af 83       	std	Y+7, r26	; 0x07
    5642:	b8 87       	std	Y+8, r27	; 0x08
    5644:	8d 81       	ldd	r24, Y+5	; 0x05
    5646:	9e 81       	ldd	r25, Y+6	; 0x06
    5648:	af 81       	ldd	r26, Y+7	; 0x07
    564a:	b8 85       	ldd	r27, Y+8	; 0x08
    564c:	00 97       	sbiw	r24, 0x00	; 0
    564e:	a1 05       	cpc	r26, r1
    5650:	b1 05       	cpc	r27, r1
    5652:	81 f6       	brne	.-96     	; 0x55f4 <Lcd_SendData+0xca>
    DIO_enuWritePin(LCD_PIN_EN, DIO_LOW);
    5654:	85 e0       	ldi	r24, 0x05	; 5
    5656:	60 e0       	ldi	r22, 0x00	; 0
    5658:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <DIO_enuWritePin>
    DIO_enuWritePin(LCD_PIN_D7, GET_BIT(data, 3));
    DIO_enuWritePin(LCD_PIN_EN, DIO_HIGH);
    Delay_ms(2);
    DIO_enuWritePin(LCD_PIN_EN, DIO_LOW);
#endif
}
    565c:	29 96       	adiw	r28, 0x09	; 9
    565e:	0f b6       	in	r0, 0x3f	; 63
    5660:	f8 94       	cli
    5662:	de bf       	out	0x3e, r29	; 62
    5664:	0f be       	out	0x3f, r0	; 63
    5666:	cd bf       	out	0x3d, r28	; 61
    5668:	cf 91       	pop	r28
    566a:	df 91       	pop	r29
    566c:	08 95       	ret

0000566e <Bluetooth_vInit>:
		.GLOBAL_tcfgUartClkMode = UART_ASYNCHRONOUS,
		.GLOBAL_tcfgUartCommMode = UART_1X_SPEED,
		.GLOBAL_tcfgUartInterrupt = UART_INTERRUPT_DISABLED
};

void Bluetooth_vInit(){
    566e:	df 93       	push	r29
    5670:	cf 93       	push	r28
    5672:	cd b7       	in	r28, 0x3d	; 61
    5674:	de b7       	in	r29, 0x3e	; 62
	UART_vInit(&UART1);
    5676:	86 e6       	ldi	r24, 0x66	; 102
    5678:	94 e0       	ldi	r25, 0x04	; 4
    567a:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <UART_vInit>
}
    567e:	cf 91       	pop	r28
    5680:	df 91       	pop	r29
    5682:	08 95       	ret

00005684 <Bluetooth_vEnable>:

void Bluetooth_vEnable(){
    5684:	df 93       	push	r29
    5686:	cf 93       	push	r28
    5688:	cd b7       	in	r28, 0x3d	; 61
    568a:	de b7       	in	r29, 0x3e	; 62
	UART_vEnable(&UART1);
    568c:	86 e6       	ldi	r24, 0x66	; 102
    568e:	94 e0       	ldi	r25, 0x04	; 4
    5690:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <UART_vEnable>
}
    5694:	cf 91       	pop	r28
    5696:	df 91       	pop	r29
    5698:	08 95       	ret

0000569a <Bluetooth_vDisable>:

void Bluetooth_vDisable(){
    569a:	df 93       	push	r29
    569c:	cf 93       	push	r28
    569e:	cd b7       	in	r28, 0x3d	; 61
    56a0:	de b7       	in	r29, 0x3e	; 62
	UART_vDisable(&UART1);
    56a2:	86 e6       	ldi	r24, 0x66	; 102
    56a4:	94 e0       	ldi	r25, 0x04	; 4
    56a6:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <UART_vDisable>
}
    56aa:	cf 91       	pop	r28
    56ac:	df 91       	pop	r29
    56ae:	08 95       	ret

000056b0 <Bluetooth_vSendData>:

void Bluetooth_vSendData(u8 Copy_u8Data){
    56b0:	df 93       	push	r29
    56b2:	cf 93       	push	r28
    56b4:	0f 92       	push	r0
    56b6:	cd b7       	in	r28, 0x3d	; 61
    56b8:	de b7       	in	r29, 0x3e	; 62
    56ba:	89 83       	std	Y+1, r24	; 0x01
	UART_vSendData(Copy_u8Data);
    56bc:	89 81       	ldd	r24, Y+1	; 0x01
    56be:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <UART_vSendData>
}
    56c2:	0f 90       	pop	r0
    56c4:	cf 91       	pop	r28
    56c6:	df 91       	pop	r29
    56c8:	08 95       	ret

000056ca <Bluetooth_u8ReceiveData>:

u8 Bluetooth_u8ReceiveData(void){
    56ca:	df 93       	push	r29
    56cc:	cf 93       	push	r28
    56ce:	cd b7       	in	r28, 0x3d	; 61
    56d0:	de b7       	in	r29, 0x3e	; 62
	static u8 LOCAL_u8ReceivedData;
	LOCAL_u8ReceivedData = UART_u8ReceiveData();
    56d2:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <UART_u8ReceiveData>
    56d6:	80 93 27 06 	sts	0x0627, r24

	return LOCAL_u8ReceivedData;
    56da:	80 91 27 06 	lds	r24, 0x0627
}
    56de:	cf 91       	pop	r28
    56e0:	df 91       	pop	r29
    56e2:	08 95       	ret

000056e4 <Bluetooth_vSendString>:

void Bluetooth_vSendString(u8 *Copy_u8Str){
    56e4:	df 93       	push	r29
    56e6:	cf 93       	push	r28
    56e8:	00 d0       	rcall	.+0      	; 0x56ea <Bluetooth_vSendString+0x6>
    56ea:	cd b7       	in	r28, 0x3d	; 61
    56ec:	de b7       	in	r29, 0x3e	; 62
    56ee:	9a 83       	std	Y+2, r25	; 0x02
    56f0:	89 83       	std	Y+1, r24	; 0x01
	UART_vSendString(Copy_u8Str);
    56f2:	89 81       	ldd	r24, Y+1	; 0x01
    56f4:	9a 81       	ldd	r25, Y+2	; 0x02
    56f6:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <UART_vSendString>
}
    56fa:	0f 90       	pop	r0
    56fc:	0f 90       	pop	r0
    56fe:	cf 91       	pop	r28
    5700:	df 91       	pop	r29
    5702:	08 95       	ret

00005704 <Bluetooth_vClearBuffer>:

void Bluetooth_vClearBuffer(){
    5704:	df 93       	push	r29
    5706:	cf 93       	push	r28
    5708:	cd b7       	in	r28, 0x3d	; 61
    570a:	de b7       	in	r29, 0x3e	; 62
	UART_vClearBuffer();
    570c:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <UART_vClearBuffer>
}
    5710:	cf 91       	pop	r28
    5712:	df 91       	pop	r29
    5714:	08 95       	ret

00005716 <app_Init>:
		.TMR_TimerChannel = TIMER2_NORMAL,
		.TMR_ToggleMode = TMR_InterruptMode,
		.TMR_OCMode = OC_Disconnected,
		.TMR_Prescale = PRE_1024
};
void app_Init(void){
    5716:	df 93       	push	r29
    5718:	cf 93       	push	r28
    571a:	00 d0       	rcall	.+0      	; 0x571c <app_Init+0x6>
    571c:	00 d0       	rcall	.+0      	; 0x571e <app_Init+0x8>
    571e:	0f 92       	push	r0
    5720:	cd b7       	in	r28, 0x3d	; 61
    5722:	de b7       	in	r29, 0x3e	; 62
	DIO_voidInit();
    5724:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <DIO_voidInit>
	Bluetooth_vInit();
    5728:	0e 94 37 2b 	call	0x566e	; 0x566e <Bluetooth_vInit>
	SERVO_vInit(&SERVO1);
    572c:	8f ef       	ldi	r24, 0xFF	; 255
    572e:	95 e0       	ldi	r25, 0x05	; 5
    5730:	0e 94 22 22 	call	0x4444	; 0x4444 <SERVO_vInit>
	Siren_vInit();
    5734:	0e 94 8e 21 	call	0x431c	; 0x431c <Siren_vInit>
	Bluetooth_vEnable();
    5738:	0e 94 42 2b 	call	0x5684	; 0x5684 <Bluetooth_vEnable>
	SERVO_vStart(&SERVO1);
    573c:	8f ef       	ldi	r24, 0xFF	; 255
    573e:	95 e0       	ldi	r25, 0x05	; 5
    5740:	0e 94 9c 22 	call	0x4538	; 0x4538 <SERVO_vStart>
	TMR_vInit(&TIMER2);
    5744:	8c e0       	ldi	r24, 0x0C	; 12
    5746:	96 e0       	ldi	r25, 0x06	; 6
    5748:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <TMR_vInit>
	Lcd_DisplayControlType LCD_type;
	LCD_type.cursor = LCD_STATE_OFF;
    574c:	1a 82       	std	Y+2, r1	; 0x02
	LCD_type.display = LCD_STATE_ON;
    574e:	81 e0       	ldi	r24, 0x01	; 1
    5750:	89 83       	std	Y+1, r24	; 0x01
	LCD_type.cursorBlink = LCD_STATE_OFF;
    5752:	1b 82       	std	Y+3, r1	; 0x03
	LCD_type.font = LCD_FONT_5X7;
    5754:	1d 82       	std	Y+5, r1	; 0x05
	LCD_type.lines = LCD_LINES_2;
    5756:	81 e0       	ldi	r24, 0x01	; 1
    5758:	8c 83       	std	Y+4, r24	; 0x04
	Lcd_Init(&LCD_type);
    575a:	ce 01       	movw	r24, r28
    575c:	01 96       	adiw	r24, 0x01	; 1
    575e:	0e 94 11 24 	call	0x4822	; 0x4822 <Lcd_Init>
	Lcd_ClearDisplay();
    5762:	0e 94 37 28 	call	0x506e	; 0x506e <Lcd_ClearDisplay>
	Lcd_ReturnHome();
    5766:	0e 94 b7 28 	call	0x516e	; 0x516e <Lcd_ReturnHome>
}
    576a:	0f 90       	pop	r0
    576c:	0f 90       	pop	r0
    576e:	0f 90       	pop	r0
    5770:	0f 90       	pop	r0
    5772:	0f 90       	pop	r0
    5774:	cf 91       	pop	r28
    5776:	df 91       	pop	r29
    5778:	08 95       	ret

0000577a <main>:
 *      Author: k.m
 */
#include "Initialization/Initialization.h"


void main(void){
    577a:	df 93       	push	r29
    577c:	cf 93       	push	r28
    577e:	cd b7       	in	r28, 0x3d	; 61
    5780:	de b7       	in	r29, 0x3e	; 62
    5782:	cf 58       	subi	r28, 0x8F	; 143
    5784:	d0 40       	sbci	r29, 0x00	; 0
    5786:	0f b6       	in	r0, 0x3f	; 63
    5788:	f8 94       	cli
    578a:	de bf       	out	0x3e, r29	; 62
    578c:	0f be       	out	0x3f, r0	; 63
    578e:	cd bf       	out	0x3d, r28	; 61
	app_Init();
    5790:	0e 94 8b 2b 	call	0x5716	; 0x5716 <app_Init>
	u8 receive;
	u8 i;
	u8 userName[30];
	u8 closed = 0;
    5794:	fe 01       	movw	r30, r28
    5796:	ed 59       	subi	r30, 0x9D	; 157
    5798:	ff 4f       	sbci	r31, 0xFF	; 255
    579a:	10 82       	st	Z, r1
	u8 opened = 0;
    579c:	fe 01       	movw	r30, r28
    579e:	ee 59       	subi	r30, 0x9E	; 158
    57a0:	ff 4f       	sbci	r31, 0xFF	; 255
    57a2:	10 82       	st	Z, r1
	u8 led_on=0;
    57a4:	fe 01       	movw	r30, r28
    57a6:	ef 59       	subi	r30, 0x9F	; 159
    57a8:	ff 4f       	sbci	r31, 0xFF	; 255
    57aa:	10 82       	st	Z, r1
	u8 led_off=0;
    57ac:	fe 01       	movw	r30, r28
    57ae:	e0 5a       	subi	r30, 0xA0	; 160
    57b0:	ff 4f       	sbci	r31, 0xFF	; 255
    57b2:	10 82       	st	Z, r1
	u8 password[10];
	u8 user_num = 0;
    57b4:	fe 01       	movw	r30, r28
    57b6:	e1 5a       	subi	r30, 0xA1	; 161
    57b8:	ff 4f       	sbci	r31, 0xFF	; 255
    57ba:	10 82       	st	Z, r1
	u8 pass_num = 0;
    57bc:	fe 01       	movw	r30, r28
    57be:	e2 5a       	subi	r30, 0xA2	; 162
    57c0:	ff 4f       	sbci	r31, 0xFF	; 255
    57c2:	10 82       	st	Z, r1
	u8 user_found = 0;
    57c4:	fe 01       	movw	r30, r28
    57c6:	e3 5a       	subi	r30, 0xA3	; 163
    57c8:	ff 4f       	sbci	r31, 0xFF	; 255
    57ca:	10 82       	st	Z, r1
	u8 choice;
	u8 attempts = 0;
    57cc:	fe 01       	movw	r30, r28
    57ce:	e5 5a       	subi	r30, 0xA5	; 165
    57d0:	ff 4f       	sbci	r31, 0xFF	; 255
    57d2:	10 82       	st	Z, r1
	u8 trials = 3;
    57d4:	fe 01       	movw	r30, r28
    57d6:	e6 5a       	subi	r30, 0xA6	; 166
    57d8:	ff 4f       	sbci	r31, 0xFF	; 255
    57da:	83 e0       	ldi	r24, 0x03	; 3
    57dc:	80 83       	st	Z, r24
	u8 errorPass  = 0;
    57de:	fe 01       	movw	r30, r28
    57e0:	e7 5a       	subi	r30, 0xA7	; 167
    57e2:	ff 4f       	sbci	r31, 0xFF	; 255
    57e4:	10 82       	st	Z, r1
	Lcd_SetCursorPosition(0, 0);
    57e6:	80 e0       	ldi	r24, 0x00	; 0
    57e8:	60 e0       	ldi	r22, 0x00	; 0
    57ea:	0e 94 41 28 	call	0x5082	; 0x5082 <Lcd_SetCursorPosition>
	Lcd_DisplayString("       Mobile");
    57ee:	8b e7       	ldi	r24, 0x7B	; 123
    57f0:	90 e0       	ldi	r25, 0x00	; 0
    57f2:	0e 94 31 24 	call	0x4862	; 0x4862 <Lcd_DisplayString>
	Lcd_SetCursorPosition(1, 0);
    57f6:	81 e0       	ldi	r24, 0x01	; 1
    57f8:	60 e0       	ldi	r22, 0x00	; 0
    57fa:	0e 94 41 28 	call	0x5082	; 0x5082 <Lcd_SetCursorPosition>
	Lcd_DisplayString("Controlled Home");
    57fe:	89 e8       	ldi	r24, 0x89	; 137
    5800:	90 e0       	ldi	r25, 0x00	; 0
    5802:	0e 94 31 24 	call	0x4862	; 0x4862 <Lcd_DisplayString>
	while(1){
		Bluetooth_vClearBuffer();
    5806:	0e 94 82 2b 	call	0x5704	; 0x5704 <Bluetooth_vClearBuffer>
		Bluetooth_vSendString((u8*)"=== Welcome to Mobile Controlled Home ===\r\n");
    580a:	89 e9       	ldi	r24, 0x99	; 153
    580c:	90 e0       	ldi	r25, 0x00	; 0
    580e:	0e 94 72 2b 	call	0x56e4	; 0x56e4 <Bluetooth_vSendString>
		Bluetooth_vClearBuffer();
    5812:	0e 94 82 2b 	call	0x5704	; 0x5704 <Bluetooth_vClearBuffer>
		Bluetooth_vSendString((u8*)"Enter User Name: ");
    5816:	85 ec       	ldi	r24, 0xC5	; 197
    5818:	90 e0       	ldi	r25, 0x00	; 0
    581a:	0e 94 72 2b 	call	0x56e4	; 0x56e4 <Bluetooth_vSendString>
		Bluetooth_vSendString((u8*)"\r\n");
    581e:	87 ed       	ldi	r24, 0xD7	; 215
    5820:	90 e0       	ldi	r25, 0x00	; 0
    5822:	0e 94 72 2b 	call	0x56e4	; 0x56e4 <Bluetooth_vSendString>
		attempts = 0;
    5826:	fe 01       	movw	r30, r28
    5828:	e5 5a       	subi	r30, 0xA5	; 165
    582a:	ff 4f       	sbci	r31, 0xFF	; 255
    582c:	10 82       	st	Z, r1
		errorPass = 0;
    582e:	fe 01       	movw	r30, r28
    5830:	e7 5a       	subi	r30, 0xA7	; 167
    5832:	ff 4f       	sbci	r31, 0xFF	; 255
    5834:	10 82       	st	Z, r1
		trials = 3;
    5836:	fe 01       	movw	r30, r28
    5838:	e6 5a       	subi	r30, 0xA6	; 166
    583a:	ff 4f       	sbci	r31, 0xFF	; 255
    583c:	83 e0       	ldi	r24, 0x03	; 3
    583e:	80 83       	st	Z, r24
		for (i = 0; i < MAX_CHARACTER_LIMIT_USER; i++) {
    5840:	fe 01       	movw	r30, r28
    5842:	ec 59       	subi	r30, 0x9C	; 156
    5844:	ff 4f       	sbci	r31, 0xFF	; 255
    5846:	10 82       	st	Z, r1
    5848:	26 c0       	rjmp	.+76     	; 0x5896 <main+0x11c>
			receive = Bluetooth_u8ReceiveData();
    584a:	0e 94 65 2b 	call	0x56ca	; 0x56ca <Bluetooth_u8ReceiveData>
    584e:	fe 01       	movw	r30, r28
    5850:	eb 59       	subi	r30, 0x9B	; 155
    5852:	ff 4f       	sbci	r31, 0xFF	; 255
    5854:	80 83       	st	Z, r24
			if (receive == '\r') break; // End input on carriage return
    5856:	fe 01       	movw	r30, r28
    5858:	eb 59       	subi	r30, 0x9B	; 155
    585a:	ff 4f       	sbci	r31, 0xFF	; 255
    585c:	80 81       	ld	r24, Z
    585e:	8d 30       	cpi	r24, 0x0D	; 13
    5860:	01 f1       	breq	.+64     	; 0x58a2 <main+0x128>
			userName[i] = receive;
    5862:	fe 01       	movw	r30, r28
    5864:	ec 59       	subi	r30, 0x9C	; 156
    5866:	ff 4f       	sbci	r31, 0xFF	; 255
    5868:	80 81       	ld	r24, Z
    586a:	28 2f       	mov	r18, r24
    586c:	30 e0       	ldi	r19, 0x00	; 0
    586e:	ce 01       	movw	r24, r28
    5870:	8a 59       	subi	r24, 0x9A	; 154
    5872:	9f 4f       	sbci	r25, 0xFF	; 255
    5874:	dc 01       	movw	r26, r24
    5876:	a2 0f       	add	r26, r18
    5878:	b3 1f       	adc	r27, r19
    587a:	fe 01       	movw	r30, r28
    587c:	eb 59       	subi	r30, 0x9B	; 155
    587e:	ff 4f       	sbci	r31, 0xFF	; 255
    5880:	80 81       	ld	r24, Z
    5882:	8c 93       	st	X, r24
		Bluetooth_vSendString((u8*)"Enter User Name: ");
		Bluetooth_vSendString((u8*)"\r\n");
		attempts = 0;
		errorPass = 0;
		trials = 3;
		for (i = 0; i < MAX_CHARACTER_LIMIT_USER; i++) {
    5884:	de 01       	movw	r26, r28
    5886:	ac 59       	subi	r26, 0x9C	; 156
    5888:	bf 4f       	sbci	r27, 0xFF	; 255
    588a:	fe 01       	movw	r30, r28
    588c:	ec 59       	subi	r30, 0x9C	; 156
    588e:	ff 4f       	sbci	r31, 0xFF	; 255
    5890:	80 81       	ld	r24, Z
    5892:	8f 5f       	subi	r24, 0xFF	; 255
    5894:	8c 93       	st	X, r24
    5896:	fe 01       	movw	r30, r28
    5898:	ec 59       	subi	r30, 0x9C	; 156
    589a:	ff 4f       	sbci	r31, 0xFF	; 255
    589c:	80 81       	ld	r24, Z
    589e:	8e 31       	cpi	r24, 0x1E	; 30
    58a0:	a0 f2       	brcs	.-88     	; 0x584a <main+0xd0>
			receive = Bluetooth_u8ReceiveData();
			if (receive == '\r') break; // End input on carriage return
			userName[i] = receive;
		}
		userName[i] = '\0'; // Null-terminate the string
    58a2:	fe 01       	movw	r30, r28
    58a4:	ec 59       	subi	r30, 0x9C	; 156
    58a6:	ff 4f       	sbci	r31, 0xFF	; 255
    58a8:	80 81       	ld	r24, Z
    58aa:	28 2f       	mov	r18, r24
    58ac:	30 e0       	ldi	r19, 0x00	; 0
    58ae:	ce 01       	movw	r24, r28
    58b0:	8a 59       	subi	r24, 0x9A	; 154
    58b2:	9f 4f       	sbci	r25, 0xFF	; 255
    58b4:	fc 01       	movw	r30, r24
    58b6:	e2 0f       	add	r30, r18
    58b8:	f3 1f       	adc	r31, r19
    58ba:	10 82       	st	Z, r1

		for(i = 0; i < 10; i++){
    58bc:	fe 01       	movw	r30, r28
    58be:	ec 59       	subi	r30, 0x9C	; 156
    58c0:	ff 4f       	sbci	r31, 0xFF	; 255
    58c2:	10 82       	st	Z, r1
    58c4:	30 c0       	rjmp	.+96     	; 0x5926 <main+0x1ac>
			if(strcmp((char*) userName, (char*) users[i].user_name) == 0){
    58c6:	fe 01       	movw	r30, r28
    58c8:	ec 59       	subi	r30, 0x9C	; 156
    58ca:	ff 4f       	sbci	r31, 0xFF	; 255
    58cc:	80 81       	ld	r24, Z
    58ce:	88 2f       	mov	r24, r24
    58d0:	90 e0       	ldi	r25, 0x00	; 0
    58d2:	88 0f       	add	r24, r24
    58d4:	99 1f       	adc	r25, r25
    58d6:	88 0f       	add	r24, r24
    58d8:	99 1f       	adc	r25, r25
    58da:	88 0f       	add	r24, r24
    58dc:	99 1f       	adc	r25, r25
    58de:	9c 01       	movw	r18, r24
    58e0:	22 0f       	add	r18, r18
    58e2:	33 1f       	adc	r19, r19
    58e4:	22 0f       	add	r18, r18
    58e6:	33 1f       	adc	r19, r19
    58e8:	82 0f       	add	r24, r18
    58ea:	93 1f       	adc	r25, r19
    58ec:	9c 01       	movw	r18, r24
    58ee:	21 59       	subi	r18, 0x91	; 145
    58f0:	3b 4f       	sbci	r19, 0xFB	; 251
    58f2:	ce 01       	movw	r24, r28
    58f4:	8a 59       	subi	r24, 0x9A	; 154
    58f6:	9f 4f       	sbci	r25, 0xFF	; 255
    58f8:	b9 01       	movw	r22, r18
    58fa:	0e 94 be 32 	call	0x657c	; 0x657c <strcmp>
    58fe:	00 97       	sbiw	r24, 0x00	; 0
    5900:	49 f4       	brne	.+18     	; 0x5914 <main+0x19a>
				user_num = i+1;
    5902:	de 01       	movw	r26, r28
    5904:	a1 5a       	subi	r26, 0xA1	; 161
    5906:	bf 4f       	sbci	r27, 0xFF	; 255
    5908:	fe 01       	movw	r30, r28
    590a:	ec 59       	subi	r30, 0x9C	; 156
    590c:	ff 4f       	sbci	r31, 0xFF	; 255
    590e:	80 81       	ld	r24, Z
    5910:	8f 5f       	subi	r24, 0xFF	; 255
    5912:	8c 93       	st	X, r24
			if (receive == '\r') break; // End input on carriage return
			userName[i] = receive;
		}
		userName[i] = '\0'; // Null-terminate the string

		for(i = 0; i < 10; i++){
    5914:	de 01       	movw	r26, r28
    5916:	ac 59       	subi	r26, 0x9C	; 156
    5918:	bf 4f       	sbci	r27, 0xFF	; 255
    591a:	fe 01       	movw	r30, r28
    591c:	ec 59       	subi	r30, 0x9C	; 156
    591e:	ff 4f       	sbci	r31, 0xFF	; 255
    5920:	80 81       	ld	r24, Z
    5922:	8f 5f       	subi	r24, 0xFF	; 255
    5924:	8c 93       	st	X, r24
    5926:	fe 01       	movw	r30, r28
    5928:	ec 59       	subi	r30, 0x9C	; 156
    592a:	ff 4f       	sbci	r31, 0xFF	; 255
    592c:	80 81       	ld	r24, Z
    592e:	8a 30       	cpi	r24, 0x0A	; 10
    5930:	50 f2       	brcs	.-108    	; 0x58c6 <main+0x14c>
			if(strcmp((char*) userName, (char*) users[i].user_name) == 0){
				user_num = i+1;
			}
		}
		Lcd_ReturnHome();
    5932:	0e 94 b7 28 	call	0x516e	; 0x516e <Lcd_ReturnHome>
		Lcd_SetCursorPosition(0, 0);
    5936:	80 e0       	ldi	r24, 0x00	; 0
    5938:	60 e0       	ldi	r22, 0x00	; 0
    593a:	0e 94 41 28 	call	0x5082	; 0x5082 <Lcd_SetCursorPosition>
		Lcd_DisplayString(" Received User              ");
    593e:	8a ed       	ldi	r24, 0xDA	; 218
    5940:	90 e0       	ldi	r25, 0x00	; 0
    5942:	0e 94 31 24 	call	0x4862	; 0x4862 <Lcd_DisplayString>
		Lcd_SetCursorPosition(1, 0);
    5946:	81 e0       	ldi	r24, 0x01	; 1
    5948:	60 e0       	ldi	r22, 0x00	; 0
    594a:	0e 94 41 28 	call	0x5082	; 0x5082 <Lcd_SetCursorPosition>
		Lcd_DisplayString((char*)userName);
    594e:	ce 01       	movw	r24, r28
    5950:	8a 59       	subi	r24, 0x9A	; 154
    5952:	9f 4f       	sbci	r25, 0xFF	; 255
    5954:	0e 94 31 24 	call	0x4862	; 0x4862 <Lcd_DisplayString>
		Lcd_DisplayString("            ");
    5958:	87 ef       	ldi	r24, 0xF7	; 247
    595a:	90 e0       	ldi	r25, 0x00	; 0
    595c:	0e 94 31 24 	call	0x4862	; 0x4862 <Lcd_DisplayString>
		Bluetooth_vSendString((u8*)"Enter Password: ");
    5960:	84 e0       	ldi	r24, 0x04	; 4
    5962:	91 e0       	ldi	r25, 0x01	; 1
    5964:	0e 94 72 2b 	call	0x56e4	; 0x56e4 <Bluetooth_vSendString>
    5968:	fb c2       	rjmp	.+1526   	; 0x5f60 <main+0x7e6>
		//Bluetooth_vSendString((u8*)"\r\n");
		while(attempts < 3){

			for (i = 0; i < MAX_CHARACTER_LIMIT_PASSWORD; i++) {
    596a:	fe 01       	movw	r30, r28
    596c:	ec 59       	subi	r30, 0x9C	; 156
    596e:	ff 4f       	sbci	r31, 0xFF	; 255
    5970:	10 82       	st	Z, r1
    5972:	28 c0       	rjmp	.+80     	; 0x59c4 <main+0x24a>
				 Bluetooth_vClearBuffer();
    5974:	0e 94 82 2b 	call	0x5704	; 0x5704 <Bluetooth_vClearBuffer>
				receive = Bluetooth_u8ReceiveData();
    5978:	0e 94 65 2b 	call	0x56ca	; 0x56ca <Bluetooth_u8ReceiveData>
    597c:	fe 01       	movw	r30, r28
    597e:	eb 59       	subi	r30, 0x9B	; 155
    5980:	ff 4f       	sbci	r31, 0xFF	; 255
    5982:	80 83       	st	Z, r24
				if (receive == '\r') break; // End input on carriage return
    5984:	fe 01       	movw	r30, r28
    5986:	eb 59       	subi	r30, 0x9B	; 155
    5988:	ff 4f       	sbci	r31, 0xFF	; 255
    598a:	80 81       	ld	r24, Z
    598c:	8d 30       	cpi	r24, 0x0D	; 13
    598e:	01 f1       	breq	.+64     	; 0x59d0 <main+0x256>
					password[i] = receive;
    5990:	fe 01       	movw	r30, r28
    5992:	ec 59       	subi	r30, 0x9C	; 156
    5994:	ff 4f       	sbci	r31, 0xFF	; 255
    5996:	80 81       	ld	r24, Z
    5998:	28 2f       	mov	r18, r24
    599a:	30 e0       	ldi	r19, 0x00	; 0
    599c:	ce 01       	movw	r24, r28
    599e:	8c 57       	subi	r24, 0x7C	; 124
    59a0:	9f 4f       	sbci	r25, 0xFF	; 255
    59a2:	dc 01       	movw	r26, r24
    59a4:	a2 0f       	add	r26, r18
    59a6:	b3 1f       	adc	r27, r19
    59a8:	fe 01       	movw	r30, r28
    59aa:	eb 59       	subi	r30, 0x9B	; 155
    59ac:	ff 4f       	sbci	r31, 0xFF	; 255
    59ae:	80 81       	ld	r24, Z
    59b0:	8c 93       	st	X, r24
		Lcd_DisplayString("            ");
		Bluetooth_vSendString((u8*)"Enter Password: ");
		//Bluetooth_vSendString((u8*)"\r\n");
		while(attempts < 3){

			for (i = 0; i < MAX_CHARACTER_LIMIT_PASSWORD; i++) {
    59b2:	de 01       	movw	r26, r28
    59b4:	ac 59       	subi	r26, 0x9C	; 156
    59b6:	bf 4f       	sbci	r27, 0xFF	; 255
    59b8:	fe 01       	movw	r30, r28
    59ba:	ec 59       	subi	r30, 0x9C	; 156
    59bc:	ff 4f       	sbci	r31, 0xFF	; 255
    59be:	80 81       	ld	r24, Z
    59c0:	8f 5f       	subi	r24, 0xFF	; 255
    59c2:	8c 93       	st	X, r24
    59c4:	fe 01       	movw	r30, r28
    59c6:	ec 59       	subi	r30, 0x9C	; 156
    59c8:	ff 4f       	sbci	r31, 0xFF	; 255
    59ca:	80 81       	ld	r24, Z
    59cc:	8a 30       	cpi	r24, 0x0A	; 10
    59ce:	90 f2       	brcs	.-92     	; 0x5974 <main+0x1fa>
				 Bluetooth_vClearBuffer();
				receive = Bluetooth_u8ReceiveData();
				if (receive == '\r') break; // End input on carriage return
					password[i] = receive;
			}
			password[i] = '\0'; // Null-terminate the string
    59d0:	fe 01       	movw	r30, r28
    59d2:	ec 59       	subi	r30, 0x9C	; 156
    59d4:	ff 4f       	sbci	r31, 0xFF	; 255
    59d6:	80 81       	ld	r24, Z
    59d8:	28 2f       	mov	r18, r24
    59da:	30 e0       	ldi	r19, 0x00	; 0
    59dc:	ce 01       	movw	r24, r28
    59de:	8c 57       	subi	r24, 0x7C	; 124
    59e0:	9f 4f       	sbci	r25, 0xFF	; 255
    59e2:	fc 01       	movw	r30, r24
    59e4:	e2 0f       	add	r30, r18
    59e6:	f3 1f       	adc	r31, r19
    59e8:	10 82       	st	Z, r1

			for(i = 0; i < 10; i++){
    59ea:	fe 01       	movw	r30, r28
    59ec:	ec 59       	subi	r30, 0x9C	; 156
    59ee:	ff 4f       	sbci	r31, 0xFF	; 255
    59f0:	10 82       	st	Z, r1
    59f2:	31 c0       	rjmp	.+98     	; 0x5a56 <main+0x2dc>
				if(strcmp((char*) password, (char*) users[i].password) == 0){
    59f4:	fe 01       	movw	r30, r28
    59f6:	ec 59       	subi	r30, 0x9C	; 156
    59f8:	ff 4f       	sbci	r31, 0xFF	; 255
    59fa:	80 81       	ld	r24, Z
    59fc:	88 2f       	mov	r24, r24
    59fe:	90 e0       	ldi	r25, 0x00	; 0
    5a00:	88 0f       	add	r24, r24
    5a02:	99 1f       	adc	r25, r25
    5a04:	88 0f       	add	r24, r24
    5a06:	99 1f       	adc	r25, r25
    5a08:	88 0f       	add	r24, r24
    5a0a:	99 1f       	adc	r25, r25
    5a0c:	9c 01       	movw	r18, r24
    5a0e:	22 0f       	add	r18, r18
    5a10:	33 1f       	adc	r19, r19
    5a12:	22 0f       	add	r18, r18
    5a14:	33 1f       	adc	r19, r19
    5a16:	82 0f       	add	r24, r18
    5a18:	93 1f       	adc	r25, r19
    5a1a:	4e 96       	adiw	r24, 0x1e	; 30
    5a1c:	9c 01       	movw	r18, r24
    5a1e:	21 59       	subi	r18, 0x91	; 145
    5a20:	3b 4f       	sbci	r19, 0xFB	; 251
    5a22:	ce 01       	movw	r24, r28
    5a24:	8c 57       	subi	r24, 0x7C	; 124
    5a26:	9f 4f       	sbci	r25, 0xFF	; 255
    5a28:	b9 01       	movw	r22, r18
    5a2a:	0e 94 be 32 	call	0x657c	; 0x657c <strcmp>
    5a2e:	00 97       	sbiw	r24, 0x00	; 0
    5a30:	49 f4       	brne	.+18     	; 0x5a44 <main+0x2ca>
					pass_num = i+1;
    5a32:	de 01       	movw	r26, r28
    5a34:	a2 5a       	subi	r26, 0xA2	; 162
    5a36:	bf 4f       	sbci	r27, 0xFF	; 255
    5a38:	fe 01       	movw	r30, r28
    5a3a:	ec 59       	subi	r30, 0x9C	; 156
    5a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    5a3e:	80 81       	ld	r24, Z
    5a40:	8f 5f       	subi	r24, 0xFF	; 255
    5a42:	8c 93       	st	X, r24
				if (receive == '\r') break; // End input on carriage return
					password[i] = receive;
			}
			password[i] = '\0'; // Null-terminate the string

			for(i = 0; i < 10; i++){
    5a44:	de 01       	movw	r26, r28
    5a46:	ac 59       	subi	r26, 0x9C	; 156
    5a48:	bf 4f       	sbci	r27, 0xFF	; 255
    5a4a:	fe 01       	movw	r30, r28
    5a4c:	ec 59       	subi	r30, 0x9C	; 156
    5a4e:	ff 4f       	sbci	r31, 0xFF	; 255
    5a50:	80 81       	ld	r24, Z
    5a52:	8f 5f       	subi	r24, 0xFF	; 255
    5a54:	8c 93       	st	X, r24
    5a56:	fe 01       	movw	r30, r28
    5a58:	ec 59       	subi	r30, 0x9C	; 156
    5a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    5a5c:	80 81       	ld	r24, Z
    5a5e:	8a 30       	cpi	r24, 0x0A	; 10
    5a60:	48 f2       	brcs	.-110    	; 0x59f4 <main+0x27a>
				if(strcmp((char*) password, (char*) users[i].password) == 0){
					pass_num = i+1;
				}
			}
			for (i = 0; password[i] != '\0'; i++) {
    5a62:	fe 01       	movw	r30, r28
    5a64:	ec 59       	subi	r30, 0x9C	; 156
    5a66:	ff 4f       	sbci	r31, 0xFF	; 255
    5a68:	10 82       	st	Z, r1
    5a6a:	2d c0       	rjmp	.+90     	; 0x5ac6 <main+0x34c>
				if(!(password[i] >= '0' && password[i] <= '9') ){
    5a6c:	fe 01       	movw	r30, r28
    5a6e:	ec 59       	subi	r30, 0x9C	; 156
    5a70:	ff 4f       	sbci	r31, 0xFF	; 255
    5a72:	80 81       	ld	r24, Z
    5a74:	28 2f       	mov	r18, r24
    5a76:	30 e0       	ldi	r19, 0x00	; 0
    5a78:	ce 01       	movw	r24, r28
    5a7a:	8c 57       	subi	r24, 0x7C	; 124
    5a7c:	9f 4f       	sbci	r25, 0xFF	; 255
    5a7e:	fc 01       	movw	r30, r24
    5a80:	e2 0f       	add	r30, r18
    5a82:	f3 1f       	adc	r31, r19
    5a84:	80 81       	ld	r24, Z
    5a86:	80 33       	cpi	r24, 0x30	; 48
    5a88:	78 f0       	brcs	.+30     	; 0x5aa8 <main+0x32e>
    5a8a:	fe 01       	movw	r30, r28
    5a8c:	ec 59       	subi	r30, 0x9C	; 156
    5a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    5a90:	80 81       	ld	r24, Z
    5a92:	28 2f       	mov	r18, r24
    5a94:	30 e0       	ldi	r19, 0x00	; 0
    5a96:	ce 01       	movw	r24, r28
    5a98:	8c 57       	subi	r24, 0x7C	; 124
    5a9a:	9f 4f       	sbci	r25, 0xFF	; 255
    5a9c:	fc 01       	movw	r30, r24
    5a9e:	e2 0f       	add	r30, r18
    5aa0:	f3 1f       	adc	r31, r19
    5aa2:	80 81       	ld	r24, Z
    5aa4:	8a 33       	cpi	r24, 0x3A	; 58
    5aa6:	30 f0       	brcs	.+12     	; 0x5ab4 <main+0x33a>
					errorPass = 1;
    5aa8:	fe 01       	movw	r30, r28
    5aaa:	e7 5a       	subi	r30, 0xA7	; 167
    5aac:	ff 4f       	sbci	r31, 0xFF	; 255
    5aae:	81 e0       	ldi	r24, 0x01	; 1
    5ab0:	80 83       	st	Z, r24
    5ab2:	18 c0       	rjmp	.+48     	; 0x5ae4 <main+0x36a>
			for(i = 0; i < 10; i++){
				if(strcmp((char*) password, (char*) users[i].password) == 0){
					pass_num = i+1;
				}
			}
			for (i = 0; password[i] != '\0'; i++) {
    5ab4:	de 01       	movw	r26, r28
    5ab6:	ac 59       	subi	r26, 0x9C	; 156
    5ab8:	bf 4f       	sbci	r27, 0xFF	; 255
    5aba:	fe 01       	movw	r30, r28
    5abc:	ec 59       	subi	r30, 0x9C	; 156
    5abe:	ff 4f       	sbci	r31, 0xFF	; 255
    5ac0:	80 81       	ld	r24, Z
    5ac2:	8f 5f       	subi	r24, 0xFF	; 255
    5ac4:	8c 93       	st	X, r24
    5ac6:	fe 01       	movw	r30, r28
    5ac8:	ec 59       	subi	r30, 0x9C	; 156
    5aca:	ff 4f       	sbci	r31, 0xFF	; 255
    5acc:	80 81       	ld	r24, Z
    5ace:	28 2f       	mov	r18, r24
    5ad0:	30 e0       	ldi	r19, 0x00	; 0
    5ad2:	ce 01       	movw	r24, r28
    5ad4:	8c 57       	subi	r24, 0x7C	; 124
    5ad6:	9f 4f       	sbci	r25, 0xFF	; 255
    5ad8:	fc 01       	movw	r30, r24
    5ada:	e2 0f       	add	r30, r18
    5adc:	f3 1f       	adc	r31, r19
    5ade:	80 81       	ld	r24, Z
    5ae0:	88 23       	and	r24, r24
    5ae2:	21 f6       	brne	.-120    	; 0x5a6c <main+0x2f2>
				if(!(password[i] >= '0' && password[i] <= '9') ){
					errorPass = 1;
					break;
				}
			}
			if(errorPass == 1){
    5ae4:	fe 01       	movw	r30, r28
    5ae6:	e7 5a       	subi	r30, 0xA7	; 167
    5ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    5aea:	80 81       	ld	r24, Z
    5aec:	81 30       	cpi	r24, 0x01	; 1
    5aee:	b9 f4       	brne	.+46     	; 0x5b1e <main+0x3a4>
				Bluetooth_vSendString((u8*)"Error Enter Integers Only in Password\r\n");
    5af0:	85 e1       	ldi	r24, 0x15	; 21
    5af2:	91 e0       	ldi	r25, 0x01	; 1
    5af4:	0e 94 72 2b 	call	0x56e4	; 0x56e4 <Bluetooth_vSendString>
				Lcd_ReturnHome();
    5af8:	0e 94 b7 28 	call	0x516e	; 0x516e <Lcd_ReturnHome>
				Lcd_SetCursorPosition(0, 0);
    5afc:	80 e0       	ldi	r24, 0x00	; 0
    5afe:	60 e0       	ldi	r22, 0x00	; 0
    5b00:	0e 94 41 28 	call	0x5082	; 0x5082 <Lcd_SetCursorPosition>
				Lcd_DisplayString(" Password Error     ");
    5b04:	8d e3       	ldi	r24, 0x3D	; 61
    5b06:	91 e0       	ldi	r25, 0x01	; 1
    5b08:	0e 94 31 24 	call	0x4862	; 0x4862 <Lcd_DisplayString>
				Lcd_SetCursorPosition(1, 0);
    5b0c:	81 e0       	ldi	r24, 0x01	; 1
    5b0e:	60 e0       	ldi	r22, 0x00	; 0
    5b10:	0e 94 41 28 	call	0x5082	; 0x5082 <Lcd_SetCursorPosition>
				Lcd_DisplayString("integers Only    ");
    5b14:	82 e5       	ldi	r24, 0x52	; 82
    5b16:	91 e0       	ldi	r25, 0x01	; 1
    5b18:	0e 94 31 24 	call	0x4862	; 0x4862 <Lcd_DisplayString>
    5b1c:	88 c4       	rjmp	.+2320   	; 0x642e <main+0xcb4>
				break;
			}

			Lcd_ReturnHome();
    5b1e:	0e 94 b7 28 	call	0x516e	; 0x516e <Lcd_ReturnHome>
			Lcd_SetCursorPosition(0, 0);
    5b22:	80 e0       	ldi	r24, 0x00	; 0
    5b24:	60 e0       	ldi	r22, 0x00	; 0
    5b26:	0e 94 41 28 	call	0x5082	; 0x5082 <Lcd_SetCursorPosition>
			Lcd_DisplayString("  Received Pass               ");
    5b2a:	84 e6       	ldi	r24, 0x64	; 100
    5b2c:	91 e0       	ldi	r25, 0x01	; 1
    5b2e:	0e 94 31 24 	call	0x4862	; 0x4862 <Lcd_DisplayString>
			Lcd_SetCursorPosition(1, 0);
    5b32:	81 e0       	ldi	r24, 0x01	; 1
    5b34:	60 e0       	ldi	r22, 0x00	; 0
    5b36:	0e 94 41 28 	call	0x5082	; 0x5082 <Lcd_SetCursorPosition>
			Lcd_DisplayString((char*)password);
    5b3a:	ce 01       	movw	r24, r28
    5b3c:	8c 57       	subi	r24, 0x7C	; 124
    5b3e:	9f 4f       	sbci	r25, 0xFF	; 255
    5b40:	0e 94 31 24 	call	0x4862	; 0x4862 <Lcd_DisplayString>
			Lcd_DisplayString("          ");
    5b44:	83 e8       	ldi	r24, 0x83	; 131
    5b46:	91 e0       	ldi	r25, 0x01	; 1
    5b48:	0e 94 31 24 	call	0x4862	; 0x4862 <Lcd_DisplayString>
			if(user_num == 0 || pass_num == 0 || user_num != pass_num){
    5b4c:	fe 01       	movw	r30, r28
    5b4e:	e1 5a       	subi	r30, 0xA1	; 161
    5b50:	ff 4f       	sbci	r31, 0xFF	; 255
    5b52:	80 81       	ld	r24, Z
    5b54:	88 23       	and	r24, r24
    5b56:	89 f0       	breq	.+34     	; 0x5b7a <main+0x400>
    5b58:	fe 01       	movw	r30, r28
    5b5a:	e2 5a       	subi	r30, 0xA2	; 162
    5b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    5b5e:	80 81       	ld	r24, Z
    5b60:	88 23       	and	r24, r24
    5b62:	59 f0       	breq	.+22     	; 0x5b7a <main+0x400>
    5b64:	fe 01       	movw	r30, r28
    5b66:	e1 5a       	subi	r30, 0xA1	; 161
    5b68:	ff 4f       	sbci	r31, 0xFF	; 255
    5b6a:	de 01       	movw	r26, r28
    5b6c:	a2 5a       	subi	r26, 0xA2	; 162
    5b6e:	bf 4f       	sbci	r27, 0xFF	; 255
    5b70:	90 81       	ld	r25, Z
    5b72:	8c 91       	ld	r24, X
    5b74:	98 17       	cp	r25, r24
    5b76:	09 f4       	brne	.+2      	; 0x5b7a <main+0x400>
    5b78:	da c1       	rjmp	.+948    	; 0x5f2e <main+0x7b4>
				trials--;
    5b7a:	de 01       	movw	r26, r28
    5b7c:	a6 5a       	subi	r26, 0xA6	; 166
    5b7e:	bf 4f       	sbci	r27, 0xFF	; 255
    5b80:	fe 01       	movw	r30, r28
    5b82:	e6 5a       	subi	r30, 0xA6	; 166
    5b84:	ff 4f       	sbci	r31, 0xFF	; 255
    5b86:	80 81       	ld	r24, Z
    5b88:	81 50       	subi	r24, 0x01	; 1
    5b8a:	8c 93       	st	X, r24
				Bluetooth_vSendString((u8*)"User Not Found\r\n");
    5b8c:	8e e8       	ldi	r24, 0x8E	; 142
    5b8e:	91 e0       	ldi	r25, 0x01	; 1
    5b90:	0e 94 72 2b 	call	0x56e4	; 0x56e4 <Bluetooth_vSendString>
				Bluetooth_vSendString((u8*)"The remaining trials: ");
    5b94:	8f e9       	ldi	r24, 0x9F	; 159
    5b96:	91 e0       	ldi	r25, 0x01	; 1
    5b98:	0e 94 72 2b 	call	0x56e4	; 0x56e4 <Bluetooth_vSendString>
				Bluetooth_vSendData((u8)trials+48);
    5b9c:	fe 01       	movw	r30, r28
    5b9e:	e6 5a       	subi	r30, 0xA6	; 166
    5ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    5ba2:	80 81       	ld	r24, Z
    5ba4:	80 5d       	subi	r24, 0xD0	; 208
    5ba6:	0e 94 58 2b 	call	0x56b0	; 0x56b0 <Bluetooth_vSendData>
				Bluetooth_vSendString((u8*)"\r\n");
    5baa:	87 ed       	ldi	r24, 0xD7	; 215
    5bac:	90 e0       	ldi	r25, 0x00	; 0
    5bae:	0e 94 72 2b 	call	0x56e4	; 0x56e4 <Bluetooth_vSendString>
				attempts++;
    5bb2:	de 01       	movw	r26, r28
    5bb4:	a5 5a       	subi	r26, 0xA5	; 165
    5bb6:	bf 4f       	sbci	r27, 0xFF	; 255
    5bb8:	fe 01       	movw	r30, r28
    5bba:	e5 5a       	subi	r30, 0xA5	; 165
    5bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    5bbe:	80 81       	ld	r24, Z
    5bc0:	8f 5f       	subi	r24, 0xFF	; 255
    5bc2:	8c 93       	st	X, r24
				if(attempts == 3){
    5bc4:	fe 01       	movw	r30, r28
    5bc6:	e5 5a       	subi	r30, 0xA5	; 165
    5bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    5bca:	80 81       	ld	r24, Z
    5bcc:	83 30       	cpi	r24, 0x03	; 3
    5bce:	09 f0       	breq	.+2      	; 0x5bd2 <main+0x458>
    5bd0:	a3 c1       	rjmp	.+838    	; 0x5f18 <main+0x79e>
					Sev_PowerOn(0);
    5bd2:	80 e0       	ldi	r24, 0x00	; 0
    5bd4:	0e 94 75 23 	call	0x46ea	; 0x46ea <Sev_PowerOn>
					Bluetooth_vSendString((u8*)"You are a Thief\r\n");
    5bd8:	86 eb       	ldi	r24, 0xB6	; 182
    5bda:	91 e0       	ldi	r25, 0x01	; 1
    5bdc:	0e 94 72 2b 	call	0x56e4	; 0x56e4 <Bluetooth_vSendString>
					TMR_vStartTimer(&TIMER2);
    5be0:	8c e0       	ldi	r24, 0x0C	; 12
    5be2:	96 e0       	ldi	r25, 0x06	; 6
    5be4:	0e 94 53 12 	call	0x24a6	; 0x24a6 <TMR_vStartTimer>
					timer2_flag = FLAG_OFF;
    5be8:	10 92 1a 06 	sts	0x061A, r1
					//turn on red led
					DIO_enuWritePin(DIO_PIN_NUM_0, DIO_HIGH);
    5bec:	80 e0       	ldi	r24, 0x00	; 0
    5bee:	61 e0       	ldi	r22, 0x01	; 1
    5bf0:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <DIO_enuWritePin>
    5bf4:	88 c1       	rjmp	.+784    	; 0x5f06 <main+0x78c>
					/* While loop until flag is off */
					while(timer2_flag == FLAG_OFF){
						SIREN_vChangeSound(500);  // produce low sound
    5bf6:	84 ef       	ldi	r24, 0xF4	; 244
    5bf8:	91 e0       	ldi	r25, 0x01	; 1
    5bfa:	0e 94 b1 21 	call	0x4362	; 0x4362 <SIREN_vChangeSound>
						Delay_ms(250);  // wait for 500ms
    5bfe:	fe 01       	movw	r30, r28
    5c00:	eb 5a       	subi	r30, 0xAB	; 171
    5c02:	ff 4f       	sbci	r31, 0xFF	; 255
    5c04:	8f e1       	ldi	r24, 0x1F	; 31
    5c06:	90 e0       	ldi	r25, 0x00	; 0
    5c08:	a0 e0       	ldi	r26, 0x00	; 0
    5c0a:	b0 e0       	ldi	r27, 0x00	; 0
    5c0c:	80 83       	st	Z, r24
    5c0e:	91 83       	std	Z+1, r25	; 0x01
    5c10:	a2 83       	std	Z+2, r26	; 0x02
    5c12:	b3 83       	std	Z+3, r27	; 0x03
    5c14:	3c c0       	rjmp	.+120    	; 0x5c8e <main+0x514>
    5c16:	fe 01       	movw	r30, r28
    5c18:	ef 5a       	subi	r30, 0xAF	; 175
    5c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    5c1c:	80 ed       	ldi	r24, 0xD0	; 208
    5c1e:	97 e0       	ldi	r25, 0x07	; 7
    5c20:	a0 e0       	ldi	r26, 0x00	; 0
    5c22:	b0 e0       	ldi	r27, 0x00	; 0
    5c24:	80 83       	st	Z, r24
    5c26:	91 83       	std	Z+1, r25	; 0x01
    5c28:	a2 83       	std	Z+2, r26	; 0x02
    5c2a:	b3 83       	std	Z+3, r27	; 0x03
    5c2c:	13 c0       	rjmp	.+38     	; 0x5c54 <main+0x4da>
    5c2e:	00 00       	nop
    5c30:	9e 01       	movw	r18, r28
    5c32:	2f 5a       	subi	r18, 0xAF	; 175
    5c34:	3f 4f       	sbci	r19, 0xFF	; 255
    5c36:	fe 01       	movw	r30, r28
    5c38:	ef 5a       	subi	r30, 0xAF	; 175
    5c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    5c3c:	80 81       	ld	r24, Z
    5c3e:	91 81       	ldd	r25, Z+1	; 0x01
    5c40:	a2 81       	ldd	r26, Z+2	; 0x02
    5c42:	b3 81       	ldd	r27, Z+3	; 0x03
    5c44:	01 97       	sbiw	r24, 0x01	; 1
    5c46:	a1 09       	sbc	r26, r1
    5c48:	b1 09       	sbc	r27, r1
    5c4a:	f9 01       	movw	r30, r18
    5c4c:	80 83       	st	Z, r24
    5c4e:	91 83       	std	Z+1, r25	; 0x01
    5c50:	a2 83       	std	Z+2, r26	; 0x02
    5c52:	b3 83       	std	Z+3, r27	; 0x03
    5c54:	fe 01       	movw	r30, r28
    5c56:	ef 5a       	subi	r30, 0xAF	; 175
    5c58:	ff 4f       	sbci	r31, 0xFF	; 255
    5c5a:	80 81       	ld	r24, Z
    5c5c:	91 81       	ldd	r25, Z+1	; 0x01
    5c5e:	a2 81       	ldd	r26, Z+2	; 0x02
    5c60:	b3 81       	ldd	r27, Z+3	; 0x03
    5c62:	00 97       	sbiw	r24, 0x00	; 0
    5c64:	a1 05       	cpc	r26, r1
    5c66:	b1 05       	cpc	r27, r1
    5c68:	11 f7       	brne	.-60     	; 0x5c2e <main+0x4b4>
    5c6a:	9e 01       	movw	r18, r28
    5c6c:	2b 5a       	subi	r18, 0xAB	; 171
    5c6e:	3f 4f       	sbci	r19, 0xFF	; 255
    5c70:	fe 01       	movw	r30, r28
    5c72:	eb 5a       	subi	r30, 0xAB	; 171
    5c74:	ff 4f       	sbci	r31, 0xFF	; 255
    5c76:	80 81       	ld	r24, Z
    5c78:	91 81       	ldd	r25, Z+1	; 0x01
    5c7a:	a2 81       	ldd	r26, Z+2	; 0x02
    5c7c:	b3 81       	ldd	r27, Z+3	; 0x03
    5c7e:	01 97       	sbiw	r24, 0x01	; 1
    5c80:	a1 09       	sbc	r26, r1
    5c82:	b1 09       	sbc	r27, r1
    5c84:	f9 01       	movw	r30, r18
    5c86:	80 83       	st	Z, r24
    5c88:	91 83       	std	Z+1, r25	; 0x01
    5c8a:	a2 83       	std	Z+2, r26	; 0x02
    5c8c:	b3 83       	std	Z+3, r27	; 0x03
    5c8e:	fe 01       	movw	r30, r28
    5c90:	eb 5a       	subi	r30, 0xAB	; 171
    5c92:	ff 4f       	sbci	r31, 0xFF	; 255
    5c94:	80 81       	ld	r24, Z
    5c96:	91 81       	ldd	r25, Z+1	; 0x01
    5c98:	a2 81       	ldd	r26, Z+2	; 0x02
    5c9a:	b3 81       	ldd	r27, Z+3	; 0x03
    5c9c:	00 97       	sbiw	r24, 0x00	; 0
    5c9e:	a1 05       	cpc	r26, r1
    5ca0:	b1 05       	cpc	r27, r1
    5ca2:	09 f0       	breq	.+2      	; 0x5ca6 <main+0x52c>
    5ca4:	b8 cf       	rjmp	.-144    	; 0x5c16 <main+0x49c>
						SIREN_vChangeSound(1100); // produce high sound
    5ca6:	8c e4       	ldi	r24, 0x4C	; 76
    5ca8:	94 e0       	ldi	r25, 0x04	; 4
    5caa:	0e 94 b1 21 	call	0x4362	; 0x4362 <SIREN_vChangeSound>
						Delay_ms(250);  // wait for 500ms
    5cae:	fe 01       	movw	r30, r28
    5cb0:	e3 5b       	subi	r30, 0xB3	; 179
    5cb2:	ff 4f       	sbci	r31, 0xFF	; 255
    5cb4:	8f e1       	ldi	r24, 0x1F	; 31
    5cb6:	90 e0       	ldi	r25, 0x00	; 0
    5cb8:	a0 e0       	ldi	r26, 0x00	; 0
    5cba:	b0 e0       	ldi	r27, 0x00	; 0
    5cbc:	80 83       	st	Z, r24
    5cbe:	91 83       	std	Z+1, r25	; 0x01
    5cc0:	a2 83       	std	Z+2, r26	; 0x02
    5cc2:	b3 83       	std	Z+3, r27	; 0x03
    5cc4:	3c c0       	rjmp	.+120    	; 0x5d3e <main+0x5c4>
    5cc6:	fe 01       	movw	r30, r28
    5cc8:	e7 5b       	subi	r30, 0xB7	; 183
    5cca:	ff 4f       	sbci	r31, 0xFF	; 255
    5ccc:	80 ed       	ldi	r24, 0xD0	; 208
    5cce:	97 e0       	ldi	r25, 0x07	; 7
    5cd0:	a0 e0       	ldi	r26, 0x00	; 0
    5cd2:	b0 e0       	ldi	r27, 0x00	; 0
    5cd4:	80 83       	st	Z, r24
    5cd6:	91 83       	std	Z+1, r25	; 0x01
    5cd8:	a2 83       	std	Z+2, r26	; 0x02
    5cda:	b3 83       	std	Z+3, r27	; 0x03
    5cdc:	13 c0       	rjmp	.+38     	; 0x5d04 <main+0x58a>
    5cde:	00 00       	nop
    5ce0:	9e 01       	movw	r18, r28
    5ce2:	27 5b       	subi	r18, 0xB7	; 183
    5ce4:	3f 4f       	sbci	r19, 0xFF	; 255
    5ce6:	fe 01       	movw	r30, r28
    5ce8:	e7 5b       	subi	r30, 0xB7	; 183
    5cea:	ff 4f       	sbci	r31, 0xFF	; 255
    5cec:	80 81       	ld	r24, Z
    5cee:	91 81       	ldd	r25, Z+1	; 0x01
    5cf0:	a2 81       	ldd	r26, Z+2	; 0x02
    5cf2:	b3 81       	ldd	r27, Z+3	; 0x03
    5cf4:	01 97       	sbiw	r24, 0x01	; 1
    5cf6:	a1 09       	sbc	r26, r1
    5cf8:	b1 09       	sbc	r27, r1
    5cfa:	f9 01       	movw	r30, r18
    5cfc:	80 83       	st	Z, r24
    5cfe:	91 83       	std	Z+1, r25	; 0x01
    5d00:	a2 83       	std	Z+2, r26	; 0x02
    5d02:	b3 83       	std	Z+3, r27	; 0x03
    5d04:	fe 01       	movw	r30, r28
    5d06:	e7 5b       	subi	r30, 0xB7	; 183
    5d08:	ff 4f       	sbci	r31, 0xFF	; 255
    5d0a:	80 81       	ld	r24, Z
    5d0c:	91 81       	ldd	r25, Z+1	; 0x01
    5d0e:	a2 81       	ldd	r26, Z+2	; 0x02
    5d10:	b3 81       	ldd	r27, Z+3	; 0x03
    5d12:	00 97       	sbiw	r24, 0x00	; 0
    5d14:	a1 05       	cpc	r26, r1
    5d16:	b1 05       	cpc	r27, r1
    5d18:	11 f7       	brne	.-60     	; 0x5cde <main+0x564>
    5d1a:	9e 01       	movw	r18, r28
    5d1c:	23 5b       	subi	r18, 0xB3	; 179
    5d1e:	3f 4f       	sbci	r19, 0xFF	; 255
    5d20:	fe 01       	movw	r30, r28
    5d22:	e3 5b       	subi	r30, 0xB3	; 179
    5d24:	ff 4f       	sbci	r31, 0xFF	; 255
    5d26:	80 81       	ld	r24, Z
    5d28:	91 81       	ldd	r25, Z+1	; 0x01
    5d2a:	a2 81       	ldd	r26, Z+2	; 0x02
    5d2c:	b3 81       	ldd	r27, Z+3	; 0x03
    5d2e:	01 97       	sbiw	r24, 0x01	; 1
    5d30:	a1 09       	sbc	r26, r1
    5d32:	b1 09       	sbc	r27, r1
    5d34:	f9 01       	movw	r30, r18
    5d36:	80 83       	st	Z, r24
    5d38:	91 83       	std	Z+1, r25	; 0x01
    5d3a:	a2 83       	std	Z+2, r26	; 0x02
    5d3c:	b3 83       	std	Z+3, r27	; 0x03
    5d3e:	fe 01       	movw	r30, r28
    5d40:	e3 5b       	subi	r30, 0xB3	; 179
    5d42:	ff 4f       	sbci	r31, 0xFF	; 255
    5d44:	80 81       	ld	r24, Z
    5d46:	91 81       	ldd	r25, Z+1	; 0x01
    5d48:	a2 81       	ldd	r26, Z+2	; 0x02
    5d4a:	b3 81       	ldd	r27, Z+3	; 0x03
    5d4c:	00 97       	sbiw	r24, 0x00	; 0
    5d4e:	a1 05       	cpc	r26, r1
    5d50:	b1 05       	cpc	r27, r1
    5d52:	09 f0       	breq	.+2      	; 0x5d56 <main+0x5dc>
    5d54:	b8 cf       	rjmp	.-144    	; 0x5cc6 <main+0x54c>
						SIREN_vChangeSound(500);  // produce low sound
    5d56:	84 ef       	ldi	r24, 0xF4	; 244
    5d58:	91 e0       	ldi	r25, 0x01	; 1
    5d5a:	0e 94 b1 21 	call	0x4362	; 0x4362 <SIREN_vChangeSound>
						Delay_ms(250);  // wait for 500ms
    5d5e:	fe 01       	movw	r30, r28
    5d60:	eb 5b       	subi	r30, 0xBB	; 187
    5d62:	ff 4f       	sbci	r31, 0xFF	; 255
    5d64:	8f e1       	ldi	r24, 0x1F	; 31
    5d66:	90 e0       	ldi	r25, 0x00	; 0
    5d68:	a0 e0       	ldi	r26, 0x00	; 0
    5d6a:	b0 e0       	ldi	r27, 0x00	; 0
    5d6c:	80 83       	st	Z, r24
    5d6e:	91 83       	std	Z+1, r25	; 0x01
    5d70:	a2 83       	std	Z+2, r26	; 0x02
    5d72:	b3 83       	std	Z+3, r27	; 0x03
    5d74:	3c c0       	rjmp	.+120    	; 0x5dee <main+0x674>
    5d76:	fe 01       	movw	r30, r28
    5d78:	ef 5b       	subi	r30, 0xBF	; 191
    5d7a:	ff 4f       	sbci	r31, 0xFF	; 255
    5d7c:	80 ed       	ldi	r24, 0xD0	; 208
    5d7e:	97 e0       	ldi	r25, 0x07	; 7
    5d80:	a0 e0       	ldi	r26, 0x00	; 0
    5d82:	b0 e0       	ldi	r27, 0x00	; 0
    5d84:	80 83       	st	Z, r24
    5d86:	91 83       	std	Z+1, r25	; 0x01
    5d88:	a2 83       	std	Z+2, r26	; 0x02
    5d8a:	b3 83       	std	Z+3, r27	; 0x03
    5d8c:	13 c0       	rjmp	.+38     	; 0x5db4 <main+0x63a>
    5d8e:	00 00       	nop
    5d90:	9e 01       	movw	r18, r28
    5d92:	2f 5b       	subi	r18, 0xBF	; 191
    5d94:	3f 4f       	sbci	r19, 0xFF	; 255
    5d96:	fe 01       	movw	r30, r28
    5d98:	ef 5b       	subi	r30, 0xBF	; 191
    5d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    5d9c:	80 81       	ld	r24, Z
    5d9e:	91 81       	ldd	r25, Z+1	; 0x01
    5da0:	a2 81       	ldd	r26, Z+2	; 0x02
    5da2:	b3 81       	ldd	r27, Z+3	; 0x03
    5da4:	01 97       	sbiw	r24, 0x01	; 1
    5da6:	a1 09       	sbc	r26, r1
    5da8:	b1 09       	sbc	r27, r1
    5daa:	f9 01       	movw	r30, r18
    5dac:	80 83       	st	Z, r24
    5dae:	91 83       	std	Z+1, r25	; 0x01
    5db0:	a2 83       	std	Z+2, r26	; 0x02
    5db2:	b3 83       	std	Z+3, r27	; 0x03
    5db4:	fe 01       	movw	r30, r28
    5db6:	ef 5b       	subi	r30, 0xBF	; 191
    5db8:	ff 4f       	sbci	r31, 0xFF	; 255
    5dba:	80 81       	ld	r24, Z
    5dbc:	91 81       	ldd	r25, Z+1	; 0x01
    5dbe:	a2 81       	ldd	r26, Z+2	; 0x02
    5dc0:	b3 81       	ldd	r27, Z+3	; 0x03
    5dc2:	00 97       	sbiw	r24, 0x00	; 0
    5dc4:	a1 05       	cpc	r26, r1
    5dc6:	b1 05       	cpc	r27, r1
    5dc8:	11 f7       	brne	.-60     	; 0x5d8e <main+0x614>
    5dca:	9e 01       	movw	r18, r28
    5dcc:	2b 5b       	subi	r18, 0xBB	; 187
    5dce:	3f 4f       	sbci	r19, 0xFF	; 255
    5dd0:	fe 01       	movw	r30, r28
    5dd2:	eb 5b       	subi	r30, 0xBB	; 187
    5dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    5dd6:	80 81       	ld	r24, Z
    5dd8:	91 81       	ldd	r25, Z+1	; 0x01
    5dda:	a2 81       	ldd	r26, Z+2	; 0x02
    5ddc:	b3 81       	ldd	r27, Z+3	; 0x03
    5dde:	01 97       	sbiw	r24, 0x01	; 1
    5de0:	a1 09       	sbc	r26, r1
    5de2:	b1 09       	sbc	r27, r1
    5de4:	f9 01       	movw	r30, r18
    5de6:	80 83       	st	Z, r24
    5de8:	91 83       	std	Z+1, r25	; 0x01
    5dea:	a2 83       	std	Z+2, r26	; 0x02
    5dec:	b3 83       	std	Z+3, r27	; 0x03
    5dee:	fe 01       	movw	r30, r28
    5df0:	eb 5b       	subi	r30, 0xBB	; 187
    5df2:	ff 4f       	sbci	r31, 0xFF	; 255
    5df4:	80 81       	ld	r24, Z
    5df6:	91 81       	ldd	r25, Z+1	; 0x01
    5df8:	a2 81       	ldd	r26, Z+2	; 0x02
    5dfa:	b3 81       	ldd	r27, Z+3	; 0x03
    5dfc:	00 97       	sbiw	r24, 0x00	; 0
    5dfe:	a1 05       	cpc	r26, r1
    5e00:	b1 05       	cpc	r27, r1
    5e02:	09 f0       	breq	.+2      	; 0x5e06 <main+0x68c>
    5e04:	b8 cf       	rjmp	.-144    	; 0x5d76 <main+0x5fc>
						SIREN_vChangeSound(1100); // produce high sound
    5e06:	8c e4       	ldi	r24, 0x4C	; 76
    5e08:	94 e0       	ldi	r25, 0x04	; 4
    5e0a:	0e 94 b1 21 	call	0x4362	; 0x4362 <SIREN_vChangeSound>
						Delay_ms(250);
    5e0e:	8f e1       	ldi	r24, 0x1F	; 31
    5e10:	90 e0       	ldi	r25, 0x00	; 0
    5e12:	a0 e0       	ldi	r26, 0x00	; 0
    5e14:	b0 e0       	ldi	r27, 0x00	; 0
    5e16:	fe 01       	movw	r30, r28
    5e18:	fd 96       	adiw	r30, 0x3d	; 61
    5e1a:	80 83       	st	Z, r24
    5e1c:	91 83       	std	Z+1, r25	; 0x01
    5e1e:	a2 83       	std	Z+2, r26	; 0x02
    5e20:	b3 83       	std	Z+3, r27	; 0x03
    5e22:	2c c0       	rjmp	.+88     	; 0x5e7c <main+0x702>
    5e24:	80 ed       	ldi	r24, 0xD0	; 208
    5e26:	97 e0       	ldi	r25, 0x07	; 7
    5e28:	a0 e0       	ldi	r26, 0x00	; 0
    5e2a:	b0 e0       	ldi	r27, 0x00	; 0
    5e2c:	89 af       	std	Y+57, r24	; 0x39
    5e2e:	9a af       	std	Y+58, r25	; 0x3a
    5e30:	ab af       	std	Y+59, r26	; 0x3b
    5e32:	bc af       	std	Y+60, r27	; 0x3c
    5e34:	0c c0       	rjmp	.+24     	; 0x5e4e <main+0x6d4>
    5e36:	00 00       	nop
    5e38:	89 ad       	ldd	r24, Y+57	; 0x39
    5e3a:	9a ad       	ldd	r25, Y+58	; 0x3a
    5e3c:	ab ad       	ldd	r26, Y+59	; 0x3b
    5e3e:	bc ad       	ldd	r27, Y+60	; 0x3c
    5e40:	01 97       	sbiw	r24, 0x01	; 1
    5e42:	a1 09       	sbc	r26, r1
    5e44:	b1 09       	sbc	r27, r1
    5e46:	89 af       	std	Y+57, r24	; 0x39
    5e48:	9a af       	std	Y+58, r25	; 0x3a
    5e4a:	ab af       	std	Y+59, r26	; 0x3b
    5e4c:	bc af       	std	Y+60, r27	; 0x3c
    5e4e:	89 ad       	ldd	r24, Y+57	; 0x39
    5e50:	9a ad       	ldd	r25, Y+58	; 0x3a
    5e52:	ab ad       	ldd	r26, Y+59	; 0x3b
    5e54:	bc ad       	ldd	r27, Y+60	; 0x3c
    5e56:	00 97       	sbiw	r24, 0x00	; 0
    5e58:	a1 05       	cpc	r26, r1
    5e5a:	b1 05       	cpc	r27, r1
    5e5c:	61 f7       	brne	.-40     	; 0x5e36 <main+0x6bc>
    5e5e:	fe 01       	movw	r30, r28
    5e60:	fd 96       	adiw	r30, 0x3d	; 61
    5e62:	80 81       	ld	r24, Z
    5e64:	91 81       	ldd	r25, Z+1	; 0x01
    5e66:	a2 81       	ldd	r26, Z+2	; 0x02
    5e68:	b3 81       	ldd	r27, Z+3	; 0x03
    5e6a:	01 97       	sbiw	r24, 0x01	; 1
    5e6c:	a1 09       	sbc	r26, r1
    5e6e:	b1 09       	sbc	r27, r1
    5e70:	fe 01       	movw	r30, r28
    5e72:	fd 96       	adiw	r30, 0x3d	; 61
    5e74:	80 83       	st	Z, r24
    5e76:	91 83       	std	Z+1, r25	; 0x01
    5e78:	a2 83       	std	Z+2, r26	; 0x02
    5e7a:	b3 83       	std	Z+3, r27	; 0x03
    5e7c:	fe 01       	movw	r30, r28
    5e7e:	fd 96       	adiw	r30, 0x3d	; 61
    5e80:	80 81       	ld	r24, Z
    5e82:	91 81       	ldd	r25, Z+1	; 0x01
    5e84:	a2 81       	ldd	r26, Z+2	; 0x02
    5e86:	b3 81       	ldd	r27, Z+3	; 0x03
    5e88:	00 97       	sbiw	r24, 0x00	; 0
    5e8a:	a1 05       	cpc	r26, r1
    5e8c:	b1 05       	cpc	r27, r1
    5e8e:	51 f6       	brne	.-108    	; 0x5e24 <main+0x6aa>
						SIREN_vStop();
    5e90:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <SIREN_vStop>
						Delay_ms(1000);
    5e94:	8d e7       	ldi	r24, 0x7D	; 125
    5e96:	90 e0       	ldi	r25, 0x00	; 0
    5e98:	a0 e0       	ldi	r26, 0x00	; 0
    5e9a:	b0 e0       	ldi	r27, 0x00	; 0
    5e9c:	8d ab       	std	Y+53, r24	; 0x35
    5e9e:	9e ab       	std	Y+54, r25	; 0x36
    5ea0:	af ab       	std	Y+55, r26	; 0x37
    5ea2:	b8 af       	std	Y+56, r27	; 0x38
    5ea4:	28 c0       	rjmp	.+80     	; 0x5ef6 <main+0x77c>
    5ea6:	80 ed       	ldi	r24, 0xD0	; 208
    5ea8:	97 e0       	ldi	r25, 0x07	; 7
    5eaa:	a0 e0       	ldi	r26, 0x00	; 0
    5eac:	b0 e0       	ldi	r27, 0x00	; 0
    5eae:	89 ab       	std	Y+49, r24	; 0x31
    5eb0:	9a ab       	std	Y+50, r25	; 0x32
    5eb2:	ab ab       	std	Y+51, r26	; 0x33
    5eb4:	bc ab       	std	Y+52, r27	; 0x34
    5eb6:	0c c0       	rjmp	.+24     	; 0x5ed0 <main+0x756>
    5eb8:	00 00       	nop
    5eba:	89 a9       	ldd	r24, Y+49	; 0x31
    5ebc:	9a a9       	ldd	r25, Y+50	; 0x32
    5ebe:	ab a9       	ldd	r26, Y+51	; 0x33
    5ec0:	bc a9       	ldd	r27, Y+52	; 0x34
    5ec2:	01 97       	sbiw	r24, 0x01	; 1
    5ec4:	a1 09       	sbc	r26, r1
    5ec6:	b1 09       	sbc	r27, r1
    5ec8:	89 ab       	std	Y+49, r24	; 0x31
    5eca:	9a ab       	std	Y+50, r25	; 0x32
    5ecc:	ab ab       	std	Y+51, r26	; 0x33
    5ece:	bc ab       	std	Y+52, r27	; 0x34
    5ed0:	89 a9       	ldd	r24, Y+49	; 0x31
    5ed2:	9a a9       	ldd	r25, Y+50	; 0x32
    5ed4:	ab a9       	ldd	r26, Y+51	; 0x33
    5ed6:	bc a9       	ldd	r27, Y+52	; 0x34
    5ed8:	00 97       	sbiw	r24, 0x00	; 0
    5eda:	a1 05       	cpc	r26, r1
    5edc:	b1 05       	cpc	r27, r1
    5ede:	61 f7       	brne	.-40     	; 0x5eb8 <main+0x73e>
    5ee0:	8d a9       	ldd	r24, Y+53	; 0x35
    5ee2:	9e a9       	ldd	r25, Y+54	; 0x36
    5ee4:	af a9       	ldd	r26, Y+55	; 0x37
    5ee6:	b8 ad       	ldd	r27, Y+56	; 0x38
    5ee8:	01 97       	sbiw	r24, 0x01	; 1
    5eea:	a1 09       	sbc	r26, r1
    5eec:	b1 09       	sbc	r27, r1
    5eee:	8d ab       	std	Y+53, r24	; 0x35
    5ef0:	9e ab       	std	Y+54, r25	; 0x36
    5ef2:	af ab       	std	Y+55, r26	; 0x37
    5ef4:	b8 af       	std	Y+56, r27	; 0x38
    5ef6:	8d a9       	ldd	r24, Y+53	; 0x35
    5ef8:	9e a9       	ldd	r25, Y+54	; 0x36
    5efa:	af a9       	ldd	r26, Y+55	; 0x37
    5efc:	b8 ad       	ldd	r27, Y+56	; 0x38
    5efe:	00 97       	sbiw	r24, 0x00	; 0
    5f00:	a1 05       	cpc	r26, r1
    5f02:	b1 05       	cpc	r27, r1
    5f04:	81 f6       	brne	.-96     	; 0x5ea6 <main+0x72c>
					TMR_vStartTimer(&TIMER2);
					timer2_flag = FLAG_OFF;
					//turn on red led
					DIO_enuWritePin(DIO_PIN_NUM_0, DIO_HIGH);
					/* While loop until flag is off */
					while(timer2_flag == FLAG_OFF){
    5f06:	80 91 1a 06 	lds	r24, 0x061A
    5f0a:	88 23       	and	r24, r24
    5f0c:	09 f4       	brne	.+2      	; 0x5f10 <main+0x796>
    5f0e:	73 ce       	rjmp	.-794    	; 0x5bf6 <main+0x47c>
						SIREN_vStop();
						Delay_ms(1000);

					}
					//SIREN_vStop();
					TMR_vStop(&TIMER2);
    5f10:	8c e0       	ldi	r24, 0x0C	; 12
    5f12:	96 e0       	ldi	r25, 0x06	; 6
    5f14:	0e 94 05 14 	call	0x280a	; 0x280a <TMR_vStop>
				}
				if(attempts < 3){
    5f18:	fe 01       	movw	r30, r28
    5f1a:	e5 5a       	subi	r30, 0xA5	; 165
    5f1c:	ff 4f       	sbci	r31, 0xFF	; 255
    5f1e:	80 81       	ld	r24, Z
    5f20:	83 30       	cpi	r24, 0x03	; 3
    5f22:	b8 f4       	brcc	.+46     	; 0x5f52 <main+0x7d8>
					Bluetooth_vSendString((u8*)"Enter Your Password Again: ");
    5f24:	88 ec       	ldi	r24, 0xC8	; 200
    5f26:	91 e0       	ldi	r25, 0x01	; 1
    5f28:	0e 94 72 2b 	call	0x56e4	; 0x56e4 <Bluetooth_vSendString>
    5f2c:	12 c0       	rjmp	.+36     	; 0x5f52 <main+0x7d8>
				}
			}else{
				attempts = 0;
    5f2e:	fe 01       	movw	r30, r28
    5f30:	e5 5a       	subi	r30, 0xA5	; 165
    5f32:	ff 4f       	sbci	r31, 0xFF	; 255
    5f34:	10 82       	st	Z, r1
				trials = 3;
    5f36:	fe 01       	movw	r30, r28
    5f38:	e6 5a       	subi	r30, 0xA6	; 166
    5f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    5f3c:	83 e0       	ldi	r24, 0x03	; 3
    5f3e:	80 83       	st	Z, r24
				Bluetooth_vSendString((u8*)"Welcome In Your Smart Home\r\n");
    5f40:	84 ee       	ldi	r24, 0xE4	; 228
    5f42:	91 e0       	ldi	r25, 0x01	; 1
    5f44:	0e 94 72 2b 	call	0x56e4	; 0x56e4 <Bluetooth_vSendString>
				user_found = 1;
    5f48:	fe 01       	movw	r30, r28
    5f4a:	e3 5a       	subi	r30, 0xA3	; 163
    5f4c:	ff 4f       	sbci	r31, 0xFF	; 255
    5f4e:	81 e0       	ldi	r24, 0x01	; 1
    5f50:	80 83       	st	Z, r24
			}

			if(user_found == 1){
    5f52:	fe 01       	movw	r30, r28
    5f54:	e3 5a       	subi	r30, 0xA3	; 163
    5f56:	ff 4f       	sbci	r31, 0xFF	; 255
    5f58:	80 81       	ld	r24, Z
    5f5a:	81 30       	cpi	r24, 0x01	; 1
    5f5c:	09 f4       	brne	.+2      	; 0x5f60 <main+0x7e6>
    5f5e:	67 c2       	rjmp	.+1230   	; 0x642e <main+0xcb4>
		Lcd_SetCursorPosition(1, 0);
		Lcd_DisplayString((char*)userName);
		Lcd_DisplayString("            ");
		Bluetooth_vSendString((u8*)"Enter Password: ");
		//Bluetooth_vSendString((u8*)"\r\n");
		while(attempts < 3){
    5f60:	fe 01       	movw	r30, r28
    5f62:	e5 5a       	subi	r30, 0xA5	; 165
    5f64:	ff 4f       	sbci	r31, 0xFF	; 255
    5f66:	80 81       	ld	r24, Z
    5f68:	83 30       	cpi	r24, 0x03	; 3
    5f6a:	08 f4       	brcc	.+2      	; 0x5f6e <main+0x7f4>
    5f6c:	fe cc       	rjmp	.-1540   	; 0x596a <main+0x1f0>
    5f6e:	5f c2       	rjmp	.+1214   	; 0x642e <main+0xcb4>
			if(user_found == 1){
				break;
			}
		}
		while(user_found == 1){
			Bluetooth_vClearBuffer();
    5f70:	0e 94 82 2b 	call	0x5704	; 0x5704 <Bluetooth_vClearBuffer>
			Bluetooth_vSendString((u8*)"Enter Your Choice\r\n");
    5f74:	81 e0       	ldi	r24, 0x01	; 1
    5f76:	92 e0       	ldi	r25, 0x02	; 2
    5f78:	0e 94 72 2b 	call	0x56e4	; 0x56e4 <Bluetooth_vSendString>
			Bluetooth_vSendString((u8*)"1. For Open Door\r\n");
    5f7c:	85 e1       	ldi	r24, 0x15	; 21
    5f7e:	92 e0       	ldi	r25, 0x02	; 2
    5f80:	0e 94 72 2b 	call	0x56e4	; 0x56e4 <Bluetooth_vSendString>
			Bluetooth_vSendString((u8*)"2. For Close Door\r\n");
    5f84:	88 e2       	ldi	r24, 0x28	; 40
    5f86:	92 e0       	ldi	r25, 0x02	; 2
    5f88:	0e 94 72 2b 	call	0x56e4	; 0x56e4 <Bluetooth_vSendString>
			Bluetooth_vSendString((u8*)"3. For Turn On Led\r\n");
    5f8c:	8c e3       	ldi	r24, 0x3C	; 60
    5f8e:	92 e0       	ldi	r25, 0x02	; 2
    5f90:	0e 94 72 2b 	call	0x56e4	; 0x56e4 <Bluetooth_vSendString>
			Bluetooth_vSendString((u8*)"4. For Turn Off Led\r\n");
    5f94:	81 e5       	ldi	r24, 0x51	; 81
    5f96:	92 e0       	ldi	r25, 0x02	; 2
    5f98:	0e 94 72 2b 	call	0x56e4	; 0x56e4 <Bluetooth_vSendString>
			Bluetooth_vSendString((u8*)"5. LogOut\r\n");
    5f9c:	87 e6       	ldi	r24, 0x67	; 103
    5f9e:	92 e0       	ldi	r25, 0x02	; 2
    5fa0:	0e 94 72 2b 	call	0x56e4	; 0x56e4 <Bluetooth_vSendString>
			Bluetooth_vClearBuffer();
    5fa4:	0e 94 82 2b 	call	0x5704	; 0x5704 <Bluetooth_vClearBuffer>
			choice = Bluetooth_u8ReceiveData();
    5fa8:	0e 94 65 2b 	call	0x56ca	; 0x56ca <Bluetooth_u8ReceiveData>
    5fac:	fe 01       	movw	r30, r28
    5fae:	e4 5a       	subi	r30, 0xA4	; 164
    5fb0:	ff 4f       	sbci	r31, 0xFF	; 255
    5fb2:	80 83       	st	Z, r24
			switch (choice) {
    5fb4:	fe 01       	movw	r30, r28
    5fb6:	e4 5a       	subi	r30, 0xA4	; 164
    5fb8:	ff 4f       	sbci	r31, 0xFF	; 255
    5fba:	80 81       	ld	r24, Z
    5fbc:	28 2f       	mov	r18, r24
    5fbe:	30 e0       	ldi	r19, 0x00	; 0
    5fc0:	c2 57       	subi	r28, 0x72	; 114
    5fc2:	df 4f       	sbci	r29, 0xFF	; 255
    5fc4:	39 83       	std	Y+1, r19	; 0x01
    5fc6:	28 83       	st	Y, r18
    5fc8:	ce 58       	subi	r28, 0x8E	; 142
    5fca:	d0 40       	sbci	r29, 0x00	; 0
    5fcc:	c2 57       	subi	r28, 0x72	; 114
    5fce:	df 4f       	sbci	r29, 0xFF	; 255
    5fd0:	88 81       	ld	r24, Y
    5fd2:	99 81       	ldd	r25, Y+1	; 0x01
    5fd4:	ce 58       	subi	r28, 0x8E	; 142
    5fd6:	d0 40       	sbci	r29, 0x00	; 0
    5fd8:	83 33       	cpi	r24, 0x33	; 51
    5fda:	91 05       	cpc	r25, r1
    5fdc:	09 f4       	brne	.+2      	; 0x5fe0 <main+0x866>
    5fde:	e8 c0       	rjmp	.+464    	; 0x61b0 <main+0xa36>
    5fe0:	c2 57       	subi	r28, 0x72	; 114
    5fe2:	df 4f       	sbci	r29, 0xFF	; 255
    5fe4:	e8 81       	ld	r30, Y
    5fe6:	f9 81       	ldd	r31, Y+1	; 0x01
    5fe8:	ce 58       	subi	r28, 0x8E	; 142
    5fea:	d0 40       	sbci	r29, 0x00	; 0
    5fec:	e4 33       	cpi	r30, 0x34	; 52
    5fee:	f1 05       	cpc	r31, r1
    5ff0:	a4 f4       	brge	.+40     	; 0x601a <main+0x8a0>
    5ff2:	c2 57       	subi	r28, 0x72	; 114
    5ff4:	df 4f       	sbci	r29, 0xFF	; 255
    5ff6:	28 81       	ld	r18, Y
    5ff8:	39 81       	ldd	r19, Y+1	; 0x01
    5ffa:	ce 58       	subi	r28, 0x8E	; 142
    5ffc:	d0 40       	sbci	r29, 0x00	; 0
    5ffe:	21 33       	cpi	r18, 0x31	; 49
    6000:	31 05       	cpc	r19, r1
    6002:	01 f1       	breq	.+64     	; 0x6044 <main+0x8ca>
    6004:	c2 57       	subi	r28, 0x72	; 114
    6006:	df 4f       	sbci	r29, 0xFF	; 255
    6008:	88 81       	ld	r24, Y
    600a:	99 81       	ldd	r25, Y+1	; 0x01
    600c:	ce 58       	subi	r28, 0x8E	; 142
    600e:	d0 40       	sbci	r29, 0x00	; 0
    6010:	82 33       	cpi	r24, 0x32	; 50
    6012:	91 05       	cpc	r25, r1
    6014:	09 f4       	brne	.+2      	; 0x6018 <main+0x89e>
    6016:	71 c0       	rjmp	.+226    	; 0x60fa <main+0x980>
    6018:	cb c1       	rjmp	.+918    	; 0x63b0 <main+0xc36>
    601a:	c2 57       	subi	r28, 0x72	; 114
    601c:	df 4f       	sbci	r29, 0xFF	; 255
    601e:	e8 81       	ld	r30, Y
    6020:	f9 81       	ldd	r31, Y+1	; 0x01
    6022:	ce 58       	subi	r28, 0x8E	; 142
    6024:	d0 40       	sbci	r29, 0x00	; 0
    6026:	e4 33       	cpi	r30, 0x34	; 52
    6028:	f1 05       	cpc	r31, r1
    602a:	09 f4       	brne	.+2      	; 0x602e <main+0x8b4>
    602c:	1b c1       	rjmp	.+566    	; 0x6264 <main+0xaea>
    602e:	c2 57       	subi	r28, 0x72	; 114
    6030:	df 4f       	sbci	r29, 0xFF	; 255
    6032:	28 81       	ld	r18, Y
    6034:	39 81       	ldd	r19, Y+1	; 0x01
    6036:	ce 58       	subi	r28, 0x8E	; 142
    6038:	d0 40       	sbci	r29, 0x00	; 0
    603a:	25 33       	cpi	r18, 0x35	; 53
    603c:	31 05       	cpc	r19, r1
    603e:	09 f4       	brne	.+2      	; 0x6042 <main+0x8c8>
    6040:	6b c1       	rjmp	.+726    	; 0x6318 <main+0xb9e>
    6042:	b6 c1       	rjmp	.+876    	; 0x63b0 <main+0xc36>
				case '1':
					SERVO_vChangeDirection(&SERVO1, SERVO_180);
    6044:	8f ef       	ldi	r24, 0xFF	; 255
    6046:	95 e0       	ldi	r25, 0x05	; 5
    6048:	62 e0       	ldi	r22, 0x02	; 2
    604a:	0e 94 5a 22 	call	0x44b4	; 0x44b4 <SERVO_vChangeDirection>
					Delay_ms(200);
    604e:	89 e1       	ldi	r24, 0x19	; 25
    6050:	90 e0       	ldi	r25, 0x00	; 0
    6052:	a0 e0       	ldi	r26, 0x00	; 0
    6054:	b0 e0       	ldi	r27, 0x00	; 0
    6056:	8d a7       	std	Y+45, r24	; 0x2d
    6058:	9e a7       	std	Y+46, r25	; 0x2e
    605a:	af a7       	std	Y+47, r26	; 0x2f
    605c:	b8 ab       	std	Y+48, r27	; 0x30
    605e:	28 c0       	rjmp	.+80     	; 0x60b0 <main+0x936>
    6060:	80 ed       	ldi	r24, 0xD0	; 208
    6062:	97 e0       	ldi	r25, 0x07	; 7
    6064:	a0 e0       	ldi	r26, 0x00	; 0
    6066:	b0 e0       	ldi	r27, 0x00	; 0
    6068:	89 a7       	std	Y+41, r24	; 0x29
    606a:	9a a7       	std	Y+42, r25	; 0x2a
    606c:	ab a7       	std	Y+43, r26	; 0x2b
    606e:	bc a7       	std	Y+44, r27	; 0x2c
    6070:	0c c0       	rjmp	.+24     	; 0x608a <main+0x910>
    6072:	00 00       	nop
    6074:	89 a5       	ldd	r24, Y+41	; 0x29
    6076:	9a a5       	ldd	r25, Y+42	; 0x2a
    6078:	ab a5       	ldd	r26, Y+43	; 0x2b
    607a:	bc a5       	ldd	r27, Y+44	; 0x2c
    607c:	01 97       	sbiw	r24, 0x01	; 1
    607e:	a1 09       	sbc	r26, r1
    6080:	b1 09       	sbc	r27, r1
    6082:	89 a7       	std	Y+41, r24	; 0x29
    6084:	9a a7       	std	Y+42, r25	; 0x2a
    6086:	ab a7       	std	Y+43, r26	; 0x2b
    6088:	bc a7       	std	Y+44, r27	; 0x2c
    608a:	89 a5       	ldd	r24, Y+41	; 0x29
    608c:	9a a5       	ldd	r25, Y+42	; 0x2a
    608e:	ab a5       	ldd	r26, Y+43	; 0x2b
    6090:	bc a5       	ldd	r27, Y+44	; 0x2c
    6092:	00 97       	sbiw	r24, 0x00	; 0
    6094:	a1 05       	cpc	r26, r1
    6096:	b1 05       	cpc	r27, r1
    6098:	61 f7       	brne	.-40     	; 0x6072 <main+0x8f8>
    609a:	8d a5       	ldd	r24, Y+45	; 0x2d
    609c:	9e a5       	ldd	r25, Y+46	; 0x2e
    609e:	af a5       	ldd	r26, Y+47	; 0x2f
    60a0:	b8 a9       	ldd	r27, Y+48	; 0x30
    60a2:	01 97       	sbiw	r24, 0x01	; 1
    60a4:	a1 09       	sbc	r26, r1
    60a6:	b1 09       	sbc	r27, r1
    60a8:	8d a7       	std	Y+45, r24	; 0x2d
    60aa:	9e a7       	std	Y+46, r25	; 0x2e
    60ac:	af a7       	std	Y+47, r26	; 0x2f
    60ae:	b8 ab       	std	Y+48, r27	; 0x30
    60b0:	8d a5       	ldd	r24, Y+45	; 0x2d
    60b2:	9e a5       	ldd	r25, Y+46	; 0x2e
    60b4:	af a5       	ldd	r26, Y+47	; 0x2f
    60b6:	b8 a9       	ldd	r27, Y+48	; 0x30
    60b8:	00 97       	sbiw	r24, 0x00	; 0
    60ba:	a1 05       	cpc	r26, r1
    60bc:	b1 05       	cpc	r27, r1
    60be:	81 f6       	brne	.-96     	; 0x6060 <main+0x8e6>
					if(opened == 1){
    60c0:	fe 01       	movw	r30, r28
    60c2:	ee 59       	subi	r30, 0x9E	; 158
    60c4:	ff 4f       	sbci	r31, 0xFF	; 255
    60c6:	80 81       	ld	r24, Z
    60c8:	81 30       	cpi	r24, 0x01	; 1
    60ca:	39 f4       	brne	.+14     	; 0x60da <main+0x960>
						Bluetooth_vSendString((u8*)"\r\nDoor is already opened\r\n\r\n");
    60cc:	83 e7       	ldi	r24, 0x73	; 115
    60ce:	92 e0       	ldi	r25, 0x02	; 2
    60d0:	0e 94 72 2b 	call	0x56e4	; 0x56e4 <Bluetooth_vSendString>
						Bluetooth_vClearBuffer();
    60d4:	0e 94 82 2b 	call	0x5704	; 0x5704 <Bluetooth_vClearBuffer>
    60d8:	aa c1       	rjmp	.+852    	; 0x642e <main+0xcb4>
						break;
					}
					opened = 1;
    60da:	fe 01       	movw	r30, r28
    60dc:	ee 59       	subi	r30, 0x9E	; 158
    60de:	ff 4f       	sbci	r31, 0xFF	; 255
    60e0:	81 e0       	ldi	r24, 0x01	; 1
    60e2:	80 83       	st	Z, r24
					closed = 0;
    60e4:	fe 01       	movw	r30, r28
    60e6:	ed 59       	subi	r30, 0x9D	; 157
    60e8:	ff 4f       	sbci	r31, 0xFF	; 255
    60ea:	10 82       	st	Z, r1
					Bluetooth_vSendString((u8*)"\r\nDoor is opened\r\n\r\n");
    60ec:	80 e9       	ldi	r24, 0x90	; 144
    60ee:	92 e0       	ldi	r25, 0x02	; 2
    60f0:	0e 94 72 2b 	call	0x56e4	; 0x56e4 <Bluetooth_vSendString>
					Bluetooth_vClearBuffer();
    60f4:	0e 94 82 2b 	call	0x5704	; 0x5704 <Bluetooth_vClearBuffer>
    60f8:	9a c1       	rjmp	.+820    	; 0x642e <main+0xcb4>
					break;
				case '2':
					SERVO_vChangeDirection(&SERVO1, SERVO_0);
    60fa:	8f ef       	ldi	r24, 0xFF	; 255
    60fc:	95 e0       	ldi	r25, 0x05	; 5
    60fe:	60 e0       	ldi	r22, 0x00	; 0
    6100:	0e 94 5a 22 	call	0x44b4	; 0x44b4 <SERVO_vChangeDirection>
					Delay_ms(200);
    6104:	89 e1       	ldi	r24, 0x19	; 25
    6106:	90 e0       	ldi	r25, 0x00	; 0
    6108:	a0 e0       	ldi	r26, 0x00	; 0
    610a:	b0 e0       	ldi	r27, 0x00	; 0
    610c:	8d a3       	std	Y+37, r24	; 0x25
    610e:	9e a3       	std	Y+38, r25	; 0x26
    6110:	af a3       	std	Y+39, r26	; 0x27
    6112:	b8 a7       	std	Y+40, r27	; 0x28
    6114:	28 c0       	rjmp	.+80     	; 0x6166 <main+0x9ec>
    6116:	80 ed       	ldi	r24, 0xD0	; 208
    6118:	97 e0       	ldi	r25, 0x07	; 7
    611a:	a0 e0       	ldi	r26, 0x00	; 0
    611c:	b0 e0       	ldi	r27, 0x00	; 0
    611e:	89 a3       	std	Y+33, r24	; 0x21
    6120:	9a a3       	std	Y+34, r25	; 0x22
    6122:	ab a3       	std	Y+35, r26	; 0x23
    6124:	bc a3       	std	Y+36, r27	; 0x24
    6126:	0c c0       	rjmp	.+24     	; 0x6140 <main+0x9c6>
    6128:	00 00       	nop
    612a:	89 a1       	ldd	r24, Y+33	; 0x21
    612c:	9a a1       	ldd	r25, Y+34	; 0x22
    612e:	ab a1       	ldd	r26, Y+35	; 0x23
    6130:	bc a1       	ldd	r27, Y+36	; 0x24
    6132:	01 97       	sbiw	r24, 0x01	; 1
    6134:	a1 09       	sbc	r26, r1
    6136:	b1 09       	sbc	r27, r1
    6138:	89 a3       	std	Y+33, r24	; 0x21
    613a:	9a a3       	std	Y+34, r25	; 0x22
    613c:	ab a3       	std	Y+35, r26	; 0x23
    613e:	bc a3       	std	Y+36, r27	; 0x24
    6140:	89 a1       	ldd	r24, Y+33	; 0x21
    6142:	9a a1       	ldd	r25, Y+34	; 0x22
    6144:	ab a1       	ldd	r26, Y+35	; 0x23
    6146:	bc a1       	ldd	r27, Y+36	; 0x24
    6148:	00 97       	sbiw	r24, 0x00	; 0
    614a:	a1 05       	cpc	r26, r1
    614c:	b1 05       	cpc	r27, r1
    614e:	61 f7       	brne	.-40     	; 0x6128 <main+0x9ae>
    6150:	8d a1       	ldd	r24, Y+37	; 0x25
    6152:	9e a1       	ldd	r25, Y+38	; 0x26
    6154:	af a1       	ldd	r26, Y+39	; 0x27
    6156:	b8 a5       	ldd	r27, Y+40	; 0x28
    6158:	01 97       	sbiw	r24, 0x01	; 1
    615a:	a1 09       	sbc	r26, r1
    615c:	b1 09       	sbc	r27, r1
    615e:	8d a3       	std	Y+37, r24	; 0x25
    6160:	9e a3       	std	Y+38, r25	; 0x26
    6162:	af a3       	std	Y+39, r26	; 0x27
    6164:	b8 a7       	std	Y+40, r27	; 0x28
    6166:	8d a1       	ldd	r24, Y+37	; 0x25
    6168:	9e a1       	ldd	r25, Y+38	; 0x26
    616a:	af a1       	ldd	r26, Y+39	; 0x27
    616c:	b8 a5       	ldd	r27, Y+40	; 0x28
    616e:	00 97       	sbiw	r24, 0x00	; 0
    6170:	a1 05       	cpc	r26, r1
    6172:	b1 05       	cpc	r27, r1
    6174:	81 f6       	brne	.-96     	; 0x6116 <main+0x99c>
					if(closed == 1){
    6176:	fe 01       	movw	r30, r28
    6178:	ed 59       	subi	r30, 0x9D	; 157
    617a:	ff 4f       	sbci	r31, 0xFF	; 255
    617c:	80 81       	ld	r24, Z
    617e:	81 30       	cpi	r24, 0x01	; 1
    6180:	39 f4       	brne	.+14     	; 0x6190 <main+0xa16>
						Bluetooth_vSendString((u8*)"\r\nDoor is already closed\r\n\r\n");
    6182:	85 ea       	ldi	r24, 0xA5	; 165
    6184:	92 e0       	ldi	r25, 0x02	; 2
    6186:	0e 94 72 2b 	call	0x56e4	; 0x56e4 <Bluetooth_vSendString>
						Bluetooth_vClearBuffer();
    618a:	0e 94 82 2b 	call	0x5704	; 0x5704 <Bluetooth_vClearBuffer>
    618e:	4f c1       	rjmp	.+670    	; 0x642e <main+0xcb4>
						break;
					}
					closed = 1;
    6190:	fe 01       	movw	r30, r28
    6192:	ed 59       	subi	r30, 0x9D	; 157
    6194:	ff 4f       	sbci	r31, 0xFF	; 255
    6196:	81 e0       	ldi	r24, 0x01	; 1
    6198:	80 83       	st	Z, r24
					opened = 0;
    619a:	fe 01       	movw	r30, r28
    619c:	ee 59       	subi	r30, 0x9E	; 158
    619e:	ff 4f       	sbci	r31, 0xFF	; 255
    61a0:	10 82       	st	Z, r1
					Bluetooth_vSendString((u8*)"\r\nDoor is closed\r\n\r\n");
    61a2:	82 ec       	ldi	r24, 0xC2	; 194
    61a4:	92 e0       	ldi	r25, 0x02	; 2
    61a6:	0e 94 72 2b 	call	0x56e4	; 0x56e4 <Bluetooth_vSendString>
					Bluetooth_vClearBuffer();
    61aa:	0e 94 82 2b 	call	0x5704	; 0x5704 <Bluetooth_vClearBuffer>
    61ae:	3f c1       	rjmp	.+638    	; 0x642e <main+0xcb4>
					break;
				case '3':
					DIO_enuWritePin(DIO_PIN_NUM_1, DIO_HIGH);
    61b0:	81 e0       	ldi	r24, 0x01	; 1
    61b2:	61 e0       	ldi	r22, 0x01	; 1
    61b4:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <DIO_enuWritePin>
					Delay_ms(200);
    61b8:	89 e1       	ldi	r24, 0x19	; 25
    61ba:	90 e0       	ldi	r25, 0x00	; 0
    61bc:	a0 e0       	ldi	r26, 0x00	; 0
    61be:	b0 e0       	ldi	r27, 0x00	; 0
    61c0:	8d 8f       	std	Y+29, r24	; 0x1d
    61c2:	9e 8f       	std	Y+30, r25	; 0x1e
    61c4:	af 8f       	std	Y+31, r26	; 0x1f
    61c6:	b8 a3       	std	Y+32, r27	; 0x20
    61c8:	28 c0       	rjmp	.+80     	; 0x621a <main+0xaa0>
    61ca:	80 ed       	ldi	r24, 0xD0	; 208
    61cc:	97 e0       	ldi	r25, 0x07	; 7
    61ce:	a0 e0       	ldi	r26, 0x00	; 0
    61d0:	b0 e0       	ldi	r27, 0x00	; 0
    61d2:	89 8f       	std	Y+25, r24	; 0x19
    61d4:	9a 8f       	std	Y+26, r25	; 0x1a
    61d6:	ab 8f       	std	Y+27, r26	; 0x1b
    61d8:	bc 8f       	std	Y+28, r27	; 0x1c
    61da:	0c c0       	rjmp	.+24     	; 0x61f4 <main+0xa7a>
    61dc:	00 00       	nop
    61de:	89 8d       	ldd	r24, Y+25	; 0x19
    61e0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    61e2:	ab 8d       	ldd	r26, Y+27	; 0x1b
    61e4:	bc 8d       	ldd	r27, Y+28	; 0x1c
    61e6:	01 97       	sbiw	r24, 0x01	; 1
    61e8:	a1 09       	sbc	r26, r1
    61ea:	b1 09       	sbc	r27, r1
    61ec:	89 8f       	std	Y+25, r24	; 0x19
    61ee:	9a 8f       	std	Y+26, r25	; 0x1a
    61f0:	ab 8f       	std	Y+27, r26	; 0x1b
    61f2:	bc 8f       	std	Y+28, r27	; 0x1c
    61f4:	89 8d       	ldd	r24, Y+25	; 0x19
    61f6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    61f8:	ab 8d       	ldd	r26, Y+27	; 0x1b
    61fa:	bc 8d       	ldd	r27, Y+28	; 0x1c
    61fc:	00 97       	sbiw	r24, 0x00	; 0
    61fe:	a1 05       	cpc	r26, r1
    6200:	b1 05       	cpc	r27, r1
    6202:	61 f7       	brne	.-40     	; 0x61dc <main+0xa62>
    6204:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6206:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6208:	af 8d       	ldd	r26, Y+31	; 0x1f
    620a:	b8 a1       	ldd	r27, Y+32	; 0x20
    620c:	01 97       	sbiw	r24, 0x01	; 1
    620e:	a1 09       	sbc	r26, r1
    6210:	b1 09       	sbc	r27, r1
    6212:	8d 8f       	std	Y+29, r24	; 0x1d
    6214:	9e 8f       	std	Y+30, r25	; 0x1e
    6216:	af 8f       	std	Y+31, r26	; 0x1f
    6218:	b8 a3       	std	Y+32, r27	; 0x20
    621a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    621c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    621e:	af 8d       	ldd	r26, Y+31	; 0x1f
    6220:	b8 a1       	ldd	r27, Y+32	; 0x20
    6222:	00 97       	sbiw	r24, 0x00	; 0
    6224:	a1 05       	cpc	r26, r1
    6226:	b1 05       	cpc	r27, r1
    6228:	81 f6       	brne	.-96     	; 0x61ca <main+0xa50>
					if(led_on == 1){
    622a:	fe 01       	movw	r30, r28
    622c:	ef 59       	subi	r30, 0x9F	; 159
    622e:	ff 4f       	sbci	r31, 0xFF	; 255
    6230:	80 81       	ld	r24, Z
    6232:	81 30       	cpi	r24, 0x01	; 1
    6234:	39 f4       	brne	.+14     	; 0x6244 <main+0xaca>
						Bluetooth_vSendString((u8*)"\r\nLed is already on\r\n\r\n");
    6236:	87 ed       	ldi	r24, 0xD7	; 215
    6238:	92 e0       	ldi	r25, 0x02	; 2
    623a:	0e 94 72 2b 	call	0x56e4	; 0x56e4 <Bluetooth_vSendString>
						Bluetooth_vClearBuffer();
    623e:	0e 94 82 2b 	call	0x5704	; 0x5704 <Bluetooth_vClearBuffer>
    6242:	f5 c0       	rjmp	.+490    	; 0x642e <main+0xcb4>
						break;
					}
					led_on = 1;
    6244:	fe 01       	movw	r30, r28
    6246:	ef 59       	subi	r30, 0x9F	; 159
    6248:	ff 4f       	sbci	r31, 0xFF	; 255
    624a:	81 e0       	ldi	r24, 0x01	; 1
    624c:	80 83       	st	Z, r24
					led_off = 0;
    624e:	fe 01       	movw	r30, r28
    6250:	e0 5a       	subi	r30, 0xA0	; 160
    6252:	ff 4f       	sbci	r31, 0xFF	; 255
    6254:	10 82       	st	Z, r1
					Bluetooth_vSendString((u8*)"\r\nLed is on\r\n\r\n");
    6256:	8f ee       	ldi	r24, 0xEF	; 239
    6258:	92 e0       	ldi	r25, 0x02	; 2
    625a:	0e 94 72 2b 	call	0x56e4	; 0x56e4 <Bluetooth_vSendString>
					Bluetooth_vClearBuffer();
    625e:	0e 94 82 2b 	call	0x5704	; 0x5704 <Bluetooth_vClearBuffer>
    6262:	e5 c0       	rjmp	.+458    	; 0x642e <main+0xcb4>
					break;
				case '4':
					DIO_enuWritePin(DIO_PIN_NUM_1, DIO_LOW);
    6264:	81 e0       	ldi	r24, 0x01	; 1
    6266:	60 e0       	ldi	r22, 0x00	; 0
    6268:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <DIO_enuWritePin>
					Delay_ms(200);
    626c:	89 e1       	ldi	r24, 0x19	; 25
    626e:	90 e0       	ldi	r25, 0x00	; 0
    6270:	a0 e0       	ldi	r26, 0x00	; 0
    6272:	b0 e0       	ldi	r27, 0x00	; 0
    6274:	8d 8b       	std	Y+21, r24	; 0x15
    6276:	9e 8b       	std	Y+22, r25	; 0x16
    6278:	af 8b       	std	Y+23, r26	; 0x17
    627a:	b8 8f       	std	Y+24, r27	; 0x18
    627c:	28 c0       	rjmp	.+80     	; 0x62ce <main+0xb54>
    627e:	80 ed       	ldi	r24, 0xD0	; 208
    6280:	97 e0       	ldi	r25, 0x07	; 7
    6282:	a0 e0       	ldi	r26, 0x00	; 0
    6284:	b0 e0       	ldi	r27, 0x00	; 0
    6286:	89 8b       	std	Y+17, r24	; 0x11
    6288:	9a 8b       	std	Y+18, r25	; 0x12
    628a:	ab 8b       	std	Y+19, r26	; 0x13
    628c:	bc 8b       	std	Y+20, r27	; 0x14
    628e:	0c c0       	rjmp	.+24     	; 0x62a8 <main+0xb2e>
    6290:	00 00       	nop
    6292:	89 89       	ldd	r24, Y+17	; 0x11
    6294:	9a 89       	ldd	r25, Y+18	; 0x12
    6296:	ab 89       	ldd	r26, Y+19	; 0x13
    6298:	bc 89       	ldd	r27, Y+20	; 0x14
    629a:	01 97       	sbiw	r24, 0x01	; 1
    629c:	a1 09       	sbc	r26, r1
    629e:	b1 09       	sbc	r27, r1
    62a0:	89 8b       	std	Y+17, r24	; 0x11
    62a2:	9a 8b       	std	Y+18, r25	; 0x12
    62a4:	ab 8b       	std	Y+19, r26	; 0x13
    62a6:	bc 8b       	std	Y+20, r27	; 0x14
    62a8:	89 89       	ldd	r24, Y+17	; 0x11
    62aa:	9a 89       	ldd	r25, Y+18	; 0x12
    62ac:	ab 89       	ldd	r26, Y+19	; 0x13
    62ae:	bc 89       	ldd	r27, Y+20	; 0x14
    62b0:	00 97       	sbiw	r24, 0x00	; 0
    62b2:	a1 05       	cpc	r26, r1
    62b4:	b1 05       	cpc	r27, r1
    62b6:	61 f7       	brne	.-40     	; 0x6290 <main+0xb16>
    62b8:	8d 89       	ldd	r24, Y+21	; 0x15
    62ba:	9e 89       	ldd	r25, Y+22	; 0x16
    62bc:	af 89       	ldd	r26, Y+23	; 0x17
    62be:	b8 8d       	ldd	r27, Y+24	; 0x18
    62c0:	01 97       	sbiw	r24, 0x01	; 1
    62c2:	a1 09       	sbc	r26, r1
    62c4:	b1 09       	sbc	r27, r1
    62c6:	8d 8b       	std	Y+21, r24	; 0x15
    62c8:	9e 8b       	std	Y+22, r25	; 0x16
    62ca:	af 8b       	std	Y+23, r26	; 0x17
    62cc:	b8 8f       	std	Y+24, r27	; 0x18
    62ce:	8d 89       	ldd	r24, Y+21	; 0x15
    62d0:	9e 89       	ldd	r25, Y+22	; 0x16
    62d2:	af 89       	ldd	r26, Y+23	; 0x17
    62d4:	b8 8d       	ldd	r27, Y+24	; 0x18
    62d6:	00 97       	sbiw	r24, 0x00	; 0
    62d8:	a1 05       	cpc	r26, r1
    62da:	b1 05       	cpc	r27, r1
    62dc:	81 f6       	brne	.-96     	; 0x627e <main+0xb04>
					if(led_off == 1){
    62de:	fe 01       	movw	r30, r28
    62e0:	e0 5a       	subi	r30, 0xA0	; 160
    62e2:	ff 4f       	sbci	r31, 0xFF	; 255
    62e4:	80 81       	ld	r24, Z
    62e6:	81 30       	cpi	r24, 0x01	; 1
    62e8:	39 f4       	brne	.+14     	; 0x62f8 <main+0xb7e>
						Bluetooth_vSendString((u8*)"\r\nLed is already off\r\n\r\n");
    62ea:	8f ef       	ldi	r24, 0xFF	; 255
    62ec:	92 e0       	ldi	r25, 0x02	; 2
    62ee:	0e 94 72 2b 	call	0x56e4	; 0x56e4 <Bluetooth_vSendString>
						Bluetooth_vClearBuffer();
    62f2:	0e 94 82 2b 	call	0x5704	; 0x5704 <Bluetooth_vClearBuffer>
    62f6:	9b c0       	rjmp	.+310    	; 0x642e <main+0xcb4>
						break;
					}
					led_off = 1;
    62f8:	fe 01       	movw	r30, r28
    62fa:	e0 5a       	subi	r30, 0xA0	; 160
    62fc:	ff 4f       	sbci	r31, 0xFF	; 255
    62fe:	81 e0       	ldi	r24, 0x01	; 1
    6300:	80 83       	st	Z, r24
					led_on= 0;
    6302:	fe 01       	movw	r30, r28
    6304:	ef 59       	subi	r30, 0x9F	; 159
    6306:	ff 4f       	sbci	r31, 0xFF	; 255
    6308:	10 82       	st	Z, r1
					Bluetooth_vSendString((u8*)"\r\nLed is off\r\n\r\n");
    630a:	88 e1       	ldi	r24, 0x18	; 24
    630c:	93 e0       	ldi	r25, 0x03	; 3
    630e:	0e 94 72 2b 	call	0x56e4	; 0x56e4 <Bluetooth_vSendString>
					Bluetooth_vClearBuffer();
    6312:	0e 94 82 2b 	call	0x5704	; 0x5704 <Bluetooth_vClearBuffer>
    6316:	8b c0       	rjmp	.+278    	; 0x642e <main+0xcb4>
					break;
				case '5':
					Bluetooth_vSendString((u8*)"\r\nGood Bye\r\n\r\n");\
    6318:	89 e2       	ldi	r24, 0x29	; 41
    631a:	93 e0       	ldi	r25, 0x03	; 3
    631c:	0e 94 72 2b 	call	0x56e4	; 0x56e4 <Bluetooth_vSendString>
					DIO_enuWritePin(DIO_PIN_NUM_1, DIO_LOW);
    6320:	81 e0       	ldi	r24, 0x01	; 1
    6322:	60 e0       	ldi	r22, 0x00	; 0
    6324:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <DIO_enuWritePin>
					SERVO_vChangeDirection(&SERVO1, SERVO_0);
    6328:	8f ef       	ldi	r24, 0xFF	; 255
    632a:	95 e0       	ldi	r25, 0x05	; 5
    632c:	60 e0       	ldi	r22, 0x00	; 0
    632e:	0e 94 5a 22 	call	0x44b4	; 0x44b4 <SERVO_vChangeDirection>
					Delay_ms(200);
    6332:	89 e1       	ldi	r24, 0x19	; 25
    6334:	90 e0       	ldi	r25, 0x00	; 0
    6336:	a0 e0       	ldi	r26, 0x00	; 0
    6338:	b0 e0       	ldi	r27, 0x00	; 0
    633a:	8d 87       	std	Y+13, r24	; 0x0d
    633c:	9e 87       	std	Y+14, r25	; 0x0e
    633e:	af 87       	std	Y+15, r26	; 0x0f
    6340:	b8 8b       	std	Y+16, r27	; 0x10
    6342:	28 c0       	rjmp	.+80     	; 0x6394 <main+0xc1a>
    6344:	80 ed       	ldi	r24, 0xD0	; 208
    6346:	97 e0       	ldi	r25, 0x07	; 7
    6348:	a0 e0       	ldi	r26, 0x00	; 0
    634a:	b0 e0       	ldi	r27, 0x00	; 0
    634c:	89 87       	std	Y+9, r24	; 0x09
    634e:	9a 87       	std	Y+10, r25	; 0x0a
    6350:	ab 87       	std	Y+11, r26	; 0x0b
    6352:	bc 87       	std	Y+12, r27	; 0x0c
    6354:	0c c0       	rjmp	.+24     	; 0x636e <main+0xbf4>
    6356:	00 00       	nop
    6358:	89 85       	ldd	r24, Y+9	; 0x09
    635a:	9a 85       	ldd	r25, Y+10	; 0x0a
    635c:	ab 85       	ldd	r26, Y+11	; 0x0b
    635e:	bc 85       	ldd	r27, Y+12	; 0x0c
    6360:	01 97       	sbiw	r24, 0x01	; 1
    6362:	a1 09       	sbc	r26, r1
    6364:	b1 09       	sbc	r27, r1
    6366:	89 87       	std	Y+9, r24	; 0x09
    6368:	9a 87       	std	Y+10, r25	; 0x0a
    636a:	ab 87       	std	Y+11, r26	; 0x0b
    636c:	bc 87       	std	Y+12, r27	; 0x0c
    636e:	89 85       	ldd	r24, Y+9	; 0x09
    6370:	9a 85       	ldd	r25, Y+10	; 0x0a
    6372:	ab 85       	ldd	r26, Y+11	; 0x0b
    6374:	bc 85       	ldd	r27, Y+12	; 0x0c
    6376:	00 97       	sbiw	r24, 0x00	; 0
    6378:	a1 05       	cpc	r26, r1
    637a:	b1 05       	cpc	r27, r1
    637c:	61 f7       	brne	.-40     	; 0x6356 <main+0xbdc>
    637e:	8d 85       	ldd	r24, Y+13	; 0x0d
    6380:	9e 85       	ldd	r25, Y+14	; 0x0e
    6382:	af 85       	ldd	r26, Y+15	; 0x0f
    6384:	b8 89       	ldd	r27, Y+16	; 0x10
    6386:	01 97       	sbiw	r24, 0x01	; 1
    6388:	a1 09       	sbc	r26, r1
    638a:	b1 09       	sbc	r27, r1
    638c:	8d 87       	std	Y+13, r24	; 0x0d
    638e:	9e 87       	std	Y+14, r25	; 0x0e
    6390:	af 87       	std	Y+15, r26	; 0x0f
    6392:	b8 8b       	std	Y+16, r27	; 0x10
    6394:	8d 85       	ldd	r24, Y+13	; 0x0d
    6396:	9e 85       	ldd	r25, Y+14	; 0x0e
    6398:	af 85       	ldd	r26, Y+15	; 0x0f
    639a:	b8 89       	ldd	r27, Y+16	; 0x10
    639c:	00 97       	sbiw	r24, 0x00	; 0
    639e:	a1 05       	cpc	r26, r1
    63a0:	b1 05       	cpc	r27, r1
    63a2:	81 f6       	brne	.-96     	; 0x6344 <main+0xbca>
					Bluetooth_vClearBuffer();
    63a4:	0e 94 82 2b 	call	0x5704	; 0x5704 <Bluetooth_vClearBuffer>
					exit(0);
    63a8:	80 e0       	ldi	r24, 0x00	; 0
    63aa:	90 e0       	ldi	r25, 0x00	; 0
    63ac:	0e 94 c7 32 	call	0x658e	; 0x658e <_exit>
				default:
					Bluetooth_vSendString((u8*)"\r\nEnter a right choice\r\n\r\n");
    63b0:	88 e3       	ldi	r24, 0x38	; 56
    63b2:	93 e0       	ldi	r25, 0x03	; 3
    63b4:	0e 94 72 2b 	call	0x56e4	; 0x56e4 <Bluetooth_vSendString>
					Delay_ms(200);
    63b8:	89 e1       	ldi	r24, 0x19	; 25
    63ba:	90 e0       	ldi	r25, 0x00	; 0
    63bc:	a0 e0       	ldi	r26, 0x00	; 0
    63be:	b0 e0       	ldi	r27, 0x00	; 0
    63c0:	8d 83       	std	Y+5, r24	; 0x05
    63c2:	9e 83       	std	Y+6, r25	; 0x06
    63c4:	af 83       	std	Y+7, r26	; 0x07
    63c6:	b8 87       	std	Y+8, r27	; 0x08
    63c8:	28 c0       	rjmp	.+80     	; 0x641a <main+0xca0>
    63ca:	80 ed       	ldi	r24, 0xD0	; 208
    63cc:	97 e0       	ldi	r25, 0x07	; 7
    63ce:	a0 e0       	ldi	r26, 0x00	; 0
    63d0:	b0 e0       	ldi	r27, 0x00	; 0
    63d2:	89 83       	std	Y+1, r24	; 0x01
    63d4:	9a 83       	std	Y+2, r25	; 0x02
    63d6:	ab 83       	std	Y+3, r26	; 0x03
    63d8:	bc 83       	std	Y+4, r27	; 0x04
    63da:	0c c0       	rjmp	.+24     	; 0x63f4 <main+0xc7a>
    63dc:	00 00       	nop
    63de:	89 81       	ldd	r24, Y+1	; 0x01
    63e0:	9a 81       	ldd	r25, Y+2	; 0x02
    63e2:	ab 81       	ldd	r26, Y+3	; 0x03
    63e4:	bc 81       	ldd	r27, Y+4	; 0x04
    63e6:	01 97       	sbiw	r24, 0x01	; 1
    63e8:	a1 09       	sbc	r26, r1
    63ea:	b1 09       	sbc	r27, r1
    63ec:	89 83       	std	Y+1, r24	; 0x01
    63ee:	9a 83       	std	Y+2, r25	; 0x02
    63f0:	ab 83       	std	Y+3, r26	; 0x03
    63f2:	bc 83       	std	Y+4, r27	; 0x04
    63f4:	89 81       	ldd	r24, Y+1	; 0x01
    63f6:	9a 81       	ldd	r25, Y+2	; 0x02
    63f8:	ab 81       	ldd	r26, Y+3	; 0x03
    63fa:	bc 81       	ldd	r27, Y+4	; 0x04
    63fc:	00 97       	sbiw	r24, 0x00	; 0
    63fe:	a1 05       	cpc	r26, r1
    6400:	b1 05       	cpc	r27, r1
    6402:	61 f7       	brne	.-40     	; 0x63dc <main+0xc62>
    6404:	8d 81       	ldd	r24, Y+5	; 0x05
    6406:	9e 81       	ldd	r25, Y+6	; 0x06
    6408:	af 81       	ldd	r26, Y+7	; 0x07
    640a:	b8 85       	ldd	r27, Y+8	; 0x08
    640c:	01 97       	sbiw	r24, 0x01	; 1
    640e:	a1 09       	sbc	r26, r1
    6410:	b1 09       	sbc	r27, r1
    6412:	8d 83       	std	Y+5, r24	; 0x05
    6414:	9e 83       	std	Y+6, r25	; 0x06
    6416:	af 83       	std	Y+7, r26	; 0x07
    6418:	b8 87       	std	Y+8, r27	; 0x08
    641a:	8d 81       	ldd	r24, Y+5	; 0x05
    641c:	9e 81       	ldd	r25, Y+6	; 0x06
    641e:	af 81       	ldd	r26, Y+7	; 0x07
    6420:	b8 85       	ldd	r27, Y+8	; 0x08
    6422:	00 97       	sbiw	r24, 0x00	; 0
    6424:	a1 05       	cpc	r26, r1
    6426:	b1 05       	cpc	r27, r1
    6428:	81 f6       	brne	.-96     	; 0x63ca <main+0xc50>
					Bluetooth_vClearBuffer();
    642a:	0e 94 82 2b 	call	0x5704	; 0x5704 <Bluetooth_vClearBuffer>

			if(user_found == 1){
				break;
			}
		}
		while(user_found == 1){
    642e:	fe 01       	movw	r30, r28
    6430:	e3 5a       	subi	r30, 0xA3	; 163
    6432:	ff 4f       	sbci	r31, 0xFF	; 255
    6434:	80 81       	ld	r24, Z
    6436:	81 30       	cpi	r24, 0x01	; 1
    6438:	09 f4       	brne	.+2      	; 0x643c <main+0xcc2>
    643a:	9a cd       	rjmp	.-1228   	; 0x5f70 <main+0x7f6>
    643c:	e4 c9       	rjmp	.-3128   	; 0x5806 <main+0x8c>

0000643e <__udivmodqi4>:
    643e:	99 1b       	sub	r25, r25
    6440:	79 e0       	ldi	r23, 0x09	; 9
    6442:	04 c0       	rjmp	.+8      	; 0x644c <__udivmodqi4_ep>

00006444 <__udivmodqi4_loop>:
    6444:	99 1f       	adc	r25, r25
    6446:	96 17       	cp	r25, r22
    6448:	08 f0       	brcs	.+2      	; 0x644c <__udivmodqi4_ep>
    644a:	96 1b       	sub	r25, r22

0000644c <__udivmodqi4_ep>:
    644c:	88 1f       	adc	r24, r24
    644e:	7a 95       	dec	r23
    6450:	c9 f7       	brne	.-14     	; 0x6444 <__udivmodqi4_loop>
    6452:	80 95       	com	r24
    6454:	08 95       	ret

00006456 <__udivmodsi4>:
    6456:	a1 e2       	ldi	r26, 0x21	; 33
    6458:	1a 2e       	mov	r1, r26
    645a:	aa 1b       	sub	r26, r26
    645c:	bb 1b       	sub	r27, r27
    645e:	fd 01       	movw	r30, r26
    6460:	0d c0       	rjmp	.+26     	; 0x647c <__udivmodsi4_ep>

00006462 <__udivmodsi4_loop>:
    6462:	aa 1f       	adc	r26, r26
    6464:	bb 1f       	adc	r27, r27
    6466:	ee 1f       	adc	r30, r30
    6468:	ff 1f       	adc	r31, r31
    646a:	a2 17       	cp	r26, r18
    646c:	b3 07       	cpc	r27, r19
    646e:	e4 07       	cpc	r30, r20
    6470:	f5 07       	cpc	r31, r21
    6472:	20 f0       	brcs	.+8      	; 0x647c <__udivmodsi4_ep>
    6474:	a2 1b       	sub	r26, r18
    6476:	b3 0b       	sbc	r27, r19
    6478:	e4 0b       	sbc	r30, r20
    647a:	f5 0b       	sbc	r31, r21

0000647c <__udivmodsi4_ep>:
    647c:	66 1f       	adc	r22, r22
    647e:	77 1f       	adc	r23, r23
    6480:	88 1f       	adc	r24, r24
    6482:	99 1f       	adc	r25, r25
    6484:	1a 94       	dec	r1
    6486:	69 f7       	brne	.-38     	; 0x6462 <__udivmodsi4_loop>
    6488:	60 95       	com	r22
    648a:	70 95       	com	r23
    648c:	80 95       	com	r24
    648e:	90 95       	com	r25
    6490:	9b 01       	movw	r18, r22
    6492:	ac 01       	movw	r20, r24
    6494:	bd 01       	movw	r22, r26
    6496:	cf 01       	movw	r24, r30
    6498:	08 95       	ret

0000649a <__divmodsi4>:
    649a:	97 fb       	bst	r25, 7
    649c:	09 2e       	mov	r0, r25
    649e:	05 26       	eor	r0, r21
    64a0:	0e d0       	rcall	.+28     	; 0x64be <__divmodsi4_neg1>
    64a2:	57 fd       	sbrc	r21, 7
    64a4:	04 d0       	rcall	.+8      	; 0x64ae <__divmodsi4_neg2>
    64a6:	d7 df       	rcall	.-82     	; 0x6456 <__udivmodsi4>
    64a8:	0a d0       	rcall	.+20     	; 0x64be <__divmodsi4_neg1>
    64aa:	00 1c       	adc	r0, r0
    64ac:	38 f4       	brcc	.+14     	; 0x64bc <__divmodsi4_exit>

000064ae <__divmodsi4_neg2>:
    64ae:	50 95       	com	r21
    64b0:	40 95       	com	r20
    64b2:	30 95       	com	r19
    64b4:	21 95       	neg	r18
    64b6:	3f 4f       	sbci	r19, 0xFF	; 255
    64b8:	4f 4f       	sbci	r20, 0xFF	; 255
    64ba:	5f 4f       	sbci	r21, 0xFF	; 255

000064bc <__divmodsi4_exit>:
    64bc:	08 95       	ret

000064be <__divmodsi4_neg1>:
    64be:	f6 f7       	brtc	.-4      	; 0x64bc <__divmodsi4_exit>
    64c0:	90 95       	com	r25
    64c2:	80 95       	com	r24
    64c4:	70 95       	com	r23
    64c6:	61 95       	neg	r22
    64c8:	7f 4f       	sbci	r23, 0xFF	; 255
    64ca:	8f 4f       	sbci	r24, 0xFF	; 255
    64cc:	9f 4f       	sbci	r25, 0xFF	; 255
    64ce:	08 95       	ret

000064d0 <__mulsi3>:
    64d0:	62 9f       	mul	r22, r18
    64d2:	d0 01       	movw	r26, r0
    64d4:	73 9f       	mul	r23, r19
    64d6:	f0 01       	movw	r30, r0
    64d8:	82 9f       	mul	r24, r18
    64da:	e0 0d       	add	r30, r0
    64dc:	f1 1d       	adc	r31, r1
    64de:	64 9f       	mul	r22, r20
    64e0:	e0 0d       	add	r30, r0
    64e2:	f1 1d       	adc	r31, r1
    64e4:	92 9f       	mul	r25, r18
    64e6:	f0 0d       	add	r31, r0
    64e8:	83 9f       	mul	r24, r19
    64ea:	f0 0d       	add	r31, r0
    64ec:	74 9f       	mul	r23, r20
    64ee:	f0 0d       	add	r31, r0
    64f0:	65 9f       	mul	r22, r21
    64f2:	f0 0d       	add	r31, r0
    64f4:	99 27       	eor	r25, r25
    64f6:	72 9f       	mul	r23, r18
    64f8:	b0 0d       	add	r27, r0
    64fa:	e1 1d       	adc	r30, r1
    64fc:	f9 1f       	adc	r31, r25
    64fe:	63 9f       	mul	r22, r19
    6500:	b0 0d       	add	r27, r0
    6502:	e1 1d       	adc	r30, r1
    6504:	f9 1f       	adc	r31, r25
    6506:	bd 01       	movw	r22, r26
    6508:	cf 01       	movw	r24, r30
    650a:	11 24       	eor	r1, r1
    650c:	08 95       	ret

0000650e <__prologue_saves__>:
    650e:	2f 92       	push	r2
    6510:	3f 92       	push	r3
    6512:	4f 92       	push	r4
    6514:	5f 92       	push	r5
    6516:	6f 92       	push	r6
    6518:	7f 92       	push	r7
    651a:	8f 92       	push	r8
    651c:	9f 92       	push	r9
    651e:	af 92       	push	r10
    6520:	bf 92       	push	r11
    6522:	cf 92       	push	r12
    6524:	df 92       	push	r13
    6526:	ef 92       	push	r14
    6528:	ff 92       	push	r15
    652a:	0f 93       	push	r16
    652c:	1f 93       	push	r17
    652e:	cf 93       	push	r28
    6530:	df 93       	push	r29
    6532:	cd b7       	in	r28, 0x3d	; 61
    6534:	de b7       	in	r29, 0x3e	; 62
    6536:	ca 1b       	sub	r28, r26
    6538:	db 0b       	sbc	r29, r27
    653a:	0f b6       	in	r0, 0x3f	; 63
    653c:	f8 94       	cli
    653e:	de bf       	out	0x3e, r29	; 62
    6540:	0f be       	out	0x3f, r0	; 63
    6542:	cd bf       	out	0x3d, r28	; 61
    6544:	09 94       	ijmp

00006546 <__epilogue_restores__>:
    6546:	2a 88       	ldd	r2, Y+18	; 0x12
    6548:	39 88       	ldd	r3, Y+17	; 0x11
    654a:	48 88       	ldd	r4, Y+16	; 0x10
    654c:	5f 84       	ldd	r5, Y+15	; 0x0f
    654e:	6e 84       	ldd	r6, Y+14	; 0x0e
    6550:	7d 84       	ldd	r7, Y+13	; 0x0d
    6552:	8c 84       	ldd	r8, Y+12	; 0x0c
    6554:	9b 84       	ldd	r9, Y+11	; 0x0b
    6556:	aa 84       	ldd	r10, Y+10	; 0x0a
    6558:	b9 84       	ldd	r11, Y+9	; 0x09
    655a:	c8 84       	ldd	r12, Y+8	; 0x08
    655c:	df 80       	ldd	r13, Y+7	; 0x07
    655e:	ee 80       	ldd	r14, Y+6	; 0x06
    6560:	fd 80       	ldd	r15, Y+5	; 0x05
    6562:	0c 81       	ldd	r16, Y+4	; 0x04
    6564:	1b 81       	ldd	r17, Y+3	; 0x03
    6566:	aa 81       	ldd	r26, Y+2	; 0x02
    6568:	b9 81       	ldd	r27, Y+1	; 0x01
    656a:	ce 0f       	add	r28, r30
    656c:	d1 1d       	adc	r29, r1
    656e:	0f b6       	in	r0, 0x3f	; 63
    6570:	f8 94       	cli
    6572:	de bf       	out	0x3e, r29	; 62
    6574:	0f be       	out	0x3f, r0	; 63
    6576:	cd bf       	out	0x3d, r28	; 61
    6578:	ed 01       	movw	r28, r26
    657a:	08 95       	ret

0000657c <strcmp>:
    657c:	fb 01       	movw	r30, r22
    657e:	dc 01       	movw	r26, r24
    6580:	8d 91       	ld	r24, X+
    6582:	01 90       	ld	r0, Z+
    6584:	80 19       	sub	r24, r0
    6586:	01 10       	cpse	r0, r1
    6588:	d9 f3       	breq	.-10     	; 0x6580 <strcmp+0x4>
    658a:	99 0b       	sbc	r25, r25
    658c:	08 95       	ret

0000658e <_exit>:
    658e:	f8 94       	cli

00006590 <__stop_program>:
    6590:	ff cf       	rjmp	.-2      	; 0x6590 <__stop_program>
